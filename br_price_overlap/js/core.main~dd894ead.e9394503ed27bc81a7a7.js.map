{"version":3,"file":"js/core.main~dd894ead.e9394503ed27bc81a7a7.js","mappings":"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","sources":["webpack:///../../api/src/APIContext.ts","webpack:///../../api/src/useAPI.ts","webpack:///../../api/src/useMutation.ts","webpack:///../../api/src/useQuery.ts","webpack:///../../api/src/utils/query-utils.ts","webpack:///../../api/src/APIProvider.tsx","webpack:///../../api/src/useInvalidateQuery.ts","webpack:///../../api/src/hooks/useAuthorize.ts","webpack:///../../api/src/hooks/useSettings.ts","webpack:///../../api/src/useSubscription.ts","webpack:///../../api/src/usePaginatedFetch.ts"],"sourcesContent":["import { createContext } from 'react';\n\n// Don't need to type `deriv_api` here, We will be using these methods inside\n// the `useQuery`, `useMutation` and `useSubscription` hook to make it type-safe.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst APIContext = createContext<Record<string, any> | null>(null);\n\nexport default APIContext;\n","import { useCallback, useContext } from 'react';\n\nimport type {\n    TSocketEndpointNames,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nimport APIContext from './APIContext';\n\nconst useAPI = () => {\n    const api = useContext(APIContext);\n\n    const send = useCallback(\n        async <T extends TSocketEndpointNames | TSocketPaginateableEndpointNames = TSocketEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): Promise<TSocketResponseData<T>> => {\n            const response = await api?.send({ [name]: 1, ...(payload || {}) });\n\n            if (response.error) {\n                throw response.error;\n            }\n\n            return response;\n        },\n        [api]\n    );\n\n    const subscribe = useCallback(\n        <T extends TSocketSubscribableEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): {\n            subscribe: (\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onData: (response: any) => void,\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onError: (response: any) => void\n            ) => { unsubscribe?: VoidFunction };\n        } => api?.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }),\n        [api]\n    );\n\n    return {\n        send,\n        subscribe,\n    };\n};\n\nexport default useAPI;\n","import { useCallback } from 'react';\nimport { useMutation as _useMutation } from '@tanstack/react-query';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketEndpointNames,\n    TSocketError,\n    TSocketRequestMutationOptions,\n    TSocketRequestPayload,\n    TSocketResponseData,\n} from '../types';\n\nconst useMutation = <T extends TSocketEndpointNames>(name: T, options?: TSocketRequestMutationOptions<T>) => {\n    const { send } = useAPI();\n    const { mutate: _mutate, ...rest } = _useMutation<\n        TSocketResponseData<T>,\n        TSocketError<T>,\n        TSocketAcceptableProps<T>\n    >(props => {\n        const prop = props?.[0];\n        const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n        return send(name, payload);\n    }, options);\n\n    const mutate = useCallback((...payload: TSocketAcceptableProps<T>) => _mutate(payload), [_mutate]);\n\n    return {\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useMutation;\n","import { useQuery as _useQuery } from '@tanstack/react-query';\nimport type {\n    TSocketAcceptableProps,\n    TSocketEndpointNames,\n    TSocketError,\n    TSocketRequestPayload,\n    TSocketRequestQueryOptions,\n    TSocketResponseData,\n} from '../types';\nimport useAPI from './useAPI';\nimport { getQueryKeys } from './utils';\n\nconst useQuery = <T extends TSocketEndpointNames>(name: T, ...props: TSocketAcceptableProps<T, true>) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestQueryOptions<T>) : undefined;\n    const { send } = useAPI();\n\n    return _useQuery<TSocketResponseData<T>, TSocketError<T>>(\n        getQueryKeys(name, payload),\n        () => send(name, payload),\n        options\n    );\n};\n\nexport default useQuery;\n","export const getQueryKeys = (name: string, props?: Record<string, unknown>) => {\n    if (!props) return [name];\n\n    delete props.req_id;\n    if (name && props[name] === 1) delete props[name];\n\n    if (Object.keys(props).length === 0) return [name];\n\n    const ordered_props = Object.keys(props)\n        .sort((a, b) => a.localeCompare(b))\n        .reduce((obj, key) => {\n            obj[key] = props[key];\n\n            return obj;\n        }, {} as { [k: string]: unknown });\n\n    const query_props = JSON.stringify(ordered_props);\n\n    return [name, query_props];\n};\n","import React, { PropsWithChildren } from 'react';\n// @ts-expect-error `@deriv/deriv-api` is not in TypeScript, Hence we ignore the TS error.\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic';\nimport { getAppId, getSocketURL, useWS } from '@deriv/shared';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n// import { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport APIContext from './APIContext';\n\ndeclare global {\n    interface Window {\n        ReactQueryClient?: QueryClient;\n        DerivAPI?: Record<string, DerivAPIBasic>;\n    }\n}\n\n// This is a temporary workaround to share a single `QueryClient` instance between all the packages.\n// Later once we have each package separated we won't need this anymore and can remove this.\nconst getSharedQueryClientContext = (): QueryClient => {\n    if (!window.ReactQueryClient) {\n        window.ReactQueryClient = new QueryClient();\n    }\n\n    return window.ReactQueryClient;\n};\n\n// This is a temporary workaround to share a single `DerivAPIBasic` instance for every unique URL.\n// Later once we have each package separated we won't need this anymore and can remove this.\nconst getDerivAPIInstance = (): DerivAPIBasic => {\n    const endpoint = getSocketURL();\n    const app_id = getAppId();\n    const language = 'EN'; // Need to use the language from the app context.\n    const brand = 'deriv';\n    const wss = `wss://${endpoint}/websockets/v3?app_id=${app_id}&l=${language}&brand=${brand}`;\n\n    if (!window.DerivAPI) {\n        window.DerivAPI = {};\n    }\n\n    if (!window.DerivAPI?.[wss]) {\n        window.DerivAPI[wss] = new DerivAPIBasic({ connection: new WebSocket(wss) });\n    }\n\n    return window.DerivAPI?.[wss];\n};\n\nconst queryClient = getSharedQueryClientContext();\n\ntype TProps = {\n    /** If set to true, the APIProvider will instantiate it's own socket connection. */\n    standalone?: boolean;\n};\n\nconst APIProvider = ({ children, standalone = false }: PropsWithChildren<TProps>) => {\n    const WS = useWS();\n    // Use the new API instance if the `standalone` prop is set to true,\n    // else use the legacy socket connection.\n    const active_connection = standalone ? getDerivAPIInstance() : WS;\n\n    return (\n        <APIContext.Provider value={active_connection}>\n            <QueryClientProvider client={queryClient}>\n                {children}\n                {/* <ReactQueryDevtools /> */}\n            </QueryClientProvider>\n        </APIContext.Provider>\n    );\n};\n\nexport default APIProvider;\n","import { useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { TSocketEndpointNames } from '../types';\n\ntype TOptions = Parameters<ReturnType<typeof useQueryClient>['invalidateQueries']>[1];\n\nconst useInvalidateQuery = () => {\n    const queryClient = useQueryClient();\n\n    const invalidate = useCallback(\n        <T extends TSocketEndpointNames>(name: T | T[], options?: TOptions) => {\n            return queryClient.invalidateQueries(Array.isArray(name) ? name : [name], options);\n        },\n        [queryClient]\n    );\n\n    return invalidate;\n};\n\nexport default useInvalidateQuery;\n","import { useCallback, useMemo } from 'react';\nimport { getActiveAuthTokenIDFromLocalStorage, getActiveLoginIDFromLocalStorage } from '@deriv/utils';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useQuery from '../useQuery';\n\n/** A custom hook that authorize the user with the given token. If no token is given,\n * it will use the current token from localStorage.\n */\nconst useAuthorize = () => {\n    const current_token = getActiveAuthTokenIDFromLocalStorage();\n    const invalidate = useInvalidateQuery();\n\n    const { data, ...rest } = useQuery('authorize', {\n        payload: { authorize: current_token || '' },\n        options: { enabled: Boolean(current_token) },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    const switchAccount = useCallback(\n        (loginid: string) => {\n            const active_loginid = getActiveLoginIDFromLocalStorage();\n            if (active_loginid !== loginid) {\n                localStorage.setItem('active_loginid', loginid);\n                invalidate('authorize');\n            }\n        },\n        [invalidate]\n    );\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        /** Function to switch to another account */\n        switchAccount,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useCallback, useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useMutation from '../useMutation';\n\ntype TSetSettingsPayload = NonNullable<\n    NonNullable<NonNullable<Parameters<ReturnType<typeof useMutation<'set_settings'>>['mutate']>>[0]>['payload']\n>;\n\n/** A custom hook to get and update the user settings. */\nconst useSettings = () => {\n    const { data, ...rest } = useQuery('get_settings');\n    const { mutate, ...mutate_rest } = useMutation('set_settings', { onSuccess: () => invalidate('get_settings') });\n    const invalidate = useInvalidateQuery();\n\n    const update = useCallback((payload: TSetSettingsPayload) => mutate({ payload }), [mutate]);\n\n    // Add additional information to the settings response.\n    const modified_settings = useMemo(() => ({ ...data?.get_settings }), [data?.get_settings]);\n\n    return {\n        /** The settings response. */\n        data: modified_settings,\n        /** Function to update user settings */\n        update,\n        /** The mutation related information */\n        mutation: mutate_rest,\n        ...rest,\n    };\n};\n\nexport default useSettings;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketError,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSubscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<TSocketError<T>>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const { subscribe: _subscribe } = useAPI();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            try {\n                subscriber.current = _subscribe(name, payload).subscribe(\n                    response => {\n                        setData(response);\n                        setIsLoading(false);\n                    },\n                    response => {\n                        setError(response.error);\n                        setIsLoading(false);\n                    }\n                );\n            } catch (e) {\n                setError(e as TSocketError<T>);\n            }\n        },\n        [_subscribe, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return {\n        subscribe,\n        unsubscribe,\n        isLoading,\n        isSubscribed,\n        error,\n        data,\n    };\n};\n\nexport default useSubscription;\n","import { useCallback, useState } from 'react';\n\nimport type {\n    TSocketAcceptableProps,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestPayload,\n    TSocketRequestQueryOptions,\n} from '../types';\n\nimport useQuery from './useQuery';\n\nconst usePaginatedFetch = <T extends TSocketPaginateableEndpointNames>(\n    name: T,\n    ...props: TSocketAcceptableProps<T, true>\n) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestQueryOptions<T>) : undefined;\n\n    const limit: number = payload?.payload?.limit || 10;\n    const [offset, setOffset] = useState<number>(payload?.payload?.offset || 0);\n\n    // @ts-expect-error It's safe to ignore the TS error here since the\n    // exact type of the payload is not determined at this point.\n    const { remove, ...rest } = useQuery(name, {\n        payload: { ...payload, offset, limit },\n        options: { ...options, keepPreviousData: !!offset },\n    });\n\n    const loadMore = useCallback(() => setOffset(prev => prev + limit), [limit]);\n\n    const reset = useCallback(() => {\n        remove();\n        setOffset(0);\n    }, [remove]);\n\n    return {\n        ...rest,\n        remove,\n        loadMore,\n        reset,\n    };\n};\n\nexport default usePaginatedFetch;\n"],"names":["createContext","api","useContext","APIContext","send","useCallback","name","payload","response","error","subscribe","options","useAPI","_useMutation","props","prop","undefined","_mutate","mutate","rest","_useQuery","req_id","Object","keys","length","ordered_props","sort","a","b","localeCompare","reduce","obj","key","JSON","stringify","getQueryKeys","queryClient","window","ReactQueryClient","QueryClient","endpoint","app_id","wss","children","standalone","WS","useWS","active_connection","getSocketURL","getAppId","DerivAPI","DerivAPIBasic","connection","WebSocket","value","QueryClientProvider","client","useQueryClient","invalidateQueries","Array","isArray","current_token","getActiveAuthTokenIDFromLocalStorage","invalidate","useInvalidateQuery","useQuery","authorize","enabled","Boolean","data","modified_authorize","useMemo","switchAccount","loginid","getActiveLoginIDFromLocalStorage","localStorage","setItem","useMutation","onSuccess","mutate_rest","update","modified_settings","get_settings","mutation","useState","isLoading","setIsLoading","isSubscribed","setSubscribed","setError","setData","subscriber","useRef","_subscribe","current","e","unsubscribe","useEffect","limit","offset","setOffset","keepPreviousData","remove","loadMore","prev","reset"],"sourceRoot":""}