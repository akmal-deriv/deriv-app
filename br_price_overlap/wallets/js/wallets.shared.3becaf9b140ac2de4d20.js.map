{"version":3,"file":"wallets/js/wallets.shared.3becaf9b140ac2de4d20.js","mappings":"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","sources":["webpack://@deriv/wallets/../shared/src/utils/object/clone.js","webpack://@deriv/wallets/../shared/src/services/ws-methods.ts","webpack://@deriv/wallets/../shared/src/utils/config/platform-config.ts","webpack://@deriv/wallets/../shared/src/utils/object/object.ts","webpack://@deriv/wallets/../shared/src/utils/contract/contract.tsx","webpack://@deriv/wallets/../shared/src/utils/storage/storage.ts","webpack://@deriv/wallets/../shared/src/utils/constants/content_flags.ts","webpack://@deriv/wallets/../shared/src/utils/constants/jurisdictions-config.ts","webpack://@deriv/wallets/../shared/src/utils/currency/currency.ts","webpack://@deriv/wallets/../shared/src/utils/constants/signup_fields.ts","webpack://@deriv/wallets/../shared/src/utils/config/app-config.ts","webpack://@deriv/wallets/../shared/src/utils/url/url.ts","webpack://@deriv/wallets/../shared/src/utils/login/login.ts","webpack://@deriv/wallets/../shared/src/utils/helpers/active-symbols.ts","webpack://@deriv/wallets/../shared/src/utils/helpers/chart-notifications.tsx","webpack://@deriv/wallets/../shared/src/utils/helpers/duration.ts","webpack://@deriv/wallets/../shared/src/utils/shortcode/shortcode.ts","webpack://@deriv/wallets/../shared/src/utils/brand/brand.ts","webpack://@deriv/wallets/../shared/src/utils/config/config.ts","webpack://@deriv/wallets/../shared/src/utils/date/date-time.ts","webpack://@deriv/wallets/../shared/src/utils/platform/platform.ts","webpack://@deriv/wallets/../shared/src/utils/platform/platform-context.tsx","webpack://@deriv/wallets/../shared/src/utils/routes/routes.ts","webpack://@deriv/wallets/../shared/src/utils/url/constants.ts","webpack://@deriv/wallets/../shared/src/utils/url/helpers.ts"],"sourcesContent":["/* eslint-disable */\n// Copied from github.com/pvorb/clone to fix an inheritance issue.\n// Line 156-158 was added to address https://github.com/pvorb/clone/issues/58\nconst clone = (function () {\n    function _instanceof(obj, type) {\n        return type != null && obj instanceof type;\n    }\n\n    let nativeMap;\n    try {\n        nativeMap = Map;\n    } catch (_) {\n        // maybe a reference error because no `Map`. Give it a dummy value that no\n        // value will ever be an instanceof.\n        nativeMap = function () {};\n    }\n\n    let nativeSet;\n    try {\n        nativeSet = Set;\n    } catch (_) {\n        nativeSet = function () {};\n    }\n\n    let nativePromise;\n    try {\n        nativePromise = Promise;\n    } catch (_) {\n        nativePromise = function () {};\n    }\n\n    /**\n     * Clones (copies) an Object using deep copying.\n     *\n     * This function supports circular references by default, but if you are certain\n     * there are no circular references in your object, you can save some CPU time\n     * by calling clone(obj, false).\n     *\n     * Caution: if `circular` is false and `parent` contains circular references,\n     * your program may enter an infinite loop and crash.\n     *\n     * @param `parent` - the object to be cloned\n     * @param `circular` - set to true if the object to be cloned may contain\n     *    circular references. (optional - true by default)\n     * @param `depth` - set to a number if the object is only to be cloned to\n     *    a particular depth. (optional - defaults to Infinity)\n     * @param `prototype` - sets the prototype to be used when cloning an object.\n     *    (optional - defaults to parent prototype).\n     * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n     *    should be cloned as well. Non-enumerable properties on the prototype\n     *    chain will be ignored. (optional - false by default)\n     */\n    function clone(parent, circular, depth, prototype, includeNonEnumerable) {\n        if (typeof circular === 'object') {\n            depth = circular.depth;\n            prototype = circular.prototype;\n            includeNonEnumerable = circular.includeNonEnumerable;\n            circular = circular.circular;\n        }\n        // maintain two arrays for circular references, where corresponding parents\n        // and children have the same index\n        const allParents = [];\n        const allChildren = [];\n\n        const useBuffer = typeof Buffer !== 'undefined';\n\n        if (typeof circular === 'undefined') circular = true;\n\n        if (typeof depth === 'undefined') depth = Infinity;\n\n        // recurse this function so we don't reset allParents and allChildren\n        function _clone(parent, depth) {\n            // cloning null always returns null\n            if (parent === null) return null;\n\n            if (depth === 0) return parent;\n\n            let child, proto;\n            if (typeof parent !== 'object') {\n                return parent;\n            }\n\n            if (_instanceof(parent, nativeMap)) {\n                child = new nativeMap();\n            } else if (_instanceof(parent, nativeSet)) {\n                child = new nativeSet();\n            } else if (_instanceof(parent, nativePromise)) {\n                child = new nativePromise(function (resolve, reject) {\n                    parent.then(\n                        function (value) {\n                            resolve(_clone(value, depth - 1));\n                        },\n                        function (err) {\n                            reject(_clone(err, depth - 1));\n                        }\n                    );\n                });\n            } else if (clone.__isArray(parent)) {\n                child = [];\n            } else if (clone.__isRegExp(parent)) {\n                child = new RegExp(parent.source, __getRegExpFlags(parent));\n                if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n            } else if (clone.__isDate(parent)) {\n                child = new Date(parent.getTime());\n            } else if (useBuffer && Buffer.isBuffer(parent)) {\n                if (Buffer.from) {\n                    // Node.js >= 5.10.0\n                    child = Buffer.from(parent);\n                } else {\n                    // Older Node.js versions\n                    child = new Buffer(parent.length);\n                    parent.copy(child);\n                }\n                return child;\n            } else if (_instanceof(parent, Error)) {\n                child = Object.create(parent);\n            } else if (typeof prototype === 'undefined') {\n                proto = Object.getPrototypeOf(parent);\n                child = Object.create(proto);\n            } else {\n                child = Object.create(prototype);\n                proto = prototype;\n            }\n\n            if (circular) {\n                const index = allParents.indexOf(parent);\n\n                if (index != -1) {\n                    return allChildren[index];\n                }\n                allParents.push(parent);\n                allChildren.push(child);\n            }\n\n            if (_instanceof(parent, nativeMap)) {\n                parent.forEach(function (value, key) {\n                    const keyChild = _clone(key, depth - 1);\n                    const valueChild = _clone(value, depth - 1);\n                    child.set(keyChild, valueChild);\n                });\n            }\n            if (_instanceof(parent, nativeSet)) {\n                parent.forEach(function (value) {\n                    const entryChild = _clone(value, depth - 1);\n                    child.add(entryChild);\n                });\n            }\n\n            for (var i in parent) {\n                const attrs = Object.getOwnPropertyDescriptor(parent, i);\n                if (attrs) {\n                    // https://github.com/pvorb/clone/issues/58\n                    if (Object.keys(parent).indexOf(i) < 0) {\n                        continue;\n                    }\n\n                    child[i] = _clone(parent[i], depth - 1);\n                }\n\n                try {\n                    const objProperty = Object.getOwnPropertyDescriptor(parent, i);\n                    if (objProperty.set === 'undefined') {\n                        // no setter defined. Skip cloning this property\n                        continue;\n                    }\n                    child[i] = _clone(parent[i], depth - 1);\n                } catch (e) {\n                    if (e instanceof TypeError) {\n                        // when in strict mode, TypeError will be thrown if child[i] property only has a getter\n                        // we can't do anything about this, other than inform the user that this property cannot be set.\n                        continue;\n                    } else if (e instanceof ReferenceError) {\n                        // this may happen in non strict mode\n                        continue;\n                    }\n                }\n            }\n\n            if (Object.getOwnPropertySymbols) {\n                const symbols = Object.getOwnPropertySymbols(parent);\n                for (var i = 0; i < symbols.length; i++) {\n                    // Don't need to worry about cloning a symbol because it is a primitive,\n                    // like a number or string.\n                    const symbol = symbols[i];\n                    var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n                    if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n                        continue;\n                    }\n                    child[symbol] = _clone(parent[symbol], depth - 1);\n                    Object.defineProperty(child, symbol, descriptor);\n                }\n            }\n\n            if (includeNonEnumerable) {\n                const allPropertyNames = Object.getOwnPropertyNames(parent);\n                for (var i = 0; i < allPropertyNames.length; i++) {\n                    const propertyName = allPropertyNames[i];\n                    var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n                    if (descriptor && descriptor.enumerable) {\n                        continue;\n                    }\n                    child[propertyName] = _clone(parent[propertyName], depth - 1);\n                    Object.defineProperty(child, propertyName, descriptor);\n                }\n            }\n\n            return child;\n        }\n\n        return _clone(parent, depth);\n    }\n\n    /**\n     * Simple flat clone using prototype, accepts only objects, usefull for property\n     * override on FLAT configuration object (no nested props).\n     *\n     * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n     * works.\n     */\n    clone.clonePrototype = function clonePrototype(parent) {\n        if (parent === null) return null;\n\n        const c = function () {};\n        c.prototype = parent;\n        return new c();\n    };\n\n    // private utility functions\n\n    function __objToStr(o) {\n        return Object.prototype.toString.call(o);\n    }\n    clone.__objToStr = __objToStr;\n\n    function __isDate(o) {\n        return typeof o === 'object' && __objToStr(o) === '[object Date]';\n    }\n    clone.__isDate = __isDate;\n\n    function __isArray(o) {\n        return typeof o === 'object' && __objToStr(o) === '[object Array]';\n    }\n    clone.__isArray = __isArray;\n\n    function __isRegExp(o) {\n        return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n    }\n    clone.__isRegExp = __isRegExp;\n\n    function __getRegExpFlags(re) {\n        let flags = '';\n        if (re.global) flags += 'g';\n        if (re.ignoreCase) flags += 'i';\n        if (re.multiline) flags += 'm';\n        return flags;\n    }\n    clone.__getRegExpFlags = __getRegExpFlags;\n\n    return clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n    module.exports = clone;\n}\n/* eslint-enable */\n","// eslint-disable-next-line import/no-mutable-exports\nexport let WS: Record<string, any>;\n\nexport const setWebsocket = (websocket: object) => {\n    WS = websocket;\n};\n\n/**\n * A temporarily custom hook to expose the global `WS` object from the `shared` package.\n */\nexport const useWS = () => {\n    return WS;\n};\n","import React from 'react';\nimport { getInitialLanguage } from '@deriv/translations';\nimport i18n from 'i18next';\nimport { initMoment } from '../date';\nimport { routes } from '../routes';\n\ntype TPlatform = {\n    icon_text?: string;\n    is_hard_redirect: boolean;\n    platform_name: string;\n    route_to_path: string;\n    url?: string;\n};\n\ntype TPlatforms = Record<'p2p' | 'derivgo', TPlatform>;\n\n// TODO: This should be moved to PlatformContext\nexport const platforms: TPlatforms = {\n    p2p: {\n        icon_text: undefined,\n        is_hard_redirect: true,\n        platform_name: 'Deriv P2P',\n        route_to_path: routes.cashier_p2p,\n        url: 'https://app.deriv.com/cashier/p2p',\n    },\n    derivgo: {\n        icon_text: undefined,\n        is_hard_redirect: true,\n        platform_name: 'Deriv GO',\n        route_to_path: '',\n        url: 'https://app.deriv.com/redirect/derivgo',\n    },\n};\n\nexport const useOnLoadTranslation = () => {\n    const [is_loaded, setLoaded] = React.useState(false);\n\n    React.useEffect(() => {\n        if (!i18n.language) {\n            i18n.language = getInitialLanguage();\n        }\n        const is_english = i18n.language === 'EN';\n\n        if (is_english) {\n            setLoaded(true);\n        } else {\n            i18n.store.on('added', () => {\n                setLoaded(true);\n            });\n        }\n\n        return () => i18n.store.off('added');\n    }, []);\n\n    initMoment(i18n.language);\n    return [is_loaded, setLoaded];\n};\n","/* eslint-disable */\nconst extend = require('extend');\n\nexport const removeObjProperties = (property_arr: string[], { ...obj }) => {\n    property_arr.forEach(property => delete obj[property]);\n    return obj;\n};\n\nexport const filterObjProperties = ({ ...obj }, property_arr: string[]) =>\n    Object.fromEntries(\n        Object.entries(obj)\n            // eslint-disable-next-line no-unused-vars\n            .filter(([key, _]) => property_arr.includes(key))\n    );\n\nexport const isEmptyObject = (obj: any) => {\n    let is_empty = true;\n    if (obj && obj instanceof Object) {\n        Object.keys(obj).forEach(key => {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) is_empty = false;\n        });\n    }\n    return is_empty;\n};\n\nexport const cloneObject = (obj: any) => (!isEmptyObject(obj) ? extend(true, Array.isArray(obj) ? [] : {}, obj) : obj);\n\n// Note that this function breaks on objects with circular references.\nexport const isDeepEqual = (a: any, b: any) => {\n    if (typeof a !== typeof b) {\n        return false;\n    } else if (Array.isArray(a)) {\n        return isEqualArray(a, b);\n    } else if (a && b && typeof a === 'object') {\n        return isEqualObject(a, b);\n    } else if (typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b)) {\n        return true;\n    }\n    // else\n    return a === b;\n};\n\nexport const isEqualArray = (arr1: any[], arr2: any[]): boolean =>\n    arr1 === arr2 || (arr1.length === arr2.length && arr1.every((value, idx) => isDeepEqual(value, arr2[idx])));\n\nexport const isEqualObject = (obj1: any, obj2: any): boolean =>\n    obj1 === obj2 ||\n    (Object.keys(obj1).length === Object.keys(obj2).length &&\n        Object.keys(obj1).every(key => isDeepEqual(obj1[key], obj2[key])));\n\n// Filters out duplicates in an array of objects by key\nexport const unique = (array: any[], key: string) =>\n    array.filter((e, idx) => array.findIndex((a, i) => (a[key] ? a[key] === e[key] : i === idx)) === idx);\n\nexport const getPropertyValue = (obj: any, k: string | string[]): any => {\n    let keys = k;\n    if (!Array.isArray(keys)) keys = [keys];\n    if (!isEmptyObject(obj) && keys[0] in obj && keys && keys.length > 1) {\n        return getPropertyValue(obj[keys[0]], keys.slice(1));\n    }\n    // else return clone of object to avoid overwriting data\n    return obj ? cloneObject(obj[keys[0]]) : undefined;\n};\n\nexport const removeEmptyPropertiesFromObject = (obj: any) => {\n    const clone = { ...obj };\n\n    Object.getOwnPropertyNames(obj).forEach(key => {\n        if ([undefined, null, ''].includes(obj[key])) {\n            delete clone[key];\n        }\n    });\n\n    return clone;\n};\n\nexport const sequence = (n: number) => Array.from(Array(n).keys());\n\nexport const pick = (source: any, fields: any) => {\n    return fields.reduce((target: any, prop: any) => {\n        if (Object.prototype.hasOwnProperty.call(source, prop)) target[prop] = source[prop];\n        return target;\n    }, {});\n};\n\nexport const findValueByKeyRecursively = (obj: any, key: string) => {\n    let return_value;\n\n    Object.keys(obj).some(obj_key => {\n        const value = obj[obj_key];\n\n        if (obj_key === key) {\n            return_value = obj[key];\n            return true;\n        }\n\n        if (typeof value === 'object') {\n            const nested_value = findValueByKeyRecursively(value, key);\n\n            if (nested_value) {\n                return_value = nested_value;\n                return true;\n            }\n        }\n\n        return false;\n    });\n\n    return return_value;\n};\n\n// Recursively freeze an object (deep freeze)\nexport const deepFreeze = (obj: any) => {\n    Object.getOwnPropertyNames(obj).forEach(key => {\n        const value = obj[key];\n        if (value && typeof value === 'object' && !Object.isFrozen(value)) {\n            deepFreeze(value);\n        }\n    });\n    return Object.freeze(obj);\n};\n","import moment from 'moment';\nimport React from 'react';\nimport { Localize } from '@deriv/translations';\nimport { unique } from '../object';\nimport { capitalizeFirstLetter } from '../string/string_util';\nimport { TContractInfo, TContractStore, TDigitsInfo, TLimitOrder, TTickItem } from './contract-types';\n\ntype TGetAccuBarriersDTraderTimeout = (params: {\n    barriers_update_timestamp: number;\n    has_default_timeout: boolean;\n    tick_update_timestamp: number | null;\n    underlying: string;\n}) => number;\n\n// Trade types that are considered as vanilla financials\nexport const VANILLA_FX_SYMBOLS = [\n    'frxAUDUSD',\n    'frxEURUSD',\n    'frxGBPUSD',\n    'frxUSDCAD',\n    'frxUSDJPY',\n    'frxXAUUSD',\n    'frxXAGUSD',\n] as const;\n\n// animation correction time is an interval in ms between ticks receival from API and their actual visual update on the chart\nexport const ANIMATION_CORRECTION_TIME = 200;\nexport const DELAY_TIME_1S_SYMBOL = 500;\n// generation_interval will be provided via API later to help us distinguish between 1-second and 2-second symbols\nexport const symbols_2s = ['R_10', 'R_25', 'R_50', 'R_75', 'R_100'];\n\nexport const TURBOS = {\n    LONG: 'turboslong',\n    SHORT: 'turbosshort',\n} as const;\n\nexport const VANILLALONG = {\n    CALL: 'vanillalongcall',\n    PUT: 'vanillalongput',\n    FX: 'vanilla_fx',\n} as const;\n\nexport const getContractStatus = ({ contract_type, exit_tick_time, profit, status }: TContractInfo) => {\n    const closed_contract_status = profit && profit < 0 && exit_tick_time ? 'lost' : 'won';\n    return isAccumulatorContract(contract_type)\n        ? (status === 'open' && !exit_tick_time && 'open') || closed_contract_status\n        : status;\n};\n\nexport const getFinalPrice = (contract_info: TContractInfo) => contract_info.sell_price || contract_info.bid_price;\n\nexport const getIndicativePrice = (contract_info: TContractInfo) =>\n    getFinalPrice(contract_info) && isEnded(contract_info)\n        ? getFinalPrice(contract_info)\n        : Number(contract_info.bid_price) || null;\n\nexport const getCancellationPrice = (contract_info: TContractInfo) => {\n    const { cancellation: { ask_price: cancellation_price = 0 } = {} } = contract_info;\n    return cancellation_price;\n};\n\nexport const isEnded = (contract_info: TContractInfo) =>\n    !!(\n        (contract_info.status && contract_info.status !== 'open') ||\n        contract_info.is_expired ||\n        contract_info.is_settleable\n    );\n\nexport const isOpen = (contract_info: TContractInfo) => getContractStatus(contract_info) === 'open';\n\nexport const isUserSold = (contract_info: TContractInfo) => contract_info.status === 'sold';\n\nexport const isValidToCancel = (contract_info: TContractInfo) => !!contract_info.is_valid_to_cancel;\n\nexport const isValidToSell = (contract_info: TContractInfo) =>\n    !isEnded(contract_info) && !isUserSold(contract_info) && !!contract_info.is_valid_to_sell;\n\nexport const hasContractEntered = (contract_info: TContractInfo) => !!contract_info.entry_spot;\n\nexport const hasBarrier = (contract_type = '') => /VANILLA|TURBOS|HIGH_LOW|TOUCH/i.test(contract_type);\n\nexport const hasTwoBarriers = (contract_type = '') => /EXPIRY|RANGE|UPORDOWN/i.test(contract_type);\n\nexport const isAccumulatorContract = (contract_type = '') => /ACCU/i.test(contract_type);\n\nexport const isAccumulatorContractOpen = (contract_info: TContractInfo = {}) => {\n    return isAccumulatorContract(contract_info.contract_type) && getContractStatus(contract_info) === 'open';\n};\n\nexport const isMultiplierContract = (contract_type = '') => /MULT/i.test(contract_type);\n\nexport const isTouchContract = (contract_type: string) => /TOUCH/i.test(contract_type);\n\nexport const isTurbosContract = (contract_type = '') => /TURBOS/i.test(contract_type);\n\nexport const isVanillaContract = (contract_type = '') => /VANILLA/i.test(contract_type);\n\nexport const isVanillaFxContract = (contract_type = '', symbol = '') =>\n    isVanillaContract(contract_type) && VANILLA_FX_SYMBOLS.includes(symbol as typeof VANILLA_FX_SYMBOLS[number]);\n\nexport const isSmartTraderContract = (contract_type = '') => /RUN|EXPIRY|RANGE|UPORDOWN|ASIAN/i.test(contract_type);\n\nexport const isAsiansContract = (contract_type = '') => /ASIAN/i.test(contract_type);\n\nexport const isCryptoContract = (underlying = '') => underlying.startsWith('cry');\n\nexport const getAccuBarriersDefaultTimeout = (symbol: string) => {\n    return symbols_2s.includes(symbol) ? DELAY_TIME_1S_SYMBOL * 2 : DELAY_TIME_1S_SYMBOL;\n};\n\nexport const getAccuBarriersDTraderTimeout: TGetAccuBarriersDTraderTimeout = ({\n    barriers_update_timestamp,\n    has_default_timeout,\n    tick_update_timestamp,\n    underlying,\n}) => {\n    if (has_default_timeout || !tick_update_timestamp) return getAccuBarriersDefaultTimeout(underlying);\n    const target_update_time =\n        tick_update_timestamp + getAccuBarriersDefaultTimeout(underlying) + ANIMATION_CORRECTION_TIME;\n    const difference = target_update_time - barriers_update_timestamp;\n    return difference < 0 ? 0 : difference;\n};\n\nexport const getAccuBarriersForContractDetails = (contract_info: TContractInfo) => {\n    if (!isAccumulatorContract(contract_info.contract_type)) return {};\n    const is_contract_open = isOpen(contract_info);\n    const { current_spot_high_barrier, current_spot_low_barrier, high_barrier, low_barrier } = contract_info || {};\n    const accu_high_barrier = is_contract_open ? current_spot_high_barrier : high_barrier;\n    const accu_low_barrier = is_contract_open ? current_spot_low_barrier : low_barrier;\n    return { accu_high_barrier, accu_low_barrier };\n};\n\nexport const getCurrentTick = (contract_info: TContractInfo) => {\n    const tick_stream = unique(contract_info.tick_stream || [], 'epoch');\n    const current_tick =\n        isDigitContract(contract_info.contract_type) || isAsiansContract(contract_info.contract_type)\n            ? tick_stream.length\n            : tick_stream.length - 1;\n    return !current_tick || current_tick < 0 ? 0 : current_tick;\n};\n\nexport const getLastContractMarkerIndex = (markers: TContractStore[] = []) => {\n    const sorted_markers = [...markers].sort(\n        (a, b) => Number(b.contract_info.date_start) - Number(a.contract_info.date_start)\n    );\n    const index = sorted_markers[0].contract_info.date_start ? markers.indexOf(sorted_markers[0]) : -1;\n    return index >= 0 ? index : markers.length - 1;\n};\n\nexport const getLastTickFromTickStream = (tick_stream: TTickItem[] = []) => tick_stream[tick_stream.length - 1] || {};\n\nexport const isDigitContract = (contract_type = '') => /digit/i.test(contract_type);\n\nexport const getDigitInfo = (digits_info: TDigitsInfo, contract_info: TContractInfo) => {\n    const { tick_stream } = contract_info;\n    const { tick_display_value, epoch } = getLastTickFromTickStream(tick_stream);\n\n    if (!tick_display_value || !epoch) return {}; // filter out empty responses\n\n    const current =\n        epoch in digits_info\n            ? {} // filter out duplicated responses\n            : createDigitInfo(tick_display_value, epoch);\n\n    return {\n        ...current,\n    };\n};\n\nexport const getTotalProfit = (contract_info: TContractInfo) =>\n    Number(contract_info.bid_price) - Number(contract_info.buy_price);\n\nconst createDigitInfo = (spot: string, spot_time: number) => {\n    const digit = +`${spot}`.slice(-1);\n\n    return {\n        [+spot_time]: {\n            digit,\n            spot,\n        },\n    };\n};\n\nexport const getLimitOrderAmount = (limit_order?: TLimitOrder) => {\n    if (!limit_order) return { stop_loss: null, take_profit: null };\n    const {\n        stop_loss: { order_amount: stop_loss_order_amount } = {},\n        take_profit: { order_amount: take_profit_order_amount } = {},\n    } = limit_order;\n\n    return {\n        stop_loss: stop_loss_order_amount,\n        take_profit: take_profit_order_amount,\n    };\n};\n\nexport const getTimePercentage = (server_time: moment.Moment, start_time: number, expiry_time: number) => {\n    const duration_from_purchase = moment.duration(moment.unix(expiry_time).diff(moment.unix(start_time)));\n    const duration_from_now = moment.duration(moment.unix(expiry_time).diff(server_time));\n    let percentage = (duration_from_now.asMilliseconds() / duration_from_purchase.asMilliseconds()) * 100;\n\n    if (percentage < 0.5) {\n        percentage = 0;\n    } else if (percentage > 100) {\n        percentage = 100;\n    }\n\n    return Math.round(percentage);\n};\n\nexport const getTickSizeBarrierPercentage = (tick_size_barrier: number) =>\n    `${(tick_size_barrier * 100 + Number.EPSILON).toFixed(5)}%`;\n\nexport const getGrowthRatePercentage = (growth_rate: number) => growth_rate * 100;\n\nexport const getDisplayStatus = (contract_info: TContractInfo) => {\n    let status = 'purchased';\n    if (isEnded(contract_info)) {\n        status = getTotalProfit(contract_info) >= 0 ? 'won' : 'lost';\n    }\n    return status;\n};\n\n/**\n * Set contract update form initial values\n * @param {object} contract_update - contract_update response\n * @param {object} limit_order - proposal_open_contract.limit_order response\n */\n\nexport const getContractUpdateConfig = ({ contract_update, limit_order }: TContractInfo) => {\n    const { stop_loss, take_profit } = getLimitOrderAmount(limit_order || contract_update);\n\n    return {\n        // convert stop_loss, take_profit value to string for validation to work\n        contract_update_stop_loss: stop_loss ? Math.abs(stop_loss).toString() : '',\n        contract_update_take_profit: take_profit ? take_profit.toString() : '',\n        has_contract_update_stop_loss: !!stop_loss,\n        has_contract_update_take_profit: !!take_profit,\n    };\n};\n\nexport const shouldShowExpiration = (symbol = '') => symbol.startsWith('cry');\n\nexport const shouldShowCancellation = (symbol = '') => !/^(cry|CRASH|BOOM|stpRNG|WLD|JD)/.test(symbol);\n\nexport const getContractSubtype = (type = '') =>\n    /(VANILLALONG|TURBOS)/i.test(type)\n        ? capitalizeFirstLetter(type.replace(/(VANILLALONG|TURBOS)/i, '').toLowerCase())\n        : '';\n\nexport const getLocalizedTurbosSubtype = (contract_type = '') => {\n    if (!isTurbosContract(contract_type)) return '';\n    return getContractSubtype(contract_type) === 'Long' ? (\n        <Localize i18n_default_text='Long' />\n    ) : (\n        <Localize i18n_default_text='Short' />\n    );\n};\n","import Cookies from 'js-cookie';\nimport { deriv_urls } from '../url/constants';\nimport { getPropertyValue, isEmptyObject } from '../object/object';\n\ntype TCookieStorageThis = {\n    initialized: boolean;\n    cookie_name: string;\n    domain: string;\n    path: string;\n    expires: Date;\n    value: unknown;\n};\n\nconst getObject = function (this: { getItem: (key: string) => string | null }, key: string) {\n    return JSON.parse(this.getItem(key) || '{}');\n};\n\nconst setObject = function (this: { setItem: (key: string, value: string) => void }, key: string, value: unknown) {\n    if (value && value instanceof Object) {\n        try {\n            this.setItem(key, JSON.stringify(value));\n        } catch (e) {\n            /* do nothing */\n        }\n    }\n};\n\nif (typeof Storage !== 'undefined') {\n    Storage.prototype.getObject = getObject;\n    Storage.prototype.setObject = setObject;\n}\n\nexport const isStorageSupported = (storage: Storage) => {\n    if (typeof storage === 'undefined') {\n        return false;\n    }\n\n    const test_key = 'test';\n    try {\n        storage.setItem(test_key, '1');\n        storage.removeItem(test_key);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst Store = function (this: { storage: Storage }, storage: Storage) {\n    this.storage = storage;\n    this.storage.getObject = getObject;\n    this.storage.setObject = setObject;\n};\n\nStore.prototype = {\n    get(key: string) {\n        return this.storage.getItem(key) || undefined;\n    },\n    set(key: string, value: string) {\n        if (typeof value !== 'undefined') {\n            this.storage.setItem(key, value);\n        }\n    },\n    getObject(key: string) {\n        return typeof this.storage.getObject === 'function' // Prevent runtime error in IE\n            ? this.storage.getObject(key)\n            : JSON.parse(this.storage.getItem(key) || '{}');\n    },\n    setObject(key: string, value: unknown) {\n        if (typeof this.storage.setObject === 'function') {\n            // Prevent runtime error in IE\n            this.storage.setObject(key, value);\n        } else {\n            this.storage.setItem(key, JSON.stringify(value));\n        }\n    },\n    remove(key: string) {\n        this.storage.removeItem(key);\n    },\n    clear() {\n        this.storage.clear();\n    },\n};\n\nconst InScriptStore = function (this: { store: unknown }, object?: unknown) {\n    this.store = typeof object !== 'undefined' ? object : {};\n};\n\nInScriptStore.prototype = {\n    get(key: string) {\n        return getPropertyValue(this.store, key);\n    },\n    set(\n        this: { store: any; set: (key: string | string[], value: string, obj: string[]) => void },\n        k: string | string[],\n        value: string,\n        obj = this.store\n    ) {\n        let key = k;\n        if (!Array.isArray(key)) key = [key];\n        if (key.length > 1) {\n            if (!(key[0] in obj) || isEmptyObject(obj[key[0]])) obj[key[0]] = {};\n            this.set(key.slice(1), value, obj[key[0]]);\n        } else {\n            obj[key[0]] = value;\n        }\n    },\n    getObject(key: string) {\n        return JSON.parse(this.get(key) || '{}');\n    },\n    setObject(key: string, value: unknown) {\n        this.set(key, JSON.stringify(value));\n    },\n    remove(...keys: string[]) {\n        keys.forEach(key => {\n            delete this.store[key];\n        });\n    },\n    clear() {\n        this.store = {};\n    },\n    has(key: string) {\n        return this.get(key) !== undefined;\n    },\n    keys() {\n        return Object.keys(this.store);\n    },\n    call(key: string) {\n        if (typeof this.get(key) === 'function') this.get(key)();\n    },\n};\n\nexport const State = new (InScriptStore as any)();\nState.prototype = InScriptStore.prototype;\n/**\n * Shorthand function to get values from response object of State\n *\n * @param {String} pathname\n *     e.g. getResponse('authorize.currency') == get(['response', 'authorize', 'authorize', 'currency'])\n */\nState.prototype.getResponse = function (pathname: string | string[]) {\n    let path = pathname;\n    if (typeof path === 'string') {\n        const keys = path.split('.');\n        path = ['response', keys[0]].concat(keys);\n    }\n    return this.get(path);\n};\nState.prototype.getByMsgType = State.getResponse;\nState.set('response', {});\n\nexport const CookieStorage = function (this: TCookieStorageThis, cookie_name: string, cookie_domain?: string) {\n    const hostname = window.location.hostname;\n\n    this.initialized = false;\n    this.cookie_name = cookie_name;\n    this.domain =\n        cookie_domain ||\n        /* eslint-disable no-nested-ternary */\n        (hostname.includes('binary.sx') ? 'binary.sx' : deriv_urls.DERIV_HOST_NAME);\n    /* eslint-enable no-nested-ternary */\n    this.path = '/';\n    this.expires = new Date('Thu, 1 Jan 2037 12:00:00 GMT');\n    this.value = {};\n};\n\nCookieStorage.prototype = {\n    read() {\n        const cookie_value = Cookies.get(this.cookie_name);\n        try {\n            this.value = cookie_value ? JSON.parse(cookie_value) : {};\n        } catch (e) {\n            this.value = {};\n        }\n        this.initialized = true;\n    },\n    write(val: string, expireDate: Date, isSecure: boolean) {\n        if (!this.initialized) this.read();\n        this.value = val;\n        if (expireDate) this.expires = expireDate;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: this.expires,\n            path: this.path,\n            domain: this.domain,\n            secure: !!isSecure,\n        });\n    },\n    get(key: string) {\n        if (!this.initialized) this.read();\n        return this.value[key];\n    },\n    set(key: string, val: string) {\n        if (!this.initialized) this.read();\n        this.value[key] = val;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: new Date(this.expires),\n            path: this.path,\n            domain: this.domain,\n        });\n    },\n    remove() {\n        Cookies.remove(this.cookie_name, {\n            path: this.path,\n            domain: this.domain,\n        });\n    },\n};\n\nexport const removeCookies = (...cookie_names: string[]) => {\n    const domains = [`.${document.domain.split('.').slice(-2).join('.')}`, `.${document.domain}`];\n\n    let parent_path = window.location.pathname.split('/', 2)[1];\n    if (parent_path !== '') {\n        parent_path = `/${parent_path}`;\n    }\n\n    cookie_names.forEach(c => {\n        Cookies.remove(c, { path: '/', domain: domains[0] });\n        Cookies.remove(c, { path: '/', domain: domains[1] });\n        Cookies.remove(c);\n        if (new RegExp(c).test(document.cookie) && parent_path) {\n            Cookies.remove(c, { path: parent_path, domain: domains[0] });\n            Cookies.remove(c, { path: parent_path, domain: domains[1] });\n            Cookies.remove(c, { path: parent_path });\n        }\n    });\n};\n\nexport const LocalStore = isStorageSupported(window.localStorage)\n    ? new (Store as any)(window.localStorage)\n    : new (InScriptStore as any)();\nexport const SessionStore = isStorageSupported(window.sessionStorage)\n    ? new (Store as any)(window.sessionStorage)\n    : new (InScriptStore as any)();\n","export const ContentFlag = Object.freeze({\n    LOW_RISK_CR_EU: 'low_risk_cr_eu',\n    LOW_RISK_CR_NON_EU: 'low_risk_cr_non_eu',\n    HIGH_RISK_CR: 'high_risk_cr',\n    CR_DEMO: 'cr_demo',\n    EU_DEMO: 'eu_demo',\n    EU_REAL: 'eu_real',\n});\n","export const Jurisdiction = Object.freeze({\n    SVG: 'svg',\n    BVI: 'bvi',\n    VANUATU: 'vanuatu',\n    LABUAN: 'labuan',\n    MALTA_INVEST: 'maltainvest',\n});\n\nexport const Platforms = Object.freeze({\n    DXTRADE: 'dxtrade',\n    MT5: 'mt5',\n    DERIVEZ: 'derivez',\n});\n","import { getPropertyValue, deepFreeze } from '../object';\n\nexport type TCurrenciesConfig = {\n    [key: string]: {\n        fractional_digits: number;\n        is_deposit_suspended?: 0 | 1;\n        is_suspended?: 0 | 1;\n        is_withdrawal_suspended?: 0 | 1;\n        name?: string;\n        stake_default?: number;\n        transfer_between_accounts?: {\n            fees?: { [key: string]: number };\n            limits: {\n                max?: number;\n                min: number;\n                [key: string]: unknown;\n            } | null;\n            limits_dxtrade?: { [key: string]: unknown };\n            limits_mt5?: { [key: string]: unknown };\n        };\n        type: string;\n    };\n};\n\nlet currencies_config: TCurrenciesConfig = {};\n\nconst fiat_currencies_display_order = ['USD', 'EUR', 'GBP', 'AUD'];\nconst crypto_currencies_display_order = [\n    'TUSDT',\n    'BTC',\n    'ETH',\n    'LTC',\n    'UST',\n    'eUSDT',\n    'BUSD',\n    'DAI',\n    'EURS',\n    'IDK',\n    'PAX',\n    'TUSD',\n    'USDC',\n    'USDK',\n];\n\nexport const reorderCurrencies = <T extends { value: string; type: string }>(list: Array<T>, type = 'fiat') => {\n    const new_order = type === 'fiat' ? fiat_currencies_display_order : crypto_currencies_display_order;\n\n    return list.sort((a, b) => {\n        if (new_order.indexOf(a.value) < new_order.indexOf(b.value)) {\n            return -1;\n        }\n        if (new_order.indexOf(a.value) > new_order.indexOf(b.value)) {\n            return 1;\n        }\n        return 0;\n    });\n};\n\nexport const AMOUNT_MAX_LENGTH = 10;\n\nexport const getRoundedNumber = (number: number, currency: string) => {\n    return Number(Number(number).toFixed(getDecimalPlaces(currency)));\n};\n\nexport const getFormattedText = (number: number, currency: string) => {\n    return `${addComma(number, getDecimalPlaces(currency), isCryptocurrency(currency))} ${currency}`;\n};\n\nexport const formatMoney = (\n    currency_value: string,\n    amount: number | string,\n    exclude_currency?: boolean,\n    decimals = 0,\n    minimumFractionDigits = 0\n) => {\n    let money: number | string = amount;\n    if (money) money = String(money).replace(/,/g, '');\n    const sign = money && Number(money) < 0 ? '-' : '';\n    const decimal_places = decimals || getDecimalPlaces(currency_value);\n\n    money = isNaN(+money) ? 0 : Math.abs(+money);\n    if (typeof Intl !== 'undefined') {\n        const options = {\n            minimumFractionDigits: minimumFractionDigits || decimal_places,\n            maximumFractionDigits: decimal_places,\n        };\n        // TODO: [use-shared-i18n] - Use a getLanguage function to determine number format.\n        money = new Intl.NumberFormat('en', options).format(money);\n    } else {\n        money = addComma(money, decimal_places);\n    }\n\n    return sign + (exclude_currency ? '' : formatCurrency(currency_value)) + money;\n};\n\nexport const formatCurrency = (currency: string) => {\n    return `<span class=\"symbols ${(currency || '').toLowerCase()}\"></span>`;\n};\n\nexport const addComma = (num?: number | string | null, decimal_points?: number, is_crypto?: boolean) => {\n    let number: number | string = String(num || 0).replace(/,/g, '');\n    if (typeof decimal_points !== 'undefined') {\n        number = (+number).toFixed(decimal_points);\n    }\n    if (is_crypto) {\n        number = parseFloat(String(number));\n    }\n\n    return number\n        .toString()\n        .replace(/(^|[^\\w.])(\\d{4,})/g, ($0, $1, $2) => $1 + $2.replace(/\\d(?=(?:\\d\\d\\d)+(?!\\d))/g, '$&,'));\n};\n\nexport const calcDecimalPlaces = (currency: string) => {\n    return isCryptocurrency(currency) ? getPropertyValue(CryptoConfig.get(), [currency, 'fractional_digits']) : 2;\n};\n\nexport const getDecimalPlaces = (currency: string) =>\n    // need to check currencies_config[currency] exists instead of || in case of 0 value\n    currencies_config[currency]\n        ? getPropertyValue(currencies_config, [currency, 'fractional_digits'])\n        : calcDecimalPlaces(currency);\n\nexport const setCurrencies = (website_status: { currencies_config: TCurrenciesConfig }) => {\n    currencies_config = website_status.currencies_config;\n};\n\n// (currency in crypto_config) is a back-up in case website_status doesn't include the currency config, in some cases where it's disabled\nexport const isCryptocurrency = (currency: string) => {\n    return /crypto/i.test(getPropertyValue(currencies_config, [currency, 'type'])) || currency in CryptoConfig.get();\n};\n\nexport const CryptoConfig = (() => {\n    let crypto_config: any;\n\n    // TODO: [use-shared-i18n] - Use translate function shared among apps or pass in translated names externally.\n    const initCryptoConfig = () =>\n        deepFreeze({\n            BTC: {\n                display_code: 'BTC',\n                name: 'Bitcoin',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 8,\n            },\n            BUSD: {\n                display_code: 'BUSD',\n                name: 'Binance USD',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 2,\n            },\n            DAI: {\n                display_code: 'DAI',\n                name: 'Multi-Collateral DAI',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 2,\n            },\n            EURS: {\n                display_code: 'EURS',\n                name: 'STATIS Euro',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 2,\n            },\n            IDK: {\n                display_code: 'IDK',\n                name: 'IDK',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 0,\n            },\n            PAX: {\n                display_code: 'PAX',\n                name: 'Paxos Standard',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 2,\n            },\n            TUSD: {\n                display_code: 'TUSD',\n                name: 'True USD',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 2,\n            },\n            USDC: {\n                display_code: 'USDC',\n                name: 'USD Coin',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 2,\n            },\n            USDK: {\n                display_code: 'USDK',\n                name: 'USDK',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 2,\n            },\n            eUSDT: {\n                display_code: 'eUSDT',\n                name: 'Tether ERC20',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 2,\n            },\n            tUSDT: {\n                display_code: 'tUSDT',\n                name: 'Tether TRC20',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 2,\n            },\n            BCH: {\n                display_code: 'BCH',\n                name: 'Bitcoin Cash',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 8,\n            },\n            ETH: {\n                display_code: 'ETH',\n                name: 'Ether',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 8,\n            },\n            ETC: {\n                display_code: 'ETC',\n                name: 'Ether Classic',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 8,\n            },\n            LTC: {\n                display_code: 'LTC',\n                name: 'Litecoin',\n                min_withdrawal: 0.002,\n                pa_max_withdrawal: 5,\n                pa_min_withdrawal: 0.002,\n                fractional_digits: 8,\n            },\n            UST: {\n                display_code: 'USDT',\n                name: 'Tether Omni',\n                min_withdrawal: 0.02,\n                pa_max_withdrawal: 2000,\n                pa_min_withdrawal: 10,\n                fractional_digits: 2,\n            },\n            // USB: {\n            //     display_code: 'USB',\n            //     name: 'Binary Coin',\n            //     min_withdrawal: 0.02,\n            //     pa_max_withdrawal: 2000,\n            //     pa_min_withdrawal: 10,\n            //     fractional_digits: 2,\n            // },\n        });\n\n    return {\n        get: () => {\n            if (!crypto_config) {\n                crypto_config = initCryptoConfig();\n            }\n            return crypto_config;\n        },\n    };\n})();\n\nexport const getMinWithdrawal = (currency: string) => {\n    return isCryptocurrency(currency) ? getPropertyValue(CryptoConfig.get(), [currency, 'min_withdrawal']) || 0.002 : 1;\n};\n\nexport const getTransferFee = (currency_from: string, currency_to: string) => {\n    const transfer_fee = getPropertyValue(currencies_config, [\n        currency_from,\n        'transfer_between_accounts',\n        'fees',\n        currency_to,\n    ]);\n    return `${typeof transfer_fee === 'undefined' ? '1' : transfer_fee}%`;\n};\n\nexport const getCurrencyDisplayCode = (currency = '') => {\n    // eslint-disable-next-line\n    if (currency !== 'eUSDT' && currency !== 'tUSDT') currency = currency.toUpperCase();\n    return getPropertyValue(CryptoConfig.get(), [currency, 'display_code']) || currency;\n};\n\nexport const getCurrencyName = (currency = '') =>\n    currency === 'USDT' ? 'Tether Omni' : getPropertyValue(currencies_config, [currency, 'name']) || '';\n\nexport const getMinPayout = (currency: string) => {\n    return getPropertyValue(currencies_config, [currency, 'stake_default']);\n};\n\nexport const getCurrencies = () => {\n    return currencies_config;\n};\n\nexport type TAccount = {\n    account_type: 'real' | 'demo';\n    balance: number;\n    currency: string;\n};\n","import { localize } from '@deriv/translations';\n\nexport const getAddressDetailsFields = () => ({\n    address_line_1: localize('First line of address'),\n    address_line_2: localize('Second line of address'),\n    address_city: localize('Town/City'),\n    address_state: localize('State/Province'),\n    address_postcode: localize('Postal/ZIP code'),\n});\n\nexport const getPersonalDetailsFields = () => ({\n    salutation: localize('Title and name'),\n    first_name: localize('First name'),\n    last_name: localize('Last name'),\n    date_of_birth: localize('Date of birth'),\n    place_of_birth: localize('Place of birth'),\n    phone: localize('Phone number'),\n    citizen: localize('Citizenship'),\n    residence: localize('Country of residence'),\n    tax_identification_number: localize('Tax identification number'),\n    tax_residence: localize('Tax residence'),\n    account_opening_reason: localize('Account opening reason'),\n    employment_status: localize('Employment status'),\n});\n\nexport const getSignupFormFields = () => ({ ...getPersonalDetailsFields(), ...getAddressDetailsFields() });\n","export const website_domain = 'app.deriv.com';\nexport const website_name = 'Deriv';\nexport const default_title = website_name;\nexport const TRACKING_STATUS_KEY = 'tracking_status';\n","import { deriv_urls } from './constants';\nimport { getPlatformFromUrl } from './helpers';\nimport { getCurrentProductionDomain } from '../config/config';\nimport { routes } from '../routes';\n\ntype TOption = {\n    query_string?: string;\n    legacy?: boolean;\n    language?: string;\n};\n\nconst default_domain = 'binary.com';\nconst host_map = {\n    // the exceptions regarding updating the URLs\n    'bot.binary.com': 'www.binary.bot',\n    'developers.binary.com': 'developers.binary.com', // same, shouldn't change\n    'academy.binary.com': 'academy.binary.com',\n    'blog.binary.com': 'blog.binary.com',\n};\n\nlet location_url: Location, default_language: string;\n\nexport const legacyUrlForLanguage = (target_language: string, url: string = window.location.href) =>\n    url.replace(new RegExp(`/${default_language}/`, 'i'), `/${(target_language || 'EN').trim().toLowerCase()}/`);\n\nexport const urlForLanguage = (lang: string, url: string = window.location.href) => {\n    const current_url = new URL(url);\n\n    if (lang === 'EN') {\n        current_url.searchParams.delete('lang');\n    } else {\n        current_url.searchParams.set('lang', lang);\n    }\n\n    return `${current_url}`;\n};\n\nexport const reset = () => {\n    location_url = window?.location ?? location_url;\n};\n\nexport const params = (href?: string | URL) => {\n    const arr_params = [];\n    const parsed = ((href ? new URL(href) : location_url).search || '').substr(1).split('&');\n    let p_l = parsed.length;\n    while (p_l--) {\n        const param = parsed[p_l].split('=');\n        arr_params.push(param);\n    }\n    return arr_params;\n};\n\nexport const normalizePath = (path: string) => (path ? path.replace(/(^\\/|\\/$|[^a-zA-Z0-9-_./()#])/g, '') : '');\n\nexport const urlFor = (\n    path: string,\n    options: TOption = {\n        query_string: undefined,\n        legacy: false,\n        language: undefined,\n    }\n) => {\n    const { legacy, language, query_string } = options;\n\n    if (legacy && /^bot$/.test(path)) {\n        return `https://${host_map['bot.binary.com']}`;\n    }\n\n    const lang = language?.toLowerCase?.() ?? default_language;\n    let domain = `https://${window.location.hostname}/`;\n    if (legacy) {\n        if (getPlatformFromUrl().is_staging_deriv_app) {\n            domain = domain.replace(/staging-app\\.deriv\\.com/, `staging.binary.com/${lang || 'en'}`);\n        } else if (getPlatformFromUrl().is_deriv_app) {\n            domain = domain.replace(/app\\.deriv\\.com/, `binary.com/${lang || 'en'}`);\n        } else {\n            domain = `https://binary.com/${lang || 'en'}/`;\n        }\n    }\n    const new_url = `${domain}${normalizePath(path) || 'home'}.html${query_string ? `?${query_string}` : ''}`;\n\n    if (lang && !legacy) {\n        return urlForLanguage(lang, new_url);\n    } else if (legacy) {\n        return legacyUrlForLanguage(lang, new_url);\n    }\n\n    return new_url;\n};\n\nexport const urlForCurrentDomain = (href: string) => {\n    const current_domain = getCurrentProductionDomain();\n\n    if (!current_domain) {\n        return href; // don't change when domain is not supported\n    }\n\n    const url_object = new URL(href);\n    if (Object.keys(host_map).includes(url_object.hostname)) {\n        url_object.hostname = host_map[url_object.hostname as keyof typeof host_map];\n    } else if (url_object.hostname.match(default_domain)) {\n        // to keep all non-Binary links unchanged, we use default domain for all Binary links in the codebase (javascript and templates)\n        url_object.hostname = url_object.hostname.replace(\n            new RegExp(`\\\\.${default_domain}`, 'i'),\n            `.${current_domain}`\n        );\n    } else {\n        return href;\n    }\n\n    return url_object.href;\n};\n\nexport const websiteUrl = () => `${location.protocol}//${location.hostname}/`;\n\nexport const getUrlBase = (path = '') => {\n    const l = window.location;\n\n    if (!/^\\/(br_)/.test(l.pathname)) return path;\n\n    return `/${l.pathname.split('/')[1]}${/^\\//.test(path) ? path : `/${path}`}`;\n};\n\nexport const removeBranchName = (path = '') => {\n    return path.replace(/^\\/br_.*?\\//, '/');\n};\n\nexport const getHostMap = () => host_map;\n\nexport const setUrlLanguage = (lang: string) => {\n    default_language = lang;\n};\n\n// TODO: cleanup options param usage\n// eslint-disable-next-line no-unused-vars\nexport const getStaticUrl = (path = '', _options = {}, is_document = false, is_eu_url = false) => {\n    const host = is_eu_url ? deriv_urls.DERIV_COM_PRODUCTION_EU : deriv_urls.DERIV_COM_PRODUCTION;\n    let lang = default_language?.toLowerCase();\n\n    if (lang && lang !== 'en') {\n        lang = `/${lang}`;\n    } else {\n        lang = '';\n    }\n\n    if (is_document) return `${host}/${normalizePath(path)}`;\n\n    // Deriv.com supports languages separated by '-' not '_'\n    if (host === deriv_urls.DERIV_COM_PRODUCTION && lang.includes('_')) {\n        lang = lang.replace('_', '-');\n    }\n\n    return `${host}${lang}/${normalizePath(path)}`;\n};\n\nexport const getPath = (route_path: string, parameters = {}) =>\n    Object.keys(parameters).reduce(\n        (p, name) => p.replace(`:${name}`, parameters[name as keyof typeof parameters]),\n        route_path\n    );\n\nexport const getContractPath = (contract_id?: number) => getPath(routes.contract, { contract_id });\n\n/**\n * Filters query string. Returns filtered query (without '/?')\n * @param {string} search_param window.location.search\n * @param {Array<string>} allowed_keys array of string of allowed query string keys\n */\nexport const filterUrlQuery = (search_param: string, allowed_keys: string[]) => {\n    const search_params = new URLSearchParams(search_param);\n    const filtered_queries = [...search_params].filter(kvp => allowed_keys.includes(kvp[0]));\n    return new URLSearchParams(filtered_queries || '').toString();\n};\n\nexport const excludeParamsFromUrlQuery = (search_param: string, excluded_keys: string[]) => {\n    const search_params = new URLSearchParams(search_param);\n    const filtered_queries = [...search_params].filter(([key]) => !excluded_keys.includes(key));\n    return filtered_queries.length ? `?${new URLSearchParams(filtered_queries).toString()}` : '';\n};\n","import { website_name } from '../config/app-config';\nimport { domain_app_ids, getAppId } from '../config/config';\nimport { CookieStorage, isStorageSupported, LocalStore } from '../storage/storage';\nimport { getStaticUrl, urlForCurrentDomain } from '../url';\nimport { deriv_urls } from '../url/constants';\n\nexport const redirectToLogin = (is_logged_in: boolean, language: string, has_params = true, redirect_delay = 0) => {\n    if (!is_logged_in && isStorageSupported(sessionStorage)) {\n        const l = window.location;\n        const redirect_url = has_params ? window.location.href : `${l.protocol}//${l.host}${l.pathname}`;\n        sessionStorage.setItem('redirect_url', redirect_url);\n        setTimeout(() => {\n            const new_href = loginUrl({ language });\n            window.location.href = new_href;\n        }, redirect_delay);\n    }\n};\n\ntype TRedirectToSignUp = {\n    is_appstore?: boolean;\n    is_deriv_crypto?: boolean;\n};\n\nexport const redirectToSignUp = ({ is_appstore }: TRedirectToSignUp = {}) => {\n    window.open(getStaticUrl('/signup/', { is_appstore }));\n};\n\ntype TLoginUrl = {\n    language: string;\n};\n\nexport const loginUrl = ({ language }: TLoginUrl) => {\n    const server_url = LocalStore.get('config.server_url');\n    const signup_device_cookie = new (CookieStorage as any)('signup_device');\n    const signup_device = signup_device_cookie.get('signup_device');\n    const date_first_contact_cookie = new (CookieStorage as any)('date_first_contact');\n    const date_first_contact = date_first_contact_cookie.get('date_first_contact');\n    const marketing_queries = `${signup_device ? `&signup_device=${signup_device}` : ''}${\n        date_first_contact ? `&date_first_contact=${date_first_contact}` : ''\n    }`;\n    const getOAuthUrl = () => {\n        return `https://oauth.${\n            deriv_urls.DERIV_HOST_NAME\n        }/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}&brand=${website_name.toLowerCase()}`;\n    };\n\n    if (server_url && /qa/.test(server_url)) {\n        return `https://${server_url}/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}&brand=${website_name.toLowerCase()}`;\n    }\n\n    if (getAppId() === domain_app_ids[window.location.hostname as keyof typeof domain_app_ids]) {\n        return getOAuthUrl();\n    }\n    return urlForCurrentDomain(getOAuthUrl());\n};\n","import { flow } from 'mobx';\nimport { LocalStore } from '../storage';\nimport { redirectToLogin } from '../login';\nimport { WS } from '../../services';\n\nimport { getLanguage, localize } from '@deriv/translations';\nimport { ActiveSymbols } from '@deriv/api-types';\n\ntype TResidenceList = {\n    residence_list: {\n        disabled?: string;\n        phone_idd?: null | string;\n        selected?: string;\n        text?: string;\n        tin_format?: string[];\n        value?: string;\n    }[];\n};\n\ntype TIsSymbolOpen = {\n    exchange_is_open: 0 | 1;\n};\n\nexport const showUnavailableLocationError = flow(function* (showError, is_logged_in) {\n    const website_status = yield WS.wait('website_status');\n    const residence_list: TResidenceList = yield WS.residenceList();\n\n    const clients_country_code = website_status.website_status.clients_country;\n    const clients_country_text = (\n        residence_list.residence_list.find(obj_country => obj_country.value === clients_country_code) || {}\n    ).text;\n\n    const header = clients_country_text\n        ? localize('Sorry, this app is unavailable in {{clients_country}}.', { clients_country: clients_country_text })\n        : localize('Sorry, this app is unavailable in your current location.');\n\n    showError({\n        message: localize('If you have an account, log in to continue.'),\n        header,\n        redirect_label: localize('Log in'),\n        redirectOnClick: () => redirectToLogin(is_logged_in, getLanguage()),\n        should_show_refresh: false,\n    });\n});\n\nexport const isMarketClosed = (active_symbols: ActiveSymbols = [], symbol: string) => {\n    if (!active_symbols.length) return false;\n    return active_symbols.filter(x => x.symbol === symbol)[0]\n        ? !active_symbols.filter(symbol_info => symbol_info.symbol === symbol)[0].exchange_is_open\n        : false;\n};\n\nexport const pickDefaultSymbol = async (active_symbols: ActiveSymbols = []) => {\n    if (!active_symbols.length) return '';\n    const fav_open_symbol = await getFavoriteOpenSymbol(active_symbols);\n    if (fav_open_symbol) return fav_open_symbol;\n    const default_open_symbol = await getDefaultOpenSymbol(active_symbols);\n    return default_open_symbol;\n};\n\nconst getFavoriteOpenSymbol = async (active_symbols: ActiveSymbols) => {\n    try {\n        const chart_favorites = LocalStore.get('cq-favorites');\n        if (!chart_favorites) return undefined;\n        const client_favorite_markets: string[] = JSON.parse(chart_favorites)['chartTitle&Comparison'];\n\n        const client_favorite_list = client_favorite_markets.map(client_fav_symbol =>\n            active_symbols.find(symbol_info => symbol_info.symbol === client_fav_symbol)\n        );\n        if (client_favorite_list) {\n            const client_first_open_symbol = client_favorite_list.filter(symbol => symbol).find(isSymbolOpen);\n            if (client_first_open_symbol) {\n                const is_symbol_offered = await isSymbolOffered(client_first_open_symbol.symbol);\n                if (is_symbol_offered) return client_first_open_symbol.symbol;\n            }\n        }\n        return undefined;\n    } catch (error) {\n        return undefined;\n    }\n};\n\nconst getDefaultOpenSymbol = async (active_symbols: ActiveSymbols) => {\n    const default_open_symbol =\n        (await findSymbol(active_symbols, '1HZ100V')) ||\n        (await findFirstSymbol(active_symbols, /random_index/)) ||\n        (await findFirstSymbol(active_symbols, /major_pairs/));\n    if (default_open_symbol) return default_open_symbol.symbol;\n    return active_symbols.find(symbol_info => symbol_info.submarket === 'major_pairs')?.symbol;\n};\n\nconst findSymbol = async (active_symbols: ActiveSymbols, symbol: string) => {\n    const first_symbol = active_symbols.find(symbol_info => symbol_info.symbol === symbol && isSymbolOpen(symbol_info));\n    const is_symbol_offered = await isSymbolOffered(first_symbol?.symbol);\n    if (is_symbol_offered) return first_symbol;\n    return undefined;\n};\n\nconst findFirstSymbol = async (active_symbols: ActiveSymbols, pattern: RegExp) => {\n    const first_symbol = active_symbols.find(\n        symbol_info => pattern.test(symbol_info.submarket) && isSymbolOpen(symbol_info)\n    );\n    const is_symbol_offered = await isSymbolOffered(first_symbol?.symbol);\n    if (is_symbol_offered) return first_symbol;\n    return undefined;\n};\n\ntype TFindFirstOpenMarket = { category?: string; subcategory?: string } | undefined;\n\nexport const findFirstOpenMarket = async (\n    active_symbols: ActiveSymbols,\n    markets: string[]\n): Promise<TFindFirstOpenMarket> => {\n    const market = markets.shift();\n    const first_symbol = active_symbols.find(symbol_info => market === symbol_info.market && isSymbolOpen(symbol_info));\n    const is_symbol_offered = await isSymbolOffered(first_symbol?.symbol);\n    if (is_symbol_offered) return { category: first_symbol?.market, subcategory: first_symbol?.submarket };\n    else if (markets.length > 0) return findFirstOpenMarket(active_symbols, markets);\n    return undefined;\n};\n\nconst isSymbolOpen = (symbol?: TIsSymbolOpen) => symbol?.exchange_is_open === 1;\n\nconst isSymbolOffered = async (symbol?: string) => {\n    const r = await WS.storage.contractsFor(symbol);\n    return !['InvalidSymbol', 'InputValidationFailed'].includes(r.error?.code);\n};\n\nexport type TActiveSymbols = {\n    symbol: string;\n    display_name: string;\n}[];\n\nexport const getSymbolDisplayName = (active_symbols: TActiveSymbols = [], symbol: string) =>\n    (\n        active_symbols.find(symbol_info => symbol_info.symbol.toUpperCase() === symbol.toUpperCase()) || {\n            display_name: '',\n        }\n    ).display_name;\n","import React from 'react';\nimport { localize, Localize } from '@deriv/translations';\n\nexport const switch_to_tick_chart = {\n    key: 'switch_to_tick_chart',\n    header: localize('This chart display is not ideal for tick contracts'),\n    message: <Localize i18n_default_text='Please change the chart duration to tick for a better trading experience.' />,\n    type: 'info',\n};\n","import { localize } from '@deriv/translations';\nimport { toMoment } from '../date';\n\ntype TContract = {\n    max_contract_duration: string;\n    min_contract_duration: string;\n    expiry_type: string;\n    start_type: string;\n};\n\ntype TMaxMin = {\n    min: number;\n    max: number;\n};\n\ntype TUnit = {\n    text: string;\n    value: string;\n};\n\nexport type TDurations = {\n    min_max: {\n        spot: Partial<Record<'tick' | 'intraday' | 'daily', TMaxMin>>;\n        forward: Partial<Record<'intraday', TMaxMin>>;\n    };\n    units_display: Partial<Record<'spot' | 'forward', TUnit[]>>;\n};\n\ntype TDurationMinMax = {\n    [key: string]: {\n        max: string | number;\n        min: string | number;\n    };\n};\n\nconst getDurationMaps = () => ({\n    t: { display: localize('Ticks'), order: 1, to_second: null },\n    s: { display: localize('Seconds'), order: 2, to_second: 1 },\n    m: { display: localize('Minutes'), order: 3, to_second: 60 },\n    h: { display: localize('Hours'), order: 4, to_second: 60 * 60 },\n    d: { display: localize('Days'), order: 5, to_second: 60 * 60 * 24 },\n});\n\nexport const buildDurationConfig = (\n    contract: TContract,\n    durations: TDurations = { min_max: { spot: {}, forward: {} }, units_display: {} }\n) => {\n    type TDurationMaps = keyof typeof duration_maps;\n    durations.units_display[contract.start_type as keyof typeof durations.units_display] =\n        durations.units_display[contract.start_type as keyof typeof durations.units_display] || [];\n\n    const duration_min_max = durations.min_max[contract.start_type as keyof typeof durations.min_max];\n    const obj_min = getDurationFromString(contract.min_contract_duration);\n    const obj_max = getDurationFromString(contract.max_contract_duration);\n\n    durations.min_max[contract.start_type as keyof typeof durations.min_max][\n        contract.expiry_type as keyof typeof duration_min_max\n    ] = {\n        min: convertDurationUnit(obj_min.duration, obj_min.unit, 's') || 0,\n        max: convertDurationUnit(obj_max.duration, obj_max.unit, 's') || 0,\n    };\n\n    const arr_units: string[] = [];\n    durations?.units_display?.[contract.start_type as keyof typeof durations.units_display]?.forEach?.(obj => {\n        arr_units.push(obj.value);\n    });\n\n    const duration_maps = getDurationMaps();\n\n    if (/^(?:tick|daily)$/.test(contract.expiry_type)) {\n        if (arr_units.indexOf(obj_min.unit) === -1) {\n            arr_units.push(obj_min.unit);\n        }\n    } else {\n        Object.keys(duration_maps).forEach(u => {\n            if (\n                u !== 'd' && // when the expiray_type is intraday, the supported units are seconds, minutes and hours.\n                arr_units.indexOf(u) === -1 &&\n                duration_maps[u as TDurationMaps].order >= duration_maps[obj_min.unit as TDurationMaps].order &&\n                duration_maps[u as TDurationMaps].order <= duration_maps[obj_max.unit as TDurationMaps].order\n            ) {\n                arr_units.push(u);\n            }\n        });\n    }\n\n    durations.units_display[contract.start_type as keyof typeof durations.units_display] = arr_units\n        .sort((a, b) => (duration_maps[a as TDurationMaps].order > duration_maps[b as TDurationMaps].order ? 1 : -1))\n        .reduce((o, c) => [...o, { text: duration_maps[c as TDurationMaps].display, value: c }], [] as TUnit[]);\n    return durations;\n};\n\nexport const convertDurationUnit = (value: number, from_unit: string, to_unit: string) => {\n    if (!value || !from_unit || !to_unit || isNaN(value)) {\n        return null;\n    }\n\n    const duration_maps = getDurationMaps();\n\n    if (from_unit === to_unit || duration_maps[from_unit as keyof typeof duration_maps].to_second === null) {\n        return value;\n    }\n\n    return (\n        (value * (duration_maps[from_unit as keyof typeof duration_maps]?.to_second ?? 1)) /\n        (duration_maps[to_unit as keyof typeof duration_maps]?.to_second ?? 1)\n    );\n};\n\nconst getDurationFromString = (duration_string: string) => {\n    const duration = duration_string.toString().match(/[a-zA-Z]+|[0-9]+/g) || '';\n    return {\n        duration: +duration[0], // converts string to numbers\n        unit: duration[1],\n    };\n};\n\n// TODO will change this after the global stores types get ready\nexport const getExpiryType = (store: any) => {\n    const { duration_unit, expiry_date, expiry_type, duration_units_list } = store;\n    const server_time = store.root_store.common.server_time;\n\n    const duration_is_day = expiry_type === 'duration' && duration_unit === 'd';\n    const expiry_is_after_today =\n        expiry_type === 'endtime' &&\n        ((toMoment(expiry_date) as unknown as moment.Moment).isAfter(\n            toMoment(server_time) as unknown as moment.MomentInput,\n            'day'\n        ) ||\n            !hasIntradayDurationUnit(duration_units_list));\n\n    let contract_expiry_type = 'daily';\n    if (!duration_is_day && !expiry_is_after_today) {\n        contract_expiry_type = duration_unit === 't' ? 'tick' : 'intraday';\n    }\n\n    return contract_expiry_type;\n};\n\nexport const convertDurationLimit = (value: number, unit: string) => {\n    if (!(value >= 0) || !unit || !Number.isInteger(value)) {\n        return null;\n    }\n\n    if (unit === 'm') {\n        const minute = value / 60;\n        return minute >= 1 ? Math.floor(minute) : 1;\n    } else if (unit === 'h') {\n        const hour = value / (60 * 60);\n        return hour >= 1 ? Math.floor(hour) : 1;\n    } else if (unit === 'd') {\n        const day = value / (60 * 60 * 24);\n        return day >= 1 ? Math.floor(day) : 1;\n    }\n\n    return value;\n};\n\nexport const hasIntradayDurationUnit = (duration_units_list: TUnit[]) => {\n    return duration_units_list.some(unit => ['m', 'h'].indexOf(unit.value) !== -1);\n};\n/**\n * On switching symbols, end_time value of volatility indices should be set to today\n *\n * @param {String} symbol\n * @param {String | null} expiry_type\n * @returns {*}\n */\nexport const resetEndTimeOnVolatilityIndices = (symbol: string, expiry_type: string | null) =>\n    /^R_/.test(symbol) && expiry_type === 'endtime' ? toMoment(null).format('DD MMM YYYY') : null;\n\nexport const getDurationMinMaxValues = (\n    duration_min_max: TDurationMinMax,\n    contract_expiry_type: string,\n    duration_unit: string\n) => {\n    if (!duration_min_max[contract_expiry_type]) return [];\n    const max_value = convertDurationLimit(+duration_min_max[contract_expiry_type].max, duration_unit);\n    const min_value = convertDurationLimit(+duration_min_max[contract_expiry_type].min, duration_unit);\n\n    return [min_value, max_value];\n};\n","type TIsHighLow = {\n    shortcode?: string;\n    shortcode_info?: {\n        category?: string;\n        underlying?: string;\n        barrier_1?: string;\n        multiplier?: string;\n        start_time?: string;\n    };\n};\n\ntype TInfoFromShortcode = Record<\n    | 'category'\n    | 'underlying'\n    | 'barrier_1'\n    | 'multiplier'\n    | 'start_time'\n    | 'payout_tick'\n    | 'growth_rate'\n    | 'growth_frequency'\n    | 'tick_size_barrier',\n    string\n>;\n\n// category_underlying_amount\nconst base_pattern =\n    '^([A-Z]+)_((?:1HZ[0-9-V]+)|(?:(?:CRASH|BOOM)[0-9\\\\d]+[A-Z]?)|(?:cry_[A-Z]+)|(?:JD[0-9]+)|(?:OTC_[A-Z0-9]+)|R_[\\\\d]{2,3}|[A-Z]+)_([\\\\d.]+)';\n\n// category_underlying_amount_payouttick_growthrate_growthfrequency_ticksizebarrier_starttime\nconst accumulators_regex = new RegExp(`${base_pattern}_(\\\\d+)_(\\\\d*\\\\.?\\\\d*)_(\\\\d+)_(\\\\d*\\\\.?\\\\d*)_(\\\\d+)`);\n\n// category_underlying_amount_multiplier_starttime\nconst multipliers_regex = new RegExp(`${base_pattern}_(\\\\d+)_(\\\\d+)`);\n\n// category_underlying_amount_starttime_endtime_barrier\nconst options_regex = new RegExp(`${base_pattern}_([A-Z\\\\d]+)_([A-Z\\\\d]+)_?([A-Z\\\\d]+)?`);\n\nexport const extractInfoFromShortcode = (shortcode: string): TInfoFromShortcode => {\n    const info_from_shortcode = {\n        category: '',\n        underlying: '',\n        barrier_1: '',\n        multiplier: '',\n        start_time: '',\n        payout_tick: '',\n        growth_rate: '',\n        growth_frequency: '',\n        tick_size_barrier: '',\n    };\n\n    const is_accumulators = /^ACCU/i.test(shortcode);\n    const is_multipliers = /^MULT/i.test(shortcode);\n\n    // First group of regex pattern captures the trade category, second group captures the market's underlying\n    let pattern;\n    if (is_multipliers) {\n        pattern = multipliers_regex;\n    } else pattern = is_accumulators ? accumulators_regex : options_regex;\n    const extracted = pattern.exec(shortcode);\n\n    if (extracted !== null) {\n        info_from_shortcode.category = extracted[1].charAt(0).toUpperCase() + extracted[1].slice(1).toLowerCase();\n        info_from_shortcode.underlying = extracted[2];\n\n        if (is_multipliers) {\n            info_from_shortcode.multiplier = extracted[4];\n            info_from_shortcode.start_time = extracted[5];\n        } else if (is_accumulators) {\n            info_from_shortcode.payout_tick = extracted[4];\n            info_from_shortcode.growth_rate = extracted[5];\n            info_from_shortcode.growth_frequency = extracted[6];\n            info_from_shortcode.tick_size_barrier = extracted[7];\n            info_from_shortcode.start_time = extracted[8];\n        } else {\n            info_from_shortcode.start_time = extracted[4];\n        }\n\n        if (/^(CALL|PUT)$/i.test(info_from_shortcode.category)) {\n            info_from_shortcode.barrier_1 = extracted[6];\n        }\n    }\n\n    return info_from_shortcode;\n};\n\nexport const isHighLow = ({ shortcode = '', shortcode_info }: TIsHighLow) => {\n    const info_from_shortcode = shortcode ? extractInfoFromShortcode(shortcode) : shortcode_info;\n    return info_from_shortcode && info_from_shortcode.barrier_1 ? !/^S0P$/.test(info_from_shortcode.barrier_1) : false;\n};\n\nexport const isForwardStarting = (shortcode: string, purchase_time?: number) => {\n    const shortcode_info = extractInfoFromShortcode(shortcode);\n    if (shortcode_info?.multiplier) return false;\n    const start_time: string = shortcode_info?.start_time || '';\n    return start_time && purchase_time && /f$/gi.test(start_time);\n};\n","import config_data from '../../../brand.config.json';\n\ntype TLandingCompany = {\n    fx: string;\n    malta: string;\n    maltainvest: string;\n    mx: string;\n    samoa: string;\n    svg: string;\n    v: string;\n};\n\ntype TPlatform = {\n    name: string;\n    icon: string;\n};\n\ntype TPlatformAppstore = {\n    name: string;\n    icon: string;\n    availability: string;\n};\n\ntype TPlatforms = {\n    ctrader: TPlatform;\n    trader: TPlatform;\n    dbot: TPlatform;\n    mt5: TPlatform;\n    dxtrade: TPlatform;\n    derivez: TPlatform;\n    smarttrader: TPlatform;\n    bbot: TPlatform;\n    go: TPlatform;\n};\n\ntype TPlatformsAppstore = {\n    ctrader: TPlatformAppstore;\n    trader: TPlatformAppstore;\n    dbot: TPlatformAppstore;\n    smarttrader: TPlatformAppstore;\n    bbot: TPlatformAppstore;\n    go: TPlatformAppstore;\n};\n\nconst isDomainAllowed = (domain_name: string) => {\n    // This regex will match any official deriv production and testing domain names.\n    // Allowed deriv domains: localhost, binary.sx, binary.com, deriv.com, deriv.be, deriv.me and their subdomains.\n    return /^(((.*)\\.)?(localhost:8443|binary\\.(sx|com)|deriv.(com|me|be)))$/.test(domain_name);\n};\n\nexport const getLegalEntityName = (landing_company: keyof TLandingCompany) => {\n    return config_data.legal_entities[landing_company];\n};\n\nexport const getBrandWebsiteName = () => {\n    return config_data.domain_name;\n};\n\nexport const getPlatformSettings = (platform_key: keyof TPlatforms): TPlatform => {\n    const allowed_config_data = config_data.platforms[platform_key];\n\n    if (!isDomainAllowed(window.location.host)) {\n        // Remove all official platform logos if the app is hosted under unofficial domain\n        allowed_config_data.icon = '';\n    }\n\n    return allowed_config_data;\n};\n\nexport const getAppstorePlatforms = () => {\n    const platform_data: Record<string, Record<string, string>> = config_data.platforms_appstore;\n    return Object.keys(platform_data).map(key => platform_data[key]);\n};\n\nexport const getPlatformSettingsAppstore = (platform_key: keyof TPlatformsAppstore): TPlatformAppstore => {\n    return config_data.platforms_appstore[platform_key];\n};\n","import { isBot } from '../platform';\nimport { isStaging } from '../url/helpers';\n\n/*\n * Configuration values needed in js codes\n *\n * NOTE:\n * Please use the following command to avoid accidentally committing personal changes\n * git update-index --assume-unchanged packages/shared/src/utils/config.js\n *\n */\n\nexport const livechat_license_id = 12049137;\nexport const livechat_client_id = '66aa088aad5a414484c1fd1fa8a5ace7';\n\nexport const domain_app_ids = {\n    // these domains as supported \"production domains\"\n    'deriv.app': 16929, // TODO: [app-link-refactor] - Remove backwards compatibility for `deriv.app`\n    'app.deriv.com': 16929,\n    'staging-app.deriv.com': 16303,\n    'app.deriv.me': 1411,\n    'staging-app.deriv.me': 1411, // TODO: setup staging for deriv.me\n    'app.deriv.be': 30767,\n    'staging-app.deriv.be': 31186,\n    'binary.com': 1,\n    'test-app.deriv.com': 51072,\n};\n\nexport const platform_app_ids = {\n    derivgo: 23789,\n};\n\nexport const getCurrentProductionDomain = () =>\n    !/^staging\\./.test(window.location.hostname) &&\n    Object.keys(domain_app_ids).find(domain => window.location.hostname === domain);\n\nexport const isProduction = () => {\n    const all_domains = Object.keys(domain_app_ids).map(domain => `(www\\\\.)?${domain.replace('.', '\\\\.')}`);\n    return new RegExp(`^(${all_domains.join('|')})$`, 'i').test(window.location.hostname);\n};\n\nexport const isTestLink = () => {\n    return /^((.*)\\.binary\\.sx)$/i.test(window.location.hostname);\n};\n\nexport const isLocal = () => /localhost\\.binary\\.sx/i.test(window.location.hostname);\n\nexport const getAppId = () => {\n    let app_id = null;\n    const user_app_id = ''; // you can insert Application ID of your registered application here\n    const config_app_id = window.localStorage.getItem('config.app_id');\n    const current_domain = getCurrentProductionDomain() || '';\n    window.localStorage.removeItem('config.platform'); // Remove config stored in localstorage if there's any.\n    const platform = window.sessionStorage.getItem('config.platform');\n    const { is_pathname_bot, is_config_route_bot } = isBot();\n    // Added platform at the top since this should take precedence over the config_app_id\n    if (platform && platform_app_ids[platform as keyof typeof platform_app_ids]) {\n        app_id = platform_app_ids[platform as keyof typeof platform_app_ids];\n    } else if (config_app_id) {\n        app_id = config_app_id;\n    } else if (user_app_id.length) {\n        window.localStorage.setItem('config.default_app_id', user_app_id);\n        app_id = user_app_id;\n    } else if (isStaging()) {\n        window.localStorage.removeItem('config.default_app_id');\n        app_id =\n            (is_pathname_bot || is_config_route_bot\n                ? 19112\n                : domain_app_ids[current_domain as keyof typeof domain_app_ids]) || 16303; // it's being used in endpoint chrome extension - please do not remove\n    } else if (/localhost/i.test(window.location.hostname)) {\n        app_id = 36300;\n    } else {\n        window.localStorage.removeItem('config.default_app_id');\n        app_id =\n            (is_pathname_bot || is_config_route_bot\n                ? 19111\n                : domain_app_ids[current_domain as keyof typeof domain_app_ids]) || 16929;\n    }\n\n    return app_id;\n};\n\nexport const getSocketURL = () => {\n    const local_storage_server_url = window.localStorage.getItem('config.server_url');\n    if (local_storage_server_url) return local_storage_server_url;\n\n    let active_loginid_from_url;\n    const search = window.location.search;\n    if (search) {\n        const params = new URLSearchParams(document.location.search.substring(1));\n        active_loginid_from_url = params.get('acct1');\n    }\n\n    const loginid = window.localStorage.getItem('active_loginid') || active_loginid_from_url;\n    const is_real = loginid && !/^(VRT|VRW)/.test(loginid);\n\n    const server = is_real ? 'green' : 'blue';\n    const server_url = `${server}.derivws.com`;\n\n    return server_url;\n};\n\nexport const checkAndSetEndpointFromUrl = () => {\n    if (isTestLink()) {\n        const url_params = new URLSearchParams(location.search.slice(1));\n\n        if (url_params.has('qa_server') && url_params.has('app_id')) {\n            const qa_server = url_params.get('qa_server') || '';\n            const app_id = url_params.get('app_id') || '';\n\n            url_params.delete('qa_server');\n            url_params.delete('app_id');\n\n            if (/^(^(www\\.)?qa[0-9]{1,4}\\.deriv.dev|(.*)\\.derivws\\.com)$/.test(qa_server) && /^[0-9]+$/.test(app_id)) {\n                localStorage.setItem('config.app_id', app_id);\n                localStorage.setItem('config.server_url', qa_server);\n            }\n\n            const params = url_params.toString();\n            const hash = location.hash;\n\n            location.href = `${location.protocol}//${location.hostname}${location.pathname}${\n                params ? `?${params}` : ''\n            }${hash || ''}`;\n\n            return true;\n        }\n    }\n\n    return false;\n};\n\nexport const getDebugServiceWorker = () => {\n    const debug_service_worker_flag = window.localStorage.getItem('debug_service_worker');\n    if (debug_service_worker_flag) return !!parseInt(debug_service_worker_flag);\n\n    return false;\n};\n","import moment from 'moment';\nimport 'moment/min/locales';\n\ntype TExtendedMoment = typeof moment & {\n    createFromInputFallback: (config: { _d: Date }) => void;\n};\n\n// Disables moment's fallback to native Date object\n// moment will return `Invalid Date` if date cannot be parsed\n(moment as TExtendedMoment).createFromInputFallback = function (config) {\n    config._d = new Date(NaN); // eslint-disable-line no-underscore-dangle\n};\n\n// Localize moment instance with specific object\nexport const initMoment = (lang: string) => moment.locale(lang);\n\n/**\n * Convert epoch to moment object\n * @param  {Number} epoch\n * @return {moment} the moment object of provided epoch\n */\nexport const epochToMoment = (epoch: number) => moment.unix(epoch).utc();\n\n/**\n * Convert date string or epoch to moment object\n * @param  {Number} value   the date in epoch format\n * @param  {String} value   the date in string format\n * @return {moment} the moment object of 'now' or the provided date epoch or string\n */\nexport const toMoment = (value?: moment.MomentInput): moment.Moment => {\n    if (!value) return moment().utc(); // returns 'now' moment object\n    if (value instanceof moment && (value as moment.Moment).isValid() && (value as moment.Moment).isUTC())\n        return value as moment.Moment; // returns if already a moment object\n    if (typeof value === 'number') return epochToMoment(value); // returns epochToMoment() if not a date\n\n    if (/invalid/i.test(moment(value).toString())) {\n        const today_moment = moment();\n        const days_in_month = today_moment.utc().daysInMonth();\n        const value_as_number = moment.utc(value, 'DD MMM YYYY').valueOf() / (1000 * 60 * 60 * 24);\n        return value_as_number > days_in_month\n            ? moment.utc(today_moment.add(value as string | number, 'd'), 'DD MMM YYYY')\n            : moment.utc(value, 'DD MMM YYYY'); // returns target date\n    }\n    return moment.utc(value);\n};\n\nexport const toLocalFormat = (time: moment.MomentInput) => moment.utc(time).local().format('YYYY-MM-DD HH:mm:ss Z');\n/**\n * Set specified time on moment object\n * @param  {moment} moment_obj  the moment to set the time on\n * @param  {String} time        24 hours format, may or may not include seconds\n * @return {moment} a new moment object of result\n */\nexport const setTime = (moment_obj: moment.Moment, time: string | null) => {\n    const [hour, minute, second] = time ? time.split(':') : [0, 0, 0];\n    moment_obj\n        .hour(+hour)\n        .minute(+minute || 0)\n        .second(+second || 0);\n    return moment_obj;\n};\n\n/**\n * return the unix value of provided epoch and time\n * @param  {Number} epoch  the date to update with provided time\n * @param  {String} time   the time to set on the date\n * @return {Number} unix value of the result\n */\nexport const convertToUnix = (epoch: number | string, time: string) => setTime(toMoment(epoch), time).unix();\n\nexport const toGMTFormat = (time?: moment.MomentInput) =>\n    moment(time || undefined)\n        .utc()\n        .format('YYYY-MM-DD HH:mm:ss [GMT]');\n\nexport const formatDate = (date?: moment.MomentInput, date_format = 'YYYY-MM-DD', should_format_null = true) =>\n    !should_format_null && date === null ? undefined : toMoment(date).format(date_format);\n\nexport const formatTime = (epoch: number | string, time_format = 'HH:mm:ss [GMT]') =>\n    toMoment(epoch).format(time_format);\n\n/**\n * return the number of days from today to date specified\n * @param  {String} date   the date to calculate number of days from today\n * @return {Number} an integer of the number of days\n */\nexport const daysFromTodayTo = (date?: string | moment.Moment) => {\n    const diff = toMoment(date).startOf('day').diff(toMoment().startOf('day'), 'days');\n    return !date || diff < 0 ? '' : diff;\n};\n\n/**\n * return the number of days since the date specified\n * @param  {String} date   the date to calculate number of days since\n * @return {Number} an integer of the number of days\n */\nexport const daysSince = (date: string) => {\n    const diff = toMoment().startOf('day').diff(toMoment(date).startOf('day'), 'days');\n    return !date ? '' : diff;\n};\n\n/**\n * return the number of months between two specified dates\n */\nexport const diffInMonths = (now: moment.MomentInput, then: moment.Moment) => then.diff(now, 'month');\n/**\n * return moment duration between two dates\n * @param  {Number} epoch start time\n * @param  {Number} epoch end time\n * @return {moment.duration} moment duration between start time and end time\n */\nexport const getDiffDuration = (start_time: number, end_time: number) =>\n    moment.duration(moment.unix(end_time).diff(moment.unix(start_time)));\n\n/** returns the DD MM YYYY format */\nexport const getDateFromNow = (\n    days: string | number,\n    unit?: moment.unitOfTime.DurationConstructor,\n    format?: string\n) => {\n    const date = moment(new Date());\n    return date.add(days, unit).format(format);\n};\n\n/**\n * return formatted duration `2 days 01:23:59`\n * @param  {moment.duration} moment duration object\n * @return {String} formatted display string\n */\nexport const formatDuration = (duration: moment.Duration, format?: string) => {\n    const d = Math.floor(duration.asDays()); // duration.days() does not include months/years\n    const h = duration.hours();\n    const m = duration.minutes();\n    const s = duration.seconds();\n    const formatted_str = moment(0)\n        .hour(h)\n        .minute(m)\n        .seconds(s)\n        .format(format || 'HH:mm:ss');\n\n    return {\n        days: d,\n        timestamp: formatted_str,\n    };\n};\n\n/**\n * return true if the time_str is in \"HH:MM\" format, else return false\n * @param {String} time_str time\n */\nexport const isTimeValid = (time_str: string) =>\n    /^([0-9]|[0-1][0-9]|2[0-3]):([0-9]|[0-5][0-9])(:([0-9]|[0-5][0-9]))?$/.test(time_str);\n\n/**\n * return true if the time_str's hour is between 0 and 23, else return false\n * @param {String} time_str time\n */\nexport const isHourValid = (time_str: string) =>\n    isTimeValid(time_str) && /^([01][0-9]|2[0-3])$/.test(time_str.split(':')[0]);\n\n/**\n * return true if the time_str's minute is between 0 and 59, else return false\n * @param {String} time_str time\n */\nexport const isMinuteValid = (time_str: string) => isTimeValid(time_str) && /^[0-5][0-9]$/.test(time_str.split(':')[1]);\n\n/**\n * return true if the date is typeof string and a valid moment date, else return false\n * @param {String|moment} date date\n */\nexport const isDateValid = (date: moment.MomentInput) => moment(date, 'DD MMM YYYY').isValid();\n\n/**\n * add the specified number of days to the given date\n * @param {String} date        date\n * @param {Number} num_of_days number of days to add\n */\nexport const addDays = (date: string | moment.Moment, num_of_days: number) =>\n    toMoment(date).clone().add(num_of_days, 'day');\n\n/**\n * add the specified number of weeks to the given date\n * @param {String} date        date\n * @param {Number} num_of_weeks number of days to add\n */\nexport const addWeeks = (date: string, num_of_weeks: number) => toMoment(date).clone().add(num_of_weeks, 'week');\n\n/**\n * add the specified number of months to the given date\n * @param {String} date        date\n * @param {Number} num_of_months number of months to add\n */\nexport const addMonths = (date: moment.MomentInput, num_of_months: number) =>\n    toMoment(date).clone().add(num_of_months, 'month');\n\n/**\n * add the specified number of years to the given date\n * @param {String} date        date\n * @param {Number} num_of_years number of years to add\n */\nexport const addYears = (date: moment.MomentInput, num_of_years: number) =>\n    toMoment(date).clone().add(num_of_years, 'year');\n\n/**\n * subtract the specified number of days from the given date\n * @param {String} date        date\n * @param {Number} num_of_days number of days to subtract\n */\nexport const subDays = (date: moment.MomentInput, num_of_days: number) =>\n    toMoment(date).clone().subtract(num_of_days, 'day');\n\n/**\n * subtract the specified number of months from the given date\n * @param {String} date        date\n * @param {Number} num_of_months number of months to subtract\n */\nexport const subMonths = (date: moment.MomentInput, num_of_months: number) =>\n    toMoment(date).clone().subtract(num_of_months, 'month');\n\n/**\n * subtract the specified number of years from the given date\n * @param {String} date        date\n * @param {Number} num_of_years number of years to subtract\n */\nexport const subYears = (date: moment.MomentInput, num_of_years: number) =>\n    toMoment(date).clone().subtract(num_of_years, 'year');\n\n/**\n * returns the minimum moment between the two passing parameters\n * @param {moment|string|epoch} first datetime parameter\n * @param {moment|string|epoch} second datetime parameter\n */\nexport const minDate = (date_1: moment.MomentInput, date_2: moment.MomentInput) =>\n    moment.min(toMoment(date_1), toMoment(date_2));\n\n/**\n * returns a new date\n * @param {moment|string|epoch} date date\n */\nexport const getStartOfMonth = (date: moment.MomentInput) =>\n    toMoment(date).clone().startOf('month').format('YYYY-MM-DD');\n\n/**\n * returns miliseconds into UTC formatted string\n * @param {Number} miliseconds miliseconds\n * @param {String} str_format formatting using moment e.g - YYYY-MM-DD HH:mm\n */\nexport const formatMilliseconds = (miliseconds: moment.MomentInput, str_format: string, is_local_time = false) => {\n    if (is_local_time) {\n        return moment(miliseconds).format(str_format);\n    }\n    return moment.utc(miliseconds).format(str_format);\n};\n\n/**\n * returns a new date string\n * @param {moment|string|epoch} date parameter\n * @param {String} from_date_format initial date format\n * @param {String} to_date_format to date format\n */\nexport const convertDateFormat = (date: moment.MomentInput, from_date_format: string, to_date_format: string) =>\n    moment(date, from_date_format).format(to_date_format);\n\n/**\n *  Convert 24 hours format time to 12 hours formatted time.\n * @param  {String} time 24 hours format, may or may not include seconds\n * @return {String} equivalent 12-hour time\n */\nexport const convertTimeFormat = (time: string) => {\n    const time_moment_obj = moment(time, 'HH:mm');\n    const time_hour = time_moment_obj.format('HH');\n    const time_min = time_moment_obj.format('mm');\n    const formatted_time = `${Number(time_hour) % 12 || 12}:${time_min}`;\n    const time_suffix = `${Number(time_hour) >= 12 ? 'pm' : 'am'}`;\n    return `${formatted_time} ${time_suffix}`;\n};\n","import { getPlatformSettings } from '../brand';\nimport { routes } from '../routes';\n\ntype TRoutingHistory = {\n    action: string;\n    hash: string;\n    key: string;\n    pathname: string;\n    search: string;\n}[];\n\n/*\n * These functions exist because we want to refresh the browser page on switch between Bot and the rest of the platforms.\n * */\n\nexport const platform_name = Object.freeze({\n    DBot: getPlatformSettings('dbot').name,\n    DTrader: getPlatformSettings('trader').name,\n    DXtrade: getPlatformSettings('dxtrade').name,\n    DMT5: getPlatformSettings('mt5').name,\n    SmartTrader: getPlatformSettings('smarttrader').name,\n    BinaryBot: getPlatformSettings('bbot').name,\n    DerivGO: getPlatformSettings('go').name,\n});\n\nexport const CFD_PLATFORMS = Object.freeze({\n    MT5: 'mt5',\n    DXTRADE: 'dxtrade',\n    DERIVEZ: 'derivez',\n    CTRADER: 'ctrader',\n});\n\nexport const isBot = () => {\n    const config_route = window.localStorage.getItem('config.route');\n    const is_bot = config_route === 'bot';\n    const is_pathname_bot =\n        /^\\/bot/.test(window.location.pathname) ||\n        (/^\\/(br_)/.test(window.location.pathname) && window.location.pathname.split('/')[2] === 'bot');\n    if (window.location.pathname.split('/')[1] === '') {\n        window.localStorage.removeItem('config.route');\n    }\n    if (is_pathname_bot) {\n        window.localStorage.setItem('config.route', 'bot');\n    }\n    return {\n        is_pathname_bot,\n        is_config_route_bot: is_bot,\n    };\n};\n\nexport const isMT5 = () =>\n    /^\\/mt5/.test(window.location.pathname) ||\n    (/^\\/(br_)/.test(window.location.pathname) && window.location.pathname.split('/')[2] === CFD_PLATFORMS.MT5);\n\nexport const isDXtrade = () =>\n    /^\\/derivx/.test(window.location.pathname) ||\n    (/^\\/(br_)/.test(window.location.pathname) && window.location.pathname.split('/')[2] === 'derivx');\n\nexport const isNavigationFromDerivGO = () => window.sessionStorage.getItem('config.platform') === 'derivgo';\n\nexport const isNavigationFromP2P = () => window.sessionStorage.getItem('config.platform') === 'dp2p';\n\nexport const getPathname = () => {\n    const { is_pathname_bot } = isBot();\n    if (is_pathname_bot) return platform_name.DBot;\n    if (isMT5()) return platform_name.DMT5;\n    if (isDXtrade()) return platform_name.DXtrade;\n    switch (window.location.pathname.split('/')[1]) {\n        case '':\n            return platform_name.DTrader;\n        case 'reports':\n            return 'Reports';\n        case 'cashier':\n            return 'Cashier';\n        default:\n            return platform_name.SmartTrader;\n    }\n};\n\nexport const getPlatformInformation = (routing_history: TRoutingHistory) => {\n    const { is_pathname_bot } = isBot();\n    if (is_pathname_bot || isNavigationFromPlatform(routing_history, routes.bot)) {\n        return { header: platform_name.DBot, icon: getPlatformSettings('dbot').icon };\n    }\n\n    if (isMT5() || isNavigationFromPlatform(routing_history, routes.mt5)) {\n        return { header: platform_name.DMT5, icon: getPlatformSettings('mt5').icon };\n    }\n\n    if (isDXtrade() || isNavigationFromPlatform(routing_history, routes.dxtrade)) {\n        return { header: platform_name.DXtrade, icon: getPlatformSettings('dxtrade').icon };\n    }\n\n    if (isNavigationFromExternalPlatform(routing_history, routes.smarttrader)) {\n        return { header: platform_name.SmartTrader, icon: getPlatformSettings('smarttrader').icon };\n    }\n\n    return { header: platform_name.DTrader, icon: getPlatformSettings('trader').icon };\n};\n\nexport const getActivePlatform = (routing_history: TRoutingHistory) => {\n    const { is_pathname_bot } = isBot();\n    if (is_pathname_bot || isNavigationFromPlatform(routing_history, routes.bot)) return platform_name.DBot;\n    if (isMT5() || isNavigationFromPlatform(routing_history, routes.mt5)) return platform_name.DMT5;\n    if (isDXtrade() || isNavigationFromPlatform(routing_history, routes.dxtrade)) return platform_name.DXtrade;\n    if (isNavigationFromExternalPlatform(routing_history, routes.smarttrader)) return platform_name.SmartTrader;\n    if (isNavigationFromExternalPlatform(routing_history, routes.binarybot)) return platform_name.BinaryBot;\n    return platform_name.DTrader;\n};\n\nexport const getPlatformRedirect = (routing_history: TRoutingHistory) => {\n    const { is_pathname_bot } = isBot();\n    if (is_pathname_bot || isNavigationFromPlatform(routing_history, routes.bot))\n        return { name: platform_name.DBot, route: routes.bot };\n    if (isMT5() || isNavigationFromPlatform(routing_history, routes.mt5))\n        return { name: platform_name.DMT5, route: routes.mt5 };\n    if (isDXtrade() || isNavigationFromPlatform(routing_history, routes.dxtrade))\n        return { name: platform_name.DXtrade, route: routes.dxtrade };\n    if (isNavigationFromExternalPlatform(routing_history, routes.smarttrader))\n        return { name: platform_name.SmartTrader, route: routes.smarttrader };\n    if (isNavigationFromP2P()) return { name: 'P2P', route: routes.cashier_p2p, ref: 'p2p' };\n    if (isNavigationFromExternalPlatform(routing_history, routes.binarybot))\n        return { name: platform_name.BinaryBot, route: routes.binarybot };\n    return { name: platform_name.DTrader, route: routes.trade };\n};\n\nexport const isNavigationFromPlatform = (\n    app_routing_history: TRoutingHistory,\n    platform_route: string,\n    should_ignore_parent_path = false\n) => {\n    if (app_routing_history.length > 0) {\n        const getParentPath = (pathname: string) => (/^http/.test(pathname) ? false : pathname.split('/')[1]);\n\n        for (let i = 0; i < app_routing_history.length; i++) {\n            const history_item = app_routing_history[i];\n            const history_item_parent_path = getParentPath(history_item.pathname);\n            const next_history_item = app_routing_history.length > i + 1 && app_routing_history[i + 1];\n\n            if (\n                history_item_parent_path === getParentPath(platform_route) ||\n                (should_ignore_parent_path && history_item.pathname === platform_route)\n            ) {\n                return true;\n            } else if (!next_history_item) {\n                return false;\n            } else if (history_item_parent_path === getParentPath(next_history_item.pathname)) {\n                // Continue walking until we see passed in platform_route.\n                continue; // eslint-disable-line no-continue\n            } else {\n                // Return false when path matches a platform parent path, but don't return anything\n                // when a non-platform path was seen. i.e. navigating between /cashier and /reports\n                // should not affect navigating back to platform when clicking cross.\n                const platform_parent_paths = [routes.mt5, routes.dxtrade, routes.bot, routes.trade].map(route =>\n                    getParentPath(route)\n                );\n                const is_other_platform_path = platform_parent_paths.includes(history_item_parent_path);\n\n                if (is_other_platform_path) {\n                    break;\n                }\n            }\n        }\n    }\n\n    return false;\n};\n\nexport const isNavigationFromExternalPlatform = (routing_history: TRoutingHistory, platform_route: string) => {\n    /*\n     *  Check if the client is navigating from external platform(SmartTrader or BinaryBot)\n     *  and has not visited Dtrader after it.\n     */\n\n    const platform_index = routing_history.findIndex(history_item => history_item.pathname === platform_route);\n    const dtrader_index = routing_history.findIndex(history_item => history_item.pathname === routes.trade);\n    const has_visited_platform = platform_index !== -1;\n    const has_visited_dtrader = dtrader_index !== -1;\n\n    if (has_visited_platform) {\n        return has_visited_dtrader ? platform_index < dtrader_index : true;\n    }\n\n    return false;\n};\n","import React from 'react';\n\ntype TPlatformContext = {\n    is_appstore: boolean;\n    is_pre_appstore: boolean;\n    is_deriv_crypto: boolean;\n};\n\nexport const PlatformContext = React.createContext<TPlatformContext>({\n    is_appstore: false,\n    is_pre_appstore: false,\n    is_deriv_crypto: false,\n});\n\nPlatformContext.displayName = 'DerivAppStorePlatformContext';\n","import { getUrlSmartTrader, getUrlBinaryBot } from '../url/helpers';\n\nexport const routes = {\n    error404: '/404',\n    account: '/account',\n    trading_assessment: '/account/trading-assessment',\n    languages: '/account/languages',\n    financial_assessment: '/account/financial-assessment',\n    personal_details: '/account/personal-details',\n    proof_of_identity: '/account/proof-of-identity',\n    proof_of_address: '/account/proof-of-address',\n    proof_of_ownership: '/account/proof-of-ownership',\n    passwords: '/account/passwords',\n    closing_account: '/account/closing-account',\n    deactivate_account: '/account/deactivate-account', // TODO: Remove once mobile team has changed this link\n    account_closed: '/account-closed',\n    account_limits: '/account/account-limits',\n    connected_apps: '/account/connected-apps',\n    api_token: '/account/api-token',\n    login_history: '/account/login-history',\n    two_factor_authentication: '/account/two-factor-authentication',\n    self_exclusion: '/account/self-exclusion',\n    account_password: '/settings/account_password',\n    apps: '/settings/apps',\n    cashier_password: '/settings/cashier_password',\n    contract: '/contract/:contract_id',\n    exclusion: '/settings/exclusion',\n    financial: '/settings/financial',\n    history: '/settings/history',\n    index: '/index',\n    limits: '/settings/limits',\n    mt5: '/mt5',\n    dxtrade: '/derivx',\n    personal: '/settings/personal',\n    positions: '/reports/positions',\n    profit: '/reports/profit',\n    reports: '/reports',\n    root: '/',\n    reset_password: '/',\n    redirect: '/redirect',\n    settings: '/settings',\n    statement: '/reports/statement',\n    token: '/settings/token',\n    trade: '/',\n    bot: '/bot',\n    cashier: '/cashier',\n    cashier_deposit: '/cashier/deposit',\n    cashier_withdrawal: '/cashier/withdrawal',\n    cashier_pa: '/cashier/payment-agent',\n    cashier_acc_transfer: '/cashier/account-transfer',\n    cashier_transactions_crypto: '/cashier/crypto-transactions',\n    // cashier_offramp: '/cashier/off-ramp',\n    cashier_onramp: '/cashier/on-ramp',\n    cashier_p2p: '/cashier/p2p',\n\n    // P2P\n    p2p_verification: '/cashier/p2p/verification',\n    p2p_buy_sell: '/cashier/p2p/buy-sell',\n    p2p_orders: '/cashier/p2p/orders',\n    p2p_my_ads: '/cashier/p2p/my-ads',\n    p2p_my_profile: '/cashier/p2p/my-profile',\n    p2p_advertiser_page: '/cashier/p2p/advertiser',\n\n    cashier_pa_transfer: '/cashier/payment-agent-transfer',\n    smarttrader: getUrlSmartTrader(),\n    binarybot: getUrlBinaryBot(),\n    endpoint: '/endpoint',\n    complaints_policy: '/complaints-policy',\n\n    // Appstore\n    appstore: '/appstore',\n    traders_hub: '/appstore/traders-hub',\n    onboarding: '/appstore/onboarding',\n    compare_cfds: '/appstore/cfd-compare-acccounts',\n\n    // Wallets\n    wallets: '/wallets',\n};\n","const isBrowser = () => typeof window !== 'undefined';\n\nconst deriv_com_url = 'deriv.com';\nconst deriv_me_url = 'deriv.me';\nconst deriv_be_url = 'deriv.be';\n\nconst supported_domains = [deriv_com_url, deriv_me_url, deriv_be_url];\nconst domain_url_initial = (isBrowser() && window.location.hostname.split('app.')[1]) || '';\nconst domain_url = supported_domains.includes(domain_url_initial) ? domain_url_initial : deriv_com_url;\n\nexport const deriv_urls = Object.freeze({\n    DERIV_HOST_NAME: domain_url,\n    DERIV_COM_PRODUCTION: `https://${domain_url}`,\n    DERIV_COM_PRODUCTION_EU: `https://eu.${domain_url}`,\n    DERIV_COM_STAGING: `https://staging.${domain_url}`,\n    DERIV_APP_PRODUCTION: `https://app.${domain_url}`,\n    DERIV_APP_STAGING: `https://staging-app.${domain_url}`,\n    SMARTTRADER_PRODUCTION: `https://smarttrader.${domain_url}`,\n    SMARTTRADER_STAGING: `https://staging-smarttrader.${domain_url}`,\n    BINARYBOT_PRODUCTION: `https://bot.${domain_url}`,\n    BINARYBOT_STAGING: `https://staging-bot.${domain_url}`,\n});\n\nexport const whatsapp_url = 'https://wa.me/35699578341';\n","import { deriv_urls } from './constants';\n\nexport const getlangFromUrl = () => {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const lang = urlParams.get('lang');\n    return lang;\n};\n\nexport const getActionFromUrl = () => {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const action = urlParams.get('action');\n    return action;\n};\n\nexport const getUrlSmartTrader = () => {\n    const { is_staging_deriv_app } = getPlatformFromUrl();\n    const url_lang = getlangFromUrl();\n    const i18n_language = window.localStorage.getItem('i18n_language') || url_lang || 'en';\n\n    let base_link = '';\n\n    if (is_staging_deriv_app) {\n        base_link = deriv_urls.SMARTTRADER_STAGING;\n    } else {\n        base_link = deriv_urls.SMARTTRADER_PRODUCTION;\n    }\n\n    return `${base_link}/${i18n_language.toLowerCase()}/trading.html`;\n};\n\nexport const getUrlBinaryBot = (is_language_required = true) => {\n    const { is_staging_deriv_app } = getPlatformFromUrl();\n\n    const url_lang = getlangFromUrl();\n    const i18n_language = window.localStorage.getItem('i18n_language') || url_lang || 'en';\n\n    const base_link = is_staging_deriv_app ? deriv_urls.BINARYBOT_STAGING : deriv_urls.BINARYBOT_PRODUCTION;\n\n    return is_language_required ? `${base_link}/?l=${i18n_language.toLowerCase()}` : base_link;\n};\n\nexport const getPlatformFromUrl = (domain = window.location.hostname) => {\n    const resolutions = {\n        is_staging_deriv_app: /^staging-app\\.deriv\\.(com|me|be)$/i.test(domain),\n        is_deriv_app: /^app\\.deriv\\.(com|me|be)$/i.test(domain),\n        is_test_link: /^(.*)\\.binary\\.sx$/i.test(domain),\n    };\n\n    return {\n        ...resolutions,\n        is_staging: resolutions.is_staging_deriv_app,\n        is_test_link: resolutions.is_test_link,\n    };\n};\n\nexport const isStaging = (domain = window.location.hostname) => {\n    const { is_staging_deriv_app } = getPlatformFromUrl(domain);\n\n    return is_staging_deriv_app;\n};\n"],"names":["clone","_instanceof","obj","type","nativeMap","nativeSet","nativePromise","Map","_","Set","Promise","parent","circular","depth","prototype","includeNonEnumerable","allParents","allChildren","useBuffer","Buffer","Infinity","_clone","child","proto","resolve","reject","then","value","err","__isArray","__isRegExp","RegExp","source","__getRegExpFlags","lastIndex","__isDate","Date","getTime","isBuffer","from","length","copy","Error","Object","create","getPrototypeOf","index","indexOf","push","i","forEach","key","keyChild","valueChild","set","entryChild","add","getOwnPropertyDescriptor","keys","e","TypeError","ReferenceError","getOwnPropertySymbols","symbols","symbol","descriptor","enumerable","defineProperty","allPropertyNames","getOwnPropertyNames","propertyName","__objToStr","o","toString","call","re","flags","global","ignoreCase","multiline","clonePrototype","c","module","exports","WS","useWS","routes","extend","require","isEmptyObject","is_empty","hasOwnProperty","getPropertyValue","k","Array","isArray","slice","cloneObject","undefined","deepFreeze","isFrozen","freeze","getObject","JSON","parse","this","getItem","setObject","setItem","stringify","Storage","isStorageSupported","storage","test_key","removeItem","Store","get","remove","clear","InScriptStore","object","store","has","State","getResponse","pathname","path","split","concat","getByMsgType","CookieStorage","cookie_name","cookie_domain","hostname","window","location","initialized","domain","includes","deriv_urls","expires","read","cookie_value","Cookies","write","val","expireDate","isSecure","secure","LocalStore","localStorage","sessionStorage","LOW_RISK_CR_EU","LOW_RISK_CR_NON_EU","HIGH_RISK_CR","CR_DEMO","EU_DEMO","EU_REAL","SVG","BVI","VANUATU","LABUAN","MALTA_INVEST","DXTRADE","MT5","DERIVEZ","initCryptoConfig","BTC","display_code","name","min_withdrawal","pa_max_withdrawal","pa_min_withdrawal","fractional_digits","BUSD","DAI","EURS","IDK","PAX","TUSD","USDC","USDK","eUSDT","tUSDT","BCH","ETH","ETC","LTC","UST","crypto_config","website_name","default_domain","host_map","redirectToLogin","is_logged_in","language","has_params","redirect_delay","l","redirect_url","href","protocol","host","setTimeout","new_href","loginUrl","server_url","signup_device","date_first_contact","marketing_queries","getOAuthUrl","getAppId","toLowerCase","test","domain_app_ids","current_domain","getCurrentProductionDomain","url_object","URL","match","replace","urlForCurrentDomain","flow","showError","website_status","residence_list","clients_country_code","clients_country","clients_country_text","find","obj_country","text","header","localize","message","redirect_label","redirectOnClick","getLanguage","should_show_refresh","base_pattern","getPlatformSettings","platform_key","domain_name","allowed_config_data","config_data","icon","platform_app_ids","derivgo","isProduction","all_domains","map","join","app_id","config_app_id","platform","isBot","is_pathname_bot","is_config_route_bot","isStaging","getSocketURL","active_loginid_from_url","local_storage_server_url","search","URLSearchParams","document","substring","loginid","is_real","moment","config","_d","NaN","toMoment","utc","isValid","isUTC","epoch","today_moment","days_in_month","daysInMonth","valueOf","DBot","DTrader","DXtrade","DMT5","SmartTrader","BinaryBot","DerivGO","CTRADER","is_bot","React","is_appstore","is_pre_appstore","is_deriv_crypto","displayName","error404","account","trading_assessment","languages","financial_assessment","personal_details","proof_of_identity","proof_of_address","proof_of_ownership","passwords","closing_account","deactivate_account","account_closed","account_limits","connected_apps","api_token","login_history","two_factor_authentication","self_exclusion","account_password","apps","cashier_password","contract","exclusion","financial","history","limits","mt5","dxtrade","personal","positions","profit","reports","root","reset_password","redirect","settings","statement","token","trade","bot","cashier","cashier_deposit","cashier_withdrawal","cashier_pa","cashier_acc_transfer","cashier_transactions_crypto","cashier_onramp","cashier_p2p","p2p_verification","p2p_buy_sell","p2p_orders","p2p_my_ads","p2p_my_profile","p2p_advertiser_page","cashier_pa_transfer","smarttrader","getUrlSmartTrader","binarybot","getUrlBinaryBot","endpoint","complaints_policy","appstore","traders_hub","onboarding","compare_cfds","wallets","deriv_com_url","supported_domains","domain_url_initial","domain_url","DERIV_HOST_NAME","DERIV_COM_PRODUCTION","DERIV_COM_PRODUCTION_EU","DERIV_COM_STAGING","DERIV_APP_PRODUCTION","DERIV_APP_STAGING","SMARTTRADER_PRODUCTION","SMARTTRADER_STAGING","BINARYBOT_PRODUCTION","BINARYBOT_STAGING","getlangFromUrl","queryString","is_staging_deriv_app","getPlatformFromUrl","url_lang","i18n_language","base_link","is_language_required","resolutions","is_deriv_app","is_test_link","is_staging"],"sourceRoot":""}