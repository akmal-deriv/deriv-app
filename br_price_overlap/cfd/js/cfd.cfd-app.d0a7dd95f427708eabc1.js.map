{"version":3,"file":"cfd/js/cfd.cfd-app.d0a7dd95f427708eabc1.js","mappings":";mLAOA,SAFmBA,EAAAA,EAAAA,eAA0C,yPCJ7D,6hPAqDA,QA1Ce,WACX,IAAMC,GAAMC,EAAAA,EAAAA,YAAWC,GAEjBC,GAAOC,EAAAA,EAAAA,aAAW,eAd5B,EAc4B,GAd5B,EAc4B,UACpB,WACIC,EACAC,GAAkC,uFAEXN,aAAG,EAAHA,EAAKG,KAAK,EAAD,KAAIE,EAAO,GAAOC,GAAW,CAAC,IAAK,OAArD,KAARC,EAAW,EAAH,MAEDC,MAAO,CAAF,qBACRD,EAASC,MAAK,gCAGjBD,GAAQ,0CAzB3B,+KA0BS,qDAZmB,GAapB,CAACP,IAoBL,MAAO,CACHG,KAAAA,EACAM,WAnBcL,EAAAA,EAAAA,cACd,SACIC,EACAC,GAAkC,aAUjCN,aAAG,EAAHA,EAAKS,UAAU,GAAD,OAAIJ,EAAO,GAAC,gBAAa,GAAC,GAAMC,GAAW,CAAC,GAAK,GACpE,CAACN,IAOT,gQCPMU,GA3BGC,OAAOC,mBACRD,OAAOC,iBAAmB,IAAIC,EAAAA,GAG3BF,OAAOC,kBA8ClB,QAhBoB,SAAH,GAAoE,IAzBpC,IACvCE,EACAC,EAGAC,EAoBaC,EAAQ,EAARA,SAAQ,IAAEC,WAAAA,OAAU,IAAG,GAAK,EACzCC,GAAKC,EAAAA,EAAAA,SAGLC,EAAoBH,GA5BpBJ,GAAWQ,EAAAA,EAAAA,gBACXP,GAASQ,EAAAA,EAAAA,YAGTP,EAAM,SAAH,OAAYF,EAAQ,iCAAyBC,EAAM,cAF3C,KAEyD,kBAD5D,SAGTJ,OAAOa,WACRb,OAAOa,SAAW,CAAC,GAGH,QAAhB,EAACb,OAAOa,gBAAQ,OAAf,EAAkBR,KACnBL,OAAOa,SAASR,GAAO,IAAIS,IAAJ,CAAkB,CAAEC,WAAY,IAAIC,UAAUX,MAGnD,QAAtB,EAAOL,OAAOa,gBAAQ,aAAf,EAAkBR,IAcsCG,EAE/D,OACI,kBAAC,WAAmB,CAACS,MAAOP,GACxB,kBAACQ,EAAA,GAAmB,CAACC,OAAQpB,GACxBO,GAKjB,4jCCDA,QAvDwB,SAA6CZ,GACjE,IAAiD,KAAf0B,EAAAA,EAAAA,WAAS,GAAM,GAA1CC,EAAS,KAAEC,EAAY,KACuB,KAAfF,EAAAA,EAAAA,WAAS,GAAM,GAA9CG,EAAY,KAAEC,EAAa,KACmB,KAA3BJ,EAAAA,EAAAA,YAA2B,GAA9CvB,EAAK,KAAE4B,EAAQ,KACoC,KAAlCL,EAAAA,EAAAA,YAAkC,GAAnDM,EAAI,KAAEC,EAAO,KACdC,GAAaC,EAAAA,EAAAA,UACAC,EAAeC,IAA1BjC,UAEFA,GAAYL,EAAAA,EAAAA,cACd,WAAyC,2BAArCuC,EAAK,yBAALA,EAAK,gBACL,IAAMC,EAAOD,aAAK,EAALA,EAAQ,GACfrC,EAAUsC,GAAQ,YAAaA,EAAQA,EAAKtC,aAAuCuC,EAEzFZ,GAAa,GACbE,GAAc,GAEd,IACII,EAAWO,QAAUL,EAAWpC,EAAMC,GAASG,WAC3C,SAAAF,GACI+B,EAAQ/B,GACR0B,GAAa,EACjB,IACA,SAAA1B,GACI6B,EAAS7B,EAASC,OAClByB,GAAa,EACjB,GAER,CAAE,MAAOc,GACLX,EAASW,EACb,CACJ,GACA,CAACN,EAAYpC,IAGX2C,GAAc5C,EAAAA,EAAAA,cAAY,WAAM,QAChB,QAAlB,EAAAmC,EAAWO,eAAO,OAAa,QAAb,EAAlB,EAAoBE,mBAAW,OAA/B,UACAb,GAAc,EAClB,GAAG,IAQH,OANAc,EAAAA,EAAAA,YAAU,WACN,OAAO,WACHD,GACJ,CACJ,GAAG,CAACA,IAEG,CACHvC,UAAAA,EACAuC,YAAAA,EACAhB,UAAAA,EACAE,aAAAA,EACA1B,MAAAA,EACA6B,KAAAA,EAER,+0IC/CO,IAAMa,EAAgB,CACzBC,QChBJ,SAAgB,KACdC,OADc,IAEXT,EAAK,cACJ,2BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,+CAA+CF,KAAK,YAAY,0BAAME,EAAE,uGAAuGF,KAAK,YAAY,0BAAME,EAAE,6CAA6CF,KAAK,YAAY,0BAAME,EAAE,szDAAszDF,KAAK,SAAe,EDcrrEG,UEjBJ,SAAgB,KACdL,OADc,IAEXT,EAAK,cACJ,2BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,+CAA+CF,KAAK,YAAY,0BAAME,EAAE,uGAAuGF,KAAK,YAAY,0BAAME,EAAE,6CAA6CF,KAAK,YAAY,0BAAME,EAAE,gmCAAgmCF,KAAK,SAAe,EFe/9CI,KGlBJ,SAAgB,KACdN,OADc,IAEXT,EAAK,cACJ,2BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,6CAA6CF,KAAK,YAAY,0BAAME,EAAE,uDAAuDF,KAAK,YAAY,0BAAME,EAAE,uGAAuGF,KAAK,YAAY,0BAAME,EAAE,0tEAA0tEF,KAAK,SAAe,EHgBjmFK,QInBJ,SAAgB,KACdP,OADc,IAEXT,EAAK,cACJ,2BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,oEAAoEF,KAAK,YAAY,0BAAME,EAAE,wHAAwHF,KAAK,YAAY,0BAAME,EAAE,6aAA6aF,KAAK,SAAe,EJiB5wBM,QKpBJ,SAAgB,KACdR,OADc,IAEXT,EAAK,cACJ,2BAAKY,MAAM,6BAA6BD,KAAK,OAAOD,QAAQ,aAAgBV,GAAO,0BAAMW,KAAK,UAAUE,EAAE,sEAAsE,0BAAMF,KAAK,UAAUE,EAAE,0HAA0H,0BAAMF,KAAK,OAAOE,EAAE,qUAA2U,ELkBlqBK,SMrBJ,SAAgB,KACdT,OADc,IAEXT,EAAK,cACJ,2BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,+CAA+CF,KAAK,YAAY,0BAAME,EAAE,uGAAuGF,KAAK,YAAY,0BAAME,EAAE,6CAA6CF,KAAK,SAAS,0BAAME,EAAE,w4DAAw4DF,KAAK,SAAe,ENmBpwEQ,OOtBJ,SAAgB,KACdV,OADc,IAEXT,EAAK,cACJ,2BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,oEAAoEF,KAAK,YAAY,0BAAME,EAAE,wHAAwHF,KAAK,YAAY,0BAAME,EAAE,ycAAycF,KAAK,SAAS,0BAAME,EAAE,kPAAkPF,KAAK,SAAe,GP8BpjC,QAR4B,SAAH,GAAkF,IAA5ES,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAWC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAC5CC,EAAejB,EAAca,GAEnC,OAAOI,EACH,kBAACA,EAAY,CAACH,UAAWA,EAAWI,MAAO,CAAEC,MAAOJ,EAAMK,OAAQL,GAAQC,QAASA,IACnF,IACR,iLQcA,QAxCoB,SAAH,OAAMK,EAAQ,EAARA,SAAUL,EAAO,EAAPA,QAAO,OACpC,yBAAKF,UAAU,iCACX,yBAAKA,UAAU,kCACX,kBAAC,EAAAQ,QAAO,CACJC,UAAU,QACVC,SAASC,EAAAA,EAAAA,UACL,+FACA,CACIJ,UAAUK,EAAAA,EAAAA,qBAAoBL,KAGtCM,gBAAgB,oCAChBC,OAAQ,MAER,kBAAC,EAAAC,KAAI,CAACd,KAAK,MAAI,qBAGvB,kBAAC,EAAAO,QAAO,CACJR,UAAU,oCACVS,UAAU,OACVC,SAASC,EAAAA,EAAAA,UAAS,mBAClBK,iBAAe,EACfF,OAAQ,MAER,kBAAC,EAAAG,OAAM,CACHjB,UAAU,mCACVkB,aAAW,EACXhB,QAASA,EACTH,KACI,kBAAC,EAAAoB,KAAI,CACDpB,KAAK,SACLC,UAAU,8BACVoB,aAAa,kCAK3B,oOCrCJC,EAAiB,SAAH,GAA6C,IAAvCC,EAAI,EAAJA,KAAMtB,EAAS,EAATA,UAC5B,OACI,yBAAKA,UAAWA,EAAW,cAAY,6BACnC,kBAAC,EAAAuB,UAAS,CACNC,UAAWF,EACXG,cAAcC,EAAAA,EAAAA,YAAa,IAAKf,EAAAA,EAAAA,UAAS,QACzCgB,iBAAiBhB,EAAAA,EAAAA,UAAS,WAC1BiB,kBAAkBF,EAAAA,EAAAA,YAAa,OAAS,WAIxD,ECSA,QAbgB,SAAH,OAAM9D,EAAK,EAALA,MAAOiE,EAAO,EAAPA,QAASC,EAAS,EAATA,UAAS,OACxC,yBAAK9B,UAAU,8BACX,kBAAC,EAAAe,KAAI,CACDd,KAAK,KACL8B,OAAQF,EAAU,OAAS,GAC3B7B,UAAWgC,IAAW,6BAA8B,CAAE,oCAAqCF,KAE1FlE,GAEL,kBAACyD,EAAc,CAACC,KAAM1D,EAAOoC,UAAU,+BACrC,ifCjBV,IAAMiC,EAAY,SAAH,OAAMjC,EAAS,EAATA,UAAS,OAC1B,kBAAC,EAAAmB,KAAI,CAACnB,UAAWA,EAAWD,KAAK,oBAAoBqB,aAAa,wBAAwBnB,KAAM,IAAM,EAGpGiC,EAAgB,SAAH,GAkBb,QAjBFC,iBAAAA,OAAgB,IAAG,KAAE,EACrBC,EAAU,EAAVA,WACAC,EAAU,EAAVA,WACAtC,EAAI,EAAJA,KACAW,EAAO,EAAPA,QACA4B,EAAQ,EAARA,SACAC,EAAQ,EAARA,SACAC,EAAO,EAAPA,QACAC,EAAS,EAATA,UACAC,EAAW,EAAXA,YACAC,EAAW,EAAXA,YACAC,EAAO,EAAPA,QACAC,EAAW,EAAXA,YACAC,EAAK,EAALA,MACAC,EAAc,EAAdA,eAAc,IACd1C,MAAAA,OAAK,IAAG,KAAE,EACV2C,EAAgB,EAAhBA,iBAEA,OACI,kBAAC,EAAAC,MAAK,CACFjD,UAAU,qBACV4C,QAASA,EACTC,YAAaA,EACbE,eAAgBA,EAChBG,OAAQJ,EACRA,MAAOA,EACPzC,MAAOA,GAEP,kBAAC,EAAA4C,MAAA,KAAU,KACP,yBACIjD,UAAWgC,IAAW,4BAA6B,CAC/C,mCAAkD,UAAdS,EACpC,oCAAmD,WAAdA,KAGxC1C,EACD,kBAACkC,EAAS,CAACjC,UAAU,2BAEvBwC,GACE,kBAAC,EAAAzB,KAAI,CAACoC,GAAG,KAAKpB,OAAO,OAAO9B,KAAK,IAAID,UAAU,0BAC3C,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,cAGnCb,GAAWA,EACXc,IAAAA,eAAqB5C,IAAYA,GAChC4C,IAAAA,eAAqB5C,IAAY,uBAAGV,UAAWmC,GAAmBzB,IAExE,kBAAC,EAAAuC,MAAA,OAAY,KACRb,GACG,kBAAC,EAAAnB,OAAM,GACHf,QAASoC,EACTiB,YAAU,EACVjC,KAAMqB,IAAehC,EAAAA,EAAAA,UAAS,eAC9B6C,WAAS,GACJR,EAAmB,CAAES,QAAQ,GAAS,CAAEC,OAAO,KAG3DrB,GACG,kBAAC,EAAApB,OAAM,GACHsC,YAAU,EACVrD,QAASqC,EACTjB,KAAMoB,EACNiB,SAAO,GACFX,EAAmB,CAAES,QAAQ,GAAS,CAAEC,OAAO,MAM5E,EAEAxB,EAAc0B,aAAe,CACzBnB,UAAW,QACXL,YAAY,EACZC,YAAY,GAGhBH,EAAc2B,UAAY,CACtB1B,iBAAkB2B,IAAAA,OAClB1B,WAAY0B,IAAAA,KACZf,eAAgBe,IAAAA,KAChBzB,WAAYyB,IAAAA,KACZtB,QAASsB,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAChD/D,KAAM+D,IAAAA,OACNrB,UAAWqB,IAAAA,OACXC,UAAWD,IAAAA,OACXd,iBAAkBc,IAAAA,KAClBlB,QAASkB,IAAAA,KACTpD,QAASoD,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAChDxB,SAAUwB,IAAAA,KACVvB,SAAUuB,IAAAA,KACVnB,YAAamB,IAAAA,OACbpB,YAAaoB,IAAAA,OACbhB,MAAOgB,IAAAA,OACPjB,YAAaiB,IAAAA,KACbzD,MAAOyD,IAAAA,QAGX,89BCnCA,QAlEmC,SAAH,OAC5BE,EAAa,EAAbA,cACAhE,EAAS,EAATA,UACAO,EAAQ,EAARA,SACA0D,EAAS,EAATA,UACA3B,EAAQ,EAARA,SACA4B,EAAO,EAAPA,QAAO,OAEP,kBAAC,KAAM,CACHC,cAAe,CACXC,SAAU,IAEd7B,SAAU0B,IAET,gBAAGI,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAAY,OAC1B,0BAAM/B,SAAU+B,EAAc,cAAY,+BACtC,yBACItE,UAAWgC,IAAW,4CAA6C,EAAF,aACzDhC,EAAS,YAAaA,KAG9B,yBAAKA,UAAWgC,IAAW,mCAAoChC,IAC3D,kBAAC,EAAAmB,KAAI,CACDnB,UAAU,4BACVD,KAAMQ,IAAagE,EAAAA,cAAAA,IAAoB,mBAAqB,uBAC5DlE,MAAM,MACNC,OAAO,QAEX,kBAAC,EAAAS,KAAI,CAACoC,GAAG,IAAIqB,MAAM,SAASvE,KAAK,IAAI8B,OAAO,QACxC,kBAAC,EAAAqB,SAAQ,CACLC,kBAAkB,+CAClBoB,OAAQ,CACJlE,UAAUK,EAAAA,EAAAA,qBAAoBL,OAI1C,kBAAC,EAAAQ,KAAI,CACDf,UAAU,gDACVmD,GAAG,IACHqB,MAAM,SACNE,MAAM,cACNzE,KAAK,MAEL,kBAAC,EAAAmD,SAAQ,CACLC,kBAAkB,sEAClBoB,OAAQ,CACJlE,UAAUK,EAAAA,EAAAA,qBAAoBL,OAI1C,kBAAC,EAAAoE,iBAAgB,CACbC,WAAW,EACXC,MAAOb,IAAiBrD,EAAAA,EAAAA,UAAS,UACjCmE,cAAcnE,EAAAA,EAAAA,UAAS,UACvBoE,WAAYV,EACZjC,YAAY,EACZE,SAAUA,EACV4B,QAASA,MAIlB,GAEN,o+CCjDJ,EAAU,YAAsB,MACjC,mBAAwB,yBAAC,UAAM,wBAAO,kBACtC,OAAM,kBAAuC,KAAG,MAAkB,kBAAgB,QAAC,UAAO,6BAAM,GAC3FvD,IAGD,sBAAU,SACV,OAAMA,SACN,cAAU,yDAAK,wCACF,EACb,MAAE,oBACF,QAAS,WACT,GACF,EAET,yCAEKqE,SAAAA,eACgB,oBAElB,IAAQC,GAAAA,EAAAA,EAAAA,MAAgBC,EAAAA,EAAAA,OAAsBC,EAAAA,EAAqDrH,GAAzCsH,EAAmB,EAAsBtH,eAApBuH,EAAoBvH,EAApBuH,qBAC/E,EAAkB,EAAVC,WAAYC,EAAAA,EAAS,oBAE7B,EAOIC,EAAAA,gBANAC,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,UACAC,GAAAA,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,8CACAC,EAAsB,EAAtBA,mCACAC,EAA0B,EAA1BA,kCAGJ,EAAkE,EAAM,2DAAjEC,EAAkB,6BACzB,IAD2BC,IAAAA,UAAqB,GACQ,UAAjDjB,EAAU,KAEjB,EAAMkB,EAFyB,iBAEzBA,GACF9I,EAAa,EAAiB,KAClB+I,EAAuB3J,GAE/B,EAAsB,8CAOd4J,MAAAA,SAAAA,OALAC,EAAAA,EAAAA,sBACAC,SAAAA,EAAAA,eAAAA,KACAC,GAAgB,iCAAhBA,GACAC,EAAuB,EAAvBA,iCACAC,EAAmB,0CAEvB,EAAIZ,EAAoCa,iBACpCT,EAAsBI,EAAAA,wBACxB,EAASR,EAA+B,uBACtC,sBACA,EAAsB,GAAsCY,QAC5DR,GAAAA,IACIK,EAAAA,GAAAA,OACIX,CAWhBzH,EAAmB,QAFnB,OAGF,gBACFA,CACH,KAEDqF,IACI,GAAIqC,mBAEAM,WACAf,IACJ,MACA,IACAS,QAII,UAA+B,kBAAS,EACvB,kBAAE,WACnB,mBAA4E,EAChF,qBACA,UAAOI,IAIC,EAA+B,uBAC/B,YACA,sBACA,iBACF,gCAEF,EACI,8CAAgB,oBACK,IACbN,IAAAA,cAAAA,EAAAA,QAA+C,UAC/CO,WACJ,IACIF,EACAD,GAAsB,IAE9B,IAEP,IAGCa,GAGsC,EAE5C,EACI,WAAgB,UAAmB,mGAAI,SAGjB,kBAAyB,cACnC,SAAuB,oCACZnB,IAAAA,cAAU,iDACrB,UAASI,0BACT,WAAOe,EACP,UAAW,EACX,QAAO,EACP,MAAM,IACN,YAAS,iBAA+B,MAAC,QACzC,mBAECC,OAAAA,GAKD,EACA,eAAOD,0BACP,MAAkB,kBAAyB,uDAC3C,kBAASf,YACT,MAAO,IAA6B,kBAGzB,0BAI7B,UAEF,sQCvGA,QAVkC,SAACiB,GAC/B,IACc3B,GACV4B,EAAAA,EAAAA,MADA/I,OAAUmH,eAGR6B,EAAc7B,aAAc,EAAdA,EAAgB2B,OAEpC,OAAOtD,IAAAA,SAAc,wBAAmC,QAAnC,EAAMwD,aAAW,EAAXA,EAAaC,SAASH,UAAO,QAAS,GAAE,CAACE,EAAaF,GACrF,8MCzCA,QAbe,SAAH,GAA6C,IAAvCI,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQ1E,EAAQ,EAARA,SAM7B,OACI,yBAAKvC,UAAU,wBACX,kBAAC,IAAkB,CAACkH,WAAYF,EAAOG,kBAAgB,EAACC,oBAPpC,SAACJ,EAAevC,GACxCwC,EAAOD,EAAOvC,GACdlC,EAASyE,EAAOvC,EACpB,IAOJ,8wDC2BA,SAtBe4C,EAAAA,EAAAA,KAAS,YAAyD,IAAtDL,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQ1E,EAAQ,EAARA,SAAa5D,EAAK,OAChDb,GAAW+I,EAAAA,EAAAA,MAAX/I,OACAwJ,EAAqCxJ,EAArCwJ,iBAAkBC,EAAmBzJ,EAAnByJ,eAEqC,IAA9BjE,IAAAA,SAAuB,QAAO,GAAxDkE,EAAS,KAAEC,EAAW,KACvBC,GAAUJ,aAAgB,EAAhBA,EAAkBI,WAAWJ,aAAgB,EAAhBA,EAAkBK,cACzDC,EAAeL,aAAc,EAAdA,EAAgBM,MAAK,SAAAC,GAAI,OAAIA,EAAKlK,QAAU8J,CAAO,IAOxE,OACI,kBAAC,IAA8B,KACvB/I,EAAK,CACToJ,cAAe,SAACnB,GAAc,OARhB,SAACA,GACnBa,EAAYb,GACZK,EAAOD,EAAO,CAAEQ,UAAWZ,IAC3BrE,EAASyE,EAAO,CAAEQ,UAAAA,GACtB,CAI2CO,CAAcnB,EAAO,EACxDgB,aAAcA,IAG1B,w9FCuCA,IAmBaI,EAAa,SAAH,OAAMC,EAAS,EAATA,UAAW5L,EAAI,EAAJA,KAAI,IAAE6L,SAAAA,OAAQ,IAAG,GAAK,EAAKvJ,EAAK,cACpE,kBAAC,KAAK,CAACtC,KAAMA,IACR,gBAAG8L,EAAK,EAALA,MAAK,IAAEC,KAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAAO,OAC9B,kBAAC,EAAAC,MAAK,KACEJ,EAAK,CACTK,KAAK,OACLC,UAAWP,EACX7L,KAAMA,EACNqM,aAAa,MACbT,UAAWA,GAAa,GACxBzL,MAAO8L,EAAQH,EAAM9L,OAA8BgM,EAAOF,EAAM9L,OAC5DsC,GACN,GAEF,EAGNgK,EAA0B,SAAH,GAIS,MAHlClE,EAAM,EAANA,OACA8C,EAAc,EAAdA,eACAqB,EAAsB,EAAtBA,uBAIMC,GAF0E,QAAhE,EAAGtB,EAAeM,MAAK,SAAAiB,GAAG,OAAIA,EAAIxH,OAASmD,EAAOsE,aAAa,WAAC,aAA7D,EAA+DC,aAElD,CAAC,2BAE3BC,EAAuF,CACzFvB,QAAS,CAAC,SAACwB,GAAS,QAAOA,CAAC,EAAE,SAACA,GAAS,OAAK3B,EAAe4B,KAAI,SAAAC,GAAC,OAAIA,EAAE9H,IAAI,IAAEyF,SAASmC,EAAE,GACxFH,cAAe,CAAC,SAACG,GAAS,QAAOA,CAAC,EAAE,SAACA,GAAS,OAAK3B,EAAe4B,KAAI,SAAAC,GAAC,OAAIA,EAAE9H,IAAI,IAAEyF,SAASmC,EAAE,GAC9FG,0BAA2B,CACvB,SAACH,GAAS,QAAOA,CAAC,EAClB,SAACA,GAAS,OAAML,IAAYA,aAAS,EAATA,EAAWS,MAAK,SAAAC,GAAK,OAAIL,EAAEM,MAAMD,EAAM,IAAQ,EAC3E,mBAAQ9E,EAAOsE,aAAa,GAEhCH,uBAAwB,CACpB,SAACM,GAAS,QAAOA,CAAC,EAClB,SAACA,GAAS,OAAKN,EAAuBO,KAAI,SAAAC,GAAC,OAAIA,EAAExL,KAAK,IAAEmJ,SAASmC,EAAE,GAEvEO,eAAgB,CAAC,SAACP,GAAS,QAAOA,CAAC,EAAE,SAACA,GAAS,OAAK3B,EAAe4B,KAAI,SAAAC,GAAC,OAAIA,EAAE9H,IAAI,IAAEyF,SAASmC,EAAE,IAE7FQ,EAAuC,CACzChC,SAAS/G,EAAAA,EAAAA,UAAS,eAClBoI,eAAepI,EAAAA,EAAAA,UAAS,iBACxB0I,2BAA2B1I,EAAAA,EAAAA,UAAS,6BACpCiI,wBAAwBjI,EAAAA,EAAAA,UAAS,0BACjC8I,gBAAgB9I,EAAAA,EAAAA,UAAS,mBAUvB0H,EAA6C,CAAC,EASpD,OAPAsB,OAAOC,QAAQX,GAAaY,SAAQ,YAAkB,IATxBC,EASwB,SAAhBC,EAAG,KAC/BC,EADsC,KAClBC,WAAU,SAAAf,GAAC,OAAKA,EAAEzE,EAAOsF,GAAkB,KAChD,IAAjBC,IACA3B,EAAO0B,IAZeD,EAYaJ,EAAUK,GAZU,EAC3DpJ,EAAAA,EAAAA,UAAS,6BAA8B,CAAEmJ,WAAAA,KACzCnJ,EAAAA,EAAAA,UAAS,4CAA6C,CAAEmJ,WAAAA,KAExDnJ,EAAAA,EAAAA,UAAS,mCAQ8CqJ,GAE3D,IAEO3B,CACX,EA8TA,QAtR+B,SAAH,GAQQ,IAPhC6B,EAAiB,EAAjBA,kBACAnF,EAAU,EAAVA,WACAwC,EAAc,EAAdA,eACAhF,EAAQ,EAARA,SACA4H,EAAc,EAAdA,eACAnD,EAAK,EAALA,MACAoD,EAAU,EAAVA,WAEMxB,EArI2D,CACjE,CACItH,MAAMX,EAAAA,EAAAA,UAAS,WACf/C,MAAO,WAEX,CACI0D,MAAMX,EAAAA,EAAAA,UAAS,kBACf/C,MAAO,kBAEX,CACI0D,MAAMX,EAAAA,EAAAA,UAAS,eACf/C,MAAO,eAEX,CACI0D,MAAMX,EAAAA,EAAAA,UAAS,yBACf/C,MAAO,0BA2HLyM,EAAkB,SAAClC,GAAa,SAAOgC,EAAehC,IAAW+B,SAAAA,EAAmBnD,SAASoB,GAAM,EAEzG,OAAIpD,GAAwC,IAA1BwC,EAAe+C,OAAqB,kBAAC,EAAAC,QAAO,CAACC,eAAe,IAG1E,kBAAC,KAAM,CACHrG,cAAa,KAAOgG,GACpBM,kBAAgB,EAChBC,gBAAc,EACdC,SAAU,SAAAlG,GAAM,OACZkE,EAAwB,CACpBlE,OAAAA,EACA8C,eAAAA,EACAqB,uBAAAA,GACF,EAENrG,SAnBa,SAACkC,EAAqBmG,GAAmC,OA5BlD,SAACnG,EAAQmG,EAASC,EAAKtI,EAAUuI,EAAUvD,GACvE,MAtBwE,SAAH,GAKnE,IACEG,EAASqB,EAAeU,EAL5BlC,EAAc,EAAdA,eACAwD,EAAY,EAAZA,aACAC,EAAkB,EAAlBA,mBACAC,EAAmB,EAAnBA,oBAcA,OAXA1D,SAAAA,EAAgBsC,SAAQ,SAAC/B,GACjBA,EAAKxG,OAASyJ,IACdrD,EAAUI,GAEVA,EAAKxG,OAAS2J,IACdxB,EAAiB3B,GAEjBA,EAAKxG,OAAS0J,IACdjC,EAAgBjB,EAExB,IACO,CAAEJ,QAAAA,EAAS+B,eAAAA,EAAgBV,cAAAA,EACtC,CAGuDmC,CAAiC,CAChF3D,eAAAA,EACAwD,aAActG,EAAOiD,QACrBsD,mBAAoBvG,EAAOsE,cAC3BkC,oBAAqBxG,EAAOgF,iBAJxB/B,EAAO,EAAPA,QAAS+B,EAAc,EAAdA,eAAgBV,EAAa,EAAbA,cAajCxG,EAASsI,EANO,OACTpG,GAAM,IACTiD,SAASA,aAAO,EAAPA,EAAS9J,QAAS,GAC3B6L,gBAAgBA,aAAc,EAAdA,EAAgB7L,QAAS,GACzCmL,eAAeA,aAAa,EAAbA,EAAenL,QAAS,KAEpBgN,EAAQO,cAAeL,EAClD,CAcQM,CAAW3G,EAAQmG,EAAS5D,EAAOzE,IAAW8I,EAAAA,EAAAA,aAAYlB,EAAgB1F,GAAS8C,EAAe,EAmB9F+D,iBAAe,IAEd,YAU+B,IAT5BhH,EAAY,EAAZA,aACAD,EAAY,EAAZA,aACAkH,EAAY,EAAZA,aACAC,EAAU,EAAVA,WACAnD,EAAM,EAANA,OACAC,EAAO,EAAPA,QACA7D,EAAM,EAANA,OACAgH,EAAa,EAAbA,cACAC,EAAO,EAAPA,QAEMC,EAAoBrD,EAAQZ,SAAWW,EAAOX,QAC9CkE,EAAuBtD,EAAQmB,gBAAkBpB,EAAOoB,eACxDoC,EAAsBvD,EAAQS,eAAiBV,EAAOU,cAEtD+C,EAAsB,SAAChE,EAAwBiE,GACjD,IAAMC,EAAalE,EAAKlK,MAAQkK,EAAKxG,KAAO,GAC5CmK,EAAcM,EAAQC,GAAY,EACtC,EAEA,OACI,kBAAC,EAAAC,kBAAiB,CAACC,eAAgB,IAAKC,eAAeC,EAAAA,EAAAA,aAAc,IAAM,OACtE,gBAAGC,EAAM,EAANA,OAAM,OACN,0BACIrM,UAAU,mCACVsM,IAAKD,EACL9J,SAAU+B,EACVoE,aAAa,MACb6D,YAAU,GAEV,kBAAC,EAAAC,kBAAiB,CACdxM,UAAU,eACVyM,sBAAsB,QACtBC,aAAaN,EAAAA,EAAAA,cAEb,kBAAC,EAAArL,KAAI,CACDoC,GAAG,IACHlD,KAAK,MACLuE,MAAM,SACNxE,UAAU,4BACV,cAAY,mCAEZ,kBAAC,EAAAoD,SAAQ,CACLC,kBACI,kGAIZ,kBAAC,EAAAsJ,iBAAgB,CAACrM,OAAO,QAAQsM,aAAalL,EAAAA,EAAAA,aAC1C,yBAAK1B,UAAU,0BACX,8BAAUA,UAAU,0BAChB,kBAAC,EAAA6M,eAAc,KACX,kBAAC,KAAK,CAACxQ,KAAK,YACP,gBAAG8L,EAAK,EAALA,MAAK,OACL,kBAAC,EAAA2E,aAAY,KACL3E,EAAK,CACT4E,GAAG,uBACH,gBAAc,OACdrE,aAAa,MACbF,KAAK,OACL3D,OAAOlE,EAAAA,EAAAA,UAAS,gBAChBnE,MAAOmP,EACPqB,SAAU3C,EAAgB,WAC1B4C,WAAY1F,EACZ2F,gBAAiB,SAACpF,GAAsB,OACpCgE,EAAoBhE,EAAM,UAAU,EAExCqF,eAAe,aACf1E,UAAQ,IACV,KAId,kBAAC,EAAA2E,cAAa,KACV,kBAAC,EAAAC,aAAY,CACTC,aAAa3M,EAAAA,EAAAA,UAAS,iBACtBkE,OAAOlE,EAAAA,EAAAA,UAAS,gBAChB/C,MAAO6G,EAAOiD,QACduF,WAAY1F,EACZ/K,MAAOmP,EACPqB,SAAU3C,EAAgB,WAC1BkD,UAAU,EACVC,SAAU,SAACzO,GAAuC,OAC9C0M,EAAc,UAAW1M,EAAE0O,OAAO7P,OAAO,EAAK,EAElD6K,UAAQ,EACRiF,8BAA8B,MAI1C,8BAAU1N,UAAU,0BAChB,kBAAC,EAAA6M,eAAc,KACX,kBAAC,KAAK,CAACxQ,KAAK,mBACP,gBAAG8L,EAAK,EAALA,MAAK,OACL,kBAAC,EAAA2E,aAAY,KACL3E,EAAK,CACT4E,GAAG,0BACH,gBAAc,OACdrE,aAAa,MACbF,KAAK,OACL3D,OAAOlE,EAAAA,EAAAA,UAAS,mBAChBnE,MAAOoP,EACPoB,SAAU3C,EAAgB,kBAC1B4C,WAAY1F,EACZ2F,gBAAiB,SAACpF,GAAsB,OACpCgE,EAAoBhE,EAAM,iBAAiB,EAE/CqF,eAAe,aACf1E,UAAQ,IACV,KAId,kBAAC,EAAA2E,cAAa,KACV,kBAAC,EAAAC,aAAY,CACTC,aAAa3M,EAAAA,EAAAA,UAAS,iBACtBkE,OAAOlE,EAAAA,EAAAA,UAAS,mBAChB/C,MAAO6G,EAAOgF,eACdwD,WAAY1F,EACZ/K,MAAOoP,EACPoB,SAAU3C,EAAgB,kBAC1BkD,UAAU,EACVC,SAAU,SAACzO,GAAuC,OAC9C0M,EAAc,iBAAkB1M,EAAE0O,OAAO7P,OAAO,EAAK,EAEzD6K,UAAQ,EACRiF,8BAA8B,MAI1C,8BAAU1N,UAAU,0BAChB,kBAAC,EAAA6M,eAAc,KACX,kBAAC,KAAK,CAACxQ,KAAK,kBACP,gBAAG8L,EAAK,EAALA,MAAK,OACL,kBAAC,EAAA2E,aAAY,GACTC,GAAG,yBACH,gBAAc,OACdvE,KAAK,OACLE,aAAa,MACb7D,OAAOlE,EAAAA,EAAAA,UAAS,kBAChBnE,MAAOqP,EACPmB,SAAU3C,EAAgB,iBAC1B4C,WAAY1F,EACZ2F,gBAAiB,SAACpF,GAAsB,OACpCgE,EAAoBhE,EAAM,gBAAgB,EAE9CqF,eAAe,cACXhF,GACN,KAId,kBAAC,EAAAiF,cAAa,KACV,kBAAC,EAAAC,aAAY,CACTC,aAAa3M,EAAAA,EAAAA,UAAS,iBACtBkE,OAAOlE,EAAAA,EAAAA,UAAS,kBAChB/C,MAAO6G,EAAOsE,cACdvM,MAAOqP,EACPmB,SAAU3C,EAAgB,iBAC1B4C,WAAY1F,EACZgG,UAAU,EACVC,SAAU,SAACzO,GAAuC,OAC9C0M,EAAc,gBAAiB1M,EAAE0O,OAAO7P,OAAO,EAAK,EAExD6K,UAAQ,MAIpB,8BAAUzI,UAAU,0BAChB,kBAACgI,EAAU,CACP+E,GAAG,qCACH1Q,KAAK,4BACLwI,OAAOlE,EAAAA,EAAAA,UAAS,8BAChB2M,aAAa3M,EAAAA,EAAAA,UAAS,8BACtB/C,MAAO6G,EAAO4E,0BACdsE,OAAQnC,EACRwB,SAAU3C,EAAgB,6BAC1BnC,UAAQ,KAGhB,kBAAC,KAAK,CAAC7L,KAAK,2BACP,gBACG8L,EAAK,EAALA,MAAK,IACLyF,KAAQpR,EAAK,EAALA,MAAO8L,EAAO,EAAPA,QAAO,OAEtB,kBAAC,aAAc,KACX,kBAAC,EAAAuE,eAAc,KACX,kBAAC,EAAAgB,SAAQ,KACD1F,EAAK,CACTmF,aAAa3M,EAAAA,EAAAA,UAAS,2BACtBmN,oBAAkB,EAClBzR,KAAM8L,EAAM9L,KACZ0R,KAAMnF,EACNhL,MAAO6G,EAAOmE,uBACdoE,SAAU3C,EAAgB,0BAC1BmD,SAAUjC,EACVC,WAAYA,EACZhP,MAAO8L,GAAW9L,EAClB2Q,eAAe,iBAGvB,kBAAC,EAAAC,cAAa,KACV,kBAAC,EAAAC,aAAY,KACLlF,EAAK,CACTmF,aAAa3M,EAAAA,EAAAA,UAAS,iBACtBtE,KAAM8L,EAAM9L,KACZwI,OAAOlE,EAAAA,EAAAA,UAAS,2BAChBsM,WAAYrE,EACZhL,MAAO6G,EAAOmE,uBACdoE,SAAU3C,EAAgB,0BAC1B7N,MAAO8L,GAAW9L,EAClBgR,SAAU,SAACzO,GACPwM,EAAaxM,GACb0M,EACI,yBACA1M,EAAE0O,OAAO7P,OACT,EAER,EACAoQ,YAAY,oCAGP,OAMrC,kBAAC,EAAA/K,MAAA,OAAY,CAAC2J,aAAalL,EAAAA,EAAAA,YAAYuM,eAAa,GAC/C7D,GAAc,kBAAC,EAAA8D,uBAAsB,CAACxN,QAAS0J,IAChD,kBAAC,EAAAzF,iBAAgB,CACb+H,YAAarI,IAAiBqH,GAAW/B,OAAOwE,KAAK9F,GAAQiC,OAAS,EACtE8D,aAAa1M,EAAAA,EAAAA,YACbmD,OAAOlE,EAAAA,EAAAA,UAAS,WAGrB,GAIvB,GAGZ,qPCpeA,8lGAAAyI,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,0fAAAA,EAAA,EAAAA,EAAA,iBAAAA,IAAA,uBAAAA,GAAA,UAAAA,GAAA,GAAAA,EAAA,4gCAAAA,GAAA,gEAAAA,GAAA,0JAAAA,EAAA,6FAAAA,GAAA,mIAAAA,IAAA,4SAAAA,IAAA,2OAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SA0HA,SA/GoC/B,EAAAA,EAAAA,KAAS,YAAqD,IAAlD9E,EAAQ,EAARA,SACpCzE,GAAW+I,EAAAA,EAAAA,MAAX/I,OAEAwJ,EAA8ExJ,EAA9EwJ,iBAAkB+G,EAA4DvQ,EAA5DuQ,oBAAqB9G,EAAuCzJ,EAAvCyJ,eAAgB+G,EAAuBxQ,EAAvBwQ,mBAEV,IAAlBhL,IAAAA,SAAe,IAAG,GAA9C8G,EAAU,KAAEmE,EAAY,KACyB,IAArBjL,IAAAA,UAAe,GAAM,GAAjDyB,EAAU,KAAE9G,EAAY,KAO7B,IANmCqF,IAAAA,SAA4B,CAC7DoE,QAAS,GACT+B,eAAgB,GAChBV,cAAe,GACfM,0BAA2B,GAC3BT,uBAAwB,KAC1B,GANK4F,EAAW,KAAEC,EAAa,KAQ3BC,EAAuB,6BAAG,WAAOvD,GAA8B,wFAG5D7D,EAAkB,CAAF,gCACMnK,EAAAA,GAAAA,WAAAA,QAAAA,cAAmC,OAA5C,KAARZ,EAAW,EAAH,MAEDC,MAAO,CAAF,eAIb,OAHD+R,EAAahS,EAASC,MAAMkE,SACC,mBAAlByK,GACPA,GAAc,GACjB,0BAGLwD,EAAwBpS,EAASqS,aAAa,wBAE9CD,EAAwBrH,EAAiB,QAGrCI,GAHqC,EAIzCiH,GADIjH,QAAS+B,EAAc,EAAdA,eAAgBV,EAAa,EAAbA,cAAeM,EAAyB,EAAzBA,0BAA2BT,EAAsB,EAAtBA,uBAG3E6F,EAAc,OACPD,GAAW,IACd9G,QAASmH,EAAUnH,IAAY,GAC/B+B,eAAgBoF,EAAUpF,IAAmB,GAC7CV,cAAe8F,EAAU9F,IAAkB,GAC3CM,0BAA2BA,GAA6B,GACxDT,uBAAwBA,GAA0B,MACnD,4CACN,gBA7B4B,sCA+B7BtF,IAAAA,WAAgB,WACZrF,GAAa,GACbyQ,IAA0BI,MAAK,WAC3B7Q,GAAa,EACjB,GAEJ,GAAG,IAEH,IAAM4Q,EAAY,SAACjR,GACf,IAAOmR,EAA8D,EAApDxH,aAAc,EAAdA,EAAgByH,QAAO,SAAAlH,GAAI,OAAIA,EAAKlK,QAAUA,CAAK,IAAC,GAAxD,GACb,OAAOqR,EAAAA,EAAAA,kBAAiBF,EAAQ,CAAC,UAAYnR,CACjD,EAEMsR,EAAe,SAACC,EAAgBvR,GAClC6Q,EAAc,OACP7Q,GAAK,IACR8J,QAASmH,EAAUjR,EAAM8J,SACzB+B,eAAgBoF,EAAUjR,EAAM6L,gBAChCV,cAAe8F,EAAUjR,EAAMmL,iBAEvC,EAEMqG,EAAW,6BAAG,WAAOpI,EAAepJ,EAAoBuN,GAA6B,mFAAiB,OAAJ,EAAH,gCACnF,CAAF,gCAEWhO,EAAAA,GAAAA,YAAeS,GAAM,OAA9B,KAAJS,EAAO,EAAH,MACD7B,MAAO,CAAF,eAEW,OADrB+R,EAAalQ,EAAK7B,MAAMkE,SACxByK,GAAc,GAAO,0BAGzBuD,EAAwBvD,GAAe,QAE3C+D,EAAalI,EAAOpJ,GACpB0Q,EAAmB,OAAKhH,GAAqB1J,IAC7C2E,EAASyE,EAAOpJ,GAAO,4CAC1B,gBAdgB,0CAgBjB,OACI,kBAAC,EAAA4O,kBAAiB,CACdxM,UAAU,6BACV+M,GAAG,6BACHL,aAAaN,EAAAA,EAAAA,aACbD,cAAc,QAEd,yBAAKnM,UAAU,iDACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,IAAIpB,OAAO,OAAOyC,MAAM,SAASvE,KAAK,MAC1CU,EAAAA,EAAAA,UAAS,oCAGlB,yBAAKX,UAAU,oCACX,kBAAC,EAAsB,CACnBoK,WAAYA,EACZpD,MAAO,EACPjC,WAAYA,EACZxC,SAAU6M,EACV7H,eAAgBA,EAChB2C,kBAAmBmE,IACnBlE,eAAgBqE,KAKpC,62ECsHA,SApMyCnH,EAAAA,EAAAA,KAAS,YAA0D,IAAvDgI,EAAQ,EAARA,SACjD,GAAkCxI,EAAAA,EAAAA,MAA1ByI,EAAa,EAAbA,cAAexR,EAAM,EAANA,OAEfyR,EACJD,EADIC,qBAAsBC,EAC1BF,EAD0BE,0BAA2BC,EACrDH,EADqDG,wBAAyBC,EAC9EJ,EAD8EI,4BAI9EC,EASA7R,EATA6R,sBACArI,EAQAxJ,EARAwJ,iBACAsI,EAOA9R,EAPA8R,MACAC,EAMA/R,EANA+R,uBACAC,EAKAhS,EALAgS,gBACAvI,EAIAzJ,EAJAyJ,eACAwI,EAGAjS,EAHAiS,YACAC,EAEAlS,EAFAkS,gBACA/K,EACAnH,EADAmH,eAGJ,GAAgFO,EAAAA,EAAAA,KAAxEI,EAA+B,EAA/BA,gCAAiCF,EAAkC,EAAlCA,mCAEnCuK,EAAmB,CACrBV,qBAAAA,EACAC,0BAAAA,EACAC,wBAAAA,EACAC,4BAAAA,EACAC,sBAAAA,EACArI,iBAAAA,EACAsI,MAAAA,EACAC,uBAAAA,EACAC,gBAAAA,EACAvI,eAAAA,EACAwI,YAAAA,EACAC,gBAAAA,EACA/K,eAAAA,EACAW,gCAAAA,EACAF,mCAAAA,EACA2J,SAAAA,GAGqC,IAAjB/L,IAAAA,SAAe,GAAE,GAAlC4M,EAAI,KAAEC,EAAO,KACiC,IAAlB7M,IAAAA,SAAe,IAAG,GAA9C8G,EAAU,KAAEmE,EAAY,KACzB6B,EAAcF,EAChBG,EAAa/M,IAAAA,QAAa,GAAMxE,QAEpC,GAAsEqH,EAAAA,EAAAA,6BAA4BlB,GAA1FqL,EAAwB,EAAxBA,yBAA0BC,EAA+B,EAA/BA,gCAE5BC,EAAoCC,EAA0B,kCAE9DC,EAAmD,CACrDC,KAAMC,EACNC,WAAY,CACRrJ,UAAW,WAEfsJ,gBAAiB,CACb,8BACA,wBACA,uBACA,4BACA,0BACA,oCAIFC,EAAmD,CACrDJ,KAAMK,EACNH,WAAY,CAAC,EACbC,gBAAiB,IAGfG,EAAgE,CAClEN,KAAMO,EACNL,WAAY,CACRnJ,QAAS,GACT+B,eAAgB,GAChBV,cAAe,GACfM,0BAA2B,GAC3BT,uBAAwB,IAE5BkI,gBAAiB,CAAC,iBAAkB,oBAUlCK,EAAgB,WAClB,QAAI1K,EAAAA,GAAAA,SAAwBb,IAAmC4K,KAGvD,CAAC,UAAW,YAAYzJ,SAAS4I,EAAsByB,gBACnE,EAEMC,GACD3L,GAAsCE,IAAoCa,EAAAA,GAAAA,aAEzE6K,EAAuB,GAAH,UAhBlB1L,IAAoCa,EAAAA,GAAAA,aAC7B6J,EAEJC,GAciB,CAACG,GAAc,IAAE,EACrCS,IAAkB,CAACJ,GAAc,IAAE,EACnCM,EAA+B,CAACJ,GAA2B,KAGmC,KAA5E3N,IAAAA,SAAuDgO,GAAqB,GAA/FC,GAAK,MAAEC,GAAQ,MAMtBlO,IAAAA,WAAgB,WACZiM,GACJ,GAAG,CAACgC,GAAOhC,IAEXjM,IAAAA,WAAgB,WACZ0M,GACJ,GAAG,CAACA,IAEJ,IAAMyB,GAAU,WACZpB,GAAa,EACbhB,GACJ,EAEMH,GAAe,SAAClI,EAAepJ,GACjC,GAAKyS,EAAL,CACA,IAAMqB,EAAuD,EAAIH,IACjEG,EAAa1K,GAAO6J,WAAajT,EACjC4T,GAASE,EAHc,CAI3B,EAiBMC,GAAa,SAAC5H,GAChB,OAAOA,EAAMwH,GAAMnB,GAAarG,GAAOwH,GAAMnB,EACjD,EAEMwB,GAAgBD,GAAW,QAE3Bd,GAAac,GAAW,cAExBE,IAEAF,GAAW,oBAAsB,IAAgEG,QACnG,SAACC,EAAgBjK,GACb,OAAO6B,OAAOqI,OAAOD,EAAgB,KAChCjK,EAAOmI,EAAiBnI,IAEjC,GACA,CAAC,GAOL,OAJIqJ,MACAU,GAAYrB,kCAAoCA,GAIhD,kBAAC,EAAAhE,kBAAiB,CACdxM,UAAU,0BACV+M,GAAG,yCACHL,aAAaN,EAAAA,EAAAA,aACbD,cAAc,QAEd,yBAAKnM,UAAU,gCAAgC,cAAY,mCACvD,kBAAC4R,GAKG,GACAhU,MAAOiT,GACP7J,MAAOoJ,EACP7N,SAtDY,SAACyE,EAAOpJ,GAvBhC2Q,EAAa,IAyBT2B,EAAO,EAAIqB,GAAMjH,QACjB4E,GAAalI,EAAOpJ,GACpBuS,EAAQD,EAAO,IACZuB,IACX,EAiDgBnR,OAAO,OACPgC,SAhDC,WACT4N,EAAO,GAAK,GACZC,EAAQD,EAAO,GACf3B,EAAa,KACVkD,IACX,EA4CgBxK,OAAQiI,GACR9E,WAAYA,GACRyH,MAKxB,qVCrOMI,EAAiB,SAAH,OAAM1R,EAAQ,EAARA,SAAU0D,EAAS,EAATA,UAAS,OACzC,yBAAKjE,UAAU,uBACX,kBAAC,EAAAmB,KAAI,CACDnB,UAAU,4BACVD,KAAMQ,IAAagE,EAAAA,GAAAA,IAAoB,mBAAqB,uBAC5DlE,MAAM,MACNC,OAAO,QAEX,kBAAC,EAAAS,KAAI,CAACoC,GAAG,IAAIqB,MAAM,SAASvE,KAAK,IAAI8B,OAAO,QACxC,kBAAC,EAAAqB,SAAQ,CACLC,kBAAkB,wBAClBoB,OAAQ,CACJlE,UAAUK,EAAAA,EAAAA,qBAAoBL,OAI1C,kBAAC,EAAAQ,KAAI,CAACoC,GAAG,IAAIqB,MAAM,SAASxE,UAAU,mCAAmCC,KAAK,MACzEM,IAAagE,EAAAA,GAAAA,IACV,kBAAC,EAAAnB,SAAQ,CAACC,kBAAkB,iGAE5B,kBAAC,EAAAD,SAAQ,CAACC,kBAAkB,sFAGpC,kBAAC,EAAApC,OAAM,CACHjB,UAAU,4FACVE,QAAS+D,GAET,kBAAC,EAAAlD,KAAI,CAACd,KAAK,KAAK8B,OAAO,OAAO2C,MAAM,sBAChC,kBAAC,EAAAtB,SAAQ,CAACC,kBAAkB,sBAGlC,EAGJ6O,EAAgB,SAAH,GAAoF,IAA9EtC,EAAK,EAALA,MAAOrP,EAAQ,EAARA,SAAU4R,EAAa,EAAbA,cAChCC,EAAmB9O,IAAAA,aAAkB,WACvC,IAAI+O,EAAc9R,IAAagE,EAAAA,GAAAA,IAAoB,EAAI,EAInD4N,IAAkBG,EAAAA,GAAAA,KAClBD,EAAcE,OAAO,GAAD,OAAIF,EAAW,MAC5BF,IAAkBG,EAAAA,GAAAA,OACzBD,EAAcE,OAAO,GAAD,OAAIF,EAAW,OAGvC,IAAMG,EACFjS,IAAagE,EAAAA,GAAAA,IACP,sCACA,0CAEVpH,EAAAA,GAAAA,YAAeyS,EAAO4C,EAAqB,CACvCC,eAAgB,CACZJ,YAAAA,IAGZ,GAAG,CAACzC,EAAOrP,EAAU4R,IAMrB,OAJA7O,IAAAA,WAAgB,WACZ8O,GACJ,GAAG,CAACA,IAGA,kBAAC,EAAAM,kBAAiB,CACd5P,OAAOnC,EAAAA,EAAAA,UAAS,2BAChBgS,UAAUhS,EAAAA,EAAAA,UAAS,8EAA+E,CAC9FJ,UAAUK,EAAAA,EAAAA,qBAAoBL,KAElCqS,gBAAgBjS,EAAAA,EAAAA,UAAS,6BACzBkS,YAAYlS,EAAAA,EAAAA,UAAS,gBACrBmS,eAAenS,EAAAA,EAAAA,UAAS,mBACxByR,iBAAkBA,GAG9B,EA+BA,QA7B+B,SAAH,GAAoF,IAA9E7R,EAAQ,EAARA,SAAUqP,EAAK,EAALA,MAAOuC,EAAa,EAAbA,cACzCY,EAAiBzP,IAAAA,SAEjB0P,EAAQ,CACV,CACIC,UAAW,kBAAChB,EAAc,CAAC1R,SAAUA,EAAU0D,UAAW,wBAA4B,QAA5B,EAAM8O,EAAejU,eAAO,aAAtB,EAAwBoU,YAAY,KAExG,CACID,UACI,kBAAC,IAA0B,CACvBjP,eAAerD,EAAAA,EAAAA,UAAS,WACxBJ,SAAUA,EACV0D,UAAW,wBAA4B,QAA5B,EAAM8O,EAAejU,eAAO,aAAtB,EAAwBoU,YAAY,EACrD5Q,SAAU,wBAA4B,QAA5B,EAAMyQ,EAAejU,eAAO,aAAtB,EAAwBqU,YAAY,KAIhE,CACIF,UAAW,kBAACf,EAAa,CAAC3R,SAAUA,EAAUqP,MAAOA,EAAOuC,cAAeA,MAInF,OACI,yBAAKnS,UAAU,wBACX,kBAAC,EAAAoT,UAAS,CAAC9G,IAAKyG,EAAgBC,MAAOA,IAGnD,qVCvGA,IAAMK,EAA4B,SAAH,OAAMxQ,EAAW,EAAXA,YAAayQ,EAAW,EAAXA,YAAW,OACzD,yBAAKtT,UAAU,iCACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,oBAAoBE,KAAM,MACrC,kBAAC,EAAAc,KAAI,CAACoC,GAAG,IAAIlD,KAAK,MAAMuE,MAAM,UACzB8O,EACG,kBAAC,EAAAlQ,SAAQ,CAACC,kBAAkB,6CAE5B,kBAAC,EAAAD,SAAQ,CAACC,kBAAkB,qCAGpC,kBAAC,EAAApC,OAAM,CAACf,QAAS2C,EAAa7C,UAAU,oCAAoC2D,SAAO,EAACD,OAAK,GACrF,uBAAG1D,UAAU,iBAAgBW,EAAAA,EAAAA,UAAS,QAExC,EAGJ4S,EAA0B,SAAH,GAQG,IAP5BC,EAAsB,EAAtBA,uBACAC,EAA0B,EAA1BA,2BACAV,EAAc,EAAdA,eACAxQ,EAAQ,EAARA,SACAmR,EAAe,EAAfA,gBACA7Q,EAAW,EAAXA,YACA8Q,EAAgB,EAAhBA,iBAEA,GAAIF,EACA,OAAO,kBAACJ,EAAyB,CAACxQ,YAAaA,EAAayQ,aAAW,IAG3E,IAEMnJ,EAAiB,CAAEyJ,aAAc,GAAIC,aAAc,GAAIC,cAAe,GAAF,OAFpD,aAItB,OACI,yBAAK9T,UAAU,0CACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,IAAIlD,KAAK,KAAKD,UAAU,mCAC7B,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,oKAEhC,kBAAC,EAAAtC,KAAI,CAACoC,GAAG,IAAIlD,KAAK,KAAKD,UAAU,mCAC7B,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,mHAE/BmQ,GACG,kBAAC,EAAAzS,KAAI,CACDoC,GAAG,IACHuB,MAAM,cACNzE,KAAK,KACLD,UAAU,sCACV,cAAY,6BAEXwT,GAGT,kBAAC,KAAM,CAACrP,cAAegG,EAAgBQ,SAAUgJ,EAAkBpR,SAAUA,IACxE,gBAAG8B,EAAY,EAAZA,aAAcgE,EAAM,EAANA,OAAQ0L,EAAe,EAAfA,gBAAiBtP,EAAM,EAANA,OAAQ6D,EAAO,EAAPA,QAAO,OACtD,kBAAC,KAAI,CAACtI,UAAU,sCAAsCuM,YAAU,GAC5D,kBAAC,KAAK,CAAClQ,KAAK,iBACP,gBAAG8L,EAAK,EAALA,MAAK,OACL,kBAAC,EAAA6L,cAAa,KACN7L,EAAK,CACTO,aAAa,mBACb7D,OAAOlE,EAAAA,EAAAA,UAAS,6BAChBnE,MAAO8L,EAAQsL,cAAgBvL,EAAOuL,aACtCnL,UAAQ,IACV,IAGV,kBAAC,KAAK,CAACpM,KAAK,iBACP,gBAAG8L,EAAK,EAALA,MAAK,OACL,kBAAC,EAAA8L,cAAa,CACVC,MAAO/L,EAAMvK,MACbuW,aAAc7L,EAAQuL,eAAgBxL,EAAOwL,cAC7CO,0BAA0BC,EAAAA,EAAAA,oBAAmBC,oBAE5C,gBAAGC,EAAW,EAAXA,YAAW,OACX,kBAAC,EAAAP,cAAa,KACN7L,EAAK,CACTO,aAAa,eACb7D,OAAOlE,EAAAA,EAAAA,UAAS,yBAChB6T,MACKD,IACD5T,EAAAA,EAAAA,UACI,wGAGRnE,MAAO8L,EAAQuL,cAAgBxL,EAAOwL,aACtCrG,SAAU,SAACzO,GACPgV,EAAgB,gBAAgB,GAAM,GACtC5L,EAAMqF,SAASzO,EACnB,EACAiB,UAAU,qCACVyI,UAAQ,IACV,GAEM,IAGxB,yBAAKzI,UAAU,iCACX,kBAAC,EAAAiB,OAAM,CACHjB,UAAU,+BACV0M,YACIrI,IACCI,EAAOmP,eACPnP,EAAOoP,cACRlK,OAAOwE,KAAK9F,GAAQiC,OAAS,EAEjCvF,WAAYV,EACZ/C,MAAMX,EAAAA,EAAAA,UAAS,4BACfgD,SAAO,EACPD,OAAK,IAET,kBAAC,EAAAzC,OAAM,CACHjB,UAAU,+BACVwI,KAAK,SACLtI,QAAS,WAAM,MACXwT,EAAgB,YACM,QAAtB,EAAAX,EAAejU,eAAO,OAAtB,EAAwBoU,YAC5B,EACA5R,MAAMX,EAAAA,EAAAA,UAAS,qCACf8T,UAAQ,EACR/Q,OAAK,KAGV,IAK3B,EAEA6P,EAAwB1P,UAAY,CAChC2P,uBAAwB1P,IAAAA,OACxB2P,2BAA4B3P,IAAAA,KAC5BiP,eAAgBjP,IAAAA,OAChBvB,SAAUuB,IAAAA,KACV4P,gBAAiB5P,IAAAA,KACjBjB,YAAaiB,IAAAA,KACb6P,iBAAkB7P,IAAAA,MAGtB,wVClJA,8lGAAAsF,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,0fAAAA,EAAA,EAAAA,EAAA,iBAAAA,IAAA,uBAAAA,GAAA,UAAAA,GAAA,GAAAA,EAAA,y0BAAAA,GAAA,gEAAAA,GAAA,0JAAAA,EAAA,6FAAAA,GAAA,mIAAAA,IAAA,4SAAAA,IAAA,2OAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SAiCA,IAAMsL,EAAqB,SAAH,GAA4D,QAAtDC,WAAAA,OAAU,IAAG,KAAE,EAAEC,EAAS,EAATA,UACiB,IAAlCtR,IAAAA,SAAuBqR,GAAW,GAArDE,EAAK,KAAEC,EAAQ,KAmBtB,OAjBAxR,IAAAA,WAAgB,WACZ,IAAIyR,EAUJ,OARc,IAAVF,EACAE,EAAWC,YAAW,WAClBF,EAASD,EAAQ,EACrB,GAAG,KAEHD,IAGG,WACHK,aAAaF,EACjB,CAGJ,GAAG,CAACF,IACG,0BAAM7U,UAAU,aAAa6U,EACxC,EAEMK,EAAmB,SAAH,GAMG,IALrBC,EAAe,EAAfA,gBACAC,EAAY,EAAZA,aACAjD,EAAa,EAAbA,cACAkD,EAAM,EAANA,OACAvB,EAAa,EAAbA,cAEgG,IAA9BxQ,IAAAA,UAAwB,GAAM,GAAzFgS,EAAgC,KAAEC,EAAqB,KACiC,IAA9BjS,IAAAA,UAAwB,GAAM,GAAxFkS,EAA2B,KAAEC,EAAyB,KAE7DnS,IAAAA,WAAgB,WACZoS,aAAaC,QAAQ,4BAA6B,CAACN,EAAQlD,EAAeiD,GAAcQ,KAAK,MAC7FF,aAAaC,QAAQ,0BAA2B7B,GAChDqB,GAEJ,GAAG,IAWH,OACI,yBAAKnV,UAAU,+BACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,cAAcE,KAAM,MAC/B,wBAAID,UAAU,sCACV,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,6BAEhC,kBAAC,EAAAtC,KAAI,CAACoC,GAAG,IAAIlD,KAAK,KAAKuE,MAAM,UACzB,kBAAC,EAAApB,SAAQ,CAACC,kBAAkB,oEAE9BiS,GACE,kBAAC,EAAArU,OAAM,CAACjB,UAAU,6CAA6C2D,SAAO,EAACzD,QAnBvD,WACxBqV,GAAsB,EAC1B,GAkBgB,kBAAC,EAAAnS,SAAQ,CAACC,kBAAkB,+BAGnCiS,GACG,oCACI,kBAAC,EAAAvU,KAAI,CACDoC,GAAG,IACHlD,KAAK,KACLuE,MAAM,SACNzC,OAAO,OACP/B,UAAU,2CAEV,kBAAC,EAAAoD,SAAQ,CAACC,kBAAmB,+BAEjC,kBAAC,EAAAtC,KAAI,CAACoC,GAAG,IAAIlD,KAAK,KAAKuE,MAAM,UACzB,kBAAC,EAAApB,SAAQ,CAACC,kBAAkB,iFAEhC,kBAAC,EAAApC,OAAM,CACHjB,UAAU,6CACV0D,OAAK,EACLC,SAAO,EACPqJ,SAAUwI,EACVtV,QAtCO,WACvBiV,IACAM,GAA0B,EAC9B,IAqCsBD,GAA+B,kBAAC,EAAApS,SAAQ,CAACC,kBAAkB,iBAC5DmS,GACG,oCACI,kBAAC,EAAApS,SAAQ,CACLC,kBAAkB,0BAClBwS,WAAY,CACR,kBAACnB,EAAkB,CACf3K,IAAK,EACL6K,UAAW,kBAAMa,GAA0B,EAAM,EACjDd,WAAY,WAWxD,EAEMmB,EAAsC,SAAH,OAAM/C,EAAc,EAAdA,eAAgBC,EAAK,EAALA,MAAK,OAChE,kBAAC,EAAAI,UAAS,CAAC9G,IAAKyG,EAAgBC,MAAOA,EAAOhT,UAAU,uBAAuB+V,cAAcpV,EAAAA,EAAAA,UAAS,SAAW,EAG/GqV,EAA+B,SAAH,GASG,IARjCnT,EAAW,EAAXA,YACAoT,EAAc,EAAdA,eACArG,EAAK,EAALA,MACA8D,EAAe,EAAfA,gBACAX,EAAc,EAAdA,eACAxS,EAAQ,EAARA,SACA2V,EAAsB,EAAtBA,uBACA/D,EAAa,EAAbA,cAEuE,IAAzB7O,IAAAA,SAAuB,GAAE,GAAhE6S,EAAgB,KAAEC,EAAiB,KAC0C,IAA1B9S,IAAAA,SAAuB,IAAG,GAA7EkQ,EAAsB,KAAE6C,EAAuB,KACuC,IAA9B/S,IAAAA,UAAwB,GAAM,GAAtFmQ,EAA0B,KAAE6C,EAAwB,KAGrDC,EAAmB,8CACnB5C,EAAmB,SAAClP,GACtB,IAAM4D,EAAoC,CAAC,EAsB3C,OAnBKmO,EAAAA,EAAAA,aAAY/R,EAAOoP,aAAc,CAC9B4C,IAAK,EACLC,IAAK,MAODC,EAAAA,EAAAA,eAAclS,EAAOoP,cAEtBpP,EAAOoP,aAAa+C,gBAAkBhH,EAAMgH,gBACnDvO,EAAOwL,cAAelT,EAAAA,EAAAA,UAAS,4DAF/B0H,EAAOwL,cAAeQ,EAAAA,EAAAA,oBAAmBjQ,WALzCiE,EAAOwL,cAAelT,EAAAA,EAAAA,UAAS,6DAA8D,CACzFkW,WAAY,EACZC,WAAY,KAQfrS,EAAOmP,mBAAwC/U,IAAxB4F,EAAOmP,eAC/BvL,EAAOuL,cAAejT,EAAAA,EAAAA,UAAS,2BAG5B0H,CACX,EAUM9F,EAAWe,IAAAA,YAAiB,eAjMtC,EAiMsC,GAjMtC,EAiMsC,UAC9B,WAAOmB,GAAuC,0EACrCwR,EAAgB,CAAF,gEAICc,EAAAA,QAAAA,eAAwB,EAAD,CAAGC,MAAOf,GAAmBxR,IAAS,QAA3EjI,EAAQ,EAAH,MAdf6Z,EAgBkB7Z,IAZlB6Z,EAAwB,IACxBC,GAAyB,IAcpB,0CA5Mb,+KA6MS,mDAZ6B,GAa9B,CAACL,IAUCgB,EACF,kBAAC,aAAc,KACX,kBAAC,EAAApK,eAAc,KACX,kBAAC,EAAAF,iBAAgB,CAACrM,OAAQiW,EAAkB3J,aAAalL,EAAAA,EAAAA,YAAYwV,UAAU,GAC3E,kBAAC,EAAsB,CACnBrU,YAAaA,EACbtC,SAAUA,EACVqP,MAAOA,EACPuC,cAAeA,MAI3B,kBAAC,EAAA/E,cAAa,KACV,kBAAC,EAAAZ,kBAAiB,CAACxM,UAAU,uCAAuCmM,cAAc,SAC9E,kBAAC,EAAsB,CACnBtJ,YAAaA,EACbtC,SAAUA,EACVqP,MAAOA,EACPuC,cAAeA,OAOnC,OAAI5R,IAAagE,EAAAA,GAAAA,QAA8B0S,EAG3C,kBAAC,EAAAE,KAAI,CAACC,aAAcjB,EAAkBkB,eAnCZ,SAACrQ,GAC3BoP,EAAkBpP,GAClBkP,EAAuBlP,GACvBqP,EAAwB,IACxBC,GAAyB,EAC7B,EA8BiFgB,KAAG,GAC5E,yBACIzS,OAAOlE,EAAAA,EAAAA,UAAS,wBAAyB,CACrCJ,UAAUK,EAAAA,EAAAA,qBAAoBL,MAGjC0W,GAEL,yBAAKpS,OAAOlE,EAAAA,EAAAA,UAAS,sBACjB,kBAAC,EAAAkM,eAAc,KACX,kBAAC,EAAAF,iBAAgB,CAACrM,OAAQiW,GACtB,kBAAC,EAAuB,CACpB9C,2BAA4BA,EAC5B5Q,YAAaA,EACb2Q,uBAAwBA,EACxBG,iBAAkBA,EAClBpR,SAAUA,EACVmR,gBAAiBA,EACjBX,eAAgBA,MAI5B,kBAAC,EAAA3F,cAAa,KACV,kBAAC,EAAAZ,kBAAiB,CAACxM,UAAU,uCAAuCmM,cAAc,SAC9E,kBAAC,EAAuB,CACpBsH,2BAA4BA,EAC5B5Q,YAAaA,EACb2Q,uBAAwBA,EACxBG,iBAAkBA,EAClBpR,SAAUA,EACVmR,gBAAiBA,EACjBX,eAAgBA,OAO5C,EAyGA,SAvGgC1L,EAAAA,EAAAA,KAC5B,YAQgC,IAP5BkQ,EAAU,EAAVA,WACAhX,EAAQ,EAARA,SACA0V,EAAc,EAAdA,eACApT,EAAW,EAAXA,YACA2U,EAAqB,EAArBA,sBACAC,EAAsB,EAAtBA,uBACAC,EAAe,EAAfA,gBAEA,GAAuB7Q,EAAAA,EAAAA,MAAf/I,EAAM,EAANA,OAAQ6Z,EAAE,EAAFA,GAER/H,EAAU9R,EAAV8R,MACArK,EAA0BoS,EAA1BpS,UAAWD,EAAeqS,EAAfrS,WAEX6P,GAAoB3P,EAAAA,EAAAA,KAApB2P,gBAEFpC,EAAoDzP,IAAAA,SACP,IAAzBA,IAAAA,SAAuB,GAAE,GAA5C0D,EAAK,KAAE4Q,EAAQ,KAEyC,IAAtBtU,IAAAA,SAAe,QAAO,GAAxDwQ,EAAa,KAAEJ,EAAe,KAErC,IAAKuC,EAAgB,OAAO,KAE5B,IAMmB7M,EAab4J,EAAQ,CACV,CACIC,UACI,kBAAC+C,EAA4B,CACzBpG,MAAOA,EACPqG,eAAgBA,EAChBpT,YAAaA,EACb6Q,gBAAiBA,EACjBX,eAAgBA,EAChBxS,SAAUA,EACV2V,uBAde,SAAC9M,GAC5BwO,EAASxO,EACb,EAagB+I,cAAesF,KAI3B,CACIxE,UACI,kBAACiC,EAAgB,CACbG,OAAQqC,EACRvC,gBAAiBA,EACjBC,aAAcoC,EACdrF,cAAesF,EACf3D,cAAeA,MAM/B,OACI,kBAAC,aAAc,CAAC+D,SAAU,kBAAC,EAAAC,SAAQ,OAC/B,kBAAC,EAAAjL,eAAc,KACX,kBAAC,EAAA5J,MAAK,CACFjD,UAAU,8BACVsF,WAAYA,EACZC,UAAWA,EACX3C,QAAS2U,EACTzU,OAtDLnC,EAAAA,EAAAA,UAAS,+BAAgC,CAC5CJ,UAAUK,EAAAA,EAAAA,qBAAoBL,KAsDtBsC,YAAaA,EACbvC,OAAO,QACPD,MAAM,QACN0X,0BAA0B,GAE1B,kBAACjC,EAAmC,CAAC9C,MAAOA,EAAOD,eAAgBA,MAG3E,kBAAC,EAAA3F,cAAa,KACV,kBAAC,EAAA4K,YAAW,CACRpV,QAAS2U,EACTU,UAAU,YACVC,QA9DG9O,EA8DepC,EA7DpB,IAANoC,GACOzI,EAAAA,EAAAA,UAAS,+BAAgC,CAC5CJ,UAAUK,EAAAA,EAAAA,qBAAoBL,MAG/BI,EAAAA,EAAAA,UAAS,oBAyDJwX,aAActV,GAEd,kBAACiT,EAAmC,CAAC9C,MAAOA,EAAOD,eAAgBA,MAKvF,0jFCxPAxS,EAAAA,SAAQ,GAER,IAAM6X,EAA6B,EAAM,4BACzC,EAA0B,0BAC1B,EAAe,EAAG,SACZhY,GAAQsB,EAAAA,EAAAA,YACR,WAKN,mBACI,CAAM,QAAQtB,QAAS,UAA0B,0BAAC,OAAO,EAAO,GAAI,EAAa,YAAOK,IAAU,OAC5F4X,OAEM,KANR,IAOQ,MATG,WAUC9X,IAA8BA,GAAQ,8BAC1C,qDAEP,OACA+X,CAAqC,mCAAkB,MAGnE,iCACKC,kBAAmB,wBAGrBC,EAAAA,SAAa,GAEb,IAAIC,EAA0B,2BAC1B,EACI,EAAC,kCAAS,EAAkB,qBAA8E,EAG9G7S,IAAAA,cAA+B,WAAKa,CAGpC,kBAAiB,8EACI,IAAkB,2BAAwE,cAC/G,8BACA,kBAAO,wEAEPb,IAAAA,cAA+B,WAAKa,CAGpC,kBAAO,sEAAoG,uCAC/G,8BACA,kBAAW,wEAGgBlG,MAAgBmY,EAAuB,UAAvBA,SAAAA,GAC3C,IAAMC,EAAW,EAAGhc,SACpB,EAAI4D,EAAQ,KACR,EAAO,0BAAM,EAAK,2BAA8B,wBAAC,IAAM,aAAI,OAAG,0BACjE,KAAM,+BACH,WAAmC,GAAM,iBAAI,OAAG,0BACnD,KAAM,iBACH,KAAIA,MAC4B,GAAI,EAAU,IAAC,IAAM,aAAI,OAAG,uBAC5D,eACA,KAAQiI,aAE4B,OAAe,YAAU,OAAG,uBAC5D,KAAU,UACN,eAA4C,MAAU,OAAG,uBAC7D,KAAK,WACD,KAAIkQ,6BACwC,EAAa,uBACzD,YACA,WAA0D,uBAC9D,iBACI,mBAAuD,OAAG,uBAAC,iBAEhE,wBAGkB,OAA8B,YAAU,OAAG,0BAC5D,KAAU,yBACN,eAA0C,MAAU,OAAG,0BAC3D,KAAK,wBACD,KAAIA,6BACqC,EAAa,0BACtD,wBACA,WAAwD,0BAC5D,8BACI,mBAAwD,OAAG,0BAAC,iCAExE,iBAMAE,YAAAA,eAiBI7E,EAA4B,SAAK,SACrC,EAAE,GACL,qBAEK8E,EAAc,YAAdA,EAOyB,KAJ3BlF,EAAgB,gBAChBpR,EAAQ,EAARA,SACAuW,EAAAA,EAAa,SACbC,EAAAA,EAAqB,iBAErB,aAEQ,EAAe,kBACX3U,EAAAA,6BACF,wBACF,eACA,SAAUuP,GACS,oBAElB,WACS,WACNtP,aACAmH,OACAD,EAAAA,EAAY,OACZjH,EAAY,EAAZA,aACAyP,EAAAA,EAAe,WACfzL,EAAO,EAAPA,aACA7D,EAAAA,EAAM,aACNuU,EAAY,EAAZA,gBAAY,YAEN,EAAQ,EAAE1U,OAAa,EACzB,sBACc,0BACV,YAEA,kBAAC,MAAI,CACD,UAAM/D,uHACN,cAAW,sBACJ,0BACT,SACF,SAAK,0CACD,MAAK,MACL,OAAM,QACO,0BACb,SAAqD,eAGjD,cACA,UAAQ,6CACMK,IAAAA,cAAoBL,EAAAA,SAAQ,CAC1C,mDACF,OACC,CACD,UAAS,gCAA0B,0BAAiD,UAElF,eACA,UAAQ,mDACMK,IAAAA,cAAoBL,EAAAA,SAAQ,CAC1C,kFACF,OACC,CACF,UAAU,gCAEO6D,IAAAA,cAAS,OACvB,UAAW,iBACX,kBAA0BiQ,EAAAA,cAAmBC,CAAkB,MAE9D,0BACG,aAAC,oCACgB,wBAAc,sCAEb1T,IAAAA,cAAoBL,EAAAA,cAAQ,CAC1C,aAAG,eACH,OACK+H,EAAAA,EAAAA,UAAQlE,wBAAmBA,CAGhC,UAAK,yBAAU,KAEf,MAAM,EAAEoH,UAAW,yCACnB,sBACIyN,EAAAA,SACJ,OAAE,EACF,kBAAmB1Y,GACrB,UAGR,EAEG,YAAU,kCACD,GAAkB,yBAA+V,UAElY,uDAEiBkE,IAAAA,cAAmBkF,EAAAA,SAAW,CAC5C,kBAAYtF,gWACI,qCAAgC,cAClCzD,EAAAA,UAAoBL,OAAQ,iBAC1C,WAAG,EACH,qBAAW,gCAGhB,wCAItB,gBASkC,KAJ/BuY,EAAAA,SAAa,OACbnF,EAAgB,EAAhBA,gBACAuF,EAAAA,EAAc,SACdH,EAAAA,EAAqB,cAErB,EAAuBzV,EAAM9E,iBAC7B,IAAgC8E,eAAkB,0BAA3Cc,EAAQ,aAEf,EAAoC,EAFR,iBAE6B,GACrD,EAAI7D,EAAagE,KAAsC,KAa3C,EAAQ,YACOuU,IAAAA,cAAc,GAC7B,WACA,SAAUvW,EACV,gBAA6C,mBAIzD,SApBe,SAAiB,KAE9B,IAAD,EADG,cAAAwQ,GAEAmG,EAAAA,EAAezU,UACnB,kDAGEuO,EACF,MAaIC,sBACI,gBAGe,kBAAkCrI,EAAAA,EAA8C,WACvFsO,4DAAiB9U,YAAYwG,SAAQ,KACxC,UACD,SAAU,OAA0C,oBAAC,MAIpE,6DAED,MAAoD,OAAG,+BAC1D,MAEKuO,MAAAA,KAGFC,EAAU,gBACVN,EAAa,EAAbA,cACAF,EAAU,EAAVA,aACAxO,EAAU,EAAVA,WACAiP,EAAe,gBACfN,EAAAA,EAAAA,WACAnT,EAAAA,EAAAA,WACAtD,EAAAA,EAAAA,gBACAgX,EAAgB,EAAhBA,sBACA/Y,EAAQ,kCACR8X,EAAAA,EAAAA,SACAK,EAAAA,EAAuB,iBACvBQ,EAAAA,EAAc,SACdvF,EAAAA,EAAAA,4BAEA,EAA2B4F,EAAQ,wBAC/B,EAAc,EAAK,iBACC,mBACpB,0BACA,MAAgB,kBAAhB,GACAX,EAAAA,EAAAA,UAAY,cAIVY,EAAAA,EAAAA,UAAAA,iBAA6CnB,CAAAA,IAA6BO,IAAAA,EAAAA,EAAAA,eAAAA,GAAAA,kBAAAA,EAAa,EA1MzFP,SAA8C,OAC9C,EAA4B1X,EAAS,4BACzC,eAEA,UAAmC,qBACtC,gDAQG4K,EAAAA,EAAAA,UAAe,oBA6L8E,EAE7F,4BAAMkO,EACF,WAAKC,IAEL,aACA,GAAIrB,EAIJ,SACH,IAGU,QAGK,kBAD+B,SAChB,6DAAyE,gCACxE,yBAAC,UAAW,2EAAW,0BAAI,OACzB,iBAAoD,KAEhE,MACYe,IAAAA,cAAW,YAAC,kBAAgB,oCACzC,kBAAC,MAAD,SAAG9U,EAAY,4BACE,GAAe,MACzB,sBACgBoV,IAAAA,cAAkB,QAC9B,YACUD,IAAAA,cAAa,oBACvB,WAAW,EACX,aAAOE,EACT,SACC,EAIN,6BAEzB,UAGI,SAGQ,SACkBhG,IAAAA,cAAiB,GACnC,WACA,cAAe,EACf,mBACF,iBAEV,kBAEMiG,sBAAe,QAGb,EAAc,mBACV,GACJ,IAAK,cACD,UACJ,gBACI,UAAqB,2BAEhC,QAEKC,OAAAA,WAaI,wBACF,eACA,SAAUlG,IACe,oBAExB,WACS,WACNtP,aACAmH,OACAD,EAAAA,EAAY,OACZjH,EAAY,EAAZA,aACAyP,EAAAA,EAAe,WACfzL,EAAO,EAAPA,aACA7D,EAAM,eACNuU,EAAY,EAAZA,gBAAY,YAEN,EAAQ,EAAE1U,OAAa,EACzB,sBAAe,0BAA0E,SACnF+T,GACiB,yBAACrY,UAAU,6EACrBoV,GAAgC,kBAC7B,OAAC,CACG,UACA,UAAQ,yDACMxU,WAAAA,UAA6B,gDACxBkZ,qHACfC,CAGAC,UAAAA,EAAAA,EAAAA,qBAAwBH,GAC5B,2CAGPzE,QAAAA,EACI,GAD4B,EAC7B,YACI,uBA5C5B,IAAO6E,EAAAA,GAAAA,QACX,GACO,EAKH,QAJP,cA2CiDrZ,SAAVL,EAAUK,UAA6B,gDACxBkZ,0FACfC,CACJ,sCAIf,eACD,4BAAK,QAAU,kBAEM,kBAAc,OAC3B,UAAOpZ,iBACOC,IAAAA,cAAoBL,EAAAA,cAAQ,CAC1C,aAAG,eACH,OACK+H,EAAAA,EAAAA,UAAQlE,wBAAmBA,CAGhC,UAAK,yBAAU,KAEf,MAAM,EAAEoH,UAAW,yCACnB,sBACIyN,EAAAA,SACJ,OAAE,EACF,kBAAmB1Y,GAErB,EAEgB,IAClB,IAAK,EAA+D,kBAChE,SAAC,gBACG,GAAkB,yBAClB,UAAQ,uDACJ2Z,IAAAA,cAAmBC,EAAAA,SAAuB,CAC9C,sXACF,OAGTvB,CACS,mBAAS,kCAAkB,kBAAV,GAAU,0BAA8C,UAEvE,OACA,UAAQ,gDACMhY,IAAAA,cAAoBL,EAAAA,SAAQ,CAC1C,wHACF,OAGR,CAEF,UAAW,yBAAmB,QAEhBiZ,IAAAA,cAAoB,oBAClC,aAAUC,EAAAA,SACV,WAAW,EACX,aAAYpV,EACZ,SAAOsV,EACP,aAAWtB,EAAAA,EAAAA,YACX,WAAYjO,EACd,MACC,EAEN,YAEhB,eAEuF,cAAvC7J,EAAAA,EAAAA,KAAQ,YACrD,MAA0C,EAAlCzC,EAAM,EAANA,WAAQ6a,EAAW,WAGvB/I,GAOA9R,EAAAA,EAAAA,MANAmH,EAAAA,EAMAnH,OALAsc,EAAAA,EAKAtc,YAJAuc,EAAAA,EAIAvc,MAHAwc,EAAAA,EAGAxc,eAFAyc,EAEAzc,EAFAyc,kBACAnV,EAAAA,EACAtH,aACJ,EAAQ4a,EAA4BC,mBAEpC,EAgBInT,EAAAA,eAfAgV,EAAa,EAAbA,oBACApF,EAAAA,EAAY,wBACZqF,GAAAA,EAAAA,EAAAA,KACA3B,EAAa,EAAbA,cACAF,EAAU,EAAVA,aACA8B,EAAgB,EAAhBA,wBACAC,EAAa,EAAbA,cACAC,EAAAA,EAAAA,WACAC,EAAAA,EAA6B,iBAC7BjV,EAAAA,EAAAA,cACAxH,EAAQ,gCACR0c,EAAmB,EAAnBA,8BACAC,EAAAA,EAAAA,gCACAC,EAAAA,EAAiB,SACjBC,EAAoB,sBAGxB,EAAgBC,EAAY,kBAE5B,IAAiEnd,kBAAc,yBAAxEod,GAAAA,EAAAA,EAAAA,cACP,EAAef,EADkBgB,IAAAA,UAAsB,GACxChB,GACf,EAA+B,EAAe,GAC9C,EAAM/B,EACIgD,GAIJC,GAAkD,SAAlDA,SAAkD,0GAClDC,GAAkB,QAAE3C,aAA8B,YACxD,GAAkE7a,MAAS,QAAM,mIAA1Eyd,GAAwB,kBAAxBA,EAEP,KAFiCC,IAAAA,UAAuB,GAGpDtV,GADIuV,GAAAA,GAAmC,GAAEC,GAAAA,GAA4B,GAAEC,IAAY,oCAAEpD,GAAAA,GAAa,oCAGtG,GAAmEza,GAAe,gDAA3E0a,GAAAA,GAAwB,cAE/B,GAAMoD,EAF2BC,IAAAA,UAAwB,GAEnDD,GACF,GAAQjW,GAA+B,MACd,qBAoBzB,WACA,GACD,MAIC,IACJ,eAAIA,YA1BQkW,kBACA,GACJ,KAAKrV,EAAAA,GAAAA,IACL,IAAyB,GACrBqV,WACA,SACJ,KAAKrV,EAAAA,GAAAA,QACDqV,GAAyBJ,IACzB,MACJ,KAAKjV,EAAAA,GAAAA,OACDqV,GAAyBH,IAAgCC,IACzD,MACJ,uBAAQ,YAgBhB,KACI,GAAuD,QAuB1D,cAED,GAAmB,GACfG,GAAAA,IAEH,cAED,KACItB,mBAYA,KACA,uBAIwB,SAApBpI,EAAcE,SAClB,2BAGY,SADNC,EAAmB,WAIvB,EAAa5C,OAAO4C,GAAAA,OAAAA,EAAqB,WAEnCH,EAAAA,IAAAA,EAAAA,GAAAA,IAAAA,sCAAAA,2DACJ,KACF,gBACFoJ,YAAAA,KAIA,IAAiBlX,IAuBfwU,GAAqB,IAA2B3D,KAAiC,GAAoB,QAErG4G,IAAAA,GAAmCzC,GAAc,KACnD,GAA0B,MACtB,GAAuD,uBAAhDlB,CAAAA,EAA8B,SAAOjM,EAAW,gBAC3D,2BACA,eACAiM,KAA6B4D,EAAAA,EAAAA,iBAIzB,GAAK5D,KACT,2BACA,aACAA,MAA6B4D,EAAAA,EAAAA,eAIzB,GAAiB1X,QACNkU,IAAAA,SAA2B9X,iBACtC,oBACA,IAAgB,SACpB,wDAEAJ,EAAAA,EAAAA,UAAU6U,iBAGF8G,EAAAA,EAAAA,UAAmB9G,eAAT5M,EAAS4M,EAAL,KAoGlB,GAA2B,qBAC3B,UACA,cAAYwD,EACZ,aAAa,EACb,cACA,WAAYxO,EACZ,gBACA,mBACA,aACA,gCAAkBuJ,EAClB,4BAAkBwI,GAClB,sBAAgBjD,GAChB,iBAhOazU,SAAiB,OAC1BgS,EACAC,EAAK,GAiBboE,OAfE,6BACEzS,IAAAA,MACIwO,MAMJ,mBAAApS,EAAOL,YACPiE,EAAOjE,UAAWzD,EAAAA,EAAAA,oBAAS,YAL3B,EAAE,sFACL,WAAWgW,EACRtO,WAAOjE,MAKE,QAAb,EAAa,oEAChB,sFAGG0W,GA8MI,iBAAkB,GAClB,eA7JG,cACFrW,IAAiE,SAClEuW,iWAAkBvW,CAAQmG,CAAO,EAAC,OAEzC,aAEKqR,EAAAA,EACFpB,GAOJ,EAgJQ,WAEP,qBAED,SAAMuB,GAEE,wBAAU,IAEV,GAASJ,IAAAA,cAA2B,SACpC,UAAW,qBACX,kBACA,uBAAa,6BAEL,cACA,kBACUzb,IAAAA,cAAAA,EAAAA,CACZ,+BACJ,2BACF,SAAW,GAAgC,EAC3C,UAAU,kBAAM6a,EAAAA,EAA4B,EAC5C,SAAS,WAAE,OAAMA,GAAuB,EAAM,EAC9C,UAAO1Z,WAEN2a,OAAAA,GAER,EAED,EAEQ,uBAAe,kBACf,IACA,GAASC,IAAAA,cAA4B,gBACrC,iBAASlD,EACT,kBAAkB,aAAoB,WAGlC,WACA,kBAAiBC,sBACjB,kBAAyBkC,EAAkB,CAC3C,4BAAUhb,GACZ,gBAED8b,GAIT,wBACI,GAIQ,SAASE,IACT,WACUnD,IAAAA,cAAW,+CACrB,QAAQ,GACR,eACA,SAASoD,GACT,SAAI,IACA,UAAC,GA9PIN,oBAGjB,sBACH,+DAEKC,EAAAA,KAAAA,EAAAA,OAAAA,wBAwPmB,oBACK5b,sCA7KRiI,WAElB,IAAMiU,EAAAA,EAAiBP,SACvB,EAAIQ,EAAe,KACnB,QAAgB,eACZ,EAAsB,SAAHC,GAAG,6CAClBD,EACIE,UAGJ,GACJ,KAAKrY,EAAAA,GAAAA,IACDmY,GACIG,EAAAA,EAAAA,IAAe,GACVC,GAAW,eACpB,MACJ,KAAKvY,EAAAA,GAAAA,QACDmY,GACIK,EAAAA,EAAAA,MAAAA,GAAsBb,GAClB1T,YAER,MACJ,kBACIkU,GAAa,UAAE,kBACf,MAAM,QAGRM,EAAAA,OAKF,EAAiB,IAAuC,WACpD,EAAkB,qCACpB,EAASzc,iBACM,YAAb,GAAa,cACjB,YACiB,YAAVmc,GAAU,cACpB,OAGOO,MAEK1Y,SAAL,EAAmBoY,QAEf,GACJ,KAAKpY,EAAAA,GAAAA,IACc,EACf,MACJ,kBACmB,WACf,MAAM,QAGd,iBAKgB,oFACM2Y,4JACN3c,CAGAqF,KAAAA,IAEF,qDACF,SAAY,EAAO,gCAAO,sBAAkC,WAAG,CAAE,0BAAQmE,IAAK,EAAK,oCAEzExF,IAAAA,cAAqB,SAAIhE,CACzB,WAGN,kBAA0BkY,IAAyB,2CACnD,kGACeD,IAAAA,cAAAA,EAAAA,CAEtB,yBACY,GAEzB,kCAEA,2BAIkB0E,IAAAA,cAAc,8BACV3c,wHACV2b,CACF,SACF,SAAY,aAAC,mCAAM,SAAO,GAAkC,WAAG,CAAE,0BAAQnS,IAAK,EAAK,oCACrF,4BAET,WAiFyBqL,QACN,kBAAyBsD,EAAAA,CAEhC,WACD,OAAkB,KAClB,wBAAayE,IAMb,mBACA,YAAOzb,GACP,eAAkBA,EAAAA,GAAAA,IAAQ,4CAC5B,gBACF,EACI,OAAO,gBAAE0b,UAAAA,OACT,kBAAiB,kBACR,kBAAC,aAAK3B,GAA8B,iBAAC,mBAC9C,mBAES,aAEvB,EAEF,iBAAe4B,glGC1+Bf,IAAMC,EAAsB,SAAH,GAA0E,IAS3FC,EAAO/U,EAAMwO,EAAOlU,EAAOuS,EATJmI,EAAY,EAAZA,aAAcvgB,EAAQ,EAARA,SAAUwgB,EAAK,EAALA,MAAU9e,EAAK,OAC5D+e,EAAwBhI,aAAaiI,QAAQ,6BAC7CC,EAAsBlI,aAAaiI,QAAQ,4BAA8B,OAQ/E,GANID,GACA,mLAAmLG,KAC/KH,IAIUF,EAAc,SAC4B,IAAhCE,EAAsBI,MAAM,KAAI,GAAvDzI,EAAM,KAAEkI,EAAK,KAAE/U,EAAI,KACpBwO,EAAQwG,EAAa,OAAD,OAAQD,EAAK,YAAI/U,EAAI,YAAI6M,IAAU2B,MACvDlU,EAC0G,QADrG,EAC8F,QAD9F,GACD8Z,EAAAA,EAAAA,IAAea,GAAOF,GAA6B/U,UAA4C,aAA/F,EAAiG1F,aAAK,QACtG,EACR,MAAO,GAAI0a,EAAc,iBACyD,IAArD7T,OAAOwE,KAAKqP,GAAcO,MAAiBD,MAAM,KAAI,GAA7EzI,EAAM,KAAEkI,EAAK,KAAE/U,EAAI,KACpBwO,EAA6D,QAAxD,EAAiD,QAAjD,EAAGwG,EAAa,OAAD,OAAQD,EAAK,YAAI/U,EAAI,YAAI6M,WAAS,aAA9C,EAAgD2B,aAAK,QAAI,GACjElU,EAEe,QAFV,EACoB,QADpB,GACD8Z,EAAAA,EAAAA,IAAea,UAAM,OAA+B,QAA/B,EAArB,EAAwBF,UAA4B,OAA+C,QAA/C,EAApD,EAAuD/U,UAA4C,WAA9E,EAArB,EACM1F,aAAK,QAAI,EACvB,MAEIkU,EAAQ,GACRlU,EAAQ,GAGZ,OAAO7F,EAAS,EAAD,CACX+Z,MAAAA,EACAlU,MAAAA,EACA0F,KAAMoV,GACHjf,GAEX,EAEMqf,GAAwB3W,EAAAA,EAAAA,KAAS,YAA0C,IAAvC9G,EAAQ,EAARA,SACtC,GAAuBsG,EAAAA,EAAAA,MAAf/I,EAAM,EAANA,OAAQ6Z,EAAE,EAAFA,GAER/H,EAA+B9R,EAA/B8R,MAAO6N,EAAwB3f,EAAxB2f,MAAOpD,EAAiBvc,EAAjBuc,aACd4D,EAAkEtG,EAAlEsG,oCAAqCC,EAA6BvG,EAA7BuG,yBAErCV,GAAiBhY,EAAAA,EAAAA,KAAjBgY,aAcN,IAZwBla,IAAAA,SAMvB,CACC6a,gBAAYtf,EACZsV,WAAW,EACX2E,mBAAeja,EACfuf,aAAa,EACbC,sBAAuB,KACzB,GAZKC,EAAK,KAAEC,EAAQ,KAsBhBC,EAAkB,WACpB9I,aAAa+I,WAAW,6BACxB/I,aAAa+I,WAAW,2BACxB/I,aAAa+I,WAAW,0BAC5B,EACM9K,EAAmB,SAAClP,GACtB,IAAM4D,EAAoC,CAAC,EAmB3C,OAhBKmO,EAAAA,EAAAA,aAAY/R,EAAOoP,aAAc,CAC9B4C,IAAK,EACLC,IAAK,MAODC,EAAAA,EAAAA,eAAclS,EAAOoP,gBAC7BxL,EAAOwL,cAAeQ,EAAAA,EAAAA,oBAAmBjQ,YALzCiE,EAAOwL,cAAelT,EAAAA,EAAAA,UAAS,6DAA8D,CACzFkW,WAAY,EACZC,WAAY,KAKhBrS,EAAOoP,aAAa+C,gBAAkBhH,EAAMgH,gBAC5CvO,EAAOwL,cAAelT,EAAAA,EAAAA,UAAS,4DAG5B0H,CACX,EAEMqW,EAAgB,SAClBja,EACAqP,EACAkD,EACApM,GAEA,IAAQO,EAAkBP,EAAlBO,cACRA,GAAc,GACd,IAAMwT,EAAU,CACZC,WAAY5H,EACZzW,SAAUgE,EAAAA,GAAAA,IACVsP,aAAcpP,EAAOoP,aACrBgL,kBAAmBnJ,aAAaiI,QAAQ,4BAG5CxgB,EAAAA,GAAAA,qCAAwCwhB,GAAS7P,MAAK,SAACvS,GAAuD,MAnD1FC,EAoDZD,SAAe,QAAP,EAARA,EAAUC,aAAK,OAAf,EAAiBsiB,MApDLtiB,EAqDGD,EAASC,MApDhC+hB,EAAS,EAAD,KACDD,GAAK,IACRH,WAAY3hB,EAAMsiB,KAClB3K,WAAW,EACX2E,cAAetc,EAAMkE,aAkDjB6d,EAAS,EAAD,KACDD,GAAK,IACRF,aAAa,EACbC,sBAAuBvK,KAE3B0K,KAEJrT,GAAc,EAClB,GACJ,EACM4T,EAAmB,WACrB,OAA4C,IAArCpV,OAAOwE,KAAKqP,GAAclT,MACrC,EAEM0U,GAA6BD,KAAsBrJ,aAAaiI,QAAQ,2BAE9E,OACI,kBAAC,EAAA1a,MAAK,CACFjD,UAAU,2BACV4C,QAASqb,IAAwCe,EACjDnc,YAAa,kBAAMqb,GAAyB,EAAM,EAClDpb,MACIvC,IAAagE,EAAAA,GAAAA,SACP5D,EAAAA,EAAAA,UAAS,oCACTA,EAAAA,EAAAA,UAAS,qCAEnBse,QAAS,kBAAMC,EAAAA,EAAAA,iBAAgB7E,GAAc8E,EAAAA,EAAAA,gBAAe,EAAK,EACjEpH,0BAA0B,IAExBgH,MAAuBT,EAAMnK,WAAa,kBAAC,EAAA5J,QAAO,CAACC,eAAe,IACnEuU,MAAuBT,EAAMnK,YAAcmK,EAAMF,aAC9C,kBAACd,EAAmB,CAACE,aAAcA,EAAcC,MAAOA,IACnD,gBAAGjV,EAAI,EAAJA,KAAMwO,EAAK,EAALA,MAAK,OACX,kBAAC,KAAM,CACH7S,cAAe,CAAE0P,aAAc,IAC/BlJ,SAAUgJ,EACVpR,SAAU,SAACkC,EAAQmG,GAAO,OAAK8T,EAAcja,EAAQ+D,EAAMwO,EAAOpM,EAAQ,IAEzE,gBAAGtG,EAAY,EAAZA,aAAc+D,EAAM,EAANA,OAAQ5D,EAAM,EAANA,OAAQJ,EAAY,EAAZA,aAAckH,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAAYlD,EAAO,EAAPA,QAAO,OAC7E,0BAAMI,aAAa,MAAMnG,SAAU+B,GAC/B,yBAAKtE,UAAU,sBACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,qCACX,kBAAC,EAAAiU,cAAa,CACVC,MAAOzP,EAAOoP,aACdM,aAAc7L,EAAQuL,eAAgBxL,EAAOwL,cAC7CO,0BAA0BC,EAAAA,EAAAA,oBAAmBC,oBAE5C,gBAAGC,EAAW,EAAXA,YAAW,OACX,kBAAC,EAAAP,cAAa,CACVtL,aAAa,eACb1I,UAAU,qCACV3D,KAAK,eACLwI,OAAOlE,EAAAA,EAAAA,UAAS,wBAAyB,CAAE6H,KAAAA,IAC3CgF,SAAUjC,EACVoC,OAAQnC,EACRhP,MAAO8L,EAAQuL,cAAgBxL,EAAOwL,aACtCjW,MAAO6G,EAAOoP,aACd,gBAAc,OACdpL,UAAQ,EACR+L,MACKD,IACD5T,EAAAA,EAAAA,UACI,mHAGV,KAIb0D,GAAgB,kBAAC,EAAAkG,QAAO,CAACC,eAAe,KACvCnG,GACE,kBAAC,EAAAM,iBAAgB,CACb+H,YACIrI,IACCI,EAAOoP,cACRlK,OAAOwE,KAAK9F,GAAQiC,OAAS,EAEjCjC,OAAQA,EACRzD,WAAW,EACXlB,OAAK,EACLmB,OAAOlE,EAAAA,EAAAA,UAAS,2BAA4B,CAAE6H,KAAAA,QAK3D,GAEN,IAIpB8V,EAAMnK,WACH,yBAAKnU,UAAU,6BACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,eAAeE,KAAM,MAChC,kBAAC,EAAAc,KAAI,CAACoC,GAAG,IAAIlD,KAAK,KAAK8B,OAAO,OAAOyC,MAAM,SAASxE,UAAU,+BACzDse,EAAMxF,eAEW,iBAArBwF,EAAMH,YACH,kBAAC,EAAApd,KAAI,CACDoC,GAAG,IACHuB,MAAM,YACNzE,KAAK,KACLuE,MAAM,SACNxE,UAAU,gDAEV,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,2EAGpC,kBAAC,EAAApC,OAAM,CACH0C,SAAO,EACPD,OAAK,EACL1D,UAAU,qCACVE,QAAS,WACLse,IACAN,GAAyB,EAC7B,GAEA,kBAAC,EAAA9a,SAAQ,CAACC,kBAAkB,SAIvCib,EAAMF,aACH,yBAAKpe,UAAU,+BACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,uBAAuBE,KAAM,MACxC,yBAAKD,UAAU,mCACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,IAAIlD,KAAK,KAAKuE,MAAM,SAASzC,OAAO,OAAOqd,YAAY,OAC5D,kBAAC,EAAAhc,SAAQ,CAACC,kBAAkB,oBAEhC,kBAAC,EAAAD,SAAQ,CACLC,kBAAkB,mDAClBoB,OAAQ,CACJ2Q,aACoC,SAAhCkJ,EAAMD,uBAAmC1d,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,gBAIrF,kBAAC,EAAAM,OAAM,CAAC0C,SAAO,EAACD,OAAK,EAACxD,QAAS,kBAAMge,GAAyB,EAAM,GAChE,kBAAC,EAAA9a,SAAQ,CAACC,kBAAkB,SAMpD,IAEA,QAAeC,IAAAA,KAAW0a,sQCzO1B,SA/B6B3W,EAAAA,EAAAA,KAAS,WAClC,IAAQsQ,GAAO9Q,EAAAA,EAAAA,MAAP8Q,GACApS,EAA0BoS,EAA1BpS,UAAWD,EAAeqS,EAAfrS,WACnB,GAAmGE,EAAAA,EAAAA,KAA3F6Z,EAAa,EAAbA,cAAevG,EAAa,EAAbA,cAAeF,EAAU,EAAVA,WAAY+B,EAAa,EAAbA,cAAeC,EAA6B,EAA7BA,8BAE3D0E,EACF3E,IACCC,GACDhC,GACe,kBAAfA,GACe,kBAAfA,EAEJ,OAAI0G,EACOxG,EACH,kBAAC,EAAAyG,OAAM,CACHzc,OAAOnC,EAAAA,EAAAA,UAAS,yBAChB6e,qBAAqB7e,EAAAA,EAAAA,UAAS,MAC9BsD,UAAWob,EACX/Z,WAAYA,EACZC,UAAWA,EACXgS,WAAY+H,GAEXxG,GAGL,kBAAC,EAAA2G,oBAAmB,MAGrB,IACX,gcC6KA,SA3L0BpY,EAAAA,EAAAA,KAAS,YAA2C,IAAxC9G,EAAQ,EAARA,SAC1BoX,GAAO9Q,EAAAA,EAAAA,MAAP8Q,GAGJ+H,EAKA/H,EALA+H,uBACAC,EAIAhI,EAJAgI,8BACAC,EAGAjI,EAHAiI,0BACAC,EAEAlI,EAFAkI,gBACAC,EACAnI,EADAmI,uBAGJ,GAA+Fta,EAAAA,EAAAA,KAAvFua,EAAe,EAAfA,gBAAiBC,EAAiB,EAAjBA,kBAAmBC,EAAiB,EAAjBA,kBAAmBC,EAAa,EAAbA,cAAeC,EAAY,EAAZA,aAExEC,GAAoBC,EAAAA,EAAAA,MAEpBC,EAAkBhd,IAAAA,aAAkB,WACtC,IAAIR,EAAQ,GACZ,IAAMod,IAAkBF,IAAsBC,IAAuBF,EAAiB,MAAO,GAE7F,OAAQxf,GACJ,KAAKgE,EAAAA,GAAAA,IACDzB,EACIod,EAAcH,EAAgB7D,UAC1B6D,EAAgBvX,MAClB1F,MACN,MACJ,KAAKyB,EAAAA,GAAAA,QACDzB,EACImd,EAAkBF,EAAgB7D,UAC9B6D,EAAgBvX,MAClB1F,MACN,MACJ,KAAKyB,EAAAA,GAAAA,QACDzB,EACIsd,EAAkBL,EAAgB7D,UAC9B6D,EAAgBvX,MAClB1F,MACN,MACJ,KAAKyB,EAAAA,GAAAA,QACDzB,EACIkd,EAAkBD,EAAgB7D,UAC9B6D,EAAgBvX,MAClB1F,MAMd,OAAOA,CACX,GAAG,CAACod,EAAeF,EAAmBC,EAAmBF,EAAiBxf,EAAU6f,IAM9EG,EAAgBhgB,IAAagE,EAAAA,GAAAA,QAE7Bic,GAAiB5f,EAAAA,EAAAA,qBAAoBL,EAAUggB,GAErD,IAAML,IAAkBF,IAAsBC,KAAsBI,EAAAA,EAAAA,QAA2BN,EAC3F,OAAO,KACX,OAA8CU,EAAAA,EAAAA,MAAtCC,EAAc,EAAdA,eAAgBC,EAAiB,EAAjBA,kBAExB,OACI,kBAAC,aAAc,KACX,kBAAC,EAAA1d,MAAK,CACFJ,YAAagd,EACbjd,QAAS8c,EACT1f,UAAU,iBACV8C,OAAOnC,EAAAA,EAAAA,UAAS,eAChBN,MAAM,SAEN,yBAAKL,UAAU,4CACX,kBAAC,EAAAe,KAAI,CACDoC,GAAG,IACHqB,MAAM,SACNvE,KAAK,MACLmf,YAAY,KACZpf,UAAU,kDACV,cAAY,iCAEZ,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,kGAClBwS,WAAY,CACR,kBAAC,EAAA+K,MAAK,CACF7W,IAAK,EACL8W,OAAQF,EACRG,SAAUf,EAAgBe,SAC1BC,eAAa,IAEjB,kBAAC,EAAAH,MAAK,CACF7W,IAAK,EACL8W,OAAQH,EACRI,SAAUf,EAAgBe,SAC1BC,eAAa,QAK7B,wBAAI/gB,UAAU,0CACV,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,6CAClBoB,OAAQ,CACJlE,SAAUigB,EACVhG,cAAe8F,QAI3B,6BACI,kBAAC,EAAAvf,KAAI,CAACoC,GAAG,IAAIqB,MAAM,SAASvE,KAAK,OAC7B,kBAAC,EAAAmD,SAAQ,CAACC,kBAAkB,qBAEhC,yBAAKrD,UAAU,+CACX,kBAAC,EAAA4gB,MAAK,CACFC,OAAQd,EAAgBiB,gBACxBF,SAAUf,EAAgBe,SAC1BG,SAAWlB,EAAgBmB,QAAqB,MAI5D,yBAAKlhB,UAAU,8CACX,kBAAC,EAAAiB,OAAM,CACHyL,YAAcqT,EAAgBmB,QAAqB,KAAQvB,EAC3DnX,KAAK,SACLzD,WAAY4a,EACZzf,QAAS,kBAAMigB,EAAa5f,EAAS,EACrCoD,SAAO,EACPD,OAAK,IAEHic,GACE,kBAAC,EAAAvc,SAAQ,CACLC,kBAAkB,kBAClBwS,WAAY,CACR,kBAAC,EAAA+K,MAAK,CACF7W,IAAK,EACL8W,OAAQF,EACRG,SAAUf,EAAgBe,SAC1BC,eAAa,WAS7C,kBAAC,IAAa,CACVne,QAASgd,EACT/c,YAjGW,WACnBid,GACJ,EAgGY/c,gBAAc,EACdD,OAAOnC,EAAAA,EAAAA,UAAS,eAChBZ,KAAM,kBAAC,EAAAoB,KAAI,CAACpB,KAAK,kBAAkBE,KAAM,MACzCuC,QACI,wBAAIxC,UAAU,8BACV,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,sEAClBoB,OAAQ,CAAElE,SAAUigB,EAAgB1d,MAAOwd,KAC3CzK,WAAY,CACR,kBAAC,EAAA+K,MAAK,CACF7W,IAAK,EACL8W,OAAQF,EACRG,SAAUf,EAAgBe,SAC1BC,eAAa,QAMjCrgB,QACI,yBAAKV,UAAU,kCACX,2BACI,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,yBAEhC,yBAAKrD,UAAU,+CACX,kBAAC,EAAA4gB,MAAK,CAACC,OAAQd,EAAgBmB,QAASJ,SAAUf,EAAgBe,aAI9Ere,UAAU,QACVL,YAAY,EACZC,YAAY,EACZhC,MAAM,UAItB,u8ECxIA,IAAM8gB,EAA4B,SAAH,GAA6D,IAE7D,MAFM/G,EAAiB,EAAjBA,kBAAmB7Z,EAAQ,EAARA,SAAU8Z,EAAY,EAAZA,aAAc+G,EAAK,EAALA,MAgBtEC,EAAsBhH,GAZnB9Z,IAAagE,EAAAA,cAAAA,IACR,CACI6V,SAAoC,QAAnB,EAAjBA,EAAmBkH,yBAAiB,WAAnB,EAAjB,EAAsCC,UACtCnH,SAAuC,QAAtB,EAAjBA,EAAmBoH,4BAAoB,WAAtB,EAAjB,EAAyCD,WACzCnH,SAAuC,QAAtB,EAAjBA,EAAmBoH,4BAAoB,WAAtB,EAAjB,EAAyCC,gBAAiBlhB,IAAagE,EAAAA,cAAAA,KAE3E,CACI6V,aAAiB,EAAjBA,EAAmBsH,uBACnBtH,aAAiB,EAAjBA,EAAmBuH,4BAE/B3S,OAAO4S,SAAStX,OAbgB/J,IAAagE,EAAAA,cAAAA,IAAoB,EAAI,EAgBrEsd,EAAmCT,EACrC,8BACKzgB,EAAAA,EAAAA,UAAS,kDACV,kBAAC,EAAAI,KAAI,CAACd,KAAK,IAAI8B,OAAO,OAAO/B,UAAU,8BAA4B,OAGlEW,EAAAA,EAAAA,UAAS,yBAGdA,EAAAA,EAAAA,UAAS,qEAGPmhB,EAA4B,CAC9BC,WAAWphB,EAAAA,EAAAA,UAAS,OACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,OACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,OACpBshB,cAActhB,EAAAA,EAAAA,UAAS,OACvBuhB,SAAU,MAERC,EAA2B,CAC7BJ,WAAWphB,EAAAA,EAAAA,UAAS,gBACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,gBACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,gBACpBshB,cAActhB,EAAAA,EAAAA,UAAS,cACvByhB,cAAczhB,EAAAA,EAAAA,UAAS,cACvBuhB,UAAUvhB,EAAAA,EAAAA,UACN,qIAGF0hB,EAAyB,CAC3BN,WAAWphB,EAAAA,EAAAA,UAAS,UACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,UACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,UACpBshB,cAActhB,EAAAA,EAAAA,UAAS,UACvByhB,cAAczhB,EAAAA,EAAAA,UAAS,UACvB8gB,eAAe9gB,EAAAA,EAAAA,UAAS,UACxBuhB,UAAUvhB,EAAAA,EAAAA,UACN,yJACA,CACIkU,MAAOwM,KAIbiB,EAAgB,CAClBP,WAAWphB,EAAAA,EAAAA,UAAS,kBACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,kBACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,YACpBshB,cAActhB,EAAAA,EAAAA,UAAS,YACvBuhB,UAAUvhB,EAAAA,EAAAA,UACN,0QAGF4hB,EAAoB,CACtBR,WAAWphB,EAAAA,EAAAA,UAAS,MACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,MACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,MACpBshB,cAActhB,EAAAA,EAAAA,UAAS,MACvByhB,cAAczhB,EAAAA,EAAAA,UAAS,MACvBuhB,UAAUvhB,EAAAA,EAAAA,UAAS,0DAEjB6hB,EAAyB,EAAH,KACrBD,GAAiB,IACpBL,SAAU,OAERO,EAAqB,CACvBV,WAAWphB,EAAAA,EAAAA,UAAS,QACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,QACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,QACpBshB,cAActhB,EAAAA,EAAAA,UAAS,QACvByhB,cAAczhB,EAAAA,EAAAA,UAAS,QACvBuhB,UAAUvhB,EAAAA,EAAAA,UACN,gHAGF+hB,EAAwB,CAC1BX,WAAWphB,EAAAA,EAAAA,UAAS,OACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,OACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,OACpBshB,cAActhB,EAAAA,EAAAA,UAAS,OACvByhB,cAAczhB,EAAAA,EAAAA,UAAS,OACvBuhB,UAAUvhB,EAAAA,EAAAA,UACN,0WAIFgiB,EAAgC,CAClCZ,WAAWphB,EAAAA,EAAAA,UAAS,OACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,OACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,QACpBshB,cAActhB,EAAAA,EAAAA,UAAS,QACvByhB,cAAczhB,EAAAA,EAAAA,UAAS,QACvBuhB,UAAUvhB,EAAAA,EAAAA,UAAS,kFAGvB,MAAO,CACH,CACIiiB,WAAWjiB,EAAAA,EAAAA,UAAS,oBACpBkiB,IAAK,EAAF,KACIf,GAAyB,IAC5BM,cAAczhB,EAAAA,EAAAA,UAAS,eACvB8gB,eAAe9gB,EAAAA,EAAAA,UAAS,SAE5BmiB,QAAS,EAAF,KACAhB,GAAyB,IAC5BM,cAAczhB,EAAAA,EAAAA,UAAS,cAG/B,CACIiiB,WAAWjiB,EAAAA,EAAAA,UAAS,oBACpBkiB,IAAK,EAAF,KACIV,GAAwB,IAC3BV,eAAe9gB,EAAAA,EAAAA,UAAS,iBAE5BmiB,QAAS,EAAF,GACAX,IAGX,CACIS,WAAWjiB,EAAAA,EAAAA,UAAS,mBACpBkiB,IAAK,EAAF,GACIR,GAEPS,QAAS,EAAF,GACAT,IAGX,CACIO,WAAWjiB,EAAAA,EAAAA,UAAS,UACpBkiB,IAAK,EAAF,KACIP,GAAa,IAChBF,cAAczhB,EAAAA,EAAAA,UAAS,kBACvB8gB,eAAe9gB,EAAAA,EAAAA,UAAS,cAE5BmiB,QAAS,EAAF,KACAR,GAAa,IAChBF,cAAczhB,EAAAA,EAAAA,UAAS,eAG/B,CACIiiB,WAAWjiB,EAAAA,EAAAA,UAAS,cACpBkiB,IAAK,EAAF,KACIN,GAAiB,IACpBd,eAAe9gB,EAAAA,EAAAA,UAAS,QAE5BmiB,QAAS,EAAF,GACAP,IAGX,CACIK,WAAWjiB,EAAAA,EAAAA,UAAS,mBACpBkiB,IAAK,EAAF,KACIL,GAAsB,IACzBf,eAAe9gB,EAAAA,EAAAA,UAAS,QAE5BmiB,QAAS,EAAF,GACAN,IAGX,CACII,WAAWjiB,EAAAA,EAAAA,UAAS,eACpBkiB,IAAK,EAAF,KACIJ,GAAkB,IACrBhB,eAAe9gB,EAAAA,EAAAA,UAAS,UAE5BmiB,QAAS,EAAF,GACAL,IAGX,CACIG,WAAWjiB,EAAAA,EAAAA,UAAS,kBACpBkiB,IAAK,EAAF,KACIH,GAAqB,IACxBjB,eAAe9gB,EAAAA,EAAAA,UAAS,SAE5BmiB,QAAS,EAAF,GACAJ,IAGX,CACIE,WAAWjiB,EAAAA,EAAAA,UAAS,oBACpBkiB,IAAK,CACDd,WAAWphB,EAAAA,EAAAA,UAAS,OACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,OACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,QACpBshB,cAActhB,EAAAA,EAAAA,UAAS,QACvByhB,cAAczhB,EAAAA,EAAAA,UAAS,OACvB8gB,eAAe9gB,EAAAA,EAAAA,UAAS,OACxBuhB,SAAU,MAEdY,QAAS,CACLf,WAAWphB,EAAAA,EAAAA,UAAS,OACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,OACvB4gB,WAAW5gB,EAAAA,EAAAA,UAAS,OACpBshB,cAActhB,EAAAA,EAAAA,UAAS,OACvByhB,cAAczhB,EAAAA,EAAAA,UAAS,OACvBuhB,SAAU,OAGlB,CACIU,WAAWjiB,EAAAA,EAAAA,UAAS,0BACpBkiB,IAAK,EAAF,KACIF,GAA6B,IAChClB,eAAe9gB,EAAAA,EAAAA,UAAS,UAE5BmiB,QAAS,EAAF,GACAH,IAGX,CACIC,WAAWjiB,EAAAA,EAAAA,UAAS,uBACpBkiB,IAAK,CACDd,WAAWphB,EAAAA,EAAAA,UAAS,cACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,cACvB4gB,WAAW5gB,EAAAA,EAAAA,UACP,2HAEJshB,cAActhB,EAAAA,EAAAA,UACV,wGAEJyhB,aAAcP,EACdJ,eAAe9gB,EAAAA,EAAAA,UAAS,0DACxBuhB,SAAU,MAEdY,QAAS,CACLf,WAAWphB,EAAAA,EAAAA,UAAS,cACpBqhB,cAAcrhB,EAAAA,EAAAA,UAAS,cACvB4gB,WAAW5gB,EAAAA,EAAAA,UACP,iGAEJshB,cAActhB,EAAAA,EAAAA,UAAS,6EACvByhB,cAAczhB,EAAAA,EAAAA,UACV,yFAEJuhB,SAAU,OAI1B,EAEMa,EAAwB,SAAH,GAAuD,IAAjD1mB,EAAI,EAAJA,KAAM2mB,EAAO,EAAPA,QACqB,IAArB1f,IAAAA,UAAe,GAAM,GAAjDiU,EAAU,KAAE0L,EAAY,KAG/B,OAAOD,EACH,kBAAC,aAAc,KACX,kBAAC,EAAAjiB,KAAI,CACDoC,GAAG,IACHpB,OAAO,OACP9B,KAAK,KACLmf,YAAY,IACZpf,UAAU,0BACVE,QAVQ,WAAH,OAAS+iB,GAAc1L,EAAW,GAYtClb,EACD,kBAAC,EAAA0E,KAAI,CAACgB,OAAO,OAAOoB,GAAG,OAAOic,YAAY,IAAInf,KAAK,OAAOD,UAAU,WAC/DgjB,KAKb,kBAAC,EAAAjiB,KAAI,CAACoC,GAAG,IAAIpB,OAAO,OAAO9B,KAAK,KAAKmf,YAAY,IAAIpf,UAAU,2BAC1D3D,EAGb,EAwDM6mB,EAAsB,SAAH,GAOS,IAN9B9I,EAAiB,EAAjBA,kBACAC,EAAY,EAAZA,aACA8I,EAAY,EAAZA,aACA5iB,EAAQ,EAARA,SACA6iB,EAAS,EAATA,UACAhC,EAAK,EAALA,MAEMiC,EAA8B,OAAdD,EACtB,OA/DsD,SACtDhJ,EACAkJ,EACAjJ,EACA8I,EACA5iB,EACA8iB,GAEA,IAAME,EAAqB,SAAChC,EAAoBU,EAAuBG,GACnE,OAAIiB,EACOpB,EAEPkB,EACOf,EAEJb,CACX,EAEIiC,EAAkB,EACtB,OAAOF,EACFtU,QAAO,SAAAyU,GAAG,OAAIA,EAAIljB,EAAuC,IACzD4I,KAAI,YAA2C,IAO1B,MAPdyZ,EAAS,EAATA,UAAS,IAAEC,IAAAA,OAAG,IAAG,GAAC,EAAC,MAAEC,QAAAA,OAAO,IAAG,GAAC,EAAC,EACrC,EACIviB,IAAagE,EAAAA,cAAAA,IAAoBse,EAAMC,EADnCf,EAAS,EAATA,UAAWC,EAAY,EAAZA,aAAcT,EAAS,EAATA,UAAWU,EAAY,EAAZA,aAAcG,EAAY,EAAZA,aAAcF,EAAQ,EAARA,SAElEwB,EAAmB,CAAE3B,UAAWoB,EAAenB,EAAeD,GAC9D4B,EAAmB,CAAEpC,UAAWgC,EAAmBhC,EAAWU,EAAcG,IAC5EwB,EAAmB1B,IAAasB,EAAkB,KAExD,OAAInJ,EACO,EAAP,KACIuI,UAAW,kBAACG,EAAqB,CAAC1mB,KAAMumB,EAAWI,QAASY,KACxDxJ,SAAoC,QAAnB,EAAjBA,EAAmBkH,yBAAiB,OAApC,EAAsCC,UAAYmC,EAAmB,CAAC,GACtEtJ,SAAuC,QAAtB,EAAjBA,EAAmBoH,4BAAoB,OAAvC,EAAyCD,UAAYoC,EAAmB,CAAC,GACzEvJ,SAAuC,QAAtB,EAAjBA,EAAmBoH,4BAAoB,OAAvC,EAAyCC,eAAiBlhB,IAAagE,EAAAA,cAAAA,IACrE,CAAEkd,cAAeoB,aAAG,EAAHA,EAAKpB,eACtB,CAAC,GAGXlhB,IAAagE,EAAAA,cAAAA,QACN,EAAP,GACIqe,UAAW,kBAACG,EAAqB,CAAC1mB,KAAMumB,EAAWI,QAASY,KACzDF,GACAC,GAGJ,EAAP,KACIf,UAAW,kBAACG,EAAqB,CAAC1mB,KAAMumB,EAAWI,QAASY,KACzDF,GACAC,GACA,CAAElC,cAAeoB,aAAG,EAAHA,EAAKpB,eAEjC,GACR,CAWWoC,CACHzJ,EACA+G,EAAY,CAAE/G,kBAAAA,EAAmB7Z,SAAAA,EAAU8Z,aAAAA,EAAc+G,MAAAA,IACzD/G,EACA8I,EACA5iB,EACA8iB,EAER,EAEMS,EAAwB,SAAH,GAMQ,IAL/BvjB,EAAQ,EAARA,SACAwjB,EAAiB,EAAjBA,kBACA3J,EAAiB,EAAjBA,kBACAC,EAAY,EAAZA,aACA+G,EAAK,EAALA,MAEA,OACI,yBAAKphB,UAAU,6BACX,yBAAKA,UAAU,wCACX,0BAAMA,UAAU,sEAChB,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,uOAE/B0gB,GACG,kBAAC,aAAc,KACX,yBAAK/jB,UAAU,wCACX,0BAAMA,UAAU,sEAChB,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,6FAEhC,yBAAKrD,UAAU,wCACX,kBAAC,EAAAe,KAAI,CACDd,KAAK,KACLmf,YAAY,IACZrd,OAAO,OACP/B,UAAU,8FAA4F,KAI1G,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,yWAClBoB,OAAQ,CACJlE,SAAUA,IAAagE,EAAAA,cAAAA,KAAoB5D,EAAAA,EAAAA,UAAS,QAASA,EAAAA,EAAAA,UAAS,eAIjFygB,GACG,yBAAKphB,UAAU,wCACX,kBAAC,EAAAe,KAAI,CACDd,KAAK,KACLmf,YAAY,IACZrd,OAAO,OACP/B,UAAU,8FAA4F,MAI1G,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,sFAClBoB,OAAQ,CACJlE,SAAUA,IAAagE,EAAAA,cAAAA,KAAoB5D,EAAAA,EAAAA,UAAS,QAASA,EAAAA,EAAAA,UAAS,gBAO7FwgB,EAAY,CAAE/G,kBAAAA,EAAmB7Z,SAAAA,EAAU8Z,aAAAA,EAAc+G,MAAAA,IACrDpS,QACG,SAAAlH,GAAI,cAC+C,QAA9C,EAAEA,EAAKvH,UAAuC,QAA7C,EACI2hB,SAAQ,IAErB/Y,KAAI,SAAC4Q,EAAS/S,GACX,OACI,yBAAK+C,IAAK/C,EAAOhH,UAAU,wCACvB,kBAAC,EAAAe,KAAI,CACDd,KAAK,KACLmf,YAAY,IACZrd,OAAO,OACP/B,UAAU,8FAETgH,EAAQ,GAEb,yBAAKhH,UAAU,kCACX,kBAAC,EAAAe,KAAI,CACDoC,GAAG,IACHlD,KAAK,KACL8B,OAAO,OACP2C,MAAM,YACN1E,UAAU,wCAET+Z,EAAQ6I,WAEb,kBAAC,EAAA7hB,KAAI,CAACd,KAAK,KAAKyE,MAAM,aAGVqV,EAAQxZ,GAGV2hB,WAM1B,IAGhB,EAuIA,QArIqB,SAAH,GAQQ,IAPtB9H,EAAiB,EAAjBA,kBACAC,EAAY,EAAZA,aACA9Z,EAAQ,EAARA,SACA4iB,EAAY,EAAZA,aACAC,EAAS,EAATA,UACA3F,EAAK,EAALA,MACA2D,EAAK,EAALA,MAEuG,IAA/E9d,IAAAA,SAA4E,IAAG,GAAhG0gB,EAAI,KAAEC,EAAO,KAGnB,IAF8C3gB,IAAAA,SAC3C/C,IAAagE,EAAAA,cAAAA,QAAwB,gBAAkB,qBAC1D,GAFM2f,EAAgB,KAAEC,EAAkB,KAI3C7gB,IAAAA,WAAgB,WAGwC,WAFpD2gB,EAAQf,EAAoB,CAAE9I,kBAAAA,EAAmBC,aAAAA,EAAc9Z,SAAAA,EAAU4iB,aAAAA,EAAcC,UAAAA,EAAWhC,MAAAA,KAE9F/G,GAAgB9Z,IAAagE,EAAAA,cAAAA,KAC7B4f,EAAmB,SAAD,OACL/J,SAAoC,QAAnB,EAAjBA,EAAmBkH,yBAAiB,OAApC,EAAsCC,UAAY,MAAQ,GAAE,YACjEnH,SAAuC,QAAtB,EAAjBA,EAAmBoH,4BAAoB,OAAvC,EAAyCD,UAAY,MAAQ,GAAE,YAC/DnH,SAAuC,QAAtB,EAAjBA,EAAmBoH,4BAAoB,OAAvC,EAAyCC,cAAgB,QAAU,KAEpEpH,GAAgB9Z,IAAagE,EAAAA,cAAAA,SACpC4f,EAAmB,SAAD,OACL/J,SAAAA,EAAmBsH,uBAAyB,MAAQ,GAAE,YAC3DtH,SAAAA,EAAmBuH,0BAA4B,MAAQ,IAIvE,GAAG,CACCvH,aAAiB,EAAjBA,EAAmBoH,qBACnBpH,aAAiB,EAAjBA,EAAmBkH,kBACnBjH,EACA+G,EACAhH,EACA7Z,EACA4iB,EACAC,IAGJ,IAAMW,EAAoBxjB,IAAagE,EAAAA,cAAAA,MAAsB4e,EACvDiB,EAAoC3G,GAAQ9c,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,aAE9E,OACI,kBAAC,EAAA6L,kBAAiB,CAACL,cAAc,OAAOS,aAAaR,EAAAA,EAAAA,cACjD,kBAAC,EAAAO,iBAAgB,CACb3M,UAAU,uBACVI,MAAO,CACH,0CAA2C8jB,IAG/C,yBAAKlkB,UAAU,uCACX,kBAAC,EAAAqkB,MAAK,CAACrkB,UAAU,+BACb,kBAAC,EAAAqkB,MAAA,OAAY,KACT,kBAAC,EAAAA,MAAA,IAAS,CAACrkB,UAAU,mCACjB,kBAAC,EAAAqkB,MAAA,KAAU,CAACC,OAAK,IAChBjK,EACG,kBAAC,aAAc,MACVkK,EAAAA,EAAAA,yBAAwB,CAAEnK,kBAAAA,EAAmB7Z,SAAAA,EAAUiI,KAAM,YAC1D,kBAAC,EAAA6b,MAAA,KAAU,MAAE1jB,EAAAA,EAAAA,UAAS,aAEzB4jB,EAAAA,EAAAA,yBAAwB,CACrBnK,kBAAAA,EACA7Z,SAAAA,EACAiI,KAAM,eAEN,kBAAC,EAAA6b,MAAA,KAAU,KACND,EACD,kBAAC,EAAArjB,KAAI,CAACd,KAAK,IAAI8B,OAAO,OAAO/B,UAAU,8BAA4B,OAK1EukB,EAAAA,EAAAA,yBAAwB,CACrBnK,kBAAAA,EACA7Z,SAAAA,EACAiI,KAAM,mBAEN,kBAAC,EAAA6b,MAAA,KAAU,MACN1jB,EAAAA,EAAAA,UAAS,iBACV,kBAAC,EAAAI,KAAI,CAACd,KAAK,IAAI8B,OAAO,OAAO/B,UAAU,8BAA4B,OAO/E,kBAAC,aAAc,KACX,kBAAC,EAAAqkB,MAAA,KAAU,MAAE1jB,EAAAA,EAAAA,UAAS,YACtB,kBAAC,EAAA0jB,MAAA,KAAU,MACN1jB,EAAAA,EAAAA,UAAS,aACV,kBAAC,EAAAI,KAAI,CAACd,KAAK,IAAI8B,OAAO,OAAO/B,UAAU,8BAA4B,MAItEO,IAAagE,EAAAA,cAAAA,KACV,kBAAC,EAAA8f,MAAA,KAAU,MACN1jB,EAAAA,EAAAA,UAAS,iBACV,kBAAC,EAAAI,KAAI,CAACd,KAAK,IAAI8B,OAAO,OAAO/B,UAAU,8BAA4B,SAS3F,kBAAC,EAAAqkB,MAAA,KAAU,KACNL,EAAK7a,KAAI,SAACsa,EAAKra,GAAC,OACb,kBAAC,EAAAib,MAAA,IAAS,CAACta,IAAKX,EAAGpJ,UAAU,mCACxB2J,OAAOwE,KAAKsV,GAAKta,KAAI,SAACqb,EAAKC,GAAC,OACzB,kBAAC,EAAAJ,MAAA,KAAU,CAACta,IAAK0a,EAAGH,MAAa,IAANG,GACtBhB,EAAIe,GACI,IAET,OAK5B,kBAACV,EAAqB,CAClBvjB,SAAUA,EACVwjB,kBAAmBA,EACnB3J,kBAAmBA,EACnBC,aAAcA,EACd+G,MAAOA,KAK3B,6DCzdasD,EAAqB,WAAH,MAA4C,CACvE,CAAE7f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,yBACrC,kyGC/JD,IAAMC,EAAM,SAAH,GAcsB,MAb3B7X,EAAE,EAAFA,GACA6V,EAAS,EAATA,UACAne,EAAM,EAANA,OACAogB,EAAkB,EAAlBA,mBACAC,EAAwB,EAAxBA,yBACAC,EAAyB,EAAzBA,0BACAC,EAAuB,EAAvBA,wBACAC,EAAY,EAAZA,aACAC,EAAoB,EAApBA,qBACAC,EAAyB,EAAzBA,0BACAC,EAA8B,EAA9BA,+BACAC,EAAyC,EAAzCA,0CACAjC,EAAS,EAATA,UAEMkC,EAAyB,aAAPvY,EAClBwY,EAAyB,aAAPxY,EAClByY,EAA4B,gBAAPzY,EACrB0Y,EAAqB,CAAC,KAAM,KAAM,MAAM1e,SAASqc,GAEjDsC,EAAiB,WACnB,MAAW,iBAAP3Y,GAAgC,aAAPA,GAA0BX,EAAAA,EAAAA,aAAc,MAAQ,QACtEA,EAAAA,EAAAA,aAAc,OAAS,OAClC,EAEA,OAAImZ,IAAoBP,EACb,MAGPO,GAAmBP,GAA2BG,IAC9C1gB,EAAOkhB,cAAgB,CAAErkB,KAAM,QAE/B6jB,IACIG,IAAiB7gB,EAAOkhB,cAAgB,CAAErkB,MAAMX,EAAAA,EAAAA,UAAS,yBACtD8D,EAAOmhB,QAEdL,GAAmBH,IACnB3gB,EAAOohB,cAAgB,CAAEvkB,MAAMX,EAAAA,EAAAA,UAAS,QACpC,qBAAsB8D,IAAQA,EAAOqhB,iBAAmB,CAAExkB,MAAMX,EAAAA,EAAAA,UAAS,UAG7EskB,IAAiBc,EAAAA,YAAAA,gBACVthB,EAAOqhB,iBAGdd,GAA2BK,UACpB5gB,EAAOkhB,cAGdJ,GAAmBN,IAAiBc,EAAAA,YAAAA,cAA4Bb,IAEhEzgB,EAAOohB,cAAgB,CAAEvkB,KAAM,QAG/B,kBAAC,EAAA+iB,MAAA,IAAS,CACNrkB,UACI+kB,QAAAA,EACA/iB,IAAW,wCAAD,OAAyC6iB,IAAkB,kEACdA,GAAuBS,GAAe,iEAClCR,EAA2B,GAC9EA,EAA2B,GAAC,6DACmBD,GAAuBU,GAAe,gEACnCV,GAAuBW,GAAkB,IAC/F,uDAAwDC,GAAkB,+DACrBrC,GACjDkC,GAAmBG,GAAkB,kEACerC,GACpDoC,GAAsBC,GAAkB,KAIpD,kBAAC,EAAApB,MAAA,KAAU,CAACC,OAAK,GACb,kBAAC,EAAAvjB,KAAI,CAACoC,GAAG,IAAIpB,OAAO,OAAO2C,MAAM,YAAYzE,KAAK,OAC7C2iB,IAIRjZ,OAAOwE,KAAK1J,GAAQ0E,KAAI,SAAA6c,GAAM,mDAC3B,kBAAC,EAAA3B,MAAA,KAAU,CACPta,IAAKic,EACLhmB,UAAWgC,IAAW,6CAA8C,CAChE,sDACkB,QADsC,EACpDyC,EAAOuhB,UAAO,aADqC,EAEpDC,eAGP,oCACKC,MAAM7K,QAAQ5W,EAAOuhB,IACH,QADe,EAC7BvhB,EAAOuhB,UAAO,aAAf,EAA8C7c,KAAI,SAACrB,EAAMd,GAAK,iCAC1D,kBAAC,EAAAjG,KAAI,CACDgJ,IAAK/C,EACL7D,GAAG,IACHuB,MAA2B,QAAtB,EAAEoD,SAAa,QAAT,EAAJA,EAAMqe,eAAO,WAAT,EAAJ,EAAezhB,aAAK,QAAI,YAC/B3C,OAA6B,QAAvB,EAAE+F,SAAa,QAAT,EAAJA,EAAMqe,eAAO,WAAT,EAAJ,EAAepkB,cAAM,QAAI,SACjCyC,MAA2B,QAAtB,EAAEsD,SAAa,QAAT,EAAJA,EAAMqe,eAAO,WAAT,EAAJ,EAAe3hB,aAAK,QAAI,SAC/BvE,KAAyB,QAArB,EAAE6H,SAAa,QAAT,EAAJA,EAAMqe,eAAO,WAAT,EAAJ,EAAelmB,YAAI,QAAIylB,IAC7BtmB,OAA6B,QAAvB,EAAE0I,SAAa,QAAT,EAAJA,EAAMqe,eAAO,WAAT,EAAJ,EAAe/mB,cAAM,QAAI,IAEhC0I,EAAKxG,MACLwG,SAAa,QAAT,EAAJA,EAAMqe,eAAO,WAAT,EAAJ,EAAeC,8BACZ,kBAAC,EAAArlB,KAAI,CAAC2D,MAAO,cAAezE,KAAM,QAAO,KAI1C,IAGX,oCACI,kBAAC,EAAAc,KAAI,CACDoC,GAAG,IACHpB,OAAmE,QAA7D,EAAiB,QAAjB,EAAG0C,EAAOuhB,UAAO,OAAoC,QAApC,EAAf,EAA4CG,eAAO,WAApC,EAAf,EAAqDpkB,cAAM,QAAI,SACvEyC,MAAiE,QAA5D,EAAiB,QAAjB,EAAGC,EAAOuhB,UAAO,OAAoC,QAApC,EAAf,EAA4CG,eAAO,WAApC,EAAf,EAAqD3hB,aAAK,QAAI,SACrEE,MAAiE,QAA5D,EAAiB,QAAjB,EAAGD,EAAOuhB,UAAO,OAAoC,QAApC,EAAf,EAA4CG,eAAO,WAApC,EAAf,EAAqDzhB,aAAK,QAAI,YACrEzE,KAA+D,QAA3D,EAAiB,QAAjB,EAAGwE,EAAOuhB,UAAO,OAAoC,QAApC,EAAf,EAA4CG,eAAO,WAApC,EAAf,EAAqDlmB,YAAI,QAAIylB,IACnEtmB,OAAmE,QAA7D,EAAiB,QAAjB,EAAGqF,EAAOuhB,UAAO,OAAoC,QAApC,EAAf,EAA4CG,eAAO,WAApC,EAAf,EAAqD/mB,cAAM,QAAI,IAEvD,QAF0D,EAExEqF,EAAOuhB,UAAO,aAAf,EAA4C1kB,OAEjC,QAAf,EAACmD,EAAOuhB,UAAO,aAAf,EAA4CC,cACzC,kBAAC,EAAAzlB,QAAO,CACJC,UAAU,OACVT,UAAU,+BACVa,gBAAgB,oCAChBd,KAAK,OACLsmB,sBAAoB,EACpBC,yBAAuB,EACvB5lB,QAAwB,QAAjB,EAAG+D,EAAOuhB,UAAO,aAAf,EAA4CC,YACrDnlB,OAAQ,SAMnB,KAI7B,EA4bA,SA1bgCuG,EAAAA,EAAAA,KAC5B,YAeqC,QAdjC4d,EAAY,EAAZA,aACAsB,EAAW,EAAXA,YACAlM,EAAY,EAAZA,aACA2K,EAAuB,EAAvBA,wBACAwB,EAA8B,EAA9BA,+BACAnB,EAAyC,EAAzCA,0CACAoB,EAAe,EAAfA,gBACAC,EAA+B,EAA/BA,gCACAC,EAAiB,EAAjBA,kBACAC,EAAiC,EAAjCA,kCACAC,EAA0B,EAA1BA,2BACAC,EAAkB,EAAlBA,mBACApO,EAAuB,EAAvBA,wBACAqO,EAAqB,EAArBA,sBAEA,GAA4ClgB,EAAAA,EAAAA,MAApC/I,EAAM,EAANA,OAAQ6Z,EAAE,EAAFA,GAAIqP,EAAM,EAANA,OAAQrO,EAAW,EAAXA,YAGxBrR,EAWAxJ,EAXAwJ,iBACArC,EAUAnH,EAVAmH,eACyBgiB,EASzBnpB,EATAopB,wBACA/hB,EAQArH,EARAqH,WACAgiB,EAOArpB,EAPAqpB,qCACA7Y,EAMAxQ,EANAwQ,mBACA8Y,EAKAtpB,EALAspB,yCACAC,EAIAvpB,EAJAupB,oCACAhiB,EAGAvH,EAHAuH,gBACAiiB,EAEAxpB,EAFAwpB,8BACAlE,EACAtlB,EADAslB,UAEImE,EAAiC5P,EAAjC4P,6BACAC,EAAwBR,EAAxBQ,oBACAC,EACJ9O,EADI8O,cAAeC,EACnB/O,EADmB+O,WAAYC,EAC/BhP,EAD+BgP,cAAexC,GAC9CxM,EAD8CwM,0BAA2BC,GACzEzM,EADyEyM,+BAG7E,IAMI5f,EAAAA,EAAAA,KALA6Z,GAAa,GAAbA,cACA7B,GAAY,GAAZA,aACAoK,GAAc,GAAdA,eACAC,GAAgC,GAAhCA,iCACA/hB,GAA0B,GAA1BA,2BAG0F,KAArBxC,IAAAA,UAAe,GAAM,GAAvFwkB,GAA8B,MAAEC,GAA8B,MAE/DC,GAAgBX,EAAoCle,KACtD,SAAA4Q,GAAO,gBAA+B,WAAxBA,EAAQkO,YAA2B,YAAclO,EAAQkO,YAAW,YAAIlO,EAAQmO,UAAS,IAGrGC,GAAgBd,EAAoC/d,MAAK,SAAAyQ,GAAO,MAA4B,WAAxBA,EAAQkO,WAAwB,IACpGG,GAA0B,GAAH,SAAOJ,IAAa,EAAMlB,GAAsBqB,GAAgB,CAAC,UAAY,KAEpGE,GAAsC3P,EAA0B,EAAI,EACpEoM,GAA2BzK,EAC3B+N,GAAwB9d,OACxB+d,GACAC,GACDjO,GAAiB3B,EAEZ0P,GAAwBpZ,QAAO,SAAAjF,GAAG,OAAIA,EAAIwe,WAAW,YAAY,IAAEje,OADnE,EAEJke,GACDnO,GAAiB3B,EAEZ0P,GAAwBpZ,QAAO,SAAAjF,GAAG,OAAIA,EAAIwe,WAAW,YAAY,IAAEje,QAAU,EAD7E,EAGJ4a,GAAoD,IAA7BoD,IAA+D,IAA7BE,GAC/D,IAMIriB,EAAAA,EAAAA,6BAA4BlB,GAL5BwjB,GAAwB,GAAxBA,yBACAriB,GAAgC,GAAhCA,iCACAC,GAAuC,GAAvCA,wCACAC,GAAgB,GAAhBA,iBACAoiB,GAAW,GAAXA,YAGEjD,GAAqB,CAAC,KAAM,KAAM,MAAM1e,SAASqc,GAEvD9f,IAAAA,WAAgB,WAIZ,GAHI+W,IAAiBlV,GACjBE,KAECyiB,GAAgC,CACjC,IAAInZ,EAAqC,CAAC,EACrCrH,EAMDqH,EAAwBrH,EALxBnK,EAAAA,GAAAA,WAAAA,QAAAA,cAAoC2R,MAAK,SAACvS,GACtCoS,EAAwBpS,EAASqS,aACjCN,EAAmB/R,EAASqS,aAChC,IAIJ,MACID,EADIjH,EAAO,EAAPA,QAAS+B,EAAc,EAAdA,eAAgBV,EAAa,EAAbA,cAAeM,EAAyB,EAAzBA,0BAA2BT,EAAsB,EAAtBA,uBAEvElB,GAAW+B,GAAkBV,GAAiBM,GAA6BT,GAC3Emf,IAA+B,EAEvC,CAEJ,GAAG,IAEH,IA+C2CY,GA/CNC,GAuI/BC,GAAoB,SAAC/gB,GAAqC,OAC5D6B,OAAOC,QAAQ4T,IAAclU,MAAK,YAAkB,aAAhBS,EAAG,KAAEnM,EAAK,KACG,IAAtBkK,EAAK6c,OAAO7G,MAAM,KAAI,GAAtCgL,EAAM,KAAEtgB,EAAI,KACbugB,EAAuBxC,EAAc,OAAS,OACpD,OACI3oB,EAAMqqB,cAAgBa,GACtBlrB,EAAMorB,wBAA0BxgB,GAChC5K,EAAMwX,eAAiB2T,GACvBhf,EAAIhD,SAASxC,EAAAA,cAAAA,IAErB,GAAE,EAQA0kB,GAAgB,SAACnhB,GACnB,IAIMohB,EACF7O,IALqC2K,EAClCyC,IAAkBC,GAAgBC,GAAiBD,GACnDT,KAKHK,aAA6B,EAA7BA,EAA+Bhd,QAAS,GACxCmc,EAEJM,IACImC,EACItC,GAAqD,0BAAhB9e,EAAK6c,OAC1CkC,GAA2B,GAE3BH,IAGJvhB,IACC,CAAC,gBAAiB,gBAAiB,SAAU,yBAAyB4B,SAASe,EAAK6c,QAErF4C,IAtHoB,SAACzf,GACzB,IAKMqhB,EAAkB,CACpBjN,SAAUqK,EAAc,OAAS,OACjC/d,KANoB,WAAhBV,EAAK6c,OAA4B,MAC9B7c,EAAK6c,OAAO4D,WAAW,aAAe,YAAc,aAU/D,OAHAlJ,KACAuI,GAAeuB,GAEPrhB,EAAK6c,QACT,IAAK,gBACL,IAAK,gBACD6C,EAAoBjjB,EAAAA,cAAAA,KACpBsjB,GAAiCuB,EAAAA,aAAAA,KACjCzC,EAAkBwC,GAClB,MACJ,IAAK,gBACL,IAAK,gBACD3B,EAAoBjjB,EAAAA,cAAAA,KACpBsjB,GAAiCuB,EAAAA,aAAAA,KAE7B/iB,KACCoiB,KACAtB,GACDW,IACAxhB,GAEAqgB,EAAkBwC,GAElBrjB,KAEJ,MACJ,IAAK,oBACL,IAAK,oBACD0hB,EAAoBjjB,EAAAA,cAAAA,KACpBsjB,GAAiCuB,EAAAA,aAAAA,SAE7B/iB,KACCoiB,KACArB,GACDU,IACAxhB,GAEAqgB,EAAkBwC,GAElBrjB,KAEJ,MACJ,IAAK,mBACD0hB,EAAoBjjB,EAAAA,cAAAA,KACpBsjB,GAAiCuB,EAAAA,aAAAA,QAC7B/iB,IAA2CC,IAAoBwhB,GAC/DnB,EAAkBwC,GAElBrjB,KAEJ,MACJ,IAAK,wBACD0hB,EAAoBjjB,EAAAA,cAAAA,KACpBsjB,GAAiCuB,EAAAA,aAAAA,cAC5BhjB,IAAoCE,IAAqBigB,EAC1DI,EAAkBwC,GAElBrjB,KAEJ,MACJ,IAAK,UACD0hB,EAAoBjjB,EAAAA,cAAAA,SACpBoiB,EAAkBwC,GAI9B,CA4CQE,CAAoBvhB,EAE5B,EAmCM+c,GAAqBiC,GAAsBwB,GAA2B,iBAAmB,GAQzFvD,GALEyB,EAAuC,sCAClC9N,EAAgC,oCAClC,KAKX,OACI,yBAAK1Y,UAAU,8BACX,yBAAKA,UAAU,6CACX,kBAAC,EAAAqkB,MAAK,CAACrkB,UAAU,qCACb,kBAAC,EAAAqkB,MAAA,OAAY,KACT,kBAAC,EAAAA,MAAA,IAAS,CACNrkB,UACI+kB,SAAAA,GACA/iB,IAAW,2CAAD,OAA4C6iB,KAAkB,0EACTyD,GAAwB,sBAAcE,IAAwB,OAAG3D,IACxHC,GAA2B,IAAMK,IAAyB,qEACHmD,IAAwB,OAAGzD,IAClFM,IAAyB,KAIrC,kBAAC,EAAAd,MAAA,KAAU,CAACC,OAAK,EAACtkB,UAAU,kDAC1B0Y,GAA2B4P,GAA2B,GACpD,kBAAC,EAAAjE,MAAA,KAAU,CAACrkB,UAAU,kDACjBW,EAAAA,EAAAA,UAAS,aAGhBwkB,IAA6BqD,GAA2B,GACtD,kBAAC,EAAAnE,MAAA,KAAU,CAACrkB,UAAU,iDACjB0Y,GAA0B/X,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,eAG7DwkB,IAA6B2B,GAAsBwB,GAA2B,GAC5E,kBAAC,EAAAjE,MAAA,KAAU,CAACrkB,UAAU,kDACjBW,EAAAA,EAAAA,UAAS,cAM1B,kBAAC,aAAc,KACX,kBAAC,EAAA0jB,MAAA,KAAU,MApQMuE,GAsL7BpC,EDrQgE,CAC5E,CACIzZ,GAAI,WACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,YACpB8D,OAAQ,CACJ6kB,cAAe,CAAEhoB,MAAMX,EAAAA,EAAAA,UAAS,QAChCklB,cAAe,CAAEvkB,MAAMX,EAAAA,EAAAA,UAAS,QAChCilB,OAAQ,CAAEtkB,MAAMX,EAAAA,EAAAA,UAAS,cAGjC,CACIoM,GAAI,WACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,oBACpB8D,OAAQ,CACJ6kB,cAAe,CAAEhoB,MAAMX,EAAAA,EAAAA,UAAS,iBAChCklB,cAAe,CAAEvkB,MAAMX,EAAAA,EAAAA,UAAS,iBAChCilB,OAAQ,CAAEtkB,MAAMX,EAAAA,EAAAA,UAAS,mBAGjC,CACIoM,GAAI,cACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,uBACpB8D,OAAQ,CACJ6kB,cAAe,CACX,CAAEhoB,MAAMX,EAAAA,EAAAA,UAAS,eACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,YACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,gBAErBklB,cAAe,CACX,CAAEvkB,MAAMX,EAAAA,EAAAA,UAAS,0BACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,WACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,kBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,gBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,sBAErBilB,OAAQ,CACJ,CAAEtkB,MAAMX,EAAAA,EAAAA,UAAS,eACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,YACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,eACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,0BACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,WACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,kBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,gBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,yBC4NV+X,EACHsM,GAA2BC,IAAiBc,EAAAA,YAAAA,QDjNgB,CAC5E,CACIhZ,GAAI,WACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,oBACpB8D,OAAQ,CACJ8kB,sBAAuB,CAAEjoB,MAAMX,EAAAA,EAAAA,UAAS,cAAewlB,QAAS,CAAElmB,KAAM,WAGhF,CACI8M,GAAI,cACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,uBACpB8D,OAAQ,CACJ8kB,sBAAuB,CACnB,CAAEjoB,MAAMX,EAAAA,EAAAA,UAAS,cAAewlB,QAAS,CAAEC,6BAA6B,IACxE,CAAE9kB,MAAMX,EAAAA,EAAAA,UAAS,oBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,WACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,kBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,gBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,qBACjB,CACIW,MAAMX,EAAAA,EAAAA,UAAS,iCACfwlB,QAAS,CAAEzhB,MAAO,cAAe3C,OAAQ,OAAQ3C,OAAQ,CAAEoqB,WAAY,cApQtB,CACjE,CACIzc,GAAI,WACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,YACpB8D,OAAQ,CACJ8kB,sBAAuB,CAAEjoB,MAAMX,EAAAA,EAAAA,UAAS,OAAQwlB,QAAS,CAAElmB,KAAM,UAGzE,CACI8M,GAAI,eACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,gBACpB8D,OAAQ,CACJ8kB,sBAAuB,CAAEjoB,MAAMX,EAAAA,EAAAA,UAAS,SAAUwlB,QAAS,CAAEpkB,OAAQ,WAG7E,CACIgL,GAAI,eACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,wBACpB8D,OAAQ,CACJ8kB,sBAAuB,CAAEjoB,MAAMX,EAAAA,EAAAA,UAAS,yCAGhD,CACIoM,GAAI,YACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,aACpB8D,OAAQ,CACJ8kB,sBAAuB,CACnBjoB,MAAMX,EAAAA,EAAAA,UAAS,qFACfwlB,QAAS,CAAE/mB,OAAQ,CAAEqqB,QAAS,qBAI1C,CACI1c,GAAI,WACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,oBACpB8D,OAAQ,CACJ8kB,sBAAuB,CAAEjoB,MAAMX,EAAAA,EAAAA,UAAS,cAAewlB,QAAS,CAAElmB,KAAM,WAGhF,CACI8M,GAAI,cACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,uBACpB8D,OAAQ,CACJ8kB,sBAAuB,CACnB,CAAEjoB,MAAMX,EAAAA,EAAAA,UAAS,cAAewlB,QAAS,CAAEC,6BAA6B,IACxE,CAAE9kB,MAAMX,EAAAA,EAAAA,UAAS,oBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,WACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,kBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,gBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,qBACjB,CACIW,MAAMX,EAAAA,EAAAA,UAAS,iCACfwlB,QAAS,CAAEzhB,MAAO,cAAe3C,OAAQ,OAAQ3C,OAAQ,CAAEoqB,WAAY,cAMtB,CACjE,CACIzc,GAAI,WACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,YACpB8D,OAAQ,CACJ6kB,cAAe,CAAEhoB,MAAMX,EAAAA,EAAAA,UAAS,QAChCilB,OAAQ,CAAEtkB,MAAMX,EAAAA,EAAAA,UAAS,cAGjC,CACIoM,GAAI,eACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,gBACpB8D,OAAQ,CACJ6kB,cAAe,CAAEhoB,MAAMX,EAAAA,EAAAA,UAAS,4BAA6BwlB,QAAS,CAAEpkB,OAAQ,SAChF4jB,cAAe,CAAErkB,MAAMX,EAAAA,EAAAA,UAAS,0BAA2BwlB,QAAS,CAAEpkB,OAAQ,SAC9E2nB,kBAAmB,CAAEpoB,MAAMX,EAAAA,EAAAA,UAAS,WAAYwlB,QAAS,CAAEpkB,OAAQ,SACnE8jB,cAAe,CAAEvkB,MAAMX,EAAAA,EAAAA,UAAS,4BAA6BwlB,QAAS,CAAEpkB,OAAQ,SAChF4nB,cAAe,CAAEroB,MAAMX,EAAAA,EAAAA,UAAS,0BAA2BwlB,QAAS,CAAEpkB,OAAQ,SAC9E6nB,kBAAmB,CAAEtoB,MAAMX,EAAAA,EAAAA,UAAS,WAAYwlB,QAAS,CAAEpkB,OAAQ,SACnE+jB,iBAAkB,CACdxkB,MAAMX,EAAAA,EAAAA,UAAS,UACfwlB,QAAS,CAAEpkB,OAAQ,QACnBkkB,aAAatlB,EAAAA,EAAAA,UACT,2IAGRilB,OAAQ,CAAEtkB,MAAMX,EAAAA,EAAAA,UAAS,4BAA6BwlB,QAAS,CAAEpkB,OAAQ,WAGjF,CACIgL,GAAI,eACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,wBACpB8D,OAAQ,CACJ6kB,cAAe,CAAEhoB,MAAMX,EAAAA,EAAAA,UAAS,oBAChCglB,cAAe,CAAErkB,MAAMX,EAAAA,EAAAA,UAAS,oBAChC+oB,kBAAmB,CAAEpoB,MAAMX,EAAAA,EAAAA,UAAS,kBACpCklB,cAAe,CAAEvkB,MAAMX,EAAAA,EAAAA,UAAS,oBAChCgpB,cAAe,CAAEroB,MAAMX,EAAAA,EAAAA,UAAS,oBAChCipB,kBAAmB,CAAEtoB,MAAMX,EAAAA,EAAAA,UAAS,kBACpCmlB,iBAAkB,CAAExkB,MAAMX,EAAAA,EAAAA,UAAS,mBACnCilB,OAAQ,CAAEtkB,MAAMX,EAAAA,EAAAA,UAAS,sBAGjC,CACIoM,GAAI,YACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,yCACpB8D,OAAQ,CACJ6kB,cAAe,CAAEhoB,MAAMX,EAAAA,EAAAA,UAAS,yBAChCglB,cAAe,CACXrkB,MAAMX,EAAAA,EAAAA,UAAS,sFAEnB+oB,kBAAmB,CACfpoB,MAAMX,EAAAA,EAAAA,UAAS,0CAEnBklB,cAAe,CAAEvkB,MAAMX,EAAAA,EAAAA,UAAS,yBAChCgpB,cAAe,CACXroB,MAAMX,EAAAA,EAAAA,UAAS,sFAEnBipB,kBAAmB,CACftoB,MAAMX,EAAAA,EAAAA,UAAS,0CAEnBmlB,iBAAkB,CAAExkB,MAAMX,EAAAA,EAAAA,UAAS,iEACnCilB,OAAQ,CAAEtkB,KAAM,0BAGxB,CACIyL,GAAI,WACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,oBACpB8D,OAAQ,CACJ6kB,cAAe,CAAEhoB,MAAMX,EAAAA,EAAAA,UAAS,iBAChCipB,kBAAmB,CAAEtoB,MAAMX,EAAAA,EAAAA,UAAS,iBACpCmlB,iBAAkB,CAAExkB,MAAMX,EAAAA,EAAAA,UAAS,gBACnCilB,OAAQ,CAAEtkB,MAAMX,EAAAA,EAAAA,UAAS,mBAGjC,CACIoM,GAAI,cACJ6V,WAAWjiB,EAAAA,EAAAA,UAAS,uBACpB8D,OAAQ,CACJ6kB,cAAe,CACX,CAAEhoB,MAAMX,EAAAA,EAAAA,UAAS,eACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,YACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,gBAErBklB,cAAe,CACX,CAAEvkB,MAAMX,EAAAA,EAAAA,UAAS,0BACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,WACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,kBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,gBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,sBAErBipB,kBAAmB,CACf,CAAEtoB,MAAMX,EAAAA,EAAAA,UAAS,UACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,kBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,gBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,sBAErBmlB,iBAAkB,CAAC,CAAExkB,MAAMX,EAAAA,EAAAA,UAAS,UAAY,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,sBACjEilB,OAAQ,CACJ,CAAEtkB,MAAMX,EAAAA,EAAAA,UAAS,eACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,YACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,eACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,0BACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,WACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,kBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,gBACjB,CAAEW,MAAMX,EAAAA,EAAAA,UAAS,yBCoGhB0Z,EAUEuO,GAAczf,KAAI,SAAA0gB,GACrB,IAAMC,EAA4BngB,OAAOC,QAAQigB,EAASplB,QAAQqN,QAC9D,SAACiY,EAAK,GAAF,aAAGhgB,EAAG,KAAEnM,EAAK,YAAOwqB,GAAwBrhB,SAASgD,GAAO,OAAKggB,GAAG,QAAGhgB,EAAMnM,IAAUmsB,CAAG,GAC9F,CAAC,GAECC,EAAe,OAAKH,GAAQ,IAAEplB,OAAQ,CAAC,IACvCwlB,EAAUnD,EAAqB,EAAI,EACzC,GAAIsB,GAAwB9d,OAAS2f,IAAYvR,EAAyB,CAEtE,IAAMwR,EAAgB,CAClB,gBACA,gBACA,gBACA,gBACA,oBACA,oBAAkB,SACdpD,GAAsBwB,GAA2B,EAAI,CAAC,UAAY,KAE1E0B,EAAavlB,OAASylB,EAAcpY,QAChC,SAACiY,EAAKI,GAAE,OAAM/B,GAAwBrhB,SAASojB,GAAM,OAAKJ,GAAG,QAAGI,OAAKtrB,IAAckrB,CAAG,GACtF,CAAC,GAEL3B,GAAwBve,SAAQ,SAAAE,GACR,aAAhB8f,EAAS9c,IAA8B,kBAARhD,GAAmC,kBAARA,EAEnC,gBAAhB8f,EAAS9c,IAAgC,kBAARhD,EACxCigB,EAAavlB,OAAOsF,GAAO8f,EAASplB,OAAO6kB,cACpB,gBAAhBO,EAAS9c,IAAgC,kBAARhD,IACxCigB,EAAavlB,OAAOsF,GAAO8f,EAASplB,OAAOohB,eAJ3CmE,EAAavlB,OAAOsF,GAAO8f,EAASplB,OAAOmlB,iBAMnD,GACJ,CACA,OAAO,OAAKI,GAAY,IAAEvlB,OAAQ,OAAKulB,EAAavlB,QAAWqlB,IACnE,IA1CQpR,EACOkQ,GAEMA,GAAczf,KAAI,SAAArB,GAC/B,MAA4BA,EAAKrD,OAAd2lB,GAAL,EAANxE,OAAe,QACvB,OAAO,OAAK9d,GAAI,IAAErD,OAAQ2lB,GAC9B,KA6PgEjhB,KAAI,SAAAsa,GAAG,OACnD,kBAACmB,EAAG,GACA7a,IAAK0Z,EAAI1W,IACL0W,EAAG,CACPoB,mBAAoBA,GACpBC,yBAA0BA,GAC1BC,0BAA2BA,GAC3BC,wBAAyBA,EACzBC,aAAcA,EACdC,qBAAsBA,GACtBC,0BAA2BA,GAC3BC,+BAAgCA,GAChCC,0CACIA,EAEJjC,UAAWA,IACb,KAGT/I,GACG,kBAAC,EAAAgK,MAAA,IAAS,CACNrkB,UACI+kB,SAAAA,GACA/iB,IAAW,2CAAD,OAA4C6iB,KAAkB,sEAEhEC,GAA2B,GAC1BA,GAA2B,GAAC,wDACa1B,GAC1CqC,IAAkB,KAI9B,kBAAC,EAAApB,MAAA,KAAU,CACPC,OAAK,EACLtkB,UACI,iGAzPO2oB,GAmJnCnC,EDhO0E,CACtF,CAAE3hB,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,iBAClC,CAAE9f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,iBAClC,CAAE9f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,WC8NjB4B,GAAe7N,GACjBA,EADiDgM,IDhSW,CAC3E,CAAE7f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,iBAClC,CAAE9f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,iBAClC,CAAE9f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,qBAClC,CAAE9f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,iBAClC,CAAE9f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,iBAClC,CAAE9f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,qBAClC,CAAE9f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,oBAClC,CAAE9f,OAAOlE,EAAAA,EAAAA,UAAS,OAAQgkB,OAAQ,WCqInBgE,GAAmB3Z,QAAO,SAAA3Q,GAC7B,QAAI8mB,IAEoB,WAAhB9mB,EAAKsmB,SAENyD,GAAwBrhB,SAAS1I,EAAKsmB,OACjD,KAsP2Exb,KAAI,SAACrB,EAAMd,GAAK,OAC/D,kBAAC,EAAAqd,MAAA,KAAU,CACPta,IAAK/C,EACLhH,UAAWgC,IAAW,iDAAkD,wEAEhEgjB,GAA2BtM,MAGjC6N,GA7GN,SAACze,GAC7B,IAAMU,EAAOV,EAAK6c,OAAO7G,MAAM,KAAK,GACpC,QAAI+K,GAAkB/gB,IAEK,WAAhBA,EAAK6c,SAEI,QAATnc,IAAkB2e,IAAwCuB,MAEjD,YAATlgB,IAAsB4e,IAA4CsB,IAKjF,CAgGqD2B,CAAwBviB,GACrC,yBAAK9H,UAAU,wEACX,kBAAC,EAAAe,KAAI,CAACd,KAAMmM,EAAAA,UAAY,MAAQ,OAAQ5H,MAAM,WACzC7D,EAAAA,EAAAA,UAAS,0BAIlB,kBAAC,EAAAM,OAAM,CACHjB,UAAU,mDACVgN,SACoB,WAAhBlF,EAAK6c,OA1KjDhb,OAAOC,QAAQ4T,IAAclU,MAAK,YAAkB,aAAhBS,EAAG,KAAEnM,EAAK,KACpCmrB,EAAuBxC,EAAc,OAAS,OACpD,OAAO3oB,EAAMwX,eAAiB2T,GAAwBhf,EAAIhD,SAASxC,EAAAA,cAAAA,QACvE,IAyKkDskB,GAAkB/gB,GAE5BU,KAAK,SACL8hB,eAAa,EACbpqB,QAAS,kBAAM+oB,GAAcnhB,EAAK,GAEjCA,EAAKjD,OAGL,QASjD,miCCjeJ,IAAMsc,EAA4B,SAAH,GAA4C,IAAtC/G,EAAiB,EAAjBA,kBAAmBC,EAAY,EAAZA,aAC9CkQ,EAAyB,CAACnQ,aAAiB,EAAjBA,EAAmBoQ,qBAA+ClgB,OAE5F+W,EAAsBhH,EAAekQ,EAAwB,EAEnE,MAAO,CACH,CACI3H,WAAWjiB,EAAAA,EAAAA,UAAS,YACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,OACjBuhB,SAAU,OAGlB,CACIU,WAAWjiB,EAAAA,EAAAA,UAAS,oBACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,gBACjBuhB,UAAUvhB,EAAAA,EAAAA,UACN,sIAIZ,CACIiiB,WAAWjiB,EAAAA,EAAAA,UAAS,mBACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,UACjBuhB,UAAUvhB,EAAAA,EAAAA,UACN,yJACA,CACIkU,MAAOwM,MAKvB,CACIuB,WAAWjiB,EAAAA,EAAAA,UAAS,UACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,kBACjBuhB,UAAUvhB,EAAAA,EAAAA,UACN,2QAIZ,CACIiiB,WAAWjiB,EAAAA,EAAAA,UAAS,cACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,MACjBuhB,UAAUvhB,EAAAA,EAAAA,UAAS,2DAG3B,CACIiiB,WAAWjiB,EAAAA,EAAAA,UAAS,mBACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,MACjBuhB,SAAU,OAGlB,CACIU,WAAWjiB,EAAAA,EAAAA,UAAS,eACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,QACjBuhB,UAAUvhB,EAAAA,EAAAA,UACN,8GAIZ,CACIiiB,WAAWjiB,EAAAA,EAAAA,UAAS,kBACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,OACjBuhB,UAAUvhB,EAAAA,EAAAA,UACN,yIAIZ,CACIiiB,WAAWjiB,EAAAA,EAAAA,UAAS,+BACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,aACjBuhB,SAAU,OAGlB,CACIU,WAAWjiB,EAAAA,EAAAA,UAAS,oBACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,QACjBuhB,SAAU,OAGlB,CACIU,WAAWjiB,EAAAA,EAAAA,UAAS,0BACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UAAS,OACjBuhB,UAAUvhB,EAAAA,EAAAA,UAAS,mFAG3B,CACIiiB,WAAWjiB,EAAAA,EAAAA,UAAS,uBACpBmiB,QAAS,CACL8C,QAAQjlB,EAAAA,EAAAA,UACJ,gHAEJuhB,SAAU,OAI1B,EAEMa,EAAwB,SAAH,GAAuD,IAAjD1mB,EAAI,EAAJA,KAAM2mB,EAAO,EAAPA,QAEqB,IAArB1f,IAAAA,UAAe,GAAM,GAArC2f,GAAF,KAAc,MAG/B,OAAOD,EACH,kBAAC,aAAc,KACX,kBAAC,EAAAjiB,KAAI,CACDoC,GAAG,IACHpB,OAAO,OACP9B,KAAK,KACLmf,YAAY,IACZpf,UAAU,0BACVE,QAVQ,WAAH,OAAS+iB,GAAa,SAAAwH,GAAI,OAAKA,CAAI,GAAC,GAYxCpuB,EACD,kBAAC,EAAA0E,KAAI,CAACgB,OAAO,OAAOoB,GAAG,OAAOic,YAAY,IAAInf,KAAK,OAAOD,UAAU,WAC/DgjB,KAKb,kBAAC,EAAAjiB,KAAI,CAACoC,GAAG,IAAIpB,OAAO,OAAO9B,KAAK,KAAKmf,YAAY,IAAIpf,UAAU,2BAC1D3D,EAGb,EAiCM6mB,EAAsB,SAAH,GAOS,IAN9B9I,EAAiB,EAAjBA,kBACAC,EAAY,EAAZA,aAEA9Z,GADY,EAAZ4iB,aACQ,EAAR5iB,UAEA6gB,GADS,EAATgC,UACK,EAALhC,OAGA,OAxCsD,SACtDhH,EACAkJ,EACAjJ,EACA8I,EACA5iB,GAEA,IAAIijB,EAAkB,EACtB,OAAOF,EACFtU,QAAO,SAAAyU,GAAG,OAAIA,EAAIljB,EAAuC,IACzD4I,KAAI,YAAiC,IAA9ByZ,EAAS,EAATA,UAAS,IAAEE,QAAAA,OAAO,IAAG,GAAC,EAAC,EACnB8C,EAAqB9C,EAArB8C,OACFhC,EADuBd,EAAbZ,WACsBsB,EAAkB,KAExD,OAAIjjB,IAAagE,EAAAA,cAAAA,QACN,CACHqe,UAAW,kBAAC,EAAqB,CAACvmB,KAAMumB,EAAWI,QAASY,IAC5DgC,OAAAA,GAIG,CACHhD,UAAW,kBAAC,EAAqB,CAACvmB,KAAMumB,EAAWI,QAASY,IAMxE,GACR,CAWWC,CACHzJ,EACA+G,EAAY,CAAE/G,kBAAAA,EAAmB7Z,SAAAA,EAAU8Z,aAAAA,EAAc+G,MAAAA,IACzD/G,EACA8I,EACA5iB,EAGR,EAEMujB,EAAwB,SAAH,GAMQ,IAL/BvjB,EAAQ,EAARA,SACAwjB,EAAiB,EAAjBA,kBACA3J,EAAiB,EAAjBA,kBACAC,EAAY,EAAZA,aACA+G,EAAK,EAALA,MAEA,OACI,yBAAKphB,UAAU,6BACX,yBAAKA,UAAU,wCACX,0BAAMA,UAAU,sEAChB,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,uOAE/B0gB,GACG,kBAAC,aAAc,KACX,yBAAK/jB,UAAU,wCACX,0BAAMA,UAAU,sEAChB,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,6FAEhC,yBAAKrD,UAAU,wCACX,kBAAC,EAAAe,KAAI,CACDd,KAAK,KACLmf,YAAY,IACZrd,OAAO,OACP/B,UAAU,8FAA4F,KAI1G,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,yWAClBoB,OAAQ,CACJlE,UAAUI,EAAAA,EAAAA,UAAS,eAI9BygB,GACG,yBAAKphB,UAAU,wCACX,kBAAC,EAAAe,KAAI,CACDd,KAAK,KACLmf,YAAY,IACZrd,OAAO,OACP/B,UAAU,8FAA4F,MAI1G,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,sFAClBoB,OAAQ,CACJlE,UAAUI,EAAAA,EAAAA,UAAS,gBAO1CwgB,EAAY,CAAE/G,kBAAAA,EAAmB7Z,SAAAA,EAAU8Z,aAAAA,EAAc+G,MAAAA,IACrDpS,QACG,SAAAlH,GAAI,cAC+C,QAA9C,EAAEA,EAAKvH,UAAuC,QAA7C,EAAmF2hB,SAAQ,IAEpG/Y,KAAI,SAAC4Q,EAAS/S,GACX,OACI,yBAAK+C,IAAK/C,EAAOhH,UAAU,wCACvB,kBAAC,EAAAe,KAAI,CACDd,KAAK,KACLmf,YAAY,IACZrd,OAAO,OACP/B,UAAU,8FAETgH,EAAQ,GAEb,yBAAKhH,UAAU,kCACX,kBAAC,EAAAe,KAAI,CACDoC,GAAG,IACHlD,KAAK,KACL8B,OAAO,OACP2C,MAAM,YACN1E,UAAU,wCAET+Z,EAAQ6I,WAEb,kBAAC,EAAA7hB,KAAI,CAACd,KAAK,KAAKyE,MAAM,aAGVqV,EACIxZ,GAEN2hB,WAM1B,IAGhB,EAsEA,QApEiC,SAAH,GAOJ,IANtB9H,EAAiB,EAAjBA,kBACAC,EAAY,EAAZA,aACA9Z,EAAQ,EAARA,SACA4iB,EAAY,EAAZA,aACAC,EAAS,EAATA,UACAhC,EAAK,EAALA,MAEuG,IAA/E9d,IAAAA,SAA4E,IAAG,GAAhG0gB,EAAI,KAAEC,EAAO,KACsD,IAA3B3gB,IAAAA,SAAe,aAAY,GAAnE4gB,EAAgB,KAAEC,EAAkB,KAE3C7gB,IAAAA,WAAgB,WACZ2gB,EAAQf,EAAoB,CAAE9I,kBAAAA,EAAmBC,aAAAA,EAAc9Z,SAAAA,EAAU4iB,aAAAA,EAAcC,UAAAA,EAAWhC,MAAAA,KAClG+C,EAAmB,YACvB,GAAG,CACC/J,aAAiB,EAAjBA,EAAmBoH,qBACnBpH,aAAiB,EAAjBA,EAAmBkH,kBACnBjH,EACA+G,EACAhH,EACA7Z,EACA4iB,EACAC,IAGJ,IAAMW,GAAqBZ,EAE3B,OACI,kBAAC,EAAA3W,kBAAiB,CAACL,cAAc,OAAOS,aAAaR,EAAAA,EAAAA,cACjD,kBAAC,EAAAO,iBAAgB,CACb3M,UAAU,uBACVI,MAAO,CACH,0CAA2C8jB,IAG/C,yBAAKlkB,UAAU,uCACX,kBAAC,EAAAqkB,MAAK,CAACrkB,UAAU,+BACb,kBAAC,EAAAqkB,MAAA,OAAY,KACT,kBAAC,EAAAA,MAAA,IAAS,CAACrkB,UAAU,mCACjB,kBAAC,EAAAqkB,MAAA,KAAU,CAACC,OAAK,IACjB,kBAAC,EAAAD,MAAA,KAAU,MAAE1jB,EAAAA,EAAAA,UAAS,cAG9B,kBAAC,EAAA0jB,MAAA,KAAU,KACNL,EAAK7a,KAAI,SAACsa,EAAKra,GAAC,OACb,kBAAC,EAAAib,MAAA,IAAS,CAACta,IAAKX,EAAGpJ,UAAU,mCACxB2J,OAAOwE,KAAKsV,GAAKta,KAAI,SAACqb,EAAKC,GAAC,OACzB,kBAAC,EAAAJ,MAAA,KAAU,CAACta,IAAK0a,EAAGH,MAAa,IAANG,GACtBhB,EAAIe,GACI,IAET,OAK5B,kBAAC,EAAqB,CAClBjkB,SAAUA,EACVwjB,kBAAmBA,EACnB3J,kBAAmBA,EACnBC,aAAcA,EACd+G,MAAOA,KAK3B,EChbA,IAAMsJ,EAA+B,SAAH,GAUG,IATjCnE,EAAW,EAAXA,YACAlM,EAAY,EAAZA,aACAD,EAAiB,EAAjBA,kBACA7Z,EAAQ,EAARA,SACA4iB,EAAY,EAAZA,aACAwH,EAAoB,EAApBA,qBACAvH,EAAS,EAATA,UACA3F,EAAK,EAALA,MACA2D,EAAK,EAALA,MAEA,OAAImF,IAAgBoE,EAEZ,kBAAC,EAAwB,CACrBtQ,aAAcA,EACdD,kBAAmBA,EACnB7Z,SAAUA,EACV4iB,aAAcA,EACdC,UAAWA,EACX3F,MAAOA,EACP2D,MAAOA,IAMf,kBAAC,EAAY,CACT/G,aAAcA,EACdD,kBAAmBA,EACnB7Z,SAAUA,EACV4iB,aAAcA,EACdC,UAAWA,EACX3F,MAAOA,EACP2D,MAAOA,GAGnB,EA4MA,SA1M6B/Z,EAAAA,EAAAA,KACzB,YAQkC,UAP9BsjB,EAAoB,EAApBA,qBACApE,EAAW,EAAXA,YACAE,EAAe,EAAfA,gBACAE,EAAiB,EAAjBA,kBACApmB,EAAQ,EAARA,SACAqmB,EAAiC,EAAjCA,kCACAC,EAA0B,EAA1BA,2BAEA,GAAoChgB,EAAAA,EAAAA,MAA5B8Q,EAAE,EAAFA,GAAI7Z,EAAM,EAANA,OAAQ6a,EAAW,EAAXA,YAEZrT,EAA2DqS,EAA3DrS,WAAYC,EAA+CoS,EAA/CpS,UAAWmhB,EAAoC/O,EAApC+O,gCAEK3hB,EAMhCjH,EANA8sB,+BACAnN,EAKA3f,EALA2f,MACA2D,EAIAtjB,EAJAsjB,MACA/G,EAGAvc,EAHAuc,aACAD,EAEAtc,EAFAsc,kBACAgJ,EACAtlB,EADAslB,UAEI6B,EAAqEtM,EAArEsM,aAAcvM,EAAuDC,EAAvDD,wBAAyByM,EAA8BxM,EAA9BwM,0BAE/C,GAAoE3f,EAAAA,EAAAA,KAA5DqlB,EAA2B,EAA3BA,4BAA6BC,EAA0B,EAA1BA,2BAE/B9F,EADWroB,OAAOouB,SAASC,SACQzC,WAAW,yBAG9C0C,GACF1G,EAAAA,EAAAA,yBAAwB,CACpBnK,kBAAAA,EACA7Z,SAAUgE,EAAAA,cAAAA,QACViE,KAAM,gBAEV+b,EAAAA,EAAAA,yBAAwB,CACpBnK,kBAAAA,EACA7Z,SAAUgE,EAAAA,cAAAA,QACViE,KAAM,aAEV+b,EAAAA,EAAAA,yBAAwB,CACpBnK,kBAAAA,EACA7Z,SAAUgE,EAAAA,cAAAA,QACViE,KAAM,QAGRse,EAAqB9B,GAA2BiG,IAAevS,EAE/D8N,EAAiCxB,GAA2BC,IAAiBc,EAAAA,YAAAA,QAE7EV,EACFL,GAA2BG,GAA6BF,IAAiBc,EAAAA,YAAAA,QAEvEmF,EAAa3qB,GAAYA,IAAagE,EAAAA,cAAAA,QAOtC4mB,EACsC,IAPvB,CACjB/Q,SAAoC,QAAnB,EAAjBA,EAAmBkH,yBAAiB,WAAnB,EAAjB,EAAsCC,UACtCnH,SAAuC,QAAtB,EAAjBA,EAAmBoH,4BAAoB,WAAtB,EAAjB,EAAyCD,UACzCnH,SAAuC,QAAtB,EAAjBA,EAAmBoH,4BAAoB,WAAtB,EAAjB,EAAyCC,eAI5BzS,OAAO4S,SAAStX,QAC5Bic,GAAehmB,IAAagE,EAAAA,cAAAA,UAC3BomB,GAAwBpqB,IAAagE,EAAAA,cAAAA,SACjC5D,EAAAA,EAAAA,UAAS,wBACTA,EAAAA,EAAAA,UAAS,oBAEbyqB,EAAmB,WACrB,OAAIpG,GAA2BtM,EACpB6N,GAAc5lB,EAAAA,EAAAA,UAAS,gCAAiCA,EAAAA,EAAAA,UAAS,+BACjEmmB,EACAP,GAAc5lB,EAAAA,EAAAA,UAAS,+BAAgCA,EAAAA,EAAAA,UAAS,8BAEpEuqB,EAAaC,GAA2BxqB,EAAAA,EAAAA,UAAS,6BAC5D,EACM0qB,EAAgB,WAClB,OAAIH,EACO,CACH5qB,OAAQ,QACRD,MAAO,SAEJmmB,EACA,CACHlmB,OAAQ,QACRD,MAAO,SAEJqY,EACHsM,EACIC,IAAiBc,EAAAA,YAAAA,QACV,CACHzlB,OAAQ,QACRD,MAAO,SAGR,CACHC,OAAQ,QACRD,MAAO,SAGR,CACHC,OAAQ,QACRD,MAAO,SAEJ2kB,GAA2B8B,EAC3B,CACHxmB,OAAQ,QACRD,MAAO,UAGR,CACHC,OAAQ,QACRD,MAAO,QAEf,EAEMsG,EAAkB,WACpB,OAAOukB,EACH,kBAACR,EAA4B,CACzBnE,YAAaA,EACblM,aAAcA,EACdD,kBAAmBA,EACnB7Z,SAAUA,EACV4iB,eAAgBzK,EAChB0K,UAAWA,EACXuH,qBAAsBA,EACtBlN,MAAOA,EACP2D,MAAOA,IAGX,kBAAC,EAAuB,CACpB6D,aAAcA,EACdsB,YAAaA,EACblM,aAAcA,EACd2K,wBAAyBA,EACzBwB,+BAAgCA,EAChCnB,0CAA2CA,EAC3CoB,gBAAiBA,EACjBC,gCAAiCA,EACjCC,kBAAmBA,EACnBC,kCAAmCA,EACnCC,2BAA4BA,EAC5BC,mBAAoBA,EACpBpO,wBAAyBA,EACzBqO,sBAAuB+D,GAGnC,EAEA,OACI,oCACI,yBACI9qB,UAAU,sCACVI,MAAO,CAAEkrB,UAAWJ,EAAa,OAAS,aAEvC3E,GAA4B,QAAbhmB,KAAwBykB,GACtC,kBAAC,EAAA/jB,OAAM,CACHjB,UAAU,yCACVuD,YAAU,EACVjC,KAAM6pB,EACNjrB,QAAS4qB,EACTtnB,WAAS,EACTwJ,SAAUjI,IAGlB,kBAAC,aAAc,CAAC8S,SAAU,kBAAC,EAAAC,SAAQ,OAC/B,kBAAC,EAAAjL,eAAc,KACX,kBAAC,EAAA5J,MAAK,CACFjD,UACIkrB,EAAa,kCAAoC,6BAErD5lB,WAAYA,EACZC,UAAWA,EACX3C,QAASioB,EACT/nB,MAAOsoB,IACPvoB,YAAaioB,EACbtiB,KAAK,SACLlI,OAAQ+qB,IAAgB/qB,OACxBD,MAAOgrB,IAAgBhrB,MACvBkrB,eAAgBL,EAAa,GAAK,0BAEjCvkB,MAGT,kBAAC,EAAAyG,cAAa,KACV,kBAAC,EAAAoe,aAAY,CACTC,kBAAkB,YAClB3oB,MAAOsoB,IACPM,kBAAkB,kCAClBC,QAASd,EACTe,QAASd,EACTe,iBAAkBX,EAAa,GAAK,2CACpCY,iBAAe,GAEdnlB,QAO7B,iTC/QSolB,EAAyBzoB,IAAAA,cAA6C,CAC/E0oB,6BAA6B,EAC7BC,sBAAuB,kBAAM,IAAI,IAGxBC,EAAqB,WAE9B,OADyBjwB,EAAAA,EAAAA,YAAW8vB,EAExC,6BCbaI,EAAoB,CAC7B,CACIpiB,IAAK,QACLjH,OAAOnC,EAAAA,EAAAA,UAAS,gBAChByrB,YAAa,GACbC,UAAU1rB,EAAAA,EAAAA,UAAS,gBACnBtC,KAAM,CACF,CACIiuB,KAAM,IACNC,GAAI,EACJF,SAAU,MAEd,CACIC,KAAM,KACNC,GAAI,EACJF,SAAU,KAEd,CACIC,KAAM,KACNC,GAAI,GACJF,SAAU,KAEd,CACIC,KAAM,MACNC,GAAI,GACJF,SAAU,OAItB,CACItiB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,oBACtB0rB,UAAU1rB,EAAAA,EAAAA,UAAS,gBACnBtC,KAAM,CACF,CACIiuB,KAAM,IACNC,GAAI,EACJF,SAAU,KAEd,CACIC,KAAM,KACNC,GAAI,EACJF,SAAU,KAEd,CACIC,KAAM,KACNC,GAAI,GACJF,SAAU,KAEd,CACIC,KAAM,MACNC,GAAI,GACJF,SAAU,MAItB,CACItiB,IAAK,mBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,oBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,oBACtB0rB,UAAU1rB,EAAAA,EAAAA,UAAS,eACnBtC,KAAM,CACF,CACIiuB,KAAM,IACNC,GAAI,EACJF,SAAU,KAEd,CACIC,KAAM,KACNC,GAAI,EACJF,SAAU,KAEd,CACIC,KAAM,KACNC,GAAI,EACJF,SAAU,KAEd,CACIC,KAAM,KACNC,GAAI,GACJF,SAAU,MAItB,CACItiB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,2BACtB0rB,UAAU1rB,EAAAA,EAAAA,UAAS,eACnBtC,KAAM,CACF,CACIiuB,KAAM,GACNC,GAAI,EACJF,SAAU,KAEd,CACIC,KAAM,IACNC,GAAI,GACJF,SAAU,KAEd,CACIC,KAAM,KACNC,GAAI,EACJF,SAAU,QCtGbG,EAAmC,SAAH,OAAM1pB,EAAK,EAALA,MAAO6P,EAAQ,EAARA,SAAQ,OAC9D,kBAAC,EAAA0R,MAAA,KAAU,KACP,yBAAKrkB,UAAU,oDACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,KAAKuE,MAAM,SAASzC,OAAO,QACjCe,GAEL,kBAAC,EAAA/B,KAAI,CAACd,KAAK,MAAMuE,MAAM,UAClBmO,IAGA,iiCCRV,IAAM8Z,EAA4B,SAAH,OAAM3pB,EAAK,EAALA,MAAOspB,EAAW,EAAXA,YAAaC,EAAQ,EAARA,SAAUhuB,EAAI,EAAJA,KAAI,OAC1E,yBAAK2B,UAAU,kCACX,yBAAKA,UAAU,wCACX,kBAAC,EAAAe,KAAI,CAAC,cAAY,eAAed,KAAK,KAAK8B,OAAO,SAASyC,MAAM,UAC5D1B,KAEFspB,GACC,kBAAC,EAAArrB,KAAI,CACD,cAAY,oBACZd,KAAK,OACLuE,MAAM,SACNxE,UAAU,8CAETosB,GAGT,kBAAC,EAAArrB,KAAI,CAAC,cAAY,iBAAiBd,KAAK,MAAMyE,MAAM,MAAMF,MAAM,UAC3D6nB,IAGT,kBAAC,EAAAhI,MAAK,CAACrkB,UAAU,wCACb,kBAAC,EAAAqkB,MAAA,OAAY,KACT,kBAAC,EAAAA,MAAA,IAAS,CAACrkB,UAAU,mDACjB,kBAACwsB,EAAgC,CAAC1pB,OAAOnC,EAAAA,EAAAA,UAAS,QAASgS,UAAUhS,EAAAA,EAAAA,UAAS,YAC9E,kBAAC6rB,EAAgC,CAAC1pB,OAAOnC,EAAAA,EAAAA,UAAS,MAAOgS,UAAUhS,EAAAA,EAAAA,UAAS,YAC5E,kBAAC6rB,EAAgC,CAAC1pB,OAAOnC,EAAAA,EAAAA,UAAS,YAAagS,UAAUhS,EAAAA,EAAAA,UAAS,aAG1F,kBAAC,EAAA0jB,MAAA,KAAU,KACNhmB,EAAK8K,KAAI,SAAAujB,GAAO,OACb,kBAAC,EAAArI,MAAA,IAAS,CACNta,IAAG,UAAK2iB,EAAQJ,KAAI,YAAII,EAAQH,GAAE,YAAIG,EAAQL,UAC9CrsB,UAAU,4CAET2J,OAAOC,QAAQ8iB,GAASvjB,KAAI,yBAAEwjB,EAAU,KAAE/uB,EAAK,YAC5C,kBAAC,EAAAymB,MAAA,KAAU,CAACta,IAAG,UAAKjH,EAAK,YAAI6pB,EAAU,YAAI/uB,IACvC,kBAAC,EAAAmD,KAAI,CAACd,KAAK,KAAKuE,MAAM,UACjB5G,GAEI,IAET,MAItB,ECvBV,QAtBoC,WAAH,OAC7B,yBAAKoC,UAAU,0BACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,KAAKlD,KAAK,KACf,kBAAC,EAAAmD,SAAQ,CACLC,kBAAkB,wQAClBwS,WAAY,CAAC,4BAAQ9L,IAAK,QAGlC,yBAAK/J,UAAU,mCACVmsB,EAAkBhjB,KAAI,SAAA2f,GAAM,OACzB,kBAAC2D,EAAyB,CACtB1iB,IAAG,kCAA6B+e,EAAO/e,KACvCjH,MAAOgmB,EAAOhmB,MACdupB,SAAUvD,EAAOuD,SACjBD,YAAatD,EAAOsD,YACpB/tB,KAAMyqB,EAAOzqB,MACf,KAGR,2BCtBGuuB,EAA6B,SAAH,OACnCX,EAAqB,EAArBA,sBAAqB,MAC+B,CACpDY,0BAA0B,EAC1B3U,QAAQvX,EAAAA,EAAAA,UAAS,0BACjBmsB,mBAAoB,CAChB,CACI/iB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,sCACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,OACvBssB,wBAAyB,eAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,UACvBssB,wBAAyB,iBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B0kB,sBAAuB,CACnB,CAAE1kB,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,eAC/B,CAAE6H,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,kCAGvC,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,uFAG9BwsB,mBAAoB,CAChB,CACIpjB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,mEACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,QACvBssB,wBAAyB,cAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,UACvBssB,wBAAyB,gBAE7BC,sBAAuB,CACnB,CACI1kB,KAAM,OACNlH,MAAMX,EAAAA,EAAAA,UAAS,oBACfT,QAAS+rB,KAIrB,CACIliB,IAAK,cACLjH,OAAOnC,EAAAA,EAAAA,UAAS,gBAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,YACvBssB,wBAAyB,gBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B0kB,sBAAuB,CACnB,CAAE1kB,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,eAC/B,CAAE6H,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,kCAGvC,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,uFAG9BysB,4BAA6B,CAAC,kBAAmB,oBACjDC,4BAA6B,CAAC,kBAAmB,oBACpD,EC7FYC,EAAiC,SAAH,OACvCrB,EAAqB,EAArBA,sBAAqB,MAC+B,CACpDY,0BAA0B,EAC1B3U,QAAQvX,EAAAA,EAAAA,UAAS,WACjBmsB,mBAAoB,CAChB,CACI/iB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,sCACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,OACvBssB,wBAAyB,eAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,UACvBssB,wBAAyB,iBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B0kB,sBAAuB,CACnB,CAAE1kB,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,eAC/B,CAAE6H,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,kCAGvC,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,2CAG9BwsB,mBAAoB,CAChB,CACIpjB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,0DACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,OACvBssB,wBAAyB,aAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,UACvBssB,wBAAyB,gBAE7BC,sBAAuB,CACnB,CACI1kB,KAAM,OACNlH,MAAMX,EAAAA,EAAAA,UAAS,oBACfT,QAAS+rB,KAIrB,CACIliB,IAAK,cACLjH,OAAOnC,EAAAA,EAAAA,UAAS,gBAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,YACvBssB,wBAAyB,gBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B0kB,sBAAuB,CACnB,CAAE1kB,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,eAC/B,CAAE6H,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,kCAGvC,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,2CAG9BysB,4BAA6B,CAAC,kBAAmB,oBACjDC,4BAA6B,CAAC,kBAAmB,oBACpD,ECvFYE,EAAmC,WAAH,MAA6C,CACtFC,mBAAmB7sB,EAAAA,EAAAA,UAAS,6DAC5B8sB,2BAA4B,CACxBC,gBAAiB,CACb3tB,KAAM,+BACNuB,MAAMX,EAAAA,EAAAA,UAAS,8CAEnBgtB,OAAQ,CACJ5tB,KAAM,uBACNuB,MAAMX,EAAAA,EAAAA,UAAS,0BAEnBitB,kBAAmB,CACf7tB,KAAM,iCACNuB,MAAMX,EAAAA,EAAAA,UAAS,+DAEnBktB,iBAAkB,CACd9tB,KAAM,+BACNuB,MAAMX,EAAAA,EAAAA,UACF,uIAGRmtB,eAAgB,CACZ/tB,KAAM,8BACNuB,KAAM,KAGdysB,kBAAmB,CACf,CACIhuB,KAAM,6BACNuB,MAAMX,EAAAA,EAAAA,UAAS,8CACf+D,MAAO,UAEX,CACI3E,KAAM,0BACNuB,MAAMX,EAAAA,EAAAA,UAAS,0DACf+D,MAAO,OAEX,CAAE3E,KAAM,4BAA6BuB,MAAMX,EAAAA,EAAAA,UAAS,8BAA+B+D,MAAO,UAEjG,uqBCwBD,QAlE6B,SAAH,SACtBspB,EAAc,EAAdA,eACAhhB,EAAQ,EAARA,SACAihB,EAAgB,EAAhBA,iBACAC,EAAc,EAAdA,eACAC,EAAiB,EAAjBA,kBAAiB,OAEjB,yBACI,cAAY,sCACZnuB,UAAWgC,IAAWgsB,EAAgB,iBAAe,mBAC7CA,EAAc,4BAA6BC,GAAgB,IAC/D,yBAA0BjhB,GAAQ,KAGtC,yBACI,cAAY,4BACZhN,UAAWgC,IAAW,GAAD,OACdgsB,EAAc,sCACdA,EAAc,8BAGrB,6BACI,kBAAC,EAAA7sB,KAAI,CACDjB,QAASguB,EACTluB,UAAU,oCACVD,KAAK,eACLE,KAAM,MAGd,kBAAC,EAAAc,KAAI,CAACoC,GAAG,MAAMlD,KAAK,OACfstB,IAAmCC,mBAExC,yBAAKxtB,UAAWgC,IAAW,0CACtBmsB,aAAiB,EAAjBA,EAAmBhlB,KAAI,SAAAilB,GAAiB,eACrC,yBAAKrkB,IAAKqkB,EAAmBpuB,UAAU,6CACnC,6BACI,kBAAC,EAAAmB,KAAI,CACDpB,KACoF,QADhF,EACAwtB,IAAmCE,2BAA2BW,UAAkB,aAAhF,EACMruB,QAIlB,kBAAC,EAAAgB,KAAI,CAACoC,GAAG,OAAOlD,KAAK,MAAMD,UAAU,2CACgD,QADP,EACzEutB,IAAmCE,2BAA2BW,UAAkB,aAAhF,EAAkF9sB,MAErF,KAGd,yBAAKtB,UAAU,6BACf,yBAAKA,UAAU,yCACVutB,IAAmCQ,kBAAkB5kB,KAAI,SAAAklB,GAAW,OACjE,yBAAKruB,UAAU,4CAA4C+J,IAAKskB,EAAY3pB,OACxE,6BACI,kBAAC,EAAAvD,KAAI,CAACpB,KAAMsuB,EAAYtuB,QAE5B,kBAAC,EAAAgB,KAAI,CAACoC,GAAG,OAAOlD,KAAK,MAAMD,UAAU,2CAChCquB,EAAY/sB,MAEf,MAIhB,ECrCV,QA5ByC,SAAH,OAClC4rB,EAAqB,EAArBA,sBACAgB,EAAc,EAAdA,eAAc,OAEd,6BACKhB,EAAsB/jB,KAAI,SAAAmlB,GACvB,IAAQ9lB,EAAwB8lB,EAAxB9lB,KAAMlH,EAAkBgtB,EAAlBhtB,KAAMpB,EAAYouB,EAAZpuB,QACpB,MAAgB,SAATsI,EACH,0BAAMuB,IAAKzI,EAAMpB,QAASA,GAAWguB,GACjC,kBAAC,EAAAntB,KAAI,CACD,cAAY,wCACZoC,GAAG,OACHlD,KAAK,MACLD,UAAU,uCAETsB,GACE,KAIX,kBAAC,EAAAP,KAAI,CAACgJ,IAAKzI,EAAM6B,GAAG,OAAOlD,KAAK,OAC3BqB,EAGb,IACE,yCC2EV,QA/FmC,SAAH,GAKQ,IAJpC2D,EAAc,EAAdA,eACA8nB,EAAgB,EAAhBA,iBACAwB,EAAY,EAAZA,aACAJ,EAAiB,EAAjBA,kBAEA,GAUIhoB,EAAAA,EAAAA,6BAA4BlB,GAT5BupB,EAAkC,EAAlCA,mCACAC,EAAmC,EAAnCA,oCACA/S,EAAmC,EAAnCA,oCACAgT,EAA2B,EAA3BA,4BACAC,EAA4B,EAA5BA,6BACAhT,EAA4B,EAA5BA,6BACA+M,EAAW,EAAXA,YACAkG,EAAqB,EAArBA,sBACAhT,EAAY,EAAZA,aAGEiT,EAA6B,SAACC,GAChC,IAAIC,EAAoD,UAmCxD,OAjCIR,IAAiB9nB,EAAAA,GAAAA,KACjB8nB,IAAiB9nB,EAAAA,GAAAA,QACjB8nB,IAAiB9nB,EAAAA,GAAAA,QAEb,CAAC,kBAAmB,SAAU,qBAAqBM,SAAS+nB,KACxDN,EACAO,EAAe,UACRN,EACPM,EAAe,SACRrT,IACPqT,EAAe,aAGhBR,IAAiB9nB,EAAAA,GAAAA,cACpB,CAAC,kBAAmB,SAAU,qBAAqBM,SAAS+nB,KACxDJ,EACAK,EAAe,UACRJ,EACPI,EAAe,SACRpT,IACPoT,EAAe,aAIG,qBAA1BD,IACIpG,EACAqG,EAAe,UACRH,EACPG,EAAe,SACRnT,IACPmT,EAAe,aAGhBA,CACX,EAEA,MAAiC,gBAA1BhC,EAAiBvkB,KACpB,kBAAC,EAAAzH,KAAI,CACDoC,GAAG,OACHuB,MAAM,qBACN3C,OAAO,OACPyC,MAAM,SACNvE,KAAK,OACLD,UAAWgC,IACP,mCAAkC,4CACG+qB,EAAiBE,2BAGzDF,EAAiBC,cAGtB,yBACI,cAAY,uCACZhtB,UAAU,mDAETmuB,aAAiB,EAAjBA,EAAmBhlB,KAAI,SAAA2lB,GAAqB,aACzC,yBACI,wDAAgDD,EAC5CC,GACH,SACD/kB,IAAK+kB,GAEL,kBAAC,EAAA3tB,KAAI,CACDlB,KAAM,GACNF,KAEC,QAFG,EAAEwtB,IAAmCE,2BACrCqB,UACH,aAFK,EAEH/uB,KAAKivB,OAAOH,EAA2BC,MAE5C,IAItB,ECxDA,QAxCgC,SAAH,OACzB7pB,EAAc,EAAdA,eACAgqB,EAAiB,EAAjBA,kBACAf,EAAc,EAAdA,eACAK,EAAY,EAAZA,aACAJ,EAAiB,EAAjBA,kBAAiB,OAEjB,yBAAKnuB,UAAU,oBACX,yBAAKA,UAAU,4BACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,OAAOpB,OAAO,OAAO9B,KAAK,MAC9BgvB,EAAkBnsB,OAEtBmsB,EAAkBlC,kBACf,kBAAC,EAA0B,CACvB9nB,eAAgBA,EAChB8nB,iBAAkBkC,EAAkBlC,iBACpCwB,aAAcA,EACdJ,kBAAmBA,MAI7Bc,EAAkB/B,uBAAyB+B,EAAkB7C,cAC3D,yBAAKpsB,UAAS,8CAAyCivB,EAAkBllB,IAAI6M,gBACxEqY,EAAkB/B,sBACf,kBAAC,EAAgC,CAC7BA,sBAAuB+B,EAAkB/B,sBACzCgB,eAAgBA,IAGpBe,EAAkB7C,aACd,kBAAC,EAAArrB,KAAI,CAACoC,GAAG,OAAOlD,KAAK,OAChBgvB,EAAkB7C,cAMrC,uqBCsCV,QA1E8B,SAAH,SACvBnnB,EAAc,EAAdA,eACA+oB,EAAc,EAAdA,eACAkB,EAAS,EAATA,UACAC,EAAW,EAAXA,YACAniB,EAAQ,EAARA,SACAihB,EAAgB,EAAhBA,iBACAC,EAAc,EAAdA,eACAK,EAAY,EAAZA,aACAJ,EAAiB,EAAjBA,kBAAiB,OAEjB,yBACInuB,UAAWgC,IAAWgsB,EAAgB,kBAAgB,mBAC9CA,EAAc,4BAA6BC,GAAgB,IAC/D,yBAA0BjhB,GAAQ,KAGtC,yBAAKhN,UAAS,UAAKguB,EAAc,6BAC5BmB,EAAYtC,yBACT,kBAAC,EAAA9rB,KAAI,CACDoC,GAAG,MACHpB,OAAO,OACP2C,MAAM,YACNF,MAAM,SACNvE,KAAK,KACLD,UAAS,UAAKguB,EAAc,+BAE5B,kBAAC,EAAA5qB,SAAQ,CAACC,kBAAmB8rB,EAAYC,eAG7C,yBAAKpvB,UAAS,UAAKguB,EAAc,sCAErC,kBAAC,EAAAjtB,KAAI,CACDoC,GAAG,IACHpB,OAAO,OACP2C,MAAM,YACNF,MAAM,SACNvE,KAAK,MACLD,UAAS,UAAKguB,EAAc,gBAE5B,kBAAC,EAAA5qB,SAAQ,CAACC,kBAAmB8rB,EAAYjX,UAE7C,yBAAKlY,UAAS,UAAKguB,EAAc,6BAC5BkB,EAAU/lB,KAAI,SAACrB,EAAMd,GAAK,OACvB,kBAAC,aAAc,CAAC+C,IAAKjC,EAAKiC,KACtB,kBAAC,EAAuB,CACpB9E,eAAgBA,EAChBgqB,kBAAmBnnB,EACnBomB,eAAgBA,EAChBK,aAAcA,EACdJ,kBAAmBA,IAEtBnnB,EAAQkoB,EAAU5kB,OAAS,GAAK,yBAAKtK,UAAU,6BACnC,KAGxBgN,GACG,yBAAKhN,UAAS,UAAKguB,EAAc,0BAC7B,kBAAC,EAAAjtB,KAAI,CACDoC,GAAG,MACHpB,OAAO,OACP2C,MAAM,qBACNF,MAAM,SACNvE,KAAK,KACLD,UAAS,UAAKguB,EAAc,+BAE5B,kBAAC,EAAA5qB,SAAQ,CAACC,kBAAkB,aAK1C,iiCCAV,QArEyB,SAAH,GAQQ,MAP1B4B,EAAc,EAAdA,eACAmQ,EAAY,EAAZA,aACApI,EAAQ,EAARA,SAAQ,IACRqiB,kBAAAA,OAAiB,IAAG,GAAK,EACzBzpB,EAA+B,EAA/BA,gCACAiiB,EAAgC,EAAhCA,iCACA0G,EAAY,EAAZA,aAEMP,EAAiB,0BAAH,OAA6B5Y,GAC3Cka,EAAgC,cAAjBla,EACfma,EAA+B,QAAjBna,EAEd+Z,ECP6B,SAACK,GAA+B,MAA4B,CAC/FC,KCbmC,EDaHD,ECZhCvD,EAAqB,EAArBA,sBACoD,CACpDY,0BAA0B,EAC1B3U,QAAQvX,EAAAA,EAAAA,UAAS,4BACjBmsB,mBAAoB,CAChB,CACI/iB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,sCACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,OACvBssB,wBAAyB,eAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,UACvBssB,wBAAyB,iBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B4jB,aAAazrB,EAAAA,EAAAA,UACT,6FAGR,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,gDAG9BwsB,mBAAoB,CAChB,CACIpjB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,mEACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,QACvBssB,wBAAyB,cAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,UACvBssB,wBAAyB,gBAE7BC,sBAAuB,CACnB,CACI1kB,KAAM,OACNlH,MAAMX,EAAAA,EAAAA,UAAS,oBACfT,QAAS+rB,KAIrB,CACIliB,IAAK,cACLjH,OAAOnC,EAAAA,EAAAA,UAAS,gBAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,YACvBssB,wBAAyB,gBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B4jB,aAAazrB,EAAAA,EAAAA,UACT,6FAGR,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,gDAG9B+uB,kBAAmB,CACf,CACI3lB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,wEACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,OACvBssB,wBAAyB,eAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,UACvBssB,wBAAyB,iBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B4jB,aAAazrB,EAAAA,EAAAA,UACT,6FAGR,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,gDAG9BysB,4BAA6B,CAAC,kBAC9BC,4BAA6B,CAAC,oBD9G9BsC,IAAK/C,EAA2B4C,GAChCI,QAAStC,EAA+BkC,GACxCK,OEhBwE,CACxET,aAAazuB,EAAAA,EAAAA,UAAS,+BACtBksB,0BAA0B,EAC1B3U,QAAQvX,EAAAA,EAAAA,UAAS,UACjBmsB,mBAAoB,CAChB,CAAE/iB,IAAK,SAAUjH,OAAOnC,EAAAA,EAAAA,UAAS,UAAWyrB,aAAazrB,EAAAA,EAAAA,UAAS,+BAClE,CAAEoJ,IAAK,WAAYjH,OAAOnC,EAAAA,EAAAA,UAAS,aACnC,CACIoJ,IAAK,cACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAEpB,CACIoJ,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B0kB,sBAAuB,CACnB,CAAE1kB,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,eAC/B,CAAE6H,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,kCAGvC,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,kEAG9BwsB,mBAAoB,CAChB,CACIpjB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,8BACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,OACvBssB,wBAAyB,aAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,SACvBssB,wBAAyB,gBAGjC,CACIljB,IAAK,cACLjH,OAAOnC,EAAAA,EAAAA,UAAS,gBAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,YACvBssB,wBAAyB,gBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B0kB,sBAAuB,CACnB,CAAE1kB,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,eAC/B,CAAE6H,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,kCAGvC,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,kEAG9BysB,4BAA6B,CAAC,kBAAmB,oBACjDC,4BAA6B,CAAC,kBAAmB,qBFtDjDyC,YGjB6E,CAC7EjD,0BAA0B,EAC1B3U,QAAQvX,EAAAA,EAAAA,UAAS,SACjBmsB,mBAAoB,CAChB,CACI/iB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,+EACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,QACvBssB,wBAAyB,cAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,QACvBssB,wBAAyB,eAGjC,CACIljB,IAAK,cACLjH,OAAOnC,EAAAA,EAAAA,UAAS,gBAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,YACvBssB,wBAAyB,gBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBusB,sBAAuB,CACnB,CAAE1kB,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,eAC/B,CAAE6H,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,kCAGvC,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,sEAG9BwsB,mBAAoB,CAChB,CACIpjB,IAAK,SACLjH,OAAOnC,EAAAA,EAAAA,UAAS,UAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,+EACtBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,QACvBssB,wBAAyB,cAGjC,CACIljB,IAAK,WACLjH,OAAOnC,EAAAA,EAAAA,UAAS,YAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,QACvBssB,wBAAyB,eAGjC,CACIljB,IAAK,cACLjH,OAAOnC,EAAAA,EAAAA,UAAS,gBAChBosB,iBAAkB,CACdvkB,KAAM,cACNwkB,cAAcrsB,EAAAA,EAAAA,UAAS,YACvBssB,wBAAyB,gBAGjC,CACIljB,IAAK,gBACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBosB,iBAAkB,CAAEvkB,KAAM,gBAC1B0kB,sBAAuB,CACnB,CAAE1kB,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,eAC/B,CAAE6H,KAAM,OAAQlH,MAAMX,EAAAA,EAAAA,UAAS,kCAGvC,CACIoJ,IAAK,YACLjH,OAAOnC,EAAAA,EAAAA,UAAS,iBAChByrB,aAAazrB,EAAAA,EAAAA,UAAS,sEAG9BysB,4BAA6B,CAAC,SAAU,oBAAqB,oBAC7DC,4BAA6B,CAAC,SAAU,oBAAqB,sBF3FvB,IAAH,EACnCpB,CDiBH,CDCuB8D,CAAwB,CAAE9D,sBADZC,IAA1BD,wBAC+DsC,GACjEyB,EAA0BT,EACI,QADO,EACrCJ,aAAW,EAAXA,EAAaO,yBAAiB,QAAI,GAClCP,aAAW,EAAXA,EAAahC,mBACb+B,EAAYI,EAAeH,aAAW,EAAXA,EAAarC,mBAAqBkD,EACF,IAArB1sB,IAAAA,UAAe,GAAM,GAA1D2sB,EAAe,KAAEC,EAAgB,KAClCjC,EAAmBroB,IAAoC2oB,EACzDJ,EAAoBmB,EAClBH,aAAW,EAAXA,EAAa/B,4BACb+B,aAAW,EAAXA,EAAa9B,4BACf,CAACjE,EAAAA,aAAAA,IAAkBA,EAAAA,aAAAA,QAAsBA,EAAAA,aAAAA,QAAqBriB,SAASwnB,IAAiBc,IACxFlB,EAAoB,CAAC,SAAU,oBAAqB,qBAGxD,IAIMD,EAA2D,SAAAiC,GAC7DA,EAAMC,kBACNF,GAAkBD,EACtB,EAEA,OACI,yBAAKjwB,UAAU,wBACX,yBACI,cAAY,uBACZA,UAAWgC,IAAW,qBAAsB,GAAF,OAAKoT,GAAgB,CAC3D,mBAAoB6a,EACpB,oBAAqBjjB,IAEzB9M,QAAS8M,EAAW,WAAe,EAAG,WAjB5B,IAACqjB,EACnBxI,EAAiCjiB,KADdyqB,EAiB+C9B,GAhBc,GAAK8B,EAgBN,GAEvE,kBAAC,EAAqB,CAClBprB,eAAgBA,EAChB+oB,eAAgBA,EAChBkB,UAAWA,EACXC,YAAaA,EACbniB,SAAUA,EACVihB,iBAAkBA,EAClBC,eAAgBA,EAChBK,aAAcA,EACdJ,kBAAmBA,IAEvB,kBAAC,EAAoB,CACjBH,eAAgBA,EAChBhhB,SAAUA,EACVihB,iBAAkBA,EAClBC,eAAgBA,EAChBC,kBAAmBA,KAKvC,EKKA,QA5EiC,SAAH,GAaQ,IAZlClpB,EAAc,EAAdA,eACAmQ,EAAY,EAAZA,aAAY,IACZia,kBAAAA,OAAiB,IAAG,GAAK,EACzBlqB,EAAU,EAAVA,WACAS,EAA+B,EAA/BA,gCACAiiB,EAAgC,EAAhCA,iCACAyI,EAA4B,EAA5BA,6BACAC,EAA4B,EAA5BA,6BACAC,EAAqC,EAArCA,sCACAC,EAAqC,EAArCA,sCACAC,EAAoC,EAApCA,qCACAC,EAA2B,EAA3BA,4BAEM3C,EAAiB,0BAAH,OAA6B5Y,GAa3Cwb,EAAc,SAACrC,GACjB,GAAIppB,GAAcopB,IAAiB9nB,EAAAA,GAAAA,IAC/B,OAAO,EAEX,OAAQ2O,GACJ,KAAKyb,EAAAA,GAAAA,UACD,OAAOL,aAAqC,EAArCA,EAAuClnB,MAC1C,SAAAyQ,GAAO,OAAIA,EAAQiP,wBAA0BuF,CAAY,IAEjE,KAAKsC,EAAAA,GAAAA,IACD,OAAOH,aAAoC,EAApCA,EAAsCpnB,MACzC,SAAAyQ,GAAO,OAAIA,EAAQiP,wBAA0BuF,CAAY,IAEjE,QACI,OAAOkC,aAAqC,EAArCA,EAAuCnnB,MAC1C,SAAAyQ,GAAO,OAAIA,EAAQiP,wBAA0BuF,CAAY,IAGzE,EAEMuC,EAA2B,CAC7BrqB,EAAAA,GAAAA,IACAA,EAAAA,GAAAA,IACAA,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,cAGJ,OACI,yBAAK,cAAY,gCAAgCzG,UAAS,UAAKguB,EAAc,cACxE8C,EAAyB3nB,KACtB,SAAA4nB,GAAI,OA1CO,SAACxC,GACpB,OAAQnZ,GACJ,KAAKyb,EAAAA,GAAAA,UACD,OAAOP,aAA4B,EAA5BA,EAA8BhnB,MAAK,SAAAyQ,GAAO,OAAIA,EAAQmO,YAAcqG,CAAY,IAC3F,KAAKsC,EAAAA,GAAAA,IACD,OAAOF,aAA2B,EAA3BA,EAA6BrnB,MAAK,SAAAyQ,GAAO,OAAIA,EAAQmO,YAAcqG,CAAY,IAC1F,QACI,OAAOgC,aAA4B,EAA5BA,EAA8BjnB,MAAK,SAAAyQ,GAAO,OAAIA,EAAQmO,YAAcqG,CAAY,IAEnG,CAkCgByC,CAAeD,IACX,kBAAC,EAAgB,CACb9rB,eAAgBA,EAChBmQ,aAAcA,EACdpI,SAAU4jB,EAAYG,GACtB1B,kBAAmBA,EACnBzpB,gCAAiCA,EACjCmE,IAAKgnB,EACLlJ,iCAAkCA,EAClC0G,aAAcwC,GAErB,IAIrB,ECZA,QA7D6B,SAAH,GAOQ,IAN9BE,EAAU,EAAVA,WACAC,EAAU,EAAVA,WACAtrB,EAA+B,EAA/BA,gCACAurB,EAAO,EAAPA,QACAhK,EAAoC,EAApCA,qCACAC,EAAwC,EAAxCA,yCAcMgK,EAAmE,CACrEzB,IAAK,CAAEtzB,KAAM,kBAAmBg1B,QAAS,2BACzCxB,OAAQ,CAAExzB,KAAM,iBAAkBg1B,QAAS,0BAC3CvB,YAAa,CACTzzB,KAAM,qCACNg1B,QAAS,8CAEbzB,QAAS,CAAEvzB,KAAM,gBAAiBg1B,QAAS,0BAkB/C,OACI,kBAAC,aAAc,QApCVzrB,GACDA,IAAoCwjB,EAAAA,aAAAA,KACnCxjB,IAAoCwjB,EAAAA,aAAAA,KAAoBjC,GACxDvhB,IAAoCwjB,EAAAA,aAAAA,SAAwBhC,IAmCzD,yBAAKpnB,UAAWixB,GACZ,kBAAC,EAAAK,SAAQ,CACL1zB,MAAOszB,EACP1jB,SAAU2jB,EACVtsB,MArBhB,kBAAC,EAAA9D,KAAI,CAACoC,GAAG,IAAIqB,MAAM,SAASvE,MAAMyB,EAAAA,EAAAA,YAAa,MAAQ,KAAM0d,YAAY,MACrE,kBAAC,EAAAhc,SAAQ,CACLC,kBAAkB,kEAClBoB,OAAQ,CAAE8sB,QAASH,EAAmBxrB,GAAiCvJ,MACvEwZ,WAAY,CACR,kBAAC,EAAA2b,UAAS,CACNznB,IAAK,EACL/J,UAAU,gBACVyxB,KAAML,EAAmBxrB,GAAiCyrB,cAc1DK,iBAAkBR,KAM1C,ECzDA,IAAMS,EAAa,SAAH,GAOuB,IANnC1sB,EAAc,EAAdA,eACAmQ,EAAY,EAAZA,aACA4Y,EAAc,EAAdA,eACApoB,EAA+B,EAA/BA,gCACAuhB,EAAoC,EAApCA,qCACAC,EAAwC,EAAxCA,yCAIQ7mB,GAFWsG,EAAAA,EAAAA,MAAXmgB,OAEAzmB,SAEFqxB,GAAoBC,EAAAA,EAAAA,aAAYzc,GAE9BsT,GAAgBviB,EAAAA,EAAAA,6BAA4BlB,GAA5CyjB,YAER,OAAInoB,IAAagE,EAAAA,cAAAA,SAA6D,QAApCqB,EAElC,kBAAC,EAAAxC,SAAQ,CAACC,kBAAkB,qFAGhCuC,IAAoCa,EAAAA,GAAAA,IAEhC,kBAAC,EAAArD,SAAQ,CACLC,kBAAkB,4GAClBoB,OAAQ,CAAEmtB,kBAAAA,KAIjBhsB,IAAoCa,EAAAA,GAAAA,KAAoB0gB,GACxDvhB,IAAoCa,EAAAA,GAAAA,SAAwB2gB,EAEtDsB,EACH,kBAAC,EAAAtlB,SAAQ,CACLC,kBAAkB,qFAClBwS,WAAY,CAAC,0BAAM9L,IAAK,EAAG/J,UAAS,UAAKguB,EAAc,4BAG3D,kBAAC,EAAA5qB,SAAQ,CAACC,kBAAkB,gFAEzBuC,IAAoCa,EAAAA,GAAAA,IAEvC,kBAAC,EAAArD,SAAQ,CACLC,kBAAkB,sLAClBoB,OAAQ,CAAEmtB,kBAAAA,KAGXhsB,IAAoCa,EAAAA,GAAAA,QAEvC,kBAAC,EAAArD,SAAQ,CACLC,kBAAkB,wIAClBoB,OAAQ,CAAEmtB,kBAAAA,KAGXhsB,IAAoCa,EAAAA,GAAAA,OAEvC,kBAAC,EAAArD,SAAQ,CACLC,kBAAkB,+JAClBoB,OAAQ,CAAEmtB,kBAAAA,KAGXhsB,IAAoCa,EAAAA,GAAAA,aAEvC,kBAAC,EAAArD,SAAQ,CAACC,kBAAkB,iKAI7B,IACX,EAuBA,SAAegE,EAAAA,EAAAA,KArBmB,SAAC1I,GAC/B,OACI,kBAAC,aAAc,KACVA,EAAMiH,iCACH,yBAAK,cAAY,2BAA2B5F,UAAS,UAAKrB,EAAMqvB,eAAc,eAC1E,kBAAC,EAAAjtB,KAAI,CACDoC,GAAG,IACHuB,MAAM,YACNF,MAAM,SACNvE,MAAMyB,EAAAA,EAAAA,YAAa,MAAQ,KAC3BK,OAAO,OACPqd,YAAY,MAEZ,kBAACuS,EAAehzB,KAMxC,miCC6JA,SAjPwC0I,EAAAA,EAAAA,KAAS,YAAkE,sBAA/Dsf,EAAiB,EAAjBA,kBAChD,GAAgC9f,EAAAA,EAAAA,MAAxB/I,EAAM,EAANA,OAEA4a,EAFmB,EAAXC,YAERD,wBAGJ2O,EASAvpB,EATAupB,oCACApiB,EAQAnH,EARAmH,eACAC,EAOApH,EAPAoH,qBACAke,EAMAtlB,EANAslB,UACA7b,EAKAzJ,EALAyJ,eACApC,EAIArH,EAJAqH,WACAE,EAGAvH,EAHAuH,gBACA+hB,EAEAtpB,EAFAspB,yCACAD,EACArpB,EADAqpB,qCAGJ,GAWI3hB,EAAAA,EAAAA,KAVAssB,EAA6B,EAA7BA,8BACApsB,EAAkC,EAAlCA,mCACAE,EAA+B,EAA/BA,gCACAE,EAA0B,EAA1BA,2BACAisB,EAAuB,EAAvBA,wBACA3c,EAAY,EAAZA,aACAqb,EAAqC,EAArCA,sCACAC,EAAoC,EAApCA,qCACAF,EAAqC,EAArCA,sCACA3I,EAAgC,EAAhCA,iCAG+C,IAArBvkB,IAAAA,UAAe,GAAM,GAA5C0uB,EAAO,KAAEC,EAAU,KAE1B,GAOI9rB,EAAAA,EAAAA,6BAA4BlB,GAN5BwjB,EAAwB,EAAxBA,yBACApiB,EAAuC,EAAvCA,wCACAD,EAAgC,EAAhCA,iCACAE,EAAgB,EAAhBA,iBACAsoB,GAAqB,EAArBA,sBACAroB,GAAuB,EAAvBA,wBAGJjD,IAAAA,WAAgB,WACRwuB,IACK3sB,IACDE,IACAH,KAEJ2iB,EAAiC,IAGzC,GAAG,CAACiK,IAEJxuB,IAAAA,WAAgB,WACRsC,GACAqsB,GAAW,EAEnB,GAAG,CAACrsB,EAAiCksB,IAErC,IAAMvB,GAA+BlJ,EAAoCrY,QACrE,SAAAkjB,GAAiB,OACbA,EAAkBjK,cAAgB4I,EAAAA,GAAAA,YACjCnY,EACKwZ,EAAkBhK,YAAczhB,EAAAA,GAAAA,aAChCyrB,EAAkBhK,YAAczhB,EAAAA,GAAAA,aAA0B,IAGlE6pB,GAA+BjJ,EAAoCrY,QACrE,SAAAkjB,GAAiB,OACbA,EAAkBjK,cAAgB4I,EAAAA,GAAAA,SACjCnY,EACKwZ,EAAkBhK,YAAczhB,EAAAA,GAAAA,aAChCyrB,EAAkBhK,YAAczhB,EAAAA,GAAAA,aAA0B,IAGlE0rB,GAAqC9K,aAAmC,EAAnCA,EAAqCrY,QAC5E,SAAAkjB,GAAiB,OAAIA,EAAkBjK,cAAgB4I,EAAAA,GAAAA,GAAe,IAGpEuB,GAAkBxsB,IAAoCa,EAAAA,GAAAA,IACtD4rB,GAAkBzsB,IAAoCa,EAAAA,GAAAA,IACtD6rB,GAAsB1sB,IAAoCa,EAAAA,GAAAA,QAC1D8rB,GAAqB3sB,IAAoCa,EAAAA,GAAAA,OACzD+rB,GAA0B5sB,IAAoCa,EAAAA,GAAAA,aAE9DgsB,GACwG,KAApD,QAAtD,EAAAlrB,EAAeM,MAAK,SAAA6qB,GAAI,OAAIA,aAAI,EAAJA,EAAM90B,SAAUwlB,CAAS,WAAC,OAAU,QAAV,EAAtD,EAAwDuP,gBAAQ,OAAU,QAAV,EAAhE,EAAkEC,gBAAQ,OAAK,QAAL,EAA1E,EAA4EC,WAAG,WAAzB,EAAtD,EAAiFC,sBAC/EC,IAA6F,QAA1E,EAAC9tB,SAA8B,QAAhB,EAAdA,EAAgB+tB,sBAAc,OAAU,QAAV,EAA9B,EAAgCL,gBAAQ,OAAU,QAAV,EAAxC,EAA0CC,gBAAQ,OAAK,QAAL,EAAlD,EAAoDC,WAAG,WAAzC,EAAd,EAAyDI,wBAAgB,QAAI,GAAK,EACtG5D,IAAqBoD,IAAmBA,KAAmBM,GAE3DpC,GAA8BtJ,EAAoCrY,QACpE,SAAAkjB,GAAiB,OACbA,EAAkBjK,cAAgB4I,EAAAA,GAAAA,MACjCnY,EACKwZ,EAAkBhK,YAAczhB,EAAAA,GAAAA,aAChCyrB,EAAkBhK,YAAczhB,EAAAA,GAAAA,aAA0B,IAsFxE,OACI,yBAAKzG,UAAU,uCACX,yBAAKA,UAAU,0CACX,kBAAC,EAAwB,CACrBiF,eAAgBA,EAChBmQ,aAAcA,EAAa5M,KAC3B+nB,6BAA8BA,GAC9BlB,kBAAmBA,GACnBlqB,WAAYA,EACZsrB,sCAAuCA,EACvCD,sCAAuCA,EACvC5qB,gCAAiCA,EACjC8qB,qCAAsCA,EACtC7I,iCAAkCA,EAClC8I,4BAA6BA,GAC7BL,6BAA8BA,GAC9B6B,mCAAoCA,KAExC,yBACInyB,UAAWgC,IACP,qCAAoC,iCACVoT,EAAa5M,KAAI,sBAG/C,yBAAKxI,UAAS,iCAA4BoV,EAAa5M,KAAI,0BACvD,kBAAC,EAAyB,CACtBvD,eAAgBA,EAChBmQ,aAAcA,EAAa5M,KAC3BwlB,eAAc,iCAA4B5Y,EAAa5M,MACvD5C,gCAAiCA,EACjCuhB,qCAAsCA,EACtCC,yCAA0CA,IAE9C,kBAAC,EAAoB,CACjB8J,WAAYc,EACZb,QAAS,kBAAMc,GAAYD,EAAQ,EACnCf,WAAU,iCAA4B7b,EAAa5M,KAAI,2BACvD5C,gCAAiCA,EACjCuhB,qCAAsCA,EACtCC,yCAA0CA,OAK1D,kBAAC,EAAAnkB,MAAA,OAAY,CAACjD,UAAU,oCAAoCiO,eAAa,GACrE,kBAAC,EAAAhN,OAAM,CACH+L,WAhIRpH,KAEIwP,EAAa5M,OAASqoB,EAAAA,GAAAA,UACDL,aAAqC,EAArCA,EAAuClnB,MACxD,SAAAyQ,GAAO,OAAIA,EAAQiP,wBAA0BpjB,CAA+B,IAEzEwP,EAAa5M,OAASqoB,EAAAA,GAAAA,IACRH,aAAoC,EAApCA,EAAsCpnB,MACvD,SAAAyQ,GAAO,OAAIA,EAAQiP,wBAA0BpjB,CAA+B,IAG3D6qB,aAAqC,EAArCA,EAAuCnnB,MACxD,SAAAyQ,GAAO,OAAIA,EAAQiP,wBAA0BpjB,CAA+B,OAK5EwsB,IACCC,IAAmBlL,GAAwCyH,IAC3D0D,IAAuBlL,GAA4CwH,IAIhEoD,IA0GJruB,SAAO,EACPvD,MAAO,CAAEC,OAAOqB,EAAAA,EAAAA,YAAa,OAAS,SACtCxB,QAAS,WArGG,IAClBipB,EAqGU4I,IArGV5I,EAAkB,CACpBjN,SAAU9G,EAAa8G,SACvB1T,KAAM4M,EAAa5M,MAGnB4pB,GACAzL,EAAkBwC,GACXmJ,GAEHjsB,IACCoiB,IACArB,GACD9gB,GACAZ,EAEAihB,EAAkBwC,GAElBrjB,IAEGusB,GAEHhsB,IACCoiB,IACAtB,GACD7gB,GACAZ,EAEAihB,EAAkBwC,GAElBrjB,IAEGysB,GAEHlsB,GACAC,GACAZ,IACCa,GAEDogB,EAAkBwC,GAElBrjB,IAEG0sB,KACHpsB,GAAoCE,EACpCqgB,EAAkBwC,GAElBrjB,IAyDI,IAECnF,EAAAA,EAAAA,UAAS,UAK9B,IC/MA,QArCsC,SAAH,GAIC,IAHhC+X,EAAuB,EAAvBA,wBACAtD,EAAY,EAAZA,aACA7U,EAAQ,EAARA,SAEA,EAA+D2rB,IAAvDF,EAA2B,EAA3BA,4BAA6BC,EAAqB,EAArBA,sBACrC,OAAID,EAEI,yBAAKhsB,UAAU,6BACX,0BACI,cAAY,YACZA,UAAU,iCACVE,QAAS+rB,GAET,kBAAC,EAAA9qB,KAAI,CAACpB,KAAK,qBAEf,kBAAC,EAAAgB,KAAI,CAACd,MAAMyB,EAAAA,EAAAA,YAAa,KAAO,IAAKK,OAAO,OAAO2C,MAAM,cACpD/D,EAAAA,EAAAA,UAAS,yCAIf+X,EACA,kBAAC,EAAAtV,SAAQ,CAACC,kBAAkB,0DAInC,kBAAC,EAAAD,SAAQ,CACLC,kBACI9C,IAAagE,EAAAA,GAAAA,IACP,oEACA,iDAEVE,OAAQ,CAAE2Q,cAAcyc,EAAAA,EAAAA,aAAYzc,KAGhD,iiCCmDA,SAlF0B/N,EAAAA,EAAAA,KAAS,YAAoD,IAAjDsf,EAAiB,EAAjBA,kBAClC,GAAoC9f,EAAAA,EAAAA,MAA5B8R,EAAW,EAAXA,YAAahB,EAAE,EAAFA,GAAIqP,EAAM,EAANA,OAEjBtO,EAA4BC,EAA5BD,wBACApT,EAA0BqS,EAA1BrS,WAAYC,EAAcoS,EAAdpS,UACZhF,EAAaymB,EAAbzmB,SAER,GAAiFiF,EAAAA,EAAAA,KAAzE4P,EAAY,EAAZA,aAAc0c,EAA6B,EAA7BA,8BAA+BC,EAAuB,EAAvBA,wBAEmC,IAArBzuB,IAAAA,UAAe,GAAM,GAAjF0oB,EAA2B,KAAEkH,EAA2B,KAOzDC,EAA4B,WAC9BD,GAA4B,GAC5BnB,GACJ,EAEMnJ,EACF,yBACI,cAAY,gBACZ5oB,UAAWgC,IAAW,8BAA+B,CACjD,8BAA+BgqB,KAGnC,kBAAC,EAA+B,CAACrF,kBAAmBA,IACpD,kBAAC,EAA2B,OAIpC,OACI,6BACI,kBAAC,aAAc,CAAC9O,SAAU,kBAAC,EAAAC,SAAQ,OAC/B,kBAACiU,EAAuBqH,SAAQ,CAACx1B,MAAO,CAAEouB,4BAAAA,EAA6BC,sBAzBX,SAAAkE,GACpEA,EAAMC,kBACN8C,GAA6BlH,EACjC,IAuBgB,kBAAC,EAAAnf,eAAc,KACX,kBAAC,EAAA5J,MAAK,CACFjD,UAAU,qBACVsF,WAAYA,EACZC,UAAWA,EACXgmB,eAAe,yBACf3oB,QAASkvB,EACTjvB,YAAaswB,EACb3qB,KAAK,SACLnI,MAAO+U,EAAa5M,OAASqoB,EAAAA,GAAAA,UAAwB,SAAW,SAChE9tB,gBAAiBipB,EACjBlpB,MACI,kBAAC,EAAsB,CACnB4V,wBAAyBA,EACzBtD,aAAcA,EAAa5M,KAC3BjI,SAAUA,KAIjBqoB,IAGT,kBAAC,EAAAxb,cAAa,KACV,kBAAC,EAAAoe,aAAY,CACTC,kBAAkB,YAClBE,QAASmG,EACTlG,QAASuH,EACTpwB,gBAAiBipB,EACjBlpB,MACI,kBAAC,EAAsB,CACnB4V,wBAAyBA,EACzBtD,aAAcA,EAAa5M,KAC3BjI,SAAUA,KAIjBqoB,MAO7B,wcCuKA,QAzNuB,SAAH,GAKO,MAJvByK,EAAiB,EAAjBA,kBACA3a,EAAuB,EAAvBA,wBACA4a,EAAiB,EAAjBA,kBACAzwB,EAAW,EAAXA,YAEM0wB,EAAsB,WACxB,GACKF,EAAkBje,eAAiB9C,EAAAA,GAAAA,MAChC+gB,EAAkBpL,cAAgB4I,EAAAA,GAAAA,WAClCwC,EAAkBrK,wBAA0BviB,EAAAA,GAAAA,QAChD4sB,EAAkBje,eAAiB9C,EAAAA,GAAAA,KAEnC,OAAO+gB,EAAkBrK,qBAGjC,EAWM1I,EAAkB,WACpB,OAAI5H,EAAgC,OAC3B2a,EAAkBpL,cAAgB4I,EAAAA,GAAAA,UAA8B,UAChEwC,EAAkBpL,cAAgB4I,EAAAA,GAAAA,IAAwB,WAC5D,WACX,EACA,OACI,yBAAK7wB,UAAU,6BACX,yBAAKA,UAAU,mBACX,kBAAC,IAAmB,CAACD,KAAMugB,IAAmBrgB,KAAM,KACpD,yBAAKD,UAAU,yBACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,KAAKmf,YAAY,IAAIpf,UAAU,kCAnBtDwzB,EAAAA,EAAAA,sBAAqB,CACjBvL,YAAaoL,EAAkBpL,YAC/BwL,iBAAkBJ,EAAkBI,iBACpClzB,SAAUgE,EAAAA,GAAAA,IACVkZ,MAAO/E,EACPwP,UAAWqL,IACXG,oBAAoB,MAgBVL,aAAiB,EAAjBA,EAAgDM,gBAC9C,kBAAC,EAAA5yB,KAAI,CAAC2D,MAAM,iBAAiBzE,KAAK,OAAOmf,YAAY,QAC/CiU,aAAiB,EAAjBA,EAAgDM,iBAI7DN,aAAiB,EAAjBA,EAAmBrS,kBAChB,kBAAC,EAAAjgB,KAAI,CAACd,KAAK,KAAKyE,MAAM,iBAAiB1E,UAAU,gCAAgC+B,OAAO,QACpF,kBAAC,EAAA6e,MAAK,CACFC,OAAQwS,EAAkBrS,gBAC1BF,SAAUuS,EAAkBvS,SAC5BG,WAAYoS,EAAkBnS,SAAWmS,EAAkBnS,QAAU,EACrEH,eAAa,MAK7B,yBAAK/gB,UAAU,gCACX,yBAAKA,UAAU,qCACX,kBAAC,EAAAe,KAAI,CAACf,UAAU,+BAA8BW,EAAAA,EAAAA,UAAS,WACvD,kBAAC,IAAO,CAACkB,SAAO,EAACC,WAAS,EAAClE,MAAO,uBAEtC,yBAAKoC,UAAU,qCACX,kBAAC,EAAAe,KAAI,CAACf,UAAU,+BAA8BW,EAAAA,EAAAA,UAAS,WACvD,kBAAC,IAAO,CAACkB,SAAO,EAACjE,MAAQy1B,SAA0D,QAAzC,EAAjBA,EAA+CO,mBAAW,WAAzC,EAAlB,EAA6DC,eAEzF,yBAAK7zB,UAAU,qCACX,kBAAC,EAAAe,KAAI,CAACf,UAAU,+BAA8BW,EAAAA,EAAAA,UAAS,aACvD,kBAAC,IAAO,CAACkB,SAAO,EAACjE,MAAQy1B,aAAiB,EAAjBA,EAAgDM,iBAE7E,yBAAK3zB,UAAU,qCACX,kBAAC,EAAAe,KAAI,CAACf,UAAU,+BAA8BW,EAAAA,EAAAA,UAAS,aACvD,yBAAKX,UAAU,8BACX,kBAAC,IAAW,CACRO,SAAS,MACTL,QAAS,WACL,IAAMkV,GAAe0e,EAAAA,EAAAA,kBAAiB,CAClC7L,YAAaoL,EAAkBpL,YAC/BwL,iBAAkBJ,EAAkBI,iBACpClzB,SAAUgE,EAAAA,GAAAA,IACV2jB,UAAWmL,EAAkBrK,wBAEjCsK,EACID,aAAiB,EAAjBA,EAAmBrc,MAzFtC,SAACiR,EAAqBvP,GAEnC,OADIA,IAAyB/X,EAAAA,EAAAA,UAAS,YAC/BsnB,CACX,CAuFoC8L,CAASV,EAAkBpL,aAAe,GAAIvP,GAC9C2a,EAAkBje,cAAgB,GAClCA,EACCie,aAAiB,EAAjBA,EAA+Che,QAEpDxS,GACJ,MAIZ,yBAAK7C,UAAU,gCACX,kBAAC,EAAAmB,KAAI,CACDpB,KAAK,iBACLE,MAAMyB,EAAAA,EAAAA,YAAa,GAAK,GACxB1B,UAAU,sCAEd,yBAAKA,UAAU,qCACX,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,4JAIxC,yBAAKrD,UAAU,wCACX,yBAAKA,UAAU,gDACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,sBAAsBE,KAAM,KACvC,kBAAC,EAAAc,KAAI,CAACf,UAAU,oDAAoDC,KAAK,OACpEU,EAAAA,EAAAA,UAAS,qBAEd,uBACIX,UAAU,2DACVwI,KAAK,SACLipB,KAAM4B,EAAkBW,cACxBvmB,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAAlzB,KAAI,CAACd,KAAK,MAAM8B,OAAO,OAAO2C,MAAM,cAChC/D,EAAAA,EAAAA,UAAS,WAItB,yBAAKX,UAAU,kGACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,gBAAgBE,KAAM,KACjC,kBAAC,EAAAc,KAAI,CAACf,UAAU,oDAAoDC,KAAK,OACpEU,EAAAA,EAAAA,UAAS,6BAEd,uBACIX,UAAU,2DACVwI,KAAK,SACLipB,MAAMyC,EAAAA,EAAAA,IAA2B,WACjCzmB,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAAlzB,KAAI,CAACd,KAAK,MAAM8B,OAAO,OAAO2C,MAAM,cAChC/D,EAAAA,EAAAA,UAAS,eAItB,yBAAKX,UAAU,kGACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,cAAcE,KAAM,KAC/B,kBAAC,EAAAc,KAAI,CAACf,UAAU,oDAAoDC,KAAK,OACpEU,EAAAA,EAAAA,UAAS,2BAEd,uBACIX,UAAU,2DACVwI,KAAK,SACLipB,MAAMyC,EAAAA,EAAAA,IAA2B,SACjCzmB,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAAlzB,KAAI,CAACd,KAAK,MAAM8B,OAAO,OAAO2C,MAAM,cAChC/D,EAAAA,EAAAA,UAAS,eAItB,yBAAKX,UAAU,kGACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,cAAcE,KAAM,KAC/B,kBAAC,EAAAc,KAAI,CAACf,UAAU,oDAAoDC,KAAK,OACpEU,EAAAA,EAAAA,UAAS,2BAEd,uBACIX,UAAU,2DACVwI,KAAK,SACLipB,MAAMyC,EAAAA,EAAAA,IAA2B,SACjCzmB,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAAlzB,KAAI,CAACd,KAAK,MAAM8B,OAAO,OAAO2C,MAAM,cAChC/D,EAAAA,EAAAA,UAAS,kBAK1B,kBAAC,EAAAI,KAAI,CACDyD,MAAM,SACNrB,GAAG,MACHnD,UAAU,wCACVC,MAAMyB,EAAAA,EAAAA,YAAa,OAAS,MAC5BK,OAAO,SAENpB,EAAAA,EAAAA,UACG,+FACA,CACIJ,UAAUK,EAAAA,EAAAA,qBAAoB2D,EAAAA,GAAAA,KAC9BwV,QAASuG,OAIrB,yBAAKtgB,UAAU,4CACX,yBAAKA,UAAU,0DACX,uBAAGyxB,MAAMyC,EAAAA,EAAAA,IAA2B,OAAQzmB,OAAO,SAASwmB,IAAI,uBAC5D,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,sBAAsBM,MAAO,IAAKC,OAAQ,MAEzD,uBAAGmxB,MAAMyC,EAAAA,EAAAA,IAA2B,WAAYzmB,OAAO,SAASwmB,IAAI,uBAChE,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,uBAAuBM,MAAO,IAAKC,OAAQ,MAE1D,uBAAGmxB,MAAMyC,EAAAA,EAAAA,IAA2B,UAAWzmB,OAAO,SAASwmB,IAAI,uBAC/D,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,uBAAuBM,MAAO,IAAKC,OAAQ,OAI9D,yBAAKN,UAAU,0GACX,yBAAKm0B,KAAKC,EAAAA,EAAAA,YAAW,0CAA2C/zB,MAAO,GAAIC,OAAQ,KACnF,kBAAC,EAAAS,KAAI,CAACyD,MAAM,SAASvE,KAAK,QACrBU,EAAAA,EAAAA,UAAS,+CAAgD,CACtDJ,UAAU8zB,EAAAA,EAAAA,qBAAoB,OAAOh4B,UAOjE,+DCrKA,SArEsBgL,EAAAA,EAAAA,KAClB,YAA2F,IAAxFqgB,EAAU,EAAVA,WAAY9kB,EAAO,EAAPA,QAAS0wB,EAAiB,EAAjBA,kBAAmBzwB,EAAW,EAAXA,YAAayxB,EAAO,EAAPA,QACpD,GAAoCztB,EAAAA,EAAAA,MAA5B8R,EAAW,EAAXA,YAAaqO,EAAM,EAANA,OAAQrP,EAAE,EAAFA,GAErBe,EAA4BC,EAA5BD,wBACAnY,EAAaymB,EAAbzmB,SACAg0B,EAAc5c,EAAd4c,UAER,GAA8E/uB,EAAAA,EAAAA,KAAtE6tB,EAAiB,EAAjBA,kBAAmBmB,EAAc,EAAdA,eAAgBC,EAAc,EAAdA,eAAgBC,EAAc,EAAdA,eAErDC,EAAgB,WAClB,MAAiB,QAAbp0B,EAEI,kBAAC,EAAc,CACX8yB,kBAAmBA,EACnB3a,wBAAyBA,EACzB4a,kBAAmBA,EACnBzwB,YAAaA,IAKrB,kBAAC,UAAU,CACPwwB,kBAAmBA,EACnB3L,WAAYA,EACZ4L,kBAAmBA,EACnBzwB,YAAaA,EACbyxB,QAASA,EACT/zB,SAAUA,EACVm0B,eAAgBA,EAChBF,eAAgBA,EAChBC,eAAgBA,EAChBF,UAAWA,GAGvB,EAEA,OACI,kBAAC,aAAc,CAAC1c,SAAU,kBAAC,EAAAC,SAAQ,OAC/B,kBAAC,EAAAjL,eAAc,KACX,kBAAC,EAAA5J,MAAK,CACFL,QAASA,EACTE,OAAOnC,EAAAA,EAAAA,UAAS,SAChBkC,YAAaA,EACbkV,0BAA0B,EAC1B1X,MAAM,QACNkrB,eAAe,0BAEf,kBAACoJ,EAAa,QAGtB,kBAAC,EAAAvnB,cAAa,KACV,kBAAC,EAAA4K,YAAW,CACRpV,QAASA,EACTqV,UAAU,YACVC,OAAO,QACPC,aAActV,EACdgpB,iBAAiB,iCAEjB,kBAAC,EAAArf,kBAAiB,CAACxM,UAAU,uCAAuCmM,cAAc,QAC9E,kBAACwoB,EAAa,SAMtC,mTCtESC,EAAqB,SAACr0B,EAA6BiI,GAC5D,OAAQjI,GACJ,KAAKgE,EAAAA,GAAAA,QACD,OAAOswB,EAAAA,EAAAA,IAA+BrsB,GAC1C,KAAKjE,EAAAA,GAAAA,QACD,OAAOuwB,EAAAA,EAAAA,IAA+BtsB,GAC1C,KAAKjE,EAAAA,GAAAA,QACD,OAAOwwB,EAAAA,EAAAA,IAA+BvsB,GAC1C,QACI,OAAOqsB,EAAAA,EAAAA,IAA+BrsB,GAElD,EA2CawsB,EAA2B,SAAH,GAMJ,IAL7Bz0B,EAAQ,EAARA,SACAi0B,EAAc,EAAdA,eACAE,EAAc,EAAdA,eACAD,EAAc,EAAdA,eACAH,EAAO,EAAPA,QAyBA,OACI,kBAAC,aAAc,KACX,uBACIt0B,UAAU,mCACVyxB,KA3B0B,WAClC,OAAQlxB,GACJ,KAAKgE,EAAAA,GAAAA,QACD,OAAO0wB,EAAAA,EAAAA,IACHX,EAAUhiB,EAAAA,GAAAA,KAAgBA,EAAAA,GAAAA,KAC1BoiB,GAAkBA,EAAeJ,EAAUhiB,EAAAA,GAAAA,KAAgBA,EAAAA,GAAAA,OAGnE,KAAK/N,EAAAA,GAAAA,QACD,OAAO2wB,EAAAA,EAAAA,IACHZ,EAAU,OAAS,OACnBG,GAAkBA,EAAeH,EAAUhiB,EAAAA,GAAAA,KAAgBA,EAAAA,GAAAA,OAEnE,KAAK/N,EAAAA,GAAAA,QACD,OAAO4wB,EAAAA,EAAAA,IACHb,EAAU,OAAS,OACnBE,GAAkBA,EAAeF,EAAUhiB,EAAAA,GAAAA,KAAgBA,EAAAA,GAAAA,OAEnE,QACI,MAAO,GAEnB,CAMkB8iB,GACN3nB,OAAO,SACPwmB,IAAI,uBAEH1zB,IAAagE,EAAAA,GAAAA,QACV,kBAAC,EAAApD,KAAI,CACDnB,UAAU,wCACVD,KAAI,kBAAYs1B,EAAAA,EAAAA,IAAe90B,GAAS,YACxCF,MAAO,GACPC,OAAQ,KAGZ,kBAAC,EAAAa,KAAI,CACDnB,UAAU,wCACVD,KAAI,kBAAYs1B,EAAAA,EAAAA,IAAe90B,GAAS,YACxCN,KAAM,KAGd,yBAAKD,UAAU,yCACX,kBAAC,EAAAe,KAAI,CAAC2D,MAAM,qBAAqBzE,KAAK,MAAM8B,OAAO,QAC/C,kBAAC,EAAAqB,SAAQ,CAACC,kBAAkB,oBAMpD,8ECmMA,QAtQmB,SAAH,GAWQ,ID7CUiyB,EACxBC,ECkCNlC,EAAiB,EAAjBA,kBACA3L,EAAU,EAAVA,WACA4L,EAAiB,EAAjBA,kBACAzwB,EAAW,EAAXA,YACA2xB,EAAc,EAAdA,eACAC,EAAc,EAAdA,eACAC,EAAc,EAAdA,eACAJ,EAAO,EAAPA,QACA/zB,EAAQ,EAARA,SACAg0B,EAAS,EAATA,UAEMiB,EAA+B,WACjC,IAAMC,EAA6B,YAAbl1B,EAAyB,WAAa,UAC5D,OACI,yBAAKP,UAAU,qCACX,kBAAC,EAAAe,KAAI,CAACf,UAAU,8BACZ,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,uFAClBoB,OAAQ,CAAElE,SAAUk1B,MAKxC,EA4EA,OACI,yBAAKz1B,UAAU,6BACX,yBAAKA,UAAU,mBAxIU,SACjCO,EACA+zB,EACAjB,GAEA,OACI,kBAAC,aAAc,KACX,kBAAC,EAAAlyB,KAAI,CAACpB,KAAI,sBAAiBQ,EAASm1B,OAAO,GAAGC,eAAa,OAAGp1B,EAASq1B,MAAM,GAAE,aAAa31B,KAAM,KAClG,yBAAKD,UAAU,yBACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,KAAKmf,YAAY,IAAIpf,UAAU,iCACtC,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,wCAClBoB,OAAQ,CACJlE,UAAUs1B,EAAAA,EAAAA,IAAct1B,GACxB+zB,QAASA,EAAU,OAAS,IAEhCze,WAAY,CACR,0BACI9L,IAAK,EACL/J,UAAWO,IAAagE,EAAAA,GAAAA,SAAyB+vB,EAAU,uBAAyB,UAKlGjB,aAAiB,EAAjBA,EAAgDM,gBAC9C,kBAAC,EAAA5yB,KAAI,CAAC2D,MAAM,iBAAiBzE,KAAK,OAAOmf,YAAY,QAC/CiU,aAAiB,EAAjBA,EAAgDM,gBAM1E,CAyGiBmC,CAA6Bv1B,EAAU+zB,EAASjB,IAChDA,aAAiB,EAAjBA,EAAmBrS,kBAChB,kBAAC,EAAAjgB,KAAI,CACDd,KAAK,KACLyE,MAAOnE,IAAagE,EAAAA,GAAAA,QAAwB,iBAAmB,YAC/DvE,UAAU,gCACV+B,OAAO,QAEP,kBAAC,EAAA6e,MAAK,CACFC,OAAQwS,EAAkBrS,gBAC1BF,SAAUuS,EAAkBvS,SAC5BG,WAAYoS,EAAkBnS,SAAWmS,EAAkBnS,QAAU,EACrEH,eAAa,MAK7B,yBAAK/gB,UAAU,gCACVO,IAAagE,EAAAA,GAAAA,SAAyB,kBAACixB,EAA4B,MACnEj1B,IAAagE,EAAAA,GAAAA,SACV,kBAAC,aAAc,KACX,yBAAKvE,UAAU,qCACX,kBAAC,EAAAe,KAAI,CAACf,UAAU,+BAA8BW,EAAAA,EAAAA,UAAS,aACvD,kBAAC,IAAO,CAACkB,SAAO,EAACjE,MAAQy1B,aAAiB,EAAjBA,EAAgDrc,SAE7E,yBAAKhX,UAAU,qCACX,kBAAC,EAAAe,KAAI,CAACf,UAAU,+BAA8BW,EAAAA,EAAAA,UAAS,aACvD,yBAAKX,UAAU,8BACX,kBAAC,IAAW,CACRO,SAAS,UACTL,QAAS,WACL,IAAMkV,GAAe0e,EAAAA,EAAAA,kBAAiB,CAClC7L,YAAaoL,EAAkBpL,YAC/BwL,iBAAkBJ,EAAkBI,iBACpClzB,SAAUgE,EAAAA,GAAAA,IACV2jB,UAAWmL,EAAkBrK,wBAEjCsK,EACID,aAAiB,EAAjBA,EAAmBrc,OACnB+c,EAAAA,EAAAA,IAASV,EAAkBpL,YAAaP,GACxC2L,EAAkBje,aAClBA,EACCie,aAAiB,EAAjBA,EAA+Che,QAEpDxS,GACJ,OAOpB,yBAAK7C,UAAU,gCACX,kBAAC,EAAAmB,KAAI,CACDpB,KAAK,iBACLE,MAAMyB,EAAAA,EAAAA,YAAa,GAAK,GACxB1B,UAAU,sCAEd,yBAAKA,UAAU,qCACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,OAAOD,UAAU,qCACvBO,IAAagE,EAAAA,GAAAA,SACV,kBAAC,EAAAnB,SAAQ,CAACC,kBAAkB,4IAE/B9C,IAAagE,EAAAA,GAAAA,KACV,kBAAC,EAAAnB,SAAQ,CAACC,kBAAkB,yJAE/B9C,IAAagE,EAAAA,GAAAA,SACV,kBAAC,EAAAnB,SAAQ,CAACC,kBAAkB,4IAE/B9C,IAAagE,EAAAA,GAAAA,SACV,kBAAC,EAAAnB,SAAQ,CAACC,kBAAkB,mJAMhD,yBAAKrD,UAAU,wCA/GS,SAAC+1B,GAC7B,IAAIC,EAAY,GAChB,GAAsB,YAAlBD,EACAC,GAAYr1B,EAAAA,EAAAA,UAAS,oCAClB,GAAsB,YAAlBo1B,EACPC,GAAYr1B,EAAAA,EAAAA,UAAS,oCAClB,IAAsB,YAAlBo1B,GAAgCxB,EAEpC,OACI,KAFPyB,GAAYr1B,EAAAA,EAAAA,UAAS,8BAKzB,CAEA,OACI,kBAAC,aAAc,KACX,yBAAKX,UAAU,gDACX,kBAAC,EAAAe,KAAI,CAACf,UAAU,oDAAoDC,KAAK,MACpE+1B,GAEL,kBAAChB,EAAwB,CACrBz0B,SAAUA,EACV+zB,QAASA,EACTE,eAAgBA,EAChBC,eAAgBA,EAChBC,eAAgBA,KAKpC,CAiF+DuB,CAAwB11B,IAC9EA,IAAagE,EAAAA,GAAAA,SACV,kBAAC,aAAc,MACTgwB,GACE,yBAAKv0B,UAAU,iDACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,gBAAgBE,KAAM,KACjC,kBAAC,EAAAc,KAAI,CAACf,UAAU,qDAAqDC,KAAK,OACrEU,EAAAA,EAAAA,UAAS,wBAEd,uBACIX,UAAU,4DACVwI,KAAK,SACLipB,KAAMyE,EAAAA,GACNzoB,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAAlzB,KAAI,CAACd,KAAK,MAAM8B,OAAO,OAAO2C,MAAM,cAChC/D,EAAAA,EAAAA,UAAS,eAKzB4zB,GAAkC,SAArB4B,EAAAA,EAAAA,mBACV,yBAAKn2B,UAAU,0DACX,kBAAC,EAAAe,KAAI,CACDf,UAAU,4DACVwE,MAAM,SACNvE,KAAK,KACL8B,OAAO,QAEP,kBAAC,EAAAqB,SAAQ,CAACC,kBAAkB,wBAEhC,kBAAC,EAAAtC,KAAI,CACDf,UAAU,4DACVwE,MAAM,SACNvE,KAAK,OAEL,kBAAC,EAAAmD,SAAQ,CAACC,kBAAkB,qDAM1B,SAArB8yB,EAAAA,EAAAA,mBACG,yBAAKn2B,UAAU,gDAtMO,WAC9B,OAAQO,GACJ,IAAK,UACD,OACI,kBAAC,EAAAQ,KAAI,CACDyD,MAAM,SACNrB,GAAG,IACHnD,UAAU,wCACVC,MAAMyB,EAAAA,EAAAA,YAAa,OAAS,MAC5BK,OAAO,SAENpB,EAAAA,EAAAA,UAAS,qEAGtB,IAAK,UACD,OACI,kBAAC,EAAAI,KAAI,CACDyD,MAAM,SACNrB,GAAG,IACHnD,UAAU,wCACVC,MAAMyB,EAAAA,EAAAA,YAAa,OAAS,MAC5BK,OAAO,SAENpB,EAAAA,EAAAA,UAAS,uEAGtB,IAAK,UACD,OACI,kBAAC,EAAAI,KAAI,CACDyD,MAAM,SACNrB,GAAG,IACHnD,UAAU,wCACVC,MAAMyB,EAAAA,EAAAA,YAAa,OAAS,MAC5BK,OAAO,SAENpB,EAAAA,EAAAA,UAAS,2EAGtB,QACI,MAAO,GAEnB,CA6J2Ey1B,IAGnE,yBAAKp2B,UAAU,4CACX,yBAAKA,UAAU,0DACVO,IAAagE,EAAAA,GAAAA,SACV,yBAAKvE,UAAU,iEACX,uBAAGyxB,KAAMmD,EAAmBr0B,EAAU,OAAQkN,OAAO,SAASwmB,IAAI,uBAC9D,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,sBAAsBM,OAAOqB,EAAAA,EAAAA,YAAa,MAAQ,MAAOpB,OAAQ,OAIvFC,IAAagE,EAAAA,GAAAA,SAA8C,SAArB4xB,EAAAA,EAAAA,mBACnC,uBAAG1E,KAAMmD,EAAmBr0B,EAAU,WAAYkN,OAAO,SAASwmB,IAAI,uBAClE,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,uBAAuBM,MAAO,IAAKC,OAAQ,MAG7DC,IAAagE,EAAAA,GAAAA,SACV,kBAAC,aAAc,KACX,uBAAGktB,KAAMmD,EAAmBr0B,EAAU,WAAYkN,OAAO,SAASwmB,IAAI,uBAClE,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,uBAAuBM,MAAO,IAAKC,OAAQ,MAG1D,uBAAGmxB,KAAMmD,EAAmBr0B,EAAU,UAAWkN,OAAO,SAASwmB,IAAI,uBACjE,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,uBAAuBM,MAAO,IAAKC,OAAQ,UAKpEoB,EAAAA,EAAAA,aACE,yBAAK1B,UAAU,qDD/RDs1B,ECgSS/0B,ED/RjCg1B,GAAiB7zB,EAAAA,EAAAA,YAAa,OAAS,MAgBzC,kBAAC,aAAc,KACX,kBAAC,IAAM,CACH9D,MAhBQ,WAChB,OAAQ03B,GACJ,KAAK/wB,EAAAA,GAAAA,QACD,MAAO,4BACX,KAAKA,EAAAA,GAAAA,QACD,MAAO,4BACX,KAAKA,EAAAA,GAAAA,QACD,MAAO,4BACX,QACI,MAAO,4BAEnB,CAKmB8xB,GACPp2B,KAAM,EACNG,MAAO,CAAEE,OAAQ,OAAQg2B,SAAU,OAAQj2B,MAAOk1B,KAEtD,kBAAC,EAAAx0B,KAAI,CAACyD,MAAM,SAASvE,KAAK,OACtB,kBAAC,EAAAmD,SAAQ,CACLC,kBAAkB,qDAClBoB,OAAQ,CAAElE,UAAUs1B,EAAAA,EAAAA,IAAcP,WC4QtD,yICtUO,IAAM/wB,EAAgB,CACzBoY,IAAK,MACL4Z,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,IAAK,MACLC,KAAM,QAGGrkB,EAAW,CACpBskB,KAAM,OACNC,KAAM,QAGGhG,EAAc,CACvBiG,UAAW,YACXC,OAAQ,SACRC,UAAW,YACXC,IAAK,OAGIC,EAAmB,CAC5BC,IAAK,MACLC,OAAQ,SACRC,QAAS,WAGAC,EAAoB,CAC7BC,QAAS,UACTC,MAAO,QACPC,MAAO,SAGEC,EAAS,CAClBC,GAAI,KACJC,OAAQ,UAGCnxB,EAAe,CACxBoxB,IAAK,MACLC,IAAK,MACLC,QAAS,UACTC,OAAQ,SACRC,aAAc,eAGLC,EAAwB,CACjCC,cAAe,gBACfC,cAAe,gBACfC,kBAAmB,oBACnBtB,OAAQ,SACRuB,cAAe,gBACfC,cAAe,gBACfC,kBAAmB,oBACnBC,iBAAkB,mBAClBC,uBAAwB,wBACxBC,QAAS,UACTC,YAAa,yQCpDX/C,EAAgB,SAACt1B,GACnB,OAAQA,GACJ,KAAKgE,EAAAA,GAAAA,QACD,MAAO,UACX,KAAKA,EAAAA,GAAAA,QACD,MAAO,KACX,KAAKA,EAAAA,GAAAA,QACD,MAAO,IACX,QACI,MAAO,GAEnB,EAEM8wB,EAAiB,SAAC90B,GACpB,OAAQA,GACJ,KAAKgE,EAAAA,GAAAA,QACD,MAAO,UACX,KAAKA,EAAAA,GAAAA,QACD,MAAO,UACX,KAAKA,EAAAA,GAAAA,QACD,MAAO,UACX,QACI,MAAO,GAEnB,EAEMwvB,EAAW,SAAC9L,EAAqBP,GAEnC,OADIA,IAAY/mB,EAAAA,EAAAA,UAAS,YAClBsnB,CACX,EAEA,GAAqC4Q,EAAAA,EAAAA,sBAA7BC,EAAU,EAAVA,WAAYC,EAAY,EAAZA,aAKd7C,EAA2B,uDAgB3B8C,EAA0B,6DAI1BC,EAAcH,GAAcC,EAjBV,4BACO,wBAkBzBtY,EAAiB,WACnB,MAAO,CACHC,eAAgB,IAChBC,kBAAmB,IAE3B,EAEMkU,EAAiC,SAACt0B,GACpC,OAAQA,GACJ,KAAK22B,EAAAA,GAAAA,IACD,MArBgB,qDAsBpB,KAAKA,EAAAA,GAAAA,OACD,MArBmB,+CAsBvB,KAAKA,EAAAA,GAAAA,QACD,MAxBoB,6DAyBxB,QACI,MAAO,GAEnB,EAEMnC,EAAiC,SAACx0B,GACpC,OAAQA,GACJ,KAAK22B,EAAAA,GAAAA,IACD,MAtCgB,sDAuCpB,KAAKA,EAAAA,GAAAA,QACD,MAvCoB,oEAwCxB,KAAKA,EAAAA,GAAAA,OACD,MAxCmB,iDAyCvB,QACI,MAAO,GAEnB,EAEMpC,EAAiC,SAACv0B,GACpC,OAAQA,GACJ,KAAK22B,EAAAA,GAAAA,IACD,MA3CgB,oDA4CpB,KAAKA,EAAAA,GAAAA,QACD,OAAO8B,EACX,KAAK9B,EAAAA,GAAAA,OACD,MAAO,GACX,QACI,OAAO8B,EAEnB,EAEM9E,EAA6B,WAC/B,QAD+D,UAAH,kDAAGr1B,KAC3Cq6B,EAAAA,EAAAA,aAChB,KAAK5B,EAAAA,GAAAA,QACD,MAAO,0EACX,KAAKA,EAAAA,GAAAA,MACD,MAAO,4EACX,KAAKJ,EAAAA,GAAAA,IACD,MAAO,8FACX,KAAKI,EAAAA,GAAAA,MACD,MAAO,iFACX,KAAKJ,EAAAA,GAAAA,OACD,MAAO,iDACX,KAAKA,EAAAA,GAAAA,QACD,MAAO,kGACX,QACI,MAAO,GAEnB,EAEM/B,EAA4B,SAACjZ,EAAkBid,GACjD,IAAIC,EAAMld,IAAa5J,EAAAA,GAAAA,KA3FF,uBACA,4BAgGrB,OAJI6mB,IACAC,GAAO,UAAJ,OAAcD,IAGdC,CACX,EAEMnE,EAA4B,SAAC/Y,EAAkBid,GACjD,MAAO,GAAP,OAAUF,GAAW,OAAGE,GAAS,UAAJ,OAAcA,GAC/C,EAEMjE,EAA4B,SAAChZ,EAAkBid,GACjD,IAAIC,EAhGY,wCAsGhB,OAJID,IACAC,GAAO,kBAAJ,OAAsBD,IAGtBC,CACX,qLC9Iavc,EAAiB,WAC1B,IAAMwc,EAAa,CACfjkB,aAAc,GACdiX,SAAU,IACVvP,aAAanc,EAAAA,EAAAA,UAAS,SAEpB24B,EAAmB,CACrBlkB,aAAc,GACdiX,SAAU,IACVvP,aAAanc,EAAAA,EAAAA,UAAS,YAEpB44B,EAAmB,CACrBnkB,aAAc,YACdiX,SAAU,IACVvP,aAAanc,EAAAA,EAAAA,UAAS,cAE1B,MAAO,CACH64B,KAAM,CACFC,IAAK,CACDC,qBAAsBL,EAAWjkB,aACjCiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,YAAauc,EAAWvc,aAE5BiF,UAAW,CACP2X,qBAAsBJ,EAAiBlkB,aACvCiX,SAAUiN,EAAiBjN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,gBAChBmc,YAAawc,EAAiBxc,aAElCyE,UAAW,CACPmY,qBAAsBH,EAAiBnkB,aACvCiX,SAAUkN,EAAiBlN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,kBAChBmc,YAAayc,EAAiBzc,cAGtC6c,KAAM,CACFF,IAAK,CACDC,qBAAsBL,EAAWjkB,aACjCiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,YAAauc,EAAWvc,aAE5BgG,QAAS,CACL8W,iBAAkBP,EAAWjkB,aAC7BiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,YAAauc,EAAWvc,aAE5BiF,UAAW,CACP2X,qBAAsBJ,EAAiBlkB,aACvCiX,SAAUiN,EAAiBjN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,WAChBmc,YAAawc,EAAiBxc,aAElCyE,UAAW,CACPmY,qBAAsBH,EAAiBnkB,aACvCiX,SAAUkN,EAAiBlN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,aAChBmc,YAAayc,EAAiBzc,cAI9C,EAEauD,EAAsB,WAC/B,IAAMgZ,EAAa,CACfjkB,aAAc,GACdiX,SAAU,IACVvP,aAAanc,EAAAA,EAAAA,UAAS,QAE1B,MAAO,CACH64B,KAAM,CACFC,IAAK,CACDI,qBAAsBR,EAAWjkB,aACjCiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,YAAauc,EAAWvc,cAGhC6c,KAAM,CACFF,IAAK,CACDC,qBAAsBL,EAAWjkB,aACjCiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,OAChBmc,YAAauc,EAAWvc,cAIxC,EAEaF,EAAiB,SAACa,GAC3B,IAAM4b,EAAa,CACfjkB,aAAc,GACdiX,SAAU,IACVvP,aAAanc,EAAAA,EAAAA,UAAS,cAEpB24B,EAAmB,CACrBlkB,aAAc,GACdiX,SAAU,IACVvP,aAAanc,EAAAA,EAAAA,UAAS,YAEpB44B,EAAmB,CACrBnkB,aAAc,YACdiX,SAAU,IACVvP,YAAaW,GAAQ9c,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,cAE/Cm5B,EAAuB,CACzB1kB,aAAc,gBACdiX,SAAU,IACVvP,aAAanc,EAAAA,EAAAA,UAAS,kBAE1B,MAAO,CACH64B,KAAM,CACFC,IAAK,CACDG,iBAAkBP,EAAWjkB,aAC7BiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,kBAChBmc,YAAauc,EAAWvc,aAE5Bid,QAAS,CACLH,iBAAkBP,EAAWjkB,aAC7BiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,sBAChBmc,aAAanc,EAAAA,EAAAA,UAAS,kBAE1Bq5B,QAAS,CACLJ,iBAAkBP,EAAWjkB,aAC7BiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,YAAauc,EAAWvc,aAE5Bmd,QAAS,CACLL,iBAAkBP,EAAWjkB,aAC7BiX,SAAU,MACVvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,aAAanc,EAAAA,EAAAA,UAAS,YAE1BohB,UAAW,CACP6X,iBAAkBN,EAAiBlkB,aACnCiX,SAAUiN,EAAiBjN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,gBAChBmc,YAAawc,EAAiBxc,aAElCyE,UAAW,CACPqY,iBAAkBL,EAAiBnkB,aACnCiX,SAAUkN,EAAiBlN,SAC3BvpB,MAAO2a,GAAQ9c,EAAAA,EAAAA,UAAS,cAAeA,EAAAA,EAAAA,UAAS,kBAChDmc,YAAayc,EAAiBzc,aAElCod,eAAgB,CACZN,iBAAkBL,EAAiBnkB,aACnCiX,SAAUkN,EAAiBlN,SAC3BvpB,MAAO2a,GAAQ9c,EAAAA,EAAAA,UAAS,cAAeA,EAAAA,EAAAA,UAAS,kBAChDmc,YAAayc,EAAiBzc,aAElCwM,cAAe,CACXsQ,iBAAkBN,EAAiBlkB,aACnCiX,SAAUiN,EAAiBjN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,oBAChBmc,YAAawc,EAAiBxc,aAGlC+I,cAAe,CACX+T,iBAAkBL,EAAiBnkB,aACnCiX,SAAUkN,EAAiBlN,SAC3BvpB,MAAO2a,GAAQ9c,EAAAA,EAAAA,UAAS,cAAeA,EAAAA,EAAAA,UAAS,sBAChDmc,YAAaW,GAAQ9c,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,kBAErD8gB,cAAe,CACXmY,iBAAkBE,EAAqB1kB,aACvCiX,SAAUyN,EAAqBzN,SAC/BvpB,OAAOnC,EAAAA,EAAAA,UAAS,sBAChBmc,YAAagd,EAAqBhd,cAG1C6c,KAAM,CACFF,IAAK,CACDG,iBAAkBP,EAAWjkB,aAC7BiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,aAChBmc,YAAauc,EAAWvc,aAE5Bid,QAAS,CACLH,iBAAkBP,EAAWjkB,aAC7BiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBmc,YAAauc,EAAWvc,aAE5Bmd,QAAS,CACLL,iBAAkBP,EAAWjkB,aAC7BiX,SAAU,MACVvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,aAAanc,EAAAA,EAAAA,UAAS,YAE1BmiB,QAAS,CACL8W,iBAAkBP,EAAWjkB,aAC7BiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,YAAauc,EAAWvc,aAE5Bkd,QAAS,CACLJ,iBAAkBP,EAAWjkB,aAC7BiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,YAAauc,EAAWvc,aAE5BiF,UAAW,CACP6X,iBAAkBN,EAAiBlkB,aACnCiX,SAAUiN,EAAiBjN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,WAChBmc,YAAawc,EAAiBxc,aAElCwM,cAAe,CACXsQ,iBAAkBN,EAAiBlkB,aACnCiX,SAAUiN,EAAiBjN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,eAChBmc,YAAawc,EAAiBxc,aAElC6I,cAAe,CACXiU,iBAAkBN,EAAiBlkB,aACnCiX,SAAUiN,EAAiBjN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,eAChBmc,YAAawc,EAAiBxc,aAElCqd,YAAa,CACTP,iBAAkBN,EAAiBlkB,aACnCiX,SAAUiN,EAAiBjN,SAC3BvpB,OAAOnC,EAAAA,EAAAA,UAAS,mBAChBmc,YAAawc,EAAiBxc,aAElCyE,UAAW,CACPqY,iBAAkBL,EAAiBnkB,aACnCiX,SAAUkN,EAAiBlN,SAC3BvpB,MAAO2a,GAAQ9c,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,aAC3Cmc,YAAayc,EAAiBzc,aAElC+I,cAAe,CACX+T,iBAAkBL,EAAiBnkB,aACnCiX,SAAUkN,EAAiBlN,SAC3BvpB,MAAO2a,GAAQ9c,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,iBAC3Cmc,YAAayc,EAAiBzc,aAElC6M,cAAe,CACXiQ,iBAAkBL,EAAiBnkB,aACnCiX,SAAUkN,EAAiBlN,SAC3BvpB,MAAO2a,GAAQ9c,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,iBAC3Cmc,YAAayc,EAAiBzc,aAElCsd,aAAc,CACVR,iBAAkBL,EAAiBnkB,aACnCiX,SAAUkN,EAAiBlN,SAC3BvpB,MAAO2a,GAAQ9c,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,oBAC3Cmc,YAAayc,EAAiBzc,aAElCud,YAAa,CACTT,iBAAkBL,EAAiBnkB,aACnCiX,SAAUkN,EAAiBlN,SAC3BvpB,MAAO2a,GAAQ9c,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,qBAC3Cmc,YAAayc,EAAiBzc,aAElC2E,cAAe,CACXmY,iBAAkBE,EAAqB1kB,aACvCiX,SAAUyN,EAAqBzN,SAC/BvpB,OAAOnC,EAAAA,EAAAA,UAAS,iBAChBmc,YAAagd,EAAqBhd,cAIlD,EAEaC,EAAsB,WAC/B,IAAMsc,EAAa,CACfjkB,aAAc,GACdiX,SAAU,IACVvP,aAAanc,EAAAA,EAAAA,UAAS,SAE1B,MAAO,CACH64B,KAAM,CACFC,IAAK,CACDa,qBAAsBjB,EAAWjkB,aACjCiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,YAAauc,EAAWvc,cAGhC6c,KAAM,CACFF,IAAK,CACDa,qBAAsBjB,EAAWjkB,aACjCiX,SAAUgN,EAAWhN,SACrBvpB,OAAOnC,EAAAA,EAAAA,UAAS,QAChBmc,YAAauc,EAAWvc,cAIxC,EAEa7C,EAA+B,SAACsgB,GACzC,IAAIC,EAAkB,GAEtB,OAAQD,GACJ,KAAKnR,EAAAA,aAAAA,IACDoR,GAAkB75B,EAAAA,EAAAA,UAAS,OAC3B,MACJ,KAAKyoB,EAAAA,aAAAA,IACDoR,GAAkB75B,EAAAA,EAAAA,UAAS,OAC3B,MACJ,KAAKyoB,EAAAA,aAAAA,OACDoR,GAAkB75B,EAAAA,EAAAA,UAAS,UAC3B,MACJ,KAAKyoB,EAAAA,aAAAA,QACDoR,GAAkB75B,EAAAA,EAAAA,UAAS,WAC3B,MACJ,QACI65B,EAAkBD,aAAiB,EAAjBA,EAAmB5E,cAI7C,OAAO6E,CACX,+JCpUMC,GAAkB1+B,EAAAA,EAAAA,eAAgC,MAE3C2+B,EAAmB,SAAH,GAAiD,IAA3Cz9B,EAAQ,EAARA,SACvB09B,GAAY9zB,EAAAA,EAAAA,MAAZ8zB,QAER,OACI,kBAACF,EAAgBrH,SAAQ,CAErBx1B,OAAO+8B,aAAO,EAAPA,EAASC,MAAO,CAAC,GAEvB39B,EAGb,EAEauI,EAAc,WACvB,IAAMq1B,GAAQ5+B,EAAAA,EAAAA,YAAWw+B,GAEzB,IAAKI,EACD,MAAM,IAAIC,MAAM,mDAGpB,OAAOD,CACX,iXC1BA,44PAGA,IAKqBE,EAAS,WA8C1B,aAA0B,WAAd5U,EAAU,UAAH,6CAAG,CAAC,GAtD3B,4FAsD4B,cArCxB6U,kBAAoB,CAAC,EAAC,KAEtBC,iBAAmB,CAAC,EAAC,KAErBC,yBAA2B,KAAI,KAC/BC,4BAA8B,KAAI,KAElCC,sBAAwB,KAAI,KAC5BC,wBAA0B,KAAI,KAE9BC,eAAiB,KAAI,KACrBC,gBAAkB,KAAI,KAEtBC,mBAAqB,KAAI,KACzBC,qBAAuB,KAAI,KAE3BC,4BAA8B,KAAI,KAClCC,+BAAiC,KAAI,KAErCC,oBAAsB,KAAI,KAC1BC,sBAAwB,KAAI,KAE5BC,+BAAiC,KAAI,KACrCC,mCAAqC,KAAI,KAEzCC,mBAAqB,GAajBC,EAAAA,EAAAA,gBAAeC,KAAM,CACjBlB,kBAAmBmB,EAAAA,WACnBlB,iBAAkBkB,EAAAA,WAClBH,mBAAoBG,EAAAA,WACpBC,oBAAqBzX,EAAAA,OACrB0X,2BAA4B1X,EAAAA,OAC5B2X,mBAAoB3X,EAAAA,OACpB4X,QAAS5X,EAAAA,OACT6X,iBAAkB7X,EAAAA,OAClB8X,sBAAuB9X,EAAAA,OACvB+X,gBAAiB/X,EAAAA,OAAAA,MACjBgY,mBAAoBhY,EAAAA,OAAAA,MACpBiY,SAAUjY,EAAAA,OAAAA,MACVkY,aAAclY,EAAAA,OAAAA,MACdmY,sBAAuBnY,EAAAA,OAAAA,MACvBoY,cAAepY,EAAAA,OAAAA,MACfqY,uBAAwBrY,EAAAA,OAAAA,MACxBsY,wBAAyBtY,EAAAA,OAAAA,MACzBuY,qBAAsBvY,EAAAA,OAAAA,MACtBwY,cAAexY,EAAAA,OAAAA,MACfyY,kBAAmBzY,EAAAA,OAAAA,MACnB0Y,2BAA4B1Y,EAAAA,OAAAA,MAC5B2Y,mBAAoB3Y,EAAAA,OAAAA,MACpB4Y,4BAA6B5Y,EAAAA,OAAAA,MAC7B6Y,UAAW7Y,EAAAA,OAAAA,MACX8Y,oBAAqB9Y,EAAAA,OAAAA,QAGzB,IAAQ+Y,EACJvX,EADIuX,WAAYC,EAChBxX,EADgBwX,yBAA0BC,EAC1CzX,EAD0CyX,2BAA4B3C,EACtE9U,EADsE8U,iBAAkB4C,EACxF1X,EADwF0X,WAoB5F,GAjBAl0B,OAAOm0B,eAAe5B,KAAM,aAAc,CACtC6B,YAAY,EACZC,UAAU,IAEdr0B,OAAOm0B,eAAe5B,KAAM,2BAA4B,CACpD6B,YAAY,EACZC,UAAU,IAEdr0B,OAAOm0B,eAAe5B,KAAM,6BAA8B,CACtD6B,YAAY,EACZC,UAAU,IAITL,GAA4BA,EAAyBrzB,QACrDszB,GAA8BA,EAA2BtzB,OAE5B,CAC9B,IAAKuzB,EACD,MAAM,IAAI/C,MAAM,oDAGpBnxB,OAAOm0B,eAAe5B,KAAM,aAAc,CACtCt+B,MAAOigC,EACPE,YAAY,EACZC,UAAU,GAElB,CAEA9B,KAAKwB,WAAaA,EAClBxB,KAAKyB,yBAA2BA,GAA4B,GAC5DzB,KAAK0B,2BAA6BA,GAA8B,GAEhE5oB,YAAW,WACP,EAAKsnB,mBAAmBrB,GAExB,EAAKgD,+BACL,EAAKC,iCACL,EAAK9B,qBACT,GAAG,EACP,CA9HJ,UA4hBK,OA5hBL,EAgII,EAhIJ,EAgII,0BAOA,SAAY+B,GACR,IAAIC,GAAWC,EAAAA,EAAAA,MAAKnC,MAUpB,OARKoC,EAAAA,EAAAA,eAAcpC,KAAKwB,cACpBU,EAASV,WAAaxB,KAAKwB,YAG3BS,GAAcA,EAAW7zB,SACzB8zB,EAAWD,EAAWrsB,QAAO,SAAC/C,EAAQwvB,GAAC,OAAK50B,OAAOqI,OAAOjD,EAAQ,EAAF,GAAKwvB,EAAIH,EAASG,IAAK,GAAE,CAAC,IAGvFH,CACX,GAEA,0CAKA,WAA+B,WACvBlC,KAAKyB,yBAAyBrzB,SAC9Bk0B,EAAAA,EAAAA,WACI,kBAAM,EAAKb,yBAAyBx0B,KAAI,SAAAC,GAAC,OAAI,EAAKA,EAAE,GAAC,IACrD,kBAAM,EAAKq1B,cAAc,EAAKd,yBAA0B5C,EAAU2D,SAASC,cAAc,GAGrG,GAEA,4CAKA,WAAiC,WACzBzC,KAAK0B,2BAA2BtzB,SAChCk0B,EAAAA,EAAAA,WACI,kBAAM,EAAKZ,2BAA2Bz0B,KAAI,SAAAC,GAAC,OAAI,EAAKA,EAAE,GAAC,IACvD,kBAAM,EAAKq1B,cAAc,EAAKb,2BAA4B7C,EAAU2D,SAASE,gBAAgB,GAGzG,GAEA,2BAOA,SAAcT,EAAYU,GACtB,IAAMT,EAAWU,KAAKC,UAAU7C,KAAK8C,YAAYb,IAAa,SAACp0B,EAAKnM,GAChE,GAAc,OAAVA,EAAgB,OAAOA,CAE/B,IAEIihC,IAAY9D,EAAU2D,SAASC,cAC/BjpB,aAAaC,QAAQumB,KAAK2B,WAAYO,GAC/BS,IAAY9D,EAAU2D,SAASE,iBACtCK,eAAetpB,QAAQumB,KAAK2B,WAAYO,EAEhD,GAEA,iCAIA,WAAsB,WACZc,EAAyBJ,KAAKK,MAAMzpB,aAAaiI,QAAQue,KAAK2B,WAAY,CAAC,IAC3EuB,EAA2BN,KAAKK,MAAMF,eAAethB,QAAQue,KAAK2B,WAAY,CAAC,IAE/EO,EAAW,EAAH,KAAQc,GAA2BE,GAEjDz1B,OAAOwE,KAAKiwB,GAAUv0B,SAAQ,SAAAw1B,GAAC,OAAK,EAAKA,GAAKjB,EAASiB,EAAE,GAC7D,GAEA,wCAOA,SAA2BC,EAAcC,GAAU,WAK1CrD,KAAKlB,kBAAkBsE,KAHtB,EAAKtE,kBAAkBsE,GACpBtwB,QAAO,SAAAwwB,GAAC,OAAKD,EAASx4B,SAASy4B,EAAE,IACjCxQ,OAAOuQ,EAASvwB,QAAO,SAAAwwB,GAAC,OAAK,EAAKxE,kBAAkBsE,GAAcv4B,SAASy4B,EAAE,KAAGl1B,SAErF4xB,KAAKlB,kBAAkBsE,GAAgBC,EAE/C,GAEA,gCAMA,WAA+B,WAAZE,EAAQ,UAAH,6CAAG,CAAC,EACxB91B,OAAOwE,KAAKsxB,GAAO51B,SAAQ,SAAAE,GACvB,EAAKwyB,QAAQxyB,EAAK01B,EAAM11B,GAC5B,GACJ,GAEA,qBAOA,SAAQ21B,EAAUD,GAAO,WACrBvD,KAAKjB,iBAAiByE,GAAYD,GAElCE,EAAAA,EAAAA,WAAUzD,KAAMwD,GAAU,SAAAE,GAEtB,OADA,EAAKpD,iBAAiBkD,EAAUE,EAAOC,UAChCD,CACX,GACJ,GAEA,8BAOA,SAAiBF,EAAU9hC,GAAO,WACxBkiC,EAAU5D,KAAKjB,iBAAiByE,GAAUI,QAC1CC,EAAS,EAAH,GAAML,OAAqB7gC,IAAVjB,EAAsBA,EAAQs+B,KAAKwD,IAC1DzE,EAAmB,EAAH,GAAMyE,EAAWxD,KAAKjB,iBAAiByE,GAAUD,OAAS,IAE1EK,GAAWn2B,OAAOq2B,eAAeC,KAAK/D,KAAM4D,KAC9CC,EAAOD,GAAW5D,KAAK4D,GACvB7E,EAAiB6E,GAAW5D,KAAKjB,iBAAiB6E,GAASL,OAAS,IAGxE,IAAMS,EAAY,IAAIC,EAAAA,UAAUJ,EAAQ9E,EAAkBiB,MAE1DgE,EAAUE,WAEVz2B,OAAOwE,KAAK4xB,GAAQl2B,SAAQ,SAAAE,GACxB,EAAKsyB,2BAA2BtyB,EAAKm2B,EAAU73B,OAAOg4B,IAAIt2B,GAC9D,GACJ,GAEA,mCAIA,WAAwB,WACdkxB,EAAmBtxB,OAAOwE,KAAK+tB,KAAKjB,kBACpCD,EAAoBrxB,OAAOwE,KAAK+tB,KAAKlB,mBAE3CC,EAAiBpxB,SAAQ,SAAA00B,GACrB,EAAK/B,iBAAiB+B,EAAG,EAAKA,GAClC,IAGAvD,EAAkBnxB,SAAQ,SAAArN,GACjBy+B,EAAiBl0B,SAASvK,WACpB,EAAKw+B,kBAAkBx+B,EAEtC,GACJ,GAAC,6BAED,SAAgB8jC,GAAU,WAClBA,IACApE,KAAKb,wBAA0BiF,EAE/BpE,KAAKd,uBAAwBmF,EAAAA,EAAAA,OACzB,kBAAM,EAAK7C,WAAW5/B,OAAO0iC,gBAAgB,IAC7C,WACI,IACI,IAAMzxB,EAAS,EAAKssB,0BACpB,IAAItsB,IAAUA,EAAOD,MAA+B,mBAAhBC,EAAOD,KAMvC,MAAM,IAAIgsB,MAAM,iEALhB/rB,EAAOD,MAAK,WACR,EAAK4uB,WAAW5/B,OAAO2iC,kBACvB,EAAK/D,gBAAgB,EAAKrB,wBAC9B,GAIR,CAAE,MAAO7+B,IAGAkkC,EAAAA,EAAAA,iBACDC,QAAQnkC,MAAMA,EAEtB,CACJ,IAGZ,GAAC,gCAED,SAAmB8jC,GAAU,WACrBA,IACApE,KAAKf,4BAA8BmF,EACnCpE,KAAKhB,0BAA2BqF,EAAAA,EAAAA,OAC5B,kBAAM,EAAK7C,WAAW5/B,OAAO8iC,oBAAoB,IACjD,WACI,IAAI,MACM7xB,EAAyC,QAAnC,EAAG,EAAKosB,mCAA2B,aAAhC,UACf,IAAIpsB,IAAUA,EAAOD,MAA+B,mBAAhBC,EAAOD,KAMvC,MAAM,IAAIgsB,MAAM,kEALhB/rB,EAAOD,MAAK,WACR,EAAK4uB,WAAW5/B,OAAO+iC,qBAAoB,GAC3C,EAAKlE,mBAAmB,EAAKxB,4BACjC,GAIR,CAAE,MAAO3+B,IAGAkkC,EAAAA,EAAAA,iBACDC,QAAQnkC,MAAMA,EAEtB,CACJ,IAGZ,GAAC,sBAED,SAAS8jC,GAAU,WACfpE,KAAKZ,gBAAiBiF,EAAAA,EAAAA,OAClB,kBAAM,EAAK7C,WAAW5/B,OAAOgjC,cAAc,eAC3C,oFAE6C,GAF7C,WAEc/xB,EAAS,EAAKwsB,qBACNxsB,EAAOD,MAA+B,mBAAhBC,EAAOD,KAAmB,gBAC1DC,EAAOD,MAAK,WACR,EAAK4uB,WAAW5/B,OAAOijC,WAAU,GACjC,EAAKnE,SAAS,EAAKrB,gBACvB,IAAG,4BAEG,IAAIT,MAAM,sDAAqD,wDAKpE4F,EAAAA,EAAAA,iBACDC,QAAQnkC,MAAM,EAAD,IAChB,0DAIb0/B,KAAKX,gBAAkB+E,CAC3B,GAAC,0BAED,SAAaA,GAAU,WACnBpE,KAAKV,oBAAqB+E,EAAAA,EAAAA,OACtB,kBAAM,EAAK7C,WAAW5/B,OAAOkjC,qBAAqB,eAClD,oFAEkD,GAFlD,WAEcjyB,EAAS,EAAK0sB,0BACN1sB,EAAOD,MAA+B,mBAAhBC,EAAOD,KAAmB,gBAC1DC,EAAOD,MAAK,WACR,EAAK4uB,WAAW5/B,OAAOmjC,gBAAe,GACtC,EAAKpE,aAAa,EAAKpB,qBAC3B,IAAG,4BAEG,IAAIX,MAAM,2DAA0D,wDAKzE4F,EAAAA,EAAAA,iBACDC,QAAQnkC,MAAM,EAAD,IAChB,0DAIb0/B,KAAKT,qBAAuB6E,CAChC,GAAC,mCAED,SAAsBA,GAAU,WAC5BpE,KAAKR,6BAA8B8C,EAAAA,EAAAA,WAC/B,kBAAM,EAAKd,WAAW1W,OAAOka,iBAAiB,IAC9C,SAAAC,GACI,IACI,EAAKxF,+BAA+BwF,EACxC,CAAE,MAAO3kC,IAGAkkC,EAAAA,EAAAA,iBACDC,QAAQnkC,MAAMA,EAEtB,CACJ,IAGJ0/B,KAAKP,+BAAiC2E,CAC1C,GAAC,2BAED,SAAcA,GAAU,WACpBpE,KAAKN,qBAAsB4C,EAAAA,EAAAA,WACvB,kBAAM,EAAKd,WAAW/lB,GAAGypB,eAAe,IACxC,SAAAA,GACI,IACI,EAAKvF,sBAAsBuF,EAC/B,CAAE,MAAO5kC,IAGAkkC,EAAAA,EAAAA,iBACDC,QAAQnkC,MAAMA,EAEtB,CACJ,IAGJ0/B,KAAKL,sBAAwByE,CACjC,GAAC,oCAED,SAAuBA,GAAU,WAC7BpE,KAAKJ,gCAAiCyE,EAAAA,EAAAA,OAClC,kBAAM,EAAK7C,WAAW/lB,GAAG0pB,6BAA6B,IACtD,WACI,IACI,IAAMtyB,EAAS,EAAKgtB,qCACpB,IAAIhtB,IAAUA,EAAOD,MAA+B,mBAAhBC,EAAOD,KAMvC,MAAM,IAAIgsB,MAAM,mEALhB/rB,EAAOD,MAAK,WACR,EAAK4uB,WAAW/lB,GAAG2pB,yBAAwB,GAC3C,EAAKtE,uBAAuB,EAAKjB,mCACrC,GAIR,CAAE,MAAOv/B,IAGAkkC,EAAAA,EAAAA,iBACDC,QAAQnkC,MAAMA,EAEtB,CACJ,IAGJ0/B,KAAKH,mCAAqCuE,CAC9C,GAAC,qCAED,WACiD,mBAAlCpE,KAAKhB,0BACZgB,KAAKhB,2BAETgB,KAAKf,4BAA8B,IACvC,GAAC,kCAED,WAC8C,mBAA/Be,KAAKd,uBACZc,KAAKd,wBAETc,KAAKb,wBAA0B,IACnC,GAAC,2BAED,WACuC,mBAAxBa,KAAKZ,gBACZY,KAAKZ,iBAETY,KAAKX,gBAAkB,IAC3B,GAAC,+BAED,WAC2C,mBAA5BW,KAAKV,oBACZU,KAAKV,qBAETU,KAAKT,qBAAuB,IAChC,GAAC,wCAED,WACoD,mBAArCS,KAAKR,6BACZQ,KAAKR,8BAETQ,KAAKP,+BAAiC,IAC1C,GAAC,gCAED,WAC4C,mBAA7BO,KAAKN,qBACZM,KAAKN,sBAETM,KAAKL,sBAAwB,IACjC,GAAC,yCAED,WACuD,mBAAxCK,KAAKJ,gCACZI,KAAKJ,iCAETI,KAAKH,mCAAqC,IAC9C,GAAC,uBAED,WACIG,KAAKe,0BACLf,KAAKgB,uBACLhB,KAAKiB,gBACLjB,KAAKkB,oBACLlB,KAAKmB,6BACLnB,KAAKoB,qBACLpB,KAAKqB,6BACT,GAAC,iCAED,SAAoBgE,GAEhB,GAAIrF,KAAKwB,WAAW5/B,OAAOyjC,UAAYA,EAAS,4BAFpBC,EAAS,iCAATA,EAAS,kBAGjCA,EAAU33B,SAAQ,SAAA43B,GAAG,OAAIA,GAAK,IAC9BvF,KAAKF,oBAAqB,CAC9B,CACJ,IA5hBJ,iFA4hBK,EAphByB,GAATjB,EAIV2D,SAAW/0B,OAAO+3B,OAAO,CAC5B/C,cAAegD,OAAO,iBACtB/C,gBAAiB+C,OAAO,kUCdhC,8lGAAAv4B,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,+kBAAAA,GAAA,gEAAAA,GAAA,0JAAAA,EAAA,6FAAAA,GAAA,mIAAAA,IAAA,4SAAAA,IAAA,2OAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,6PAAAA,EAAA,EAAAA,EAAA,iBAAAA,IAAA,uBAAAA,GAAA,UAAAA,GAAA,GAAAA,EAAA,yZAAAA,EAAA,EAAAA,EAAA,SAAAA,IAAA,SAAAA,GAAA,y4CAE2F,IAEtE2N,EAAQ,aAJ7B,qRAI6B,UAJ7B,MAiyBK,EAnMA,EA1DA,EAhBA,EA9BA,EAfA,EAVA,EArMA,EApRwB,OA8CzB,cAA4B,MAAd2mB,EAAU,EAAVA,WAmGR,OArJV,4FAkD4B,UACpB,cAAM,CAAEA,WAAAA,KA9CZ7S,6BAA8B,EAAK,EACnC+W,uCAAwC,EAAK,EAC7C9P,+BAAgC,EAAK,EACrC+P,4BAA6B,EAAK,EAClCj8B,gCAAkC,GAAE,EAEpCwP,aAAe,CACX8G,SAAU,GACV1T,KAAM,IACT,EAED6qB,kBAAoB,CAAC,EAAC,EACtBpY,qBAAuB,CAAC,EAAC,EACzB6mB,SAAW,CAAC,EAAC,EACbnnB,eAAgB,EAAK,EACrB7B,cAAgB,GAAE,EAElBipB,0BAA2B,EAAK,EAChCnnB,+BAAgC,EAAK,EACrConB,iCAAkC,EAAK,EACvCnnB,+BAAgC,EAAK,EAErCkF,qBAAkBlhB,EAAS,EAE3B+Z,gBAAa/Z,EAAS,EAEtB8G,mCAAoC,EAAK,EACzC6uB,eAAiB,CACbgF,KAAM,GACNG,KAAM,IACT,EACDlF,eAAiB,CACb+E,KAAM,GACNG,KAAM,IACT,EAEDjF,eAAiB,CACb8E,KAAM,GACNG,KAAM,IACT,EAEDnJ,sCAAwC,GAAE,EAC1CC,sCAAwC,GAAE,EAC1CC,qCAAuC,IAKnCuL,EAAAA,EAAAA,gBAAe,EAAD,GAAO,CACjBpR,4BAA6BsR,EAAAA,WAC7ByF,sCAAuCzF,EAAAA,WACvCrK,8BAA+BqK,EAAAA,WAC/B0F,2BAA4B1F,EAAAA,WAC5Bv2B,gCAAiCu2B,EAAAA,WACjC/mB,aAAc+mB,EAAAA,WACd9I,kBAAmB8I,EAAAA,WACnBlhB,qBAAsBkhB,EAAAA,WACtB2F,SAAU3F,EAAAA,WACVxhB,cAAewhB,EAAAA,WACfrjB,cAAeqjB,EAAAA,WACf4F,yBAA0B5F,EAAAA,WAC1BvhB,8BAA+BuhB,EAAAA,WAC/B6F,gCAAiC7F,EAAAA,WACjCthB,8BAA+BshB,EAAAA,WAC/Bpc,gBAAiBoc,EAAAA,WACjBx2B,kCAAmCw2B,EAAAA,WACnCvjB,WAAYujB,EAAAA,WACZ3H,eAAgB2H,EAAAA,WAChBzH,eAAgByH,EAAAA,WAChB1H,eAAgB0H,EAAAA,WAChB3hB,cAAeynB,EAAAA,SACfzkB,aAAcykB,EAAAA,SACdx8B,8CAA+Cw8B,EAAAA,SAC/Cv8B,mCAAoCu8B,EAAAA,SACpChjB,QAAS0F,EAAAA,OAAAA,MACT6Y,UAAW0E,EAAAA,SACXC,uBAAwBxd,EAAAA,OAAAA,MACxByd,6BAA8Bzd,EAAAA,OAAAA,MAC9B0d,gBAAiB1d,EAAAA,OAAAA,MACjBtF,cAAesF,EAAAA,OAAAA,MACf2d,iBAAkB3d,EAAAA,OAAAA,MAClBlK,wBAAyBkK,EAAAA,OAAAA,MACzB9e,uBAAwB8e,EAAAA,OAAAA,MACxB4d,QAAS5d,EAAAA,OAAAA,MACT6d,eAAgB7d,EAAAA,OAAAA,MAChB8d,eAAgB9d,EAAAA,OAAAA,MAChB+d,sBAAuB/d,EAAAA,OAAAA,MACvBge,2BAA4Bhe,EAAAA,OAAAA,MAC5BiD,eAAgBjD,EAAAA,OAAAA,MAChBie,kBAAmBje,EAAAA,OAAAA,MACnBke,mBAAoBle,EAAAA,OAAAA,MACpBme,yBAA0Bne,EAAAA,OAAAA,MAC1BvmB,SAAUumB,EAAAA,OAAAA,MACVoe,iBAAkBpe,EAAAA,OAAAA,MAClB7J,oBAAqB6J,EAAAA,OAAAA,MACrBjK,iBAAkBiK,EAAAA,OAAAA,MAClBqe,iBAAkBre,EAAAA,OAAAA,MAClB5J,kBAAmB4J,EAAAA,OAAAA,MACnBse,kBAAmBte,EAAAA,OAAAA,MACnB3J,kBAAmB2J,EAAAA,OAAAA,MACnBmG,2BAA4BnG,EAAAA,OAAAA,MAC5Bue,qCAAsCve,EAAAA,OAAAA,MACtCwe,qCAAsCxe,EAAAA,OAAAA,MACtCye,oCAAqCze,EAAAA,OAAAA,MACrCoN,wBAAyBpN,EAAAA,OAAAA,MACzB0e,oBAAqB1e,EAAAA,OAAAA,MACrB2e,4BAA6B3e,EAAAA,OAAAA,MAC7BxE,aAAcwE,EAAAA,OAAAA,MACdxP,gBAAiBwP,EAAAA,OAAAA,MACjBkD,iCAAkClD,EAAAA,OAAAA,MAClC7e,2BAA4B6e,EAAAA,OAAAA,MAC5B4e,gBAAiB5e,EAAAA,OAAAA,MACjB6e,gBAAiB7e,EAAAA,OAAAA,MACjB8e,kBAAmB9e,EAAAA,OAAAA,MACnB+e,kBAAmB/e,EAAAA,OAAAA,MACnBgf,gBAAiBhf,EAAAA,OAAAA,MACjBif,kBAAmBjf,EAAAA,OAAAA,SAYvB6Z,EAAAA,EAAAA,WACI,iBAAM,CAAC,EAAKd,WAAW5/B,OAAO+lC,sBAAsB,IACpD,WACQ,EAAKnG,WAAW5/B,OAAO+lC,sBAAsBv5B,OAAS,GACtD,EAAKs5B,mBAEb,KAGJpF,EAAAA,EAAAA,WACI,iBAAM,CAAC,EAAKd,WAAW5/B,OAAOgmC,sBAAsB,IACpD,WACQ,EAAKpG,WAAW5/B,OAAOgmC,sBAAsBx5B,OAAS,GACtD,EAAKo5B,mBAEb,IACF,CACN,CAmoBC,OAzxBL,EAsJK,EAtJL,EAsJK,0BAED,WACI,OAAOxH,KAAK9mB,aAAa8G,UACnBU,EAAAA,EAAAA,IAAesf,KAAKwB,WAAW/kB,YAAYD,yBAAyBwjB,KAAK9mB,aAAa8G,UAClFggB,KAAK9mB,aAAa5M,MACpB1F,MACF,EACV,GAAC,8CAED,WACI,MACIo5B,KAAKwB,WAAW5/B,OAAOwJ,iBADnBI,EAAO,EAAPA,QAAS+B,EAAc,EAAdA,eAAgBV,EAAa,EAAbA,cAAeM,EAAyB,EAAzBA,0BAA2BT,EAAsB,EAAtBA,uBAE3E,SAAUlB,GAAW+B,GAAkBV,GAAiBM,GAA6BT,EACzF,GAAC,wBAED,WACI,IAAMmF,EAAO,CAAC,EACR2K,EAA0BwjB,KAAKwB,WAAW/kB,YAAYD,wBAiC5D,OAhCAwjB,KAAKwB,WAAW5/B,OAAOyc,eAClBvL,QAAO,SAAA+a,GAAG,OACPrR,EACoC,gBAA9BqR,EAAIf,sBAC0B,gBAA9Be,EAAIf,qBAAuC,IAEpDnf,SAAQ,SAAAkQ,GAELhM,GAAKg2B,EAAAA,EAAAA,mBAAkBhqB,EAASxV,EAAAA,cAAAA,IAAmBwV,EAAQiP,wBAA0B,KAC9EjP,EAEX,IAEJmiB,KAAKwB,WAAW5/B,OAAOkmC,sBAAsBn6B,SAAQ,SAAAkQ,GAEjDhM,GAAKg2B,EAAAA,EAAAA,mBAAkBhqB,EAASxV,EAAAA,cAAAA,UAA0B,KACnDwV,EAEX,IACAmiB,KAAKwB,WAAW5/B,OAAOgmC,sBAAsBj6B,SAAQ,SAAAkQ,GACjDhM,GAAKg2B,EAAAA,EAAAA,mBAAkBhqB,EAASxV,EAAAA,cAAAA,UAA0B,KACnDwV,EAEX,IAEAmiB,KAAKwB,WAAW5/B,OAAO+lC,sBAAsBh6B,SAAQ,SAAAkQ,GAEjDhM,GAAKg2B,EAAAA,EAAAA,mBAAkBhqB,EAASxV,EAAAA,cAAAA,UAA0B,KACnDwV,EAEX,IAEOhM,CACX,GAEA,yBACA,WACI,OAAO6O,EAAAA,EAAAA,IAAesf,KAAKwB,WAAW5/B,OAAO2f,MACjD,GAEA,6BACA,WACI,OAAOZ,EAAAA,EAAAA,KACX,GAEA,6BACA,WACI,OAAOE,EAAAA,EAAAA,KACX,GAAC,yDAED,WAAoD,iBAChD,OAAQmf,KAAK9mB,aAAa5M,MACtB,IAAK,YACD,OAAiD,QAAjD,EAAO0zB,KAAK1L,6CAAqC,aAA1C,EAA4ClnB,MAC/C,SAAAyQ,GAAO,OAAIA,EAAQiP,wBAA0B,EAAKpjB,+BAA+B,IAEzF,IAAK,MACD,OAAgD,QAAhD,EAAOs2B,KAAKxL,4CAAoC,aAAzC,EAA2CpnB,MAC9C,SAAAyQ,GAAO,OAAIA,EAAQiP,wBAA0B,EAAKpjB,+BAA+B,IAEzF,QACI,OAAiD,QAAjD,EAAOs2B,KAAKzL,6CAAqC,aAA1C,EAA4CnnB,MAC/C,SAAAyQ,GAAO,OAAIA,EAAQiP,wBAA0B,EAAKpjB,+BAA+B,IAGjG,GAAC,qBAED,WACIs2B,KAAKiG,yBACLjG,KAAKc,uBAAuBd,KAAKkG,8BACjClG,KAAKwB,WAAW/lB,GAAGssB,aAAc,CACrC,GAAC,uBAED,WACI/H,KAAKqB,8BACLrB,KAAKwB,WAAW/lB,GAAGssB,aAAc,CACrC,GAGA,oCACA,WACI,IAAM7uB,EAAe6pB,eAAethB,QAAQ,yBAC5C,GAAIvI,EAAc,CACd,IAAwE,IAAvBA,EAAa0I,MAAM,KAAI,GAAjE5B,EAAQ,KAAE3b,EAAQ,KAAEiI,EAAI,KAAE07B,EAAY,KAC7ChI,KAAKoG,iBAAiB,CAAEpmB,SAAAA,EAAU3b,SAAAA,EAAUiI,KAAAA,EAAM07B,aAAAA,IAClDjF,eAAexgB,WAAW,wBAC9B,CACJ,GAAC,sCAED,SAAyBsjB,GACrB7F,KAAK6F,yBAA2BA,CACpC,GAAC,0CAED,WACI,IAAMoC,EAAcrF,KAAKK,MAAMF,eAAethB,QAAQ,6BAKtD,OAJIwmB,GAAeA,EAAYjoB,UAAYioB,EAAY37B,OACnDy2B,eAAexgB,WAAW,4BAC1Byd,KAAKr2B,0BAEFu+B,QAAQC,SACnB,GAAC,6BAED,WACInI,KAAKpjB,cAAgB,GACrBojB,KAAKtjB,gBAAa/Z,EAClBq9B,KAAKvhB,eAAgB,CACzB,GAAC,2BAED,WACIuhB,KAAKmG,kBACLnG,KAAKrhB,+BAAgC,CACzC,GAAC,6CAED,uGAKO,GALkBqB,EAAQ,EAARA,SAAU3b,EAAQ,EAARA,SAAUiI,EAAI,EAAJA,KAAM07B,EAAY,EAAZA,aAC/ChI,KAAK7c,gBACL6c,KAAKtU,eAAe,CAChB1L,SAAAA,EACA1T,KAAAA,IAEAjI,IAAagE,EAAAA,cAAAA,QAAqB,gBACjB,SAAb2X,EACAggB,KAAKoI,cAAcJ,GAEnBhI,KAAKqI,gBACR,0BACMhkC,IAAagE,EAAAA,cAAAA,QAAqB,iBAUxC,OATD23B,KAAKrU,iCAAiC,OACH,SAA/BqU,KAAK9mB,aAAa8G,UAClBggB,KAAK4G,0BAAyB,GAE5B0B,EAA0B,CAC5BjkC,SAAAA,EACA6U,aAAc8mB,KAAK9mB,aAAa8G,SAChC+L,YAAaiU,KAAK9mB,aAAa5M,KAC/B+oB,QAAS2K,KAAKt2B,iCACjB,UACsBs2B,KAAKuG,eAAe+B,GAAwB,QAArD,IAARjoC,EAAW,EAAH,MACAC,MAAO,CAAF,gBAGgB,OAF/B0/B,KAAK99B,UAAS,GACd89B,KAAKr2B,yBACLq2B,KAAKphB,qBAAoB,GAAM,UAEuB3d,EAAAA,GAAAA,4BAClDoH,EAAAA,cAAAA,SACH,QAFKkgC,EAA0C,EAAH,KAG7CvI,KAAKwB,WAAW5/B,OAAO4mC,oCAAoCD,GAC3DtnC,EAAAA,GAAAA,0BACA++B,KAAK4G,0BAAyB,GAAO,wBAErC5G,KAAK99B,UAAS,EAAM7B,EAASC,OAC7B0/B,KAAK4G,0BAAyB,GAAO,mCAElCviC,IAAagE,EAAAA,cAAAA,IAAiB,iBACpB,SAAb2X,EACAggB,KAAKnK,2BAEDmK,KAAKwB,WAAW/kB,YAAYD,wBAC5BwjB,KAAKrU,iCAAiCuB,EAAAA,aAAAA,cACnC8S,KAAKrU,iCAAiCuB,EAAAA,aAAAA,KAC7C8S,KAAKqI,iBACR,2BACMhkC,IAAagE,EAAAA,cAAAA,QAAqB,iBAQxC,OAPD23B,KAAK4G,0BAAyB,GAC9B5G,KAAKrU,iCAAiC,OAChCpjB,EAAS,CACXlE,SAAAA,EACA6U,aAAc8mB,KAAK9mB,aAAa8G,SAChC+L,YAAaiU,KAAK9mB,aAAa5M,KAC/B+oB,QAAS2K,KAAKt2B,iCACjB,UACsBs2B,KAAKuG,eAAeh+B,GAAO,QAApC,IAARlI,EAAW,EAAH,MACAC,MAAO,CAAF,gBAEgB,OAD/B0/B,KAAKr2B,yBACLq2B,KAAKphB,qBAAoB,GAAM,UACuB3d,EAAAA,GAAAA,4BAA+BsH,EAAOlE,UAAS,QAA/FkkC,EAA0C,EAAH,KAC7CvI,KAAKwB,WAAW5/B,OAAO4mC,oCAAoCD,GAC3DvI,KAAK6G,iBAAiBxmC,EAASooC,8BAC/BzI,KAAK4G,0BAAyB,GAAO,wBAErC5G,KAAK99B,UAAS,EAAM7B,EAASC,OAC7B0/B,KAAK4G,0BAAyB,GAAO,iDAGhD,yEAED,WACI5G,KAAKr2B,wBACT,GAAC,qCAED,WACIq2B,KAAKrhB,+BAAgC,CACzC,GAAC,oCAED,WACIqhB,KAAKrhB,+BAAgC,CACzC,GAAC,qBAED,WACI,IAAQ+pB,GAAe1I,KAAKwB,WAAW5/B,OAAOwJ,kBAAoB40B,KAAKwB,WAAW5/B,OAAOwJ,kBAAjFs9B,WACF9hC,EAAQo5B,KAAKhc,cAAcgc,KAAK9mB,aAAa8G,UAAUggB,KAAK9mB,aAAa5M,MAAM1F,MAGrF,OAAO8hC,EAAa,CAACA,EAAY9hC,GAAO8S,KAAK,KAAO9S,CACxD,GAAC,4BAED,SAAe2B,GACX,IAAMpI,EAAO6/B,KAAKqG,UACZlW,EAAW6P,KAAKhc,cAAcgc,KAAK9mB,aAAa8G,UAAUggB,KAAK9mB,aAAa5M,MAAM6jB,SAClFwY,GAAeC,EAAAA,EAAAA,sBAAqB5I,KAAK9mB,cAC/C,EACI8mB,KAAKwB,WAAW5/B,OAAOwJ,iBADnBy9B,EAAc,EAAdA,eAAgBC,EAAc,EAAdA,eAAgBC,EAAgB,EAAhBA,iBAAkBC,EAAY,EAAZA,aAAcC,EAAa,EAAbA,cAAex9B,EAAY,EAAZA,aAAcy9B,EAAK,EAALA,MAGrG,OAAOjoC,EAAAA,GAAAA,cAAiB,SACpBkoC,aAAc5gC,EAAOL,SACrBwL,MAAOssB,KAAKwB,WAAW5/B,OAAOwnC,cAC9BjZ,SAAAA,EACAhwB,KAAAA,EACAkpC,QAASR,GAAkBC,EAC3BQ,KAAMN,EACNO,QAAS99B,EACTy9B,MAAAA,EACA9mB,MAAO6mB,EACPO,QAAST,GACsB,QAA3B/I,KAAK9mB,aAAa5M,KAAiB,CAAEm9B,qBAAsB,aAAgB,CAAC,GAC5ElhC,EAAO4Q,OAAS,CAAEA,OAAQ5Q,EAAO4Q,QAAW,CAAC,GAC7C6mB,KAAKt2B,gCAAkC,CAAE2rB,QAAS2K,KAAKt2B,iCAAoC,CAAC,GAC5Fs2B,KAAKt2B,kCAAoCwjB,EAAAA,aAAAA,OACvCyb,EACA,CACIzvB,aAAc,YACdwkB,iBAAkB,kBAGpC,GAAC,4BAED,SAAen1B,GACX,OAAOtH,EAAAA,GAAAA,0BAA6B,CAChCiH,SAAUG,EAAAA,cAAAA,QAAwBE,EAAOL,SAAW,GACpD7D,SAAUkE,EAAOlE,SACjB6U,aAAc8mB,KAAK9mB,aAAa8G,SAChC+L,YAC+B,YAA3BiU,KAAK9mB,aAAa5M,MACS,YAA3B0zB,KAAK9mB,aAAa5M,MACS,YAA3B0zB,KAAK9mB,aAAa5M,KACZ,MACA0zB,KAAK9mB,aAAa5M,KAC5B+oB,QAAShtB,EAAAA,cAAAA,QAAwB23B,KAAKt2B,gCAAkC,IAEhF,GAAC,mCAED,WACIq5B,eAAetpB,QAAQ,2BAA4BmpB,KAAKC,UAAU7C,KAAK9mB,eACvE8mB,KAAKwB,WAAW/lB,GAAGiuB,sBAAsB,MAC7C,GAAC,2BAED,SAAc1B,GACV,OAAQhI,KAAK9mB,aAAa5M,MACtB,IAAK,YAUL,IAAK,YACL,IAAK,UACL,IAAK,MACD0zB,KAAKr2B,yBACL,MAXJ,IAAK,gBACDq2B,KAAKwB,WAAW5/B,OAAO+nC,qBACvB3J,KAAKwB,WAAW5/B,OAAOkS,kBACvBksB,KAAKwB,WAAW5/B,OAAOoH,uBACnBg/B,EAAchI,KAAKr2B,yBAClBq2B,KAAKyG,6BACV,MAMJ,QACI,MAAM,IAAI7H,MAAM,wCAE5B,GAAC,wCAED,WACIoB,KAAK8F,iCAAkC,CAC3C,GAAC,4BAED,SAAe5sB,GACX8mB,KAAK9mB,aAAeA,CACxB,GAAC,+BAED,SAAkB/W,EAAMuP,GACpBsuB,KAAKnc,gBAAkB,OAChBnS,GACAvP,EAEX,GAAC,gCAED,SAAmBg1B,GACf6I,KAAK7I,kBAAoBA,CAC7B,GAAC,sBAED,SAAS/U,EAAOwnB,GAAK,MACjB5J,KAAKvhB,cAAgB2D,EACrB4d,KAAKpjB,cAAgBgtB,EAAMA,EAAIplC,QAAU,GACzCw7B,KAAKtjB,WAAsB,QAAZ,EAAGktB,aAAG,EAAHA,EAAKhnB,YAAI,aAAIjgB,CACnC,GAAC,8BAED,SAAiBknC,GACb7J,KAAKjhB,qBAAuB8qB,CAChC,GAAC,iCAED,SAAoBnoC,GAChBs+B,KAAKthB,gCAAkChd,CAC3C,GAAC,6CAED,WAAuB2C,GAAQ,iEAGmE,KADzFA,IAAagE,EAAAA,cAAAA,KAAqB23B,KAAKwB,WAAW5/B,OAAOkoC,yBACzDzlC,IAAagE,EAAAA,cAAAA,SAAyB23B,KAAKwB,WAAW5/B,OAAOmoC,6BAElC,CAAF,+BACpB9oC,EAAAA,GAAAA,mBAAqB,gDAElC,2FAED,WAAuBsH,EAAQmG,GAAO,uFACXzN,EAAAA,GAAAA,8BAAiC,CACpD0W,aAAcpP,EAAOL,SACrB7D,SAAUgE,EAAAA,cAAAA,MACZ,OAHY,KAARhI,EAAW,EAAH,MAIDC,MAAO,CAAF,eAIwB,OAHtC0/B,KAAK99B,UAAS,EAAM7B,EAASC,OAC7BoO,EAAQs7B,UAAU,CAAC,GACnBt7B,EAAQO,eAAc,GACtBP,EAAQu7B,UAAU,CAAEC,SAAS,IAAS,mBAC/B,GAAI,iCAER,GAAK,iDACf,8FAED,WAAwB3hC,EAAQmG,GAAO,6EAC/BsxB,KAAKwB,WAAW5/B,OAAOkoC,wBAAyB,CAAF,+BACtB9J,KAAK8G,iBAAiBv+B,EAAQmG,GAAQ,OAA/C,IAAG,EAAH,KACA,CAAF,gDAGM,OAAvBsxB,KAAKmG,kBAAkB,SACAnG,KAAKsG,eAAe/9B,GAAO,OAApC,IAARlI,EAAW,EAAH,MACAC,MAAO,CAAF,gBAIgB,OAH/BoO,EAAQu7B,UAAU,CAAEC,SAAS,IAC7Bx7B,EAAQO,eAAc,GACtB+wB,KAAK99B,UAAS,GACd89B,KAAKphB,qBAAoB,GAAM,UACzBohB,KAAKxhB,iBAAiBnW,EAAAA,cAAAA,KAAkB,yBAERpH,EAAAA,GAAAA,WAAAA,eAA4B,QAI5C,OAJhBkpC,EAA0B,EAAH,KAC7BnK,KAAKwB,WAAW5/B,OAAOwoC,qBAAqBD,GAE5ClpC,EAAAA,GAAAA,0BAA8B,KAC9B++B,KAAKwB,WAAW5/B,OAAM,UAAiCX,EAAAA,GAAAA,eAAkBoH,EAAAA,cAAAA,KAAkB,yBAApEgiC,0BAAyB,gBAChDrK,KAAK6G,iBAAiBxmC,EAASiqC,iBAAiB,yCAE1CtK,KAAKxhB,iBAAiBnW,EAAAA,cAAAA,KAAkB,QAC9C23B,KAAK99B,UAAS,EAAM7B,EAASC,OAC7BoO,EAAQs7B,UAAU,CAAC,GACnBt7B,EAAQO,eAAc,GACtBP,EAAQu7B,UAAU,CAAEC,SAAS,IAAS,iDAE7C,8FAED,WAAwB3hC,EAAQmG,GAAO,uFACZzN,EAAAA,GAAAA,8BAAiC,CACpD0W,aAAcpP,EAAOL,SACrB7D,SAAUgE,EAAAA,cAAAA,UACZ,OAHY,KAARhI,EAAW,EAAH,MAIDC,MAAO,CAAF,eAIwB,OAHtC0/B,KAAK99B,UAAS,EAAM7B,EAASC,OAC7BoO,EAAQs7B,UAAU,CAAC,GACnBt7B,EAAQO,eAAc,GACtBP,EAAQu7B,UAAU,CAAEC,SAAS,IAAS,mBAC/B,GAAI,iCAGR,GAAK,iDACf,8FAED,WAAwB3hC,EAAQmG,GAAO,6EAC/BrG,EAAAA,cAAAA,UAAyB23B,KAAKwB,WAAW5/B,OAAOmoC,4BAA2B,gCACnD/J,KAAK+G,kBAAkBx+B,EAAQmG,GAAQ,OAAhD,IAAG,EAAH,KACA,CAAF,gEAGMsxB,KAAKuG,eAAeh+B,GAAO,OAApC,KAARlI,EAAW,EAAH,MAEDC,MAAO,CAAF,iCACR0/B,KAAKxhB,iBAAiBnW,EAAAA,cAAAA,SAAsB,QAIZ,OAHtC23B,KAAK99B,UAAS,EAAM7B,EAASC,OAC7BoO,EAAQs7B,UAAU,CAAC,GACnBt7B,EAAQO,eAAc,GACtBP,EAAQu7B,UAAU,CAAEC,SAAS,IAAS,2BAOX,OAH/Bx7B,EAAQu7B,UAAU,CAAEC,SAAS,IAC7Bx7B,EAAQO,eAAc,GACtB+wB,KAAK99B,UAAS,GACd89B,KAAKphB,qBAAoB,GAAM,UACzBohB,KAAKxhB,iBAAiBnW,EAAAA,cAAAA,SAAsB,yBAEIpH,EAAAA,GAAAA,4BAA+BsH,EAAOlE,UAAS,QAA/FkkC,EAA0C,EAAH,KAC7CvI,KAAKwB,WAAW5/B,OAAO4mC,oCAAoCD,GAE3DtnC,EAAAA,GAAAA,0BACA++B,KAAK6G,iBAAiBxmC,EAASooC,8BAA8B,iDAChE,wFAED,WACIzI,KAAKrR,6BAA+BqR,KAAKrR,2BAC7C,GAAC,kDAED,SAAqC2F,GACjC0L,KAAK1L,sCAAwCA,CACjD,GAAC,kDAED,SAAqCC,GACjCyL,KAAKzL,sCAAwCA,CACjD,GAAC,iDAED,SAAoCC,GAChCwL,KAAKxL,qCAAuCA,CAChD,GAAC,qCAED,WACIwL,KAAKpK,+BAAiCoK,KAAKpK,6BAC/C,GAAC,iCAED,WACIoK,KAAK2F,4BAA8B3F,KAAK2F,0BAC5C,GAAC,yCAED,WACI3F,KAAK8F,iCAAkC,CAC3C,GAAC,yCAED,WAAmBzhC,GAAQ,wFACvB27B,KAAKwB,WAAW/lB,GAAG8uB,oBAAmB,GAAM,KAGpClmC,EAAQ,cACPgE,EAAAA,cAAAA,QAAqB,SAQrBA,EAAAA,cAAAA,QAAqB,SAQrBA,EAAAA,cAAAA,IAAiB,UAMjBA,EAAAA,cAAAA,QAAqB,mCArBLpH,EAAAA,GAAAA,WAAAA,KAAmB,CAChCupC,yBAA0B,EAC1BnmC,SAAAA,EACAomC,WAAYzK,KAAKnc,gBAAgBnB,aACnC,OAJM,OAARriB,EAAW,EAAH,kDAQSY,EAAAA,GAAAA,WAAAA,KAAmB,CAChCupC,yBAA0B,EAC1BnmC,SAAUgE,EAAAA,cAAAA,QACVoiC,WAAYzK,KAAKnc,gBAAgBnB,aACnC,QAJM,OAARriB,EAAW,EAAH,mDAQSY,EAAAA,GAAAA,WAAAA,WAAyB,CACtCypC,OAAQ1K,KAAKnc,gBAAgB/I,QAC/B,QAFM,OAARza,EAAW,EAAH,mDAMSY,EAAAA,GAAAA,WAAAA,KAAmB,CAChCupC,yBAA0B,EAC1BnmC,SAAUgE,EAAAA,cAAAA,QACVoiC,WAAYzK,KAAKnc,gBAAgB/I,QACnC,QAJM,OAARza,EAAW,EAAH,kCAQ4B,OAApCA,EAASC,MAAQ,mBAAmB,gCAKvCD,EAASC,MAAO,CAAF,qBAEP+D,EAAQ,cACPgE,EAAAA,cAAAA,QAAqB,UASrBA,EAAAA,cAAAA,QAAqB,UASrBA,EAAAA,cAAAA,IAAiB,UAQjBA,EAAAA,cAAAA,QAAqB,qCAzBhBpH,EAAAA,GAAAA,WAAAA,4BAC2BoH,EAAAA,cAAAA,SAC5BuK,KAAKotB,KAAKwB,WAAW5/B,OAAO4mC,qCAAoC,QAG1D,OAFXmC,EAEC,QAFU,EAAG3K,KAAKwB,WAAW5/B,OAAOkmC,sBAAsBn8B,MACvD,SAAAC,GAAI,OAAIA,EAAK8W,aAAe,EAAKmB,gBAAgBnB,UAAU,WAC9D,aAFa,EAEXsC,QAAQ,8CAIL/jB,EAAAA,GAAAA,WAAAA,4BAC2BoH,EAAAA,cAAAA,SAC5BuK,KAAKotB,KAAKwB,WAAW5/B,OAAO4mC,qCAAoC,QAG1D,OAFXmC,EAEC,QAFU,EAAG3K,KAAKwB,WAAW5/B,OAAOgmC,sBAAsBj8B,MACvD,SAAAC,GAAI,OAAIA,EAAK8W,aAAe,EAAKmB,gBAAgBnB,UAAU,WAC9D,aAFa,EAEXsC,QAAQ,8CAIL/jB,EAAAA,GAAAA,WAAAA,eAA6B2R,KAAKotB,KAAKwB,WAAW5/B,OAAOwoC,sBAAqB,QAIzE,OAFXO,EAEC,QAFU,EAAG3K,KAAKwB,WAAW5/B,OAAOyc,eAAe1S,MAChD,SAAAC,GAAI,OAAIA,EAAKkP,QAAU,EAAK+I,gBAAgB/I,KAAK,WACpD,aAFa,EAEXkK,QAAQ,8CAIL/jB,EAAAA,GAAAA,WAAAA,4BAC2BoH,EAAAA,cAAAA,SAC5BuK,KAAKotB,KAAKwB,WAAW5/B,OAAO4mC,qCAAoC,QAG1D,OAFXmC,EAEC,QAFU,EAAG3K,KAAKwB,WAAW5/B,OAAO+lC,sBAAsBh8B,MACvD,SAAAC,GAAI,OAAIA,EAAK8W,aAAe,EAAKmB,gBAAgBnB,UAAU,WAC9D,aAFa,EAEXsC,QAAQ,kEAOnB4lB,EAAAA,EAAAA,cAAY,WAER,EAAKpJ,WAAW/lB,GAAG+H,wBAAyB,EAC5C,EAAKK,gBAAgBmB,QAAU2lB,CACnC,IACA7xB,YAAW,YACP8xB,EAAAA,EAAAA,cAAY,WACR,EAAKpJ,WAAW/lB,GAAGiI,2BAA4B,CACnD,GACJ,GAAG,KAAK,wBAGR+gB,QAAQnkC,MAAMD,GAAU,QAE5B2/B,KAAKwB,WAAW/lB,GAAG8uB,oBAAmB,GAAO,iDAChD,2EAED,WACI,OAAOtpC,EAAAA,GAAAA,YAAe++B,KAAKwB,WAAW5/B,OAAO8R,MAAO,2CACxD,GAAC,6BAED,SAAgBrT,EAAU8Y,GACtB,IAAK9Y,EAASC,MAAO,CACjB,IAAQsmB,EAAYvmB,EAASwqC,cAArBjkB,QACRoZ,KAAK1H,eAAenf,GAAUyN,EAAQqW,KAC1C,CACJ,GAAC,6BAED,SAAgB58B,EAAU8Y,GACtB,IAAK9Y,EAASC,MAAO,CACjB,IAAQy9B,EAAY19B,EAASwqC,cAArB9M,QACRiC,KAAKxH,eAAerf,GAAU4kB,EAAQd,KAC1C,CACJ,GAAC,6BAED,SAAgB58B,EAAU8Y,GACtB,IAAK9Y,EAASC,MAAO,CACjB,IAAQwqC,EAAYzqC,EAASwqC,cAArBC,QACR9K,KAAKzH,eAAepf,GAAU2xB,EAAQ7N,KAC1C,CACJ,GAAC,+BAED,WAAoB,WAChB,CAAC,OAAQ,QAAQtvB,SAAQ,SAAAuL,GACrB,IAAM6xB,EAAuB,EAAKvJ,WAAW5/B,OAAOkmC,sBAAsB16B,MACtE,SAAAyQ,GAAO,OAAIA,EAAQ3E,eAAiBA,CAAY,KAE/C,EAAKof,eAAepf,IAAiB6xB,GACtC9pC,EAAAA,GAAAA,gBAAmBoH,EAAAA,cAAAA,QAAuB6Q,GAActG,MAAK,SAAAvS,GAAQ,OACjE,EAAKgnC,gBAAgBhnC,EAAU6Y,EAAa,GAGxD,GACJ,GAAC,+BAED,WAAoB,WAChB,CAAC,OAAQ,QAAQvL,SAAQ,SAAAuL,GACrB,IAAM6xB,EAAuB,EAAKvJ,WAAW5/B,OAAOgmC,sBAAsBx6B,MACtE,SAAAyQ,GAAO,OAAIA,EAAQ3E,eAAiBA,CAAY,KAE/C,EAAKsf,eAAetf,IAAiB6xB,GACtC9pC,EAAAA,GAAAA,gBAAmBoH,EAAAA,cAAAA,QAAuB6Q,GAActG,MAAK,SAAAvS,GAAQ,OACjE,EAAKinC,gBAAgBjnC,EAAU6Y,EAAa,GAGxD,GACJ,GAAC,+BAED,WAAoB,WAChB,CAAC,OAAQ,QAAQvL,SAAQ,SAAAuL,GACrB,IAAM6xB,EAAuB,EAAKvJ,WAAW5/B,OAAO+lC,sBAAsBv6B,MACtE,SAAAyQ,GAAO,OAAIA,EAAQ3E,eAAiBA,CAAY,KAG/C,EAAKqf,eAAerf,IAAiB6xB,GACtC9pC,EAAAA,GAAAA,gBAAmBoH,EAAAA,cAAAA,QAAuB6Q,GAActG,MAAK,SAAAvS,GAAQ,OACjE,EAAKonC,gBAAgBpnC,EAAU6Y,EAAa,GAGxD,GACJ,GAAC,8CAwBD,SAAiC8S,GAC7BgU,KAAKt2B,gCAAkCsiB,CAC3C,GAAC,wCAED,WACIgU,KAAKv2B,mCAAqCu2B,KAAKv2B,iCACnD,IAjyBJ,EAiyBK,4CA5BD,+FAA8E,GAAhDqR,EAAK,EAALA,MAAOpD,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAGzB,aAHoD,EAAbC,cAG7B,gCACX3W,EAAAA,GAAAA,WAAAA,sCAAoD,CACjEyhB,WAAY5H,EACZpD,aAAAA,EACAC,aAAAA,EACAtT,SAAUgE,EAAAA,cAAAA,MACZ,OALFhI,EAAW,EAAH,4CAOSY,EAAAA,GAAAA,WAAAA,8BAA4C,CACzDyhB,WAAY5H,EACZpD,aAAAA,EACAC,aAAAA,EACAtT,SAAUgE,EAAAA,cAAAA,MACZ,OALFhI,EAAW,EAAH,sCAQG,QARH,EAQLA,SAAQ,OAAO,QAAP,EAAR,EAAUC,aAAK,WAAP,EAAR,EAAiBkE,SAAO,4CAClC,+CAzxBL,iFAyxBK,EArxBwB,CAASq6B,41BCEtC,IAeImM,EAOEC,EAAY,GACd,aAAc,iHACVjL,KAAKkL,QAAU,IAAIhD,SAAQ,SAACC,EAASgD,GACjC,EAAKA,OAASA,EACd,EAAKhD,QAAUA,CACnB,GACJ,IAGJiD,EAAOC,QAAU,CACbC,cAhCkB,SAACC,GAA8B,IAApBC,EAAa,UAAH,6CAAG,CAAC,EACrCvd,EAAKwd,SAASH,cAAcC,GAWlC,OAVA99B,OAAOwE,KAAKu5B,GAAY79B,SAAQ,SAAA+9B,GAC5B,IAAMhqC,EAAQ8pC,EAAWE,GACZ,SAATA,EACAzd,EAAG0d,YAAcjqC,EACD,SAATgqC,EACPzd,EAAG2d,KAAKlqC,GAERusB,EAAG4d,aAAaH,EAAMhqC,EAE9B,IACOusB,CACX,EAoBI6d,cAjBkB,WAGlB,OAFAd,EACIA,IAAgBS,SAASM,cAAc,uBAAuBC,aAAa,QAAU,IAAIpqB,MAAM,KAAK,EAE5G,EAcIqpB,aAAAA,ucCdJ,QArB2B,SAAH,OAAMgB,EAAa,EAAbA,cAAe5nC,EAAQ,EAARA,SAAQ,OACjD,yBAAKP,UAAU,+BACX,yBAAKA,UAAU,uCACX,kBAAC,EAAAe,KAAI,CAACf,UAAU,uCAAuCmD,GAAG,KAAKpB,OAAO,OAAOqd,YAAY,KACpF7e,IAAagE,EAAAA,GAAAA,IACV,kBAAC,EAAAnB,SAAQ,CAACC,kBAAkB,2GAE5B,kBAAC,EAAAD,SAAQ,CAACC,kBAAkB,2EAIxC,6BACI,kBAAC,EAAApC,OAAM,CAACjB,UAAU,sCAAsCE,QAASioC,EAAe3/B,KAAK,SAAS7E,SAAO,EAACD,OAAK,GACvG,0BAAM1D,UAAU,aACZ,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,8BAItC,6DCFV,QAZgB,SAAH,OAAMrD,EAAS,EAATA,UAAWooC,EAAY,EAAZA,aAAcC,EAAK,EAALA,MAAOt7B,EAAE,EAAFA,GAAE,OACjD,yBACIA,GAAIA,EACJ,cAAY,gBACZ/M,UAAWgC,IAAW,aAAc,eAAF,OAAiBqmC,GAAS,QAAU,CAAEC,UAAWF,GAAgBpoC,IAElGkmB,MAAMoG,KAAK,IAAIpG,MAAM,IAAI/c,KAAI,SAACq2B,EAAG+I,GAAG,OACjC,yBAAKx+B,IAAKw+B,EAAKvoC,UAAS,6CAAwCuoC,EAAM,EAAC,gBAAQA,EAAM,IAAO,IAE9F,ECVV,QANqC,WAAH,OAC9B,yBAAKvoC,UAAU,6BACX,kBAAC,EAAO,MACN,8SCHGwoC,EACS,SAACnuB,EAAc9Z,GAC7B,OAAIA,IAAagE,EAAAA,cAAAA,QACT8V,GAAqB1Z,EAAAA,EAAAA,UAAS,sCAC3BA,EAAAA,EAAAA,UAAS,sBACTJ,IAAagE,EAAAA,cAAAA,KACb5D,EAAAA,EAAAA,UAAS,mCAEbA,EAAAA,EAAAA,UAAS,GACpB,EATS6nC,EAUU,SAAAjoC,GACf,OAAIA,IAAagE,EAAAA,cAAAA,SACN5D,EAAAA,EAAAA,UAAS,0DACXJ,IAAagE,EAAAA,cAAAA,KACX5D,EAAAA,EAAAA,UAAS,sEACb,EACX,EAhBS6nC,EAiBsB,SAACjoC,EAAUmY,GACtC,OAAInY,IAAagE,EAAAA,cAAAA,SACN5D,EAAAA,EAAAA,UAAS,sFACTJ,IAAagE,EAAAA,cAAAA,IAChBmU,GACO/X,EAAAA,EAAAA,UACH,oHAGDA,EAAAA,EAAAA,UAAS,yEAEb,EACX,ECREi0B,EAAqB,SAACr0B,EAAkBiI,GAC1C,OAAOjI,IAAagE,EAAAA,cAAAA,KAAoB2vB,EAAAA,EAAAA,IAA2B1rB,IAAQqsB,EAAAA,EAAAA,IAA+BrsB,EAC9G,EAEMigC,EAAyB,SAAH,OAAMrxB,EAAY,EAAZA,aAAcod,EAAc,EAAdA,eAAc,OAC1D,kBAAC,aAAc,KACX,wBAAIx0B,UAAU,8CAA6CW,EAAAA,EAAAA,UAAS,gCACpE,uBACIX,UAAU,mDACVyxB,MAAM0D,EAAAA,EAAAA,IACe,IAAjB/d,EAAqB,OAAS,OAC9Bod,GAAkBA,EAAgC,IAAjBpd,EAAqB,OAAS,SAEnE3J,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAA9yB,KAAI,CACDnB,UAAU,wDACVD,KAAK,sBACLE,KAAM,KAEV,yBAAKD,UAAU,yDACX,kBAAC,EAAAe,KAAI,CAAC2D,MAAM,qBAAqBzE,KAAK,MAAM8B,OAAO,QAC/C,kBAAC,EAAAqB,SAAQ,CAACC,kBAAkB,oBAI3B,EAGfqlC,EAAqB,WAAH,OACpB,kBAAC,aAAc,KACX,yBAAK1oC,UAAU,iDACX,kBAAC,EAAAmB,KAAI,CAACpB,KAAK,qBAAqBM,MAAO,IAAKC,OAAQ,KACpD,kBAAC,EAAAa,KAAI,CAACpB,KAAK,oBAAoBM,MAAO,GAAIC,OAAQ,MAEtD,yBAAKN,UAAU,4DACX,uBAAGyxB,MAAMyC,EAAAA,EAAAA,IAA2B,WAAYzmB,OAAO,SAASwmB,IAAI,uBAChE,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,wBAAwBM,MAAO,IAAKC,OAAQ,MAE3D,uBAAGmxB,MAAMyC,EAAAA,EAAAA,IAA2B,SAAUzmB,OAAO,SAASwmB,IAAI,uBAC9D,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,sBAAsBM,MAAO,IAAKC,OAAQ,MAEzD,uBAAGmxB,MAAMyC,EAAAA,EAAAA,IAA2B,SAAUzmB,OAAO,SAASwmB,IAAI,uBAC9D,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,sBAAsBM,MAAO,IAAKC,OAAQ,OAG7D,kBAAC,EAAAS,KAAI,CAACoC,GAAG,IAAIqB,MAAM,SAASvE,KAAK,OAAOD,UAAU,wCAC9C,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,0FAEnB,EAGfslC,EAAiB,SAAH,OAAMvH,EAAe,EAAfA,gBAAiB7gC,EAAQ,EAARA,SAAQ,OAC/C,kBAAC,aAAc,KACVA,IAAagE,EAAAA,cAAAA,SACV,wBAAIvE,UAAU,8CAA6CW,EAAAA,EAAAA,UAAS,oCAExE,yBACIX,UAAW4oC,IAAW,CAClB,iDAAiDlnC,EAAAA,EAAAA,aAAcnB,IAAagE,EAAAA,cAAAA,QAG/E7C,EAAAA,EAAAA,aAAcnB,IAAagE,EAAAA,cAAAA,SACxB,kBAAC,aAAc,KACX,kBAAC,EAAApD,KAAI,CACDpB,KAAMqhC,EAAkB,6BAA+B,wBACvD/gC,MAAO,IACPC,OAAQ,MAEZ,kBAAC,EAAAa,KAAI,CACDpB,KAAMqhC,EAAkB,4BAA8B,uBACtD/gC,MAAO,GACPC,OAAQ,MAInBC,IAAagE,EAAAA,cAAAA,KACV,kBAAC,aAAc,KACX,kBAAC,EAAApD,KAAI,CAACpB,KAAK,oBAAoBM,MAAO,IAAKC,OAAQ,MACnD,kBAAC,EAAAa,KAAI,CAACpB,KAAK,mBAAmBM,MAAO,GAAIC,OAAQ,OAI7D,yBACIN,UAAW4oC,IAAW,2DAA4D,CAC9E,oEACIlnC,EAAAA,EAAAA,aAAcnB,IAAagE,EAAAA,cAAAA,OAGnC,uBACIvE,UAAU,sDACVyxB,KAAMmD,EAAmBr0B,EAAU,OACnCkN,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,sBAAsBM,MAAO,IAAKC,OAAQ,MAEzD,uBACIN,UAAU,sDACVyxB,KAAMmD,EAAmBr0B,EAAU,WACnCkN,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,uBAAuBM,MAAO,IAAKC,OAAQ,MAE1D,uBACIN,UAAU,sDACVyxB,KAAMmD,EAAmBr0B,EAAU,UACnCkN,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAA9yB,KAAI,CAACpB,KAAK,uBAAuBM,MAAO,IAAKC,OAAQ,OAGjD,EAGfuoC,EAAY,SAAH,OAAMtoC,EAAQ,EAARA,SAAQ,OACzB,kBAAC,EAAAsM,eAAc,KACX,yBAAK7M,UAAU,4CACX,kBAAC,IAAM,CAACpC,MAAOg3B,EAAmBr0B,EAAU,WAAYN,KAAM,MAC9D,0BAAMD,UAAU,mDACXW,EAAAA,EAAAA,UAAS,yDAGL,EAmDrB,QAhD6B,SAAH,OAAMJ,EAAQ,EAARA,SAAU6gC,EAAe,EAAfA,gBAAiBhqB,EAAY,EAAZA,aAAcod,EAAc,EAAdA,eAAc,OACnF,kBAAC,aAAc,KACX,kBAAC,EAAApnB,cAAa,KACV,kBAAC,EAAArM,KAAI,CACDf,UAAU,gDACV0E,MAAM,UACNzE,KAAK,MACL8B,OAAO,MACPyC,MAAM,UAEN,kBAAC,EAAApB,SAAQ,CAACC,kBAAkB,uDAGpC,yBACIrD,UAAW4oC,IAAW,oCAAqC,CACvD,4CAA6CroC,IAAagE,EAAAA,cAAAA,MAE9D,cAAY,8CAEXhE,IAAagE,EAAAA,cAAAA,KACV,wBAAIvE,UAAU,8CACToM,EAAAA,EAAAA,aAAco8B,EAAmCjoC,IAAYI,EAAAA,EAAAA,UAAS,yBAG/E,yBACIX,UAAW4oC,IAAW,0CAA2C,CAC7D,kDAAmDroC,IAAagE,EAAAA,cAAAA,OAGpE,kBAAC,EAAAsI,eAAc,KACX,yBAAK7M,UAAU,oDACVO,IAAagE,EAAAA,cAAAA,SACV,kBAACkkC,EAAsB,CAACrxB,aAAcA,EAAcod,eAAgBA,IAEvEj0B,IAAagE,EAAAA,cAAAA,KAAqB,kBAACmkC,EAAkB,QAI9D,yBAAK1oC,UAAU,mDACX,kBAAC2oC,EAAc,CAACvH,gBAAiBA,EAAiB7gC,SAAUA,MAInEA,IAAagE,EAAAA,cAAAA,SAAyB,kBAACskC,EAAS,CAACtoC,SAAUA,KAEnD,qSC7JrB,SAnCiC8G,EAAAA,EAAAA,KAAS,WACtC,IAAQsQ,GAAO9Q,EAAAA,EAAAA,MAAP8Q,GAGsC/U,EAI1C+U,EAJAmxB,yCAC8Bld,EAG9BjU,EAHA4P,6BACAjiB,EAEAqS,EAFArS,WACAC,EACAoS,EADApS,UAGJ,OACI,kBAAC,EAAAga,OAAM,CACHvf,UAAU,+BACVwf,qBAAqB7e,EAAAA,EAAAA,UAAS,MAC9BsD,UAAW2nB,EACXtmB,WAAYA,EACZC,UAAWA,EACXwjC,sBAAoB,EACpBxxB,WAAY3U,GAEZ,kBAAC,EAAAzB,KAAI,CAACpB,KAAM,YAAaE,KAAM,KAC/B,kBAAC,EAAAc,KAAI,CACDf,UAAU,6BACVmD,GAAG,IACHlD,MAAMyB,EAAAA,EAAAA,YAAa,MAAQ,KAC3BgD,MAAM,UACN0a,YAAY,IACZ5a,MAAM,WAEL7D,EAAAA,EAAAA,UAAS,8DAI1B,mNCRMqoC,EAAuD,CACzDnmB,IAAK,CACDd,UAAW,yBACXR,UAAW,yBACXE,cAAe,4BACfmZ,IAAK,mBACLnB,IAAK,yBAGT3W,QAAS,CACLf,UAAW,6BACXR,UAAW,6BACXqZ,IAAK,mBACLnB,IAAK,4BAIPwP,EAAmB3lC,IAAAA,YACrB,WAAmCgJ,GAAQ,IAAxC48B,EAAe,EAAfA,gBAAiBx8B,EAAW,EAAXA,YAChB,OACI,yBACIxM,QAASwM,EAAc,WAAe,EAAGw8B,EACzClpC,UAAWgC,IAAW,+BAAgC,CAClD,yCAA0C0K,IAE9CJ,IAAKA,GAEL,0BAAMtM,UAAU,sCAAoC,KACpD,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,gBAGxC,IAGJ4lC,EAAiBE,YAAc,mBAE/B,IAAMC,EAAuB,SAAH,GAcQ,IAb9BzvB,EAAY,EAAZA,aACA0vB,EAAwB,EAAxBA,yBACApiB,EAAgB,EAAhBA,iBACAqiB,EAAuB,EAAvBA,wBACAC,EAAiB,EAAjBA,kBACA78B,EAAW,EAAXA,YACAvH,EAAU,EAAVA,WACA+jC,EAAe,EAAfA,gBACA1gC,EAAI,EAAJA,KACAjI,EAAQ,EAARA,SACAuC,EAAK,EAALA,MACA8jB,EAAiC,EAAjCA,kCACAC,EAA0B,EAA1BA,2BAEA,GACI1hB,GACAqD,EAAK0T,WAAa5J,EAAAA,GAAAA,MACkB,mBAA7B+2B,IACN9oC,IAAagE,EAAAA,GAAAA,KAAoB0iB,GAAkC,kBAAdze,EAAKA,MAE3D,OACI,yBAAKxI,UAAU,oCACX,kBAAC,EAAAoD,SAAQ,CACLC,kBAAkB,gGAClBoB,OAAQ,CACJlE,UAAUK,EAAAA,EAAAA,qBAAoBL,GAC9Bia,cAAyB,YAAV1X,EAAsB,GAAKA,GAE9C+S,WAAY,CACR,uBACI7V,UAAWgC,IAAW,2DAA4D,CAC9E,mDAAoDsnC,IAExDv/B,IAAK,EACL7J,QAASmpC,IAEb,kBAAC,EAAAtoC,KAAI,CAACgJ,IAAK,EAAGqV,YAAY,IAAInf,KAAK,YAMvD,IAAMupC,EACFhhC,EAAK0T,WAAa5J,EAAAA,GAAAA,KACd,kBAAC,EAAAlP,SAAQ,CAACC,kBAAkB,qBAE5B,kBAAC,EAAAD,SAAQ,CAACC,kBAAkB,qBAE9BomC,EAAY9vB,GAAgB6vB,EAClC,OACI,kBAAC,EAAAvoC,OAAM,CACHjB,UAAU,sCACVE,QAAS,WACD0mB,EACAC,GAA2B,GAE3BqiB,GAER,EACA1gC,KAAK,SACLkE,YAAaA,EACb/I,QAAS4lC,EACT/lC,WAAY+lC,EACZ7lC,OAAK,GAEJ+lC,EAGb,EAspBMC,GAppB0BriC,EAAAA,EAAAA,KAC5B,YAsBuB,IArBnBsS,EAAY,EAAZA,aACAgwB,EAAkB,EAAlBA,mBACAC,EAAU,EAAVA,WACAC,EAAsB,EAAtBA,uBACAC,EAAU,EAAVA,WACAC,EAAqB,EAArBA,sBACA9iB,EAAgB,EAAhBA,iBACAqiB,EAAuB,EAAvBA,wBACAC,EAAiB,EAAjBA,kBACA78B,EAAW,EAAXA,YACA2N,EAAY,EAAZA,aACAlV,EAAU,EAAVA,WACA6kC,EAAW,EAAXA,YACA1W,EAAiB,EAAjBA,kBACA4V,EAAe,EAAfA,gBACA3oC,EAAQ,EAARA,SACA0pC,EAAK,EAALA,MACAnnC,EAAK,EAALA,MACAonC,EAAoB,EAApBA,qBACAC,EAAgC,EAAhCA,iCACA3hC,EAAI,EAAJA,KAEA,GAA4C3B,EAAAA,EAAAA,MAApC8Q,EAAE,EAAFA,GAAIqP,EAAM,EAANA,OAAQrO,EAAW,EAAXA,YAAa7a,EAAM,EAANA,OAEzB+oB,EAA+BlP,EAA/BkP,2BACAW,EAAwBR,EAAxBQ,oBACA9O,EAA4BC,EAA5BD,wBAEJtT,EAIAtH,EAJAsH,oBACAglC,EAGAtsC,EAHAssC,yBACAC,EAEAvsC,EAFAusC,4BACAzjB,EACA9oB,EADA8oB,kCAGJ,GASIphB,EAAAA,EAAAA,KARAgvB,EAAc,EAAdA,eACAC,EAAc,EAAdA,eACAC,EAAc,EAAdA,eACA9M,EAAc,EAAdA,eACAC,GAAgC,EAAhCA,iCACAgb,GAAkB,EAAlBA,mBACA/8B,GAA0B,EAA1BA,2BACAu9B,GAAmB,EAAnBA,oBAGEiH,GAAgBT,SAAAA,EAAwBv/B,OAASu/B,aAAsB,EAAtBA,EAAyB,GAAKA,EAE/EU,GACFlwB,IACC3B,GACDnY,IAAagE,EAAAA,GAAAA,MACZiE,EAAK0T,WAAa5J,EAAAA,GAAAA,KACb+3B,EACI7hC,EAAKA,SACF8hC,GACPF,EACI5hC,EAAKA,SACF8hC,IAEXE,GAAgB9xB,GAA2BnY,IAAagE,EAAAA,GAAAA,IAAoBA,EAAAA,GAAAA,IAAoBiE,EAAKA,KAErGzI,GAA+ByI,EAAKA,KACtC,kBAAC,EAAArH,KAAI,CAACpB,KAAMipC,EAAcxgC,EAAKjI,UAAUiqC,IAAgBvqC,KAAM,KAC/D,KACEwqC,GAA8BjiC,EAAKA,OAASqoB,EAAAA,GAAAA,UAC5C6Z,GAA2BliC,EAAK0T,WAAa5J,EAAAA,GAAAA,KAC7Cq4B,GACFtwB,GACAiwB,IACA9hC,EAAK0T,WAAa5J,EAAAA,GAAAA,MAClB9J,EAAKA,OAASqoB,EAAAA,GAAAA,YACbyZ,cAAa,EAAbA,GAA2C1W,aAE1CtnB,GAAMhJ,IAAAA,OAAoC,MAC1CsnC,GAActnC,IAAAA,OAAoC,MAClDunC,GAAavnC,IAAAA,OAAoC,MAEjD+lC,GAAuC,WACzCc,SAAAA,GAAmC,GACnCD,SAAAA,GAAuB,EAC3B,EAEMY,GAAuC,WAEzC,MAAW,SADA3U,EAAAA,EAAAA,mBAEAtB,EAAAA,EAAAA,IAA+B,QAEnCA,EAAAA,EAAAA,IAA+B,UAC1C,EAmBMkW,GAA4DznC,IAAAA,aAAkB,SAAA+R,GAChF,GAAIA,EAAQ,SAEW,QADb21B,EAA+D,QAA9C,EAAA31B,EAAmCue,mBAAW,OAAa,QAAb,EAA/C,EAAiDqX,mBAAW,WAAb,EAA/C,EAA8DC,OACpF,GAAIF,EACA,MAAO,GAAP,OAAUA,EAAa,YACyD,KAA3E31B,SAA+C,QAAzC,EAANA,EAAoCue,mBAAW,OAAa,QAAb,EAAhD,EAAkDqX,mBAAW,WAAtD,EAAP,EAA+DE,UACzD,GACC91B,SAA+C,QAAzC,EAANA,EAAoCue,mBAAW,OAAa,QAAb,EAAhD,EAAkDqX,mBAAW,WAAtD,EAAP,EAA+DE,SAGjF,CACA,MAAO,EACX,GAAG,IAkCGC,IAA8B1pC,EAAAA,EAAAA,aAAcnB,IAAagE,EAAAA,GAAAA,QACzD8mC,GAAgB9qC,IAAagE,EAAAA,GAAAA,SAC/B,kBAAC,aAAc,KACX,wBAAIvE,UAAU,2CACV,wBAAIA,UAAU,iDACV,yBAAKA,UAAU,gCAA+BW,EAAAA,EAAAA,UAAS,cAE3D,wBAAIX,UAAU,4CACV,yBAAKA,UAAU,+BACX,kBAAC,IAAO,CAACpC,MAAO0sC,cAAa,EAAbA,GAAetzB,MAAOnV,SAAO,QAOjE,OACI,yBAAKyK,IAAKs+B,GAAa5qC,UAAU,6BAC7B,yBACIA,UAAWgC,IAAW,mBAAoB,CAAE,gCAAiCqY,IAC7E/N,IAAKA,IAEJm+B,IACG,yBAAKzqC,UAAU,4BACX,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,kBAGnCqnC,IACG,yBAAK1qC,UAAU,2DACX,kBAAC,EAAAoD,SAAQ,CAACC,kBAAkB,UAGpC,yBACIrD,UAAWgC,IAAW,yBAA0B,CAC5C,qCAAsC8nC,GAAcW,IAAsBE,KAE9E59B,GAAE,UAAKxM,IAAagE,EAAAA,GAAAA,QAAwBA,EAAAA,GAAAA,QAAwBA,EAAAA,GAAAA,IAAiB,YACjFiE,EAAK0T,SAAQ,YACb1T,EAAKA,OAERzI,GACD,yBAAKC,UAAU,uCACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,MAAMD,UAAU,6BACtB8C,GAEJvC,IAAagE,EAAAA,GAAAA,UACR+lC,KAAkBjwB,IAChB,uBAAGra,UAAU,+BAA+B4pC,GAGhD,uBAAG5pC,UAAU,+BAA+B4pC,IAE/CU,cAAa,EAAbA,GAAetpB,kBAAmB3G,GAAgB9Z,IAAagE,EAAAA,GAAAA,SAC5D,kBAAC,EAAAxD,KAAI,CAACd,KAAK,MAAMD,UAAU,oCACvB,kBAAC,EAAA4gB,MAAK,CACFC,OAAQypB,GAActpB,gBACtBF,SAAUwpB,GAAcxpB,SACxBG,WAAUqpB,GAAcppB,SAAUopB,GAAcppB,QAAU,EAC1DH,eAAa,MAIvBupB,cAAa,EAAbA,GAA4C3W,gBAC1CtZ,GACA9Z,IAAagE,EAAAA,GAAAA,SACT,kBAAC,EAAAxD,KAAI,CAAC2D,MAAM,iBAAiBzE,KAAK,OAAOmf,YAAY,KAC/CkrB,cAAa,EAAbA,GAA4C3W,iBAKjE2W,IAAiB,yBAAKtqC,UAAU,8BAEjC,yBAAKA,UAAU,wBAAwBI,MAAQkqC,UAAAA,GAAetzB,MAAgC,CAAC,EAAzB,CAAEsU,UAAW,SAC/E,yBAAKtrB,UAAU,iCACVO,IAAagE,EAAAA,GAAAA,YAA2B+lC,UAAAA,GAAetzB,SAAUqD,IAC9D,yBAAKra,UAAU,2BACX,2BAAOA,UAAU,iCACb,oCACsB,IAAViqC,GACJtgC,OAAOwE,KAAK87B,GAAO9gC,KAAI,SAACmiC,EAAgBzgC,GAAG,OACvC,wBAAId,IAAKc,EAAK7K,UAAU,qCACpB,wBAAIA,UAAU,2CACV,uBAAGA,UAAU,+BACRiqC,EAAMqB,GAAgBvhC,QAG/B,wBAAI/J,UAAU,sCACV,uBAAGA,UAAU,+BACRiqC,EAAMqB,GAAgB1tC,UAG9B,QAM5B0sC,cAAa,EAAbA,GAAetzB,QACZqD,GACA9Z,IAAagE,EAAAA,GAAAA,KACbiE,EAAK0T,WAAa5J,EAAAA,GAAAA,OAClBu3B,aAAsB,EAAtBA,EAAwBv/B,UACxBu/B,aAAsB,EAAtBA,EAAwB1gC,KAAI,SAAC4gB,EAAmB/iB,GAAa,OACzD,yBAAKhH,UAAU,yBAAyB+J,IAAK/C,IACxC+iB,aAAG,EAAHA,EAAK/I,kBACF3G,GAC8B,WAA9B0P,EAAIf,uBACA,yBAAKhpB,UAAU,kCACX,kBAAC,EAAAoD,SAAQ,CAACC,kBAAmB,aAGvC0mB,aAAG,EAAHA,EAAkC4J,gBAChC,yBACI3zB,UAAS,oCACyB,WAA9B+pB,EAAIf,sBAAqC,GAAK,UAGlD,kBAAC,EAAAjoB,KAAI,CAACd,KAAK,OAAO8B,OAAO,QACnBgoB,aAAG,EAAHA,EAAkC4J,iBAI/C5J,aAAG,EAAHA,EAAK/I,kBAAmB3G,GACrB,yBAAKra,UAAU,6BACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,MAAMD,UAAU,oCACvB,kBAAC,EAAA4gB,MAAK,CACFC,OAAQkJ,EAAI/I,gBACZF,SAAUiJ,EAAIjJ,SACdG,WAAY8I,EAAI7I,SAAW6I,EAAI7I,QAAU,EACzCH,eAAa,MAK7B,yBAAK/gB,UAAU,iCACV+pB,GAAO1P,GACJ,kBAAC,EAAApZ,OAAM,CAACf,QAAS,kBAAM8pC,EAAYjgB,EAAI,EAAEvhB,KAAK,SAAShF,WAAS,GAC5D,kBAAC,EAAAJ,SAAQ,CAACC,kBAAkB,YAGnC0mB,GAAO1P,IAAiB+wB,IACrB,kBAAC,EAAAnqC,OAAM,CACHjB,UAAU,0FACVwI,KAAK,SACLtI,QAAS,WACLsnB,EAAoBjnB,GACpB8iC,KACAR,GAAmB9Y,EACvB,EACApmB,SAAO,EACPD,OAAK,GAEL,kBAAC,EAAAN,SAAQ,CAACC,kBAAkB,YAItC,MAEbinC,cAAa,EAAbA,GAAetzB,QACZqD,GACA9Z,IAAagE,EAAAA,GAAAA,OACZslC,SAAAA,EAAwBv/B,SACzB9B,EAAK0T,WAAa5J,EAAAA,GAAAA,MACd,yBAAKtS,UAAU,2BACTsqC,cAAa,EAAbA,GAA4C3W,gBAC1C,yBAAK3zB,UAAU,mCACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,OAAO8B,OAAO,QACnBuoC,cAAa,EAAbA,GAA4C3W,iBAIzD2W,cAAa,EAAbA,GAAetpB,kBAAmB3G,GAC/B,yBAAKra,UAAU,6BACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,MAAMD,UAAU,oCACvB,kBAAC,EAAA4gB,MAAK,CACFC,OAAQypB,GAActpB,gBACtBF,SAAUwpB,GAAcxpB,SACxBG,WAAYqpB,GAAcppB,SAAWopB,GAAcppB,QAAU,EAC7DH,eAAa,MAK7B,yBAAK/gB,UAAU,iCACVsqC,IAAiBjwB,GACd,kBAAC,EAAApZ,OAAM,CACHf,QAAS,kBAAM8pC,EAAYM,GAAc,EACzC9hC,KAAK,SACLhF,WAAS,GAET,kBAAC,EAAAJ,SAAQ,CAACC,kBAAkB,YAGnCinC,IAAiBjwB,IAAiB+wB,IAC/B,kBAAC,EAAAnqC,OAAM,CACHjB,UAAU,0FACVwI,KAAK,SACLtI,QAAS,WACLsnB,EAAoBjnB,GACpB8iC,KACAR,GAAmByH,GACvB,EACA3mC,SAAO,EACPD,OAAK,GAEL,kBAAC,EAAAN,SAAQ,CAACC,kBAAkB,cAMnDinC,cAAa,EAAbA,GAAetzB,QACZqD,GACA9Z,IAAagE,EAAAA,GAAAA,KACbiE,EAAK0T,WAAa5J,EAAAA,GAAAA,OAClBu3B,aAAsB,EAAtBA,EAAwB1gC,KAAI,SAAC4gB,EAAmB/iB,GAAa,YAtR3EukC,EAsR2E,OACzD,yBAAKvrC,UAAU,yBAAyB+J,IAAK/C,IACxCsjC,cAAa,EAAbA,GAAetpB,kBAAmB3G,IAAiB3B,GAChD,yBAAK1Y,UAAU,kCACX,kBAAC,EAAAoD,SAAQ,CACLC,kBACI0mB,EAAIf,wBACH,CAAC,MAAO,OAAOjiB,SAASgjB,aAAG,EAAHA,EAAKf,wBACC,QAAzB,EAAAe,EAAIf,6BAAqB,aAAzB,EAA2B0M,OAAO,GAAGC,eACrC5L,EAAIf,sBAAsB4M,MAAM,GACP,QADS,EAClC7L,EAAIf,6BAAqB,aAAzB,EAA2B2M,kBAK/C5L,aAAG,EAAHA,EAAkC4J,gBAChC,yBAAK3zB,UAAU,8BACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,OAAO8B,OAAO,QACnBgoB,aAAG,EAAHA,EAAkC4J,iBAI/C2W,cAAa,EAAbA,GAAetpB,kBAAmB3G,GAC/B,yBAAKra,UAAU,6BACX,kBAAC,EAAAe,KAAI,CAACd,KAAK,MAAMD,UAAU,oCACvB,kBAAC,EAAA4gB,MAAK,CACFC,OAAQkJ,EAAI/I,gBACZF,SAAUiJ,EAAIjJ,SACdG,WAAY8I,EAAI7I,SAAW6I,EAAI7I,QAAU,EACzCH,eAAa,MAGC,QAtTpDwqB,EAAyC,GAC/C1B,SAAAA,EAAwB1gC,KAAI,SAAA4gB,GACU,QAA9BA,EAAIf,wBACAuiB,EAAYjhC,OACZihC,EAAY1hC,SAAQ,SAAA2hC,GAEhB,OADIA,EAAQn2B,SAAW0U,EAAI1U,QAAQk2B,EAAYE,KAAK1hB,GAC7CwhB,CACX,IAEAA,EAAYE,KAAK1hB,GAG7B,IA0SqC,EAzS9BwhB,SAySmD,aAArB,EAAuBjhC,QAAS,GACC,QAA9Byf,EAAIf,uBACA,kBAAC,EAAAjoB,KAAI,CACDf,UAAU,oCACV0E,MAAM,qBACNzE,KAAK,OACL8B,OAAO,QAENgpC,GAAchhB,KAKnC,yBAAK/pB,UAAU,iCACU,QADqB,EArStD,SAAC+Z,GACrB,IAAQiP,EAAkCjP,EAAlCiP,sBAAuBpiB,EAAWmT,EAAXnT,OAC/B,GAAIoiB,GAAyBpiB,GAAU,CAAC,eAAgB,wBAAwBG,SAASH,GAAS,CAC9F,IAAM8kC,EAAwC,yBAAX9kC,EACnC,OACI,kBAAC,EAAA3F,OAAM,CACHjB,UAAU,0FACVwI,KAAK,SACLtI,QAAS,WACL0nB,EAAe,CACX1L,SAAU1T,EAAK0T,SACf1T,KAAMA,EAAKA,OAEfqf,GAAiCmB,GACjC5jB,IACAU,IACJ,EACAnC,SAAO,EACPD,OAAK,EACLsJ,SAAU0+B,GAETA,EACG,kBAAC,EAAAtoC,SAAQ,CAACC,kBAAkB,yBAE5B,kBAAC,EAAAD,SAAQ,CAACC,kBAAkB,sBAI5C,CACA,OAAO,IACX,CAwQqCsoC,CAAgB5hB,UAAI,QACjB,kBAAC,aAAc,KACVugB,IAAiBjwB,GACd,kBAAC,EAAApZ,OAAM,CACHf,QAAS,WACL,IAAM0rC,EACF/B,aAAsB,EAAtBA,EAAwBhiC,MACpB,SAAAxJ,GAAI,OACAA,EAAK2qB,wBACDe,EAAIf,uBACR3qB,EAAK2Y,QAAU+S,EAAI/S,KAAK,IAGpCgzB,EACI4B,EAER,EACApjC,KAAK,SACLhF,WAAS,GAET,kBAAC,EAAAJ,SAAQ,CAACC,kBAAkB,YAGnCinC,IAAiBjwB,IAAiB+wB,IAC/B,kBAAC,EAAAnqC,OAAM,CACHjB,UAAU,0FACVwI,KAAK,SACLtI,QAAS,WACL,IAAM0rC,EACF/B,aAAsB,EAAtBA,EAAwBhiC,MACpB,SAAAxJ,GAAI,OACAA,EAAK2qB,wBACDe,EAAIf,uBACR3qB,EAAK2Y,QAAU+S,EAAI/S,KAAK,IAEpCwQ,EAAoBjnB,GACpB8iC,KACAR,GAAmB+I,EACvB,EACAjoC,SAAO,EACPD,OAAK,GAEL,kBAAC,EAAAN,SAAQ,CAACC,kBAAkB,aAM9C,MAEbinC,cAAa,EAAbA,GAAetzB,QAASqD,GAAgB9Z,IAAagE,EAAAA,GAAAA,SAClD,kBAAC,aAAc,KACX,yBAAKvE,UAAU,iCACX,2BAAOA,UAAU,uCACb,+BACKqrC,GACD,wBAAIrrC,UAAU,+FACV,wBAAIA,UAAU,iDACV,yBAAKA,UAAU,gCACVW,EAAAA,EAAAA,UAAS,cAGlB,wBAAIX,UAAU,4CACV,yBAAKA,UAAU,+BACX,kBAAC,IAAW,CACRO,SAAUA,EACVL,QAAS,WACLozB,EACIgX,cAAa,EAAbA,GAAetzB,MACflU,EACA0F,EAAK0T,SACL1T,EAAKA,KACJ8hC,cAAa,EAAbA,GACKj1B,OAEd,aAUhCi1B,IAAiBX,IAAwBtvB,IACzC9Z,IAAagE,EAAAA,GAAAA,SACT,yBAAKvE,UAAU,gCACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,IAAIuB,MAAM,UAAUzE,KAAK,KAAKb,OAAQ,CAAEysC,OAAQ,gBACpDlC,IAIhBW,IAAiBjwB,GAAgB9Z,IAAagE,EAAAA,GAAAA,SAC3C,yBAAKvE,UAAU,4BACX,kBAAC,EAAAiB,OAAM,CAACf,QAAS,kBAAM8pC,EAAYM,GAAc,EAAE9hC,KAAK,SAAShF,WAAS,GACrEgF,EAAK0T,WAAa5J,EAAAA,GAAAA,MACf,kBAAC,EAAAlP,SAAQ,CAACC,kBAAkB,kBAE/BmF,EAAK0T,WAAa5J,EAAAA,GAAAA,MAAiB,kBAAC,EAAAlP,SAAQ,CAACC,kBAAkB,aAI3EinC,IACGjwB,IACC+wB,IACD7qC,IAAagE,EAAAA,GAAAA,SACT,uBACIvE,UAAU,0FACVwI,KAAK,SACLipB,MAAM0D,EAAAA,EAAAA,IACF3sB,EAAK0T,SACLsY,EAAehsB,EAAK0T,WAExBzO,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAA7wB,SAAQ,CAACC,kBAAkB,2BAGvCinC,IAAiBjwB,GAAgB+wB,IAC9B,uBACIprC,UAAU,0FACVwI,KAAK,SACLipB,KAAMqZ,KACNr9B,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAA7wB,SAAQ,CAACC,kBAAkB,sBAGnCinC,IACGjwB,IACC+wB,IACD7qC,IAAagE,EAAAA,GAAAA,SACT,uBACIvE,UAAU,0FACVwI,KAAK,SACLipB,MAAMwD,EAAAA,EAAAA,IACFzsB,EAAK0T,SACLwY,EAAelsB,EAAK0T,WAExBzO,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAA7wB,SAAQ,CAACC,kBAAkB,2BAGvCinC,IAAiBjwB,GAAgB+wB,IAC9B,uBACIprC,UAAU,0FACVwI,KAAK,SACLipB,KAAMqZ,KACNr9B,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAA7wB,SAAQ,CAACC,kBAAkB,uBAGlCinC,IAAiBjwB,GACf,kBAAC+uB,EAAoB,CACjBzvB,aAAcA,EACd0vB,yBAA0BA,GAC1BpiB,iBAAkBA,EAClBqiB,wBAAyBA,EACzBC,kBAAmBA,EACnB78B,YAAaA,EACbvH,WAAYA,EACZ+jC,gBAAiBA,EACjB1gC,KAAMA,EACNjI,SAAUA,EACVuC,MAAOA,EACP8jB,kCAAmCA,EACnCC,2BAA4BA,IAGnCyjB,IACGjwB,IACC+wB,IACD7qC,IAAagE,EAAAA,GAAAA,SACT,uBACIvE,UAAU,0FACVwI,KAAK,SACLipB,MAAMyD,EAAAA,EAAAA,IACF1sB,EAAK0T,SACLuY,EAAejsB,EAAK0T,WAExBzO,OAAO,SACPwmB,IAAI,uBAEJ,kBAAC,EAAA7wB,SAAQ,CAACC,kBAAkB,4BAGtCinC,IAAiBjwB,GACf,kBAAC+uB,EAAoB,CACjBzvB,aAAcA,EACd0vB,yBAA0BA,GAC1BpiB,iBAAkBA,EAClBqiB,wBAAyBA,EACzBC,kBAAmBA,EACnB78B,YAAaA,EACbvH,WAAYA,EACZ+jC,gBAAiBA,EACjB1gC,KAAMA,EACNjI,SAAUA,EACVuC,MAAOA,EACP8jB,kCAAmCA,EACnCC,2BAA4BA,MAK5C,kBAAC,aAAc,KACV0jB,IACG,kBAAC,EAAAn9B,cAAa,KACV,kBAAC67B,EAAgB,CACb38B,IAAKu+B,GACL3B,gBAAiBA,EACjBx8B,YAAaq9B,OAMjC,kBAAC,EAAAl9B,eAAc,KACX,kBAACi/B,EAAA,EAAa,CACVC,GAAIxB,GACJyB,QAAS,EACThqC,WAAW,+BACXiqC,eAAa,GAEb,kBAAChD,EAAgB,CACb38B,IAAKu+B,GACL3B,gBAAiBA,EACjBx8B,YAAaq9B,MAMrC,ICtqBJ,QALuB,CACnBlnB,IAtFQ,CACRqpB,qBAAsB,CAClB7f,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,eAAe,GAClF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,IAE/FwrC,qBAAsB,CAClB9f,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,eAAe,GAClF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,IAEhGyrC,eAAgB,CACZ/f,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,eAAe,GAClF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,IAE/F0rC,wBAAyB,CACrBhgB,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,aAAa,GAChF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,IAE/F2rC,yBAA0B,CACtBjgB,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,cAAc,GACjF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,IAE/F4rC,wBAAyB,CACrBlgB,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,aAAa,GAChF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,IAEhG6rC,yBAA0B,CACtBngB,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,cAAc,GACjF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,KA8C/FmiB,QAzCY,CACZ2pB,eAAgB,CACZpgB,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,eAAe,GAClF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,IAEhGyrC,eAAgB,CACZ/f,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,eAAe,GAClF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,IAEhGurC,qBAAsB,CAClB7f,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,eAAe,GAClF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,IAE/FwrC,qBAAsB,CAClB9f,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,eAAe,GAClF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,IAE/F0rC,wBAAyB,CACrBhgB,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,aAAa,GAChF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,IAE/F4rC,wBAAyB,CACrBlgB,SAAU,CAAEtiB,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,WAAW,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,aAAa,GAChF,cAAe,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,cAAc,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,OAAO,GAClF,iBAAkB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,iBAAiB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,GACvF,mBAAoB,CAAEoJ,IAAK,kBAAMpJ,EAAAA,EAAAA,UAAS,mBAAmB,EAAE/C,MAAO,kBAAM+C,EAAAA,EAAAA,UAAS,MAAM,MCcnG,QAtEqC,SAAH,GAUC,IACC20B,EAVhCyU,EAAqB,EAArBA,sBACA2C,EAAU,EAAVA,WACA3nC,EAAU,EAAVA,WACAsV,EAAY,EAAZA,aACA6uB,EAAe,EAAfA,gBACAyD,EAAmB,EAAnBA,oBACApsC,EAAQ,EAARA,SACAid,EAAY,EAAZA,aACAovB,EAAmB,EAAnBA,oBAgBMC,EAAqBljC,OAAOwE,KAAKqP,GAAc3V,MAAK,SAAAkC,GAAG,OAAIA,EAAIwe,WAAW,GAAD,OAAIhoB,EAAQ,iBAAgB,KAAK,GAEhH,OACI,yBAAKP,UAAU,4BAA4B,cAAY,gCAClD+E,EACG,kBAAC,EAAO,MAER,kBAAC2kC,EAAc,CACX3/B,IAAI,MACJjH,OAAOnC,EAAAA,EAAAA,UAAS,WAChB6H,KAAM,CACF0T,SAAU,OACV3b,SAAU,UACViI,KAAM,OAEVkE,YAAaq9B,GAAyB2C,EAAWI,MACjDzyB,aAAcA,EACdwvB,wBA/BgBvU,EA+B+B,UA9B/C3rB,OAAOwE,KAAKqP,GAAclU,MAClC,SAAAS,GAAG,OAAIA,EAAIwe,WAAW,GAAD,OAAIhoB,EAAQ,iBAAS+0B,KAA6C,IAA9B9X,EAAazT,GAAKgjC,OAAa,IAEtFpjC,OAAOwE,KAAKqP,GACPxO,QAAO,SAAAjF,GAAG,OAAIA,EAAIwe,WAAW,GAAD,OAAIhoB,EAAQ,iBAAS+0B,GAAW,IAC5DxjB,QAAO,SAACk7B,EAAMC,GAEX,OADAD,EAAKvB,KAAKjuB,EAAayvB,IAChBD,CACX,GAAG,SACPnuC,GAsBM8qC,oBAAoBhpC,EAAAA,EAAAA,UAAS,iBAC7BuoC,gBAAiB,kBACbA,EAAgB,CACZhtB,SAAU,OACV3b,SAAU,UACViI,KAAM,OACR,EAEN8qB,kBAAmBsZ,EACnB5C,YAAa,kBACT2C,EAAoBnvB,EAAaqvB,GAAqB,CAClD3wB,SAAU,OACV1T,KAAM,OACR,EAENjI,SAAUA,EACVqpC,YAAYjpC,EAAAA,EAAAA,UACR,+FAEJspC,MAAOiD,EAAAA,QAAAA,eACPpD,YAAU,IAK9B,ECyGA,QAxKiC,SAAH,GAmBK,IAlB/BrsB,EAAK,EAALA,MACA0vB,EAAa,EAAbA,cACAC,EAAuB,EAAvBA,wBACArD,EAAqB,EAArBA,sBACAsD,EAAsB,EAAtBA,uBACAX,EAAU,EAAVA,WACA3nC,EAAU,EAAVA,WACAsV,EAAY,EAAZA,aACAizB,EAAsB,EAAtBA,uBACAC,EAAsB,EAAtBA,uBACAC,EAAqB,EAArBA,sBACAtE,EAAe,EAAfA,gBACAyD,EAAmB,EAAnBA,oBACApsC,EAAQ,EAARA,SACAid,EAAY,EAAZA,aACAovB,EAAmB,EAAnBA,oBACAxpB,EAAS,EAATA,UACA1K,EAAuB,EAAvBA,wBAEM+0B,EAA0B,SAACjlC,GAC7B,OAAOmB,OAAOwE,KAAKqP,GAAc3V,MAAK,SAACkC,GAAW,OAAKA,EAAIwe,WAAW,GAAD,OAAIhoB,EAAQ,iBAASiI,GAAO,KAAK,EAC1G,EA0BMklC,EAAkBpqC,IAAAA,SAAc,WAClC,IAAMqqC,EAAkBtzB,GAAgBoD,IAAYpD,GAAgB8yB,EACpE,MAAkB,OAAd/pB,EACO8pB,EAAe3sC,GAAmCgsC,wBAEzDoB,EACOT,EAAe3sC,GAAmC8rC,wBAEtDa,EAAe3sC,GAAmC4rC,oBAC7D,GAAG,CAAC9xB,EAAcoD,EAAO0vB,EAAe/pB,EAAW7iB,IAEnD,OACI,kBAAC,aAAc,KACVwE,EACG,kBAAC,EAAO,MAER,yBAAK/E,UAAU,4BAA4B,cAAY,gCAClDstC,EAAuB,SACpB,kBAAC5D,EAAc,CACX5mC,OAAOnC,EAAAA,EAAAA,UAAS,WAChB6H,KAAM,CACF0T,SAAU,OACV1T,KAAM,YACNjI,SAAAA,GAEJmM,YAAaq9B,GAAyB2C,EAAWI,MACjDzyB,aAAcA,EACdwvB,uBAAwBrsB,EAAaiwB,EAAwB,cAC7D9D,oBAAoBhpC,EAAAA,EAAAA,UAAS,iBAC7BuoC,gBAAiB,kBACbA,EAAgB,CACZhtB,SAAU,OACV1T,KAAM,YACNjI,SAAAA,GACF,EAEN+yB,kBAAmBsZ,EACnB5C,YAAa,kBACT2C,EAAoBnvB,EAAaiwB,EAAwB,cAAe,CACpEvxB,SAAU,OACV1T,KAAM,aACR,EAENjI,SAAUA,EACVqpC,YAAYjpC,EAAAA,EAAAA,UAAS,0DACrBspC,MAAOiD,EAAe3sC,GAAmC2rC,qBACzDpC,YAAU,IAIjByD,KACG,kBAAC7D,EAAc,CACX5mC,MAAO4V,GAA0B/X,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,aAC7D+L,YAAaq9B,EACb1vB,aAAcA,EACd7R,KAAM,CACF0T,SAAU,OACV1T,KAAM,YACNjI,SAAAA,GAEJspC,uBAvERlgC,OAAOwE,KAAKqP,GAAclU,MAAK,SAAAS,GAAG,OAAIA,EAAIwe,WAAW,GAAD,OAAIhoB,EAAQ,mBAAkB,IACxFoJ,OAAOwE,KAAKqP,GACPxO,QAAO,SAAAjF,GAAG,OAAIA,EAAIwe,WAAW,GAAD,OAAIhoB,EAAQ,mBAAkB,IAC1DuR,QAAO,SAACk7B,EAAMC,GAEX,OADAD,EAAKvB,KAAKjuB,EAAayvB,IAChBD,CACX,GAAG,SACPnuC,EAiEc8qC,oBAAoBhpC,EAAAA,EAAAA,UAAS,iBAC7BuoC,gBAtFD,WACfzrB,IAAU2vB,GAA2BV,EAAWkB,IAChDP,EAAuB,eAAe1sC,EAAAA,EAAAA,UAAS,sBAAsBA,EAAAA,EAAAA,UAAS,cAE9EuoC,EAAgB,CACZhtB,SAAU,OACV1T,KAAM,YACNjI,SAAAA,GAGZ,EA6EwB+yB,kBAAmBsZ,EACnB5C,YAAa,kBACT2C,EAAoBnvB,EAAaiwB,EAAwB,cAAe,CACpEvxB,SAAU,OACV1T,KAAM,aACR,EAENjI,SAAUA,EACVqpC,WAAYpB,EACRjoC,EACAmY,GAEJuxB,MAAOyD,EACP5D,YAAU,IAIjB0D,KACG,kBAAC9D,EAAc,CACX5mC,OAAOnC,EAAAA,EAAAA,UAAS,aAChB6H,KAAM,CACF0T,SAAU,OACV1T,KAAM,MACNjI,SAAAA,GAEJmM,YAAaq9B,GAAyB2C,EAAWI,MACjDzyB,aAAcA,EACdwvB,uBAAwBrsB,EAAaiwB,EAAwB,QAC7D9D,oBAAoBhpC,EAAAA,EAAAA,UAAS,iBAC7BuoC,gBAAiB,kBACbA,EAAgB,CACZhtB,SAAU,OACV1T,KAAM,MACNjI,SAAAA,GACF,EAEN+yB,kBAAmBsZ,EACnB5C,YAAa,kBACT2C,EAAoBnvB,EAAaiwB,EAAwB,QAAS,CAC9DvxB,SAAU,OACV1T,KAAM,OACR,EAENjI,SAAUA,EACVqpC,YAAYjpC,EAAAA,EAAAA,UACR,0GAEJspC,MAAOiD,EAAe3sC,GAAmC6rC,eACzDtC,YAAU,KAOtC,ECpJA,IAAM+D,EAAwB,SAAH,GA0BQ,IAzB/B5mB,EAAgB,EAAhBA,iBACAqiB,EAAuB,EAAvBA,wBACA7rB,EAAK,EAALA,MACA0vB,EAAa,EAAbA,cACApD,EAAqB,EAArBA,sBACA5kC,EAAU,EAAVA,WACAmoC,EAAsB,EAAtBA,uBACAC,EAAsB,EAAtBA,uBACAO,EAAuB,EAAvBA,wBACA5E,EAAe,EAAfA,gBACA6E,EAAiC,EAAjCA,kCACAC,EAAiC,EAAjCA,kCACArB,EAAmB,EAAnBA,oBACAsB,EAAuB,EAAvBA,wBACAzwB,EAAY,EAAZA,aACAovB,EAAmB,EAAnBA,oBACArsC,EAAQ,EAARA,SACAmsC,EAAU,EAAVA,WACAryB,EAAY,EAAZA,aACA6vB,EAAoB,EAApBA,qBACAC,EAAgC,EAAhCA,iCACA/mB,EAAS,EAATA,UACAsD,EAA+B,EAA/BA,gCACAwnB,EAAwB,EAAxBA,yBACAx1B,EAAuB,EAAvBA,wBAEMg1B,EAAkBpqC,IAAAA,SAAc,WAClC,IAAMqqC,EAAkBtzB,GAAgBoD,IAAYpD,GAAgB8yB,EAEpE,MADoC,OAAd/pB,EAEX8pB,EAAe3sC,GAAmCgsC,wBAEzDoB,EACOT,EAAe3sC,GAAmC8rC,wBAEtDa,EAAe3sC,GAAmC4rC,oBAC7D,GAAG,CAAC/oB,EAAW/I,EAAcoD,EAAO0vB,EAAe5sC,IAE7C8oB,EAAsB,SAAC7gB,GACrB0lC,EACAxnB,IAEAwiB,EAAgB,CAAE1gC,KAAAA,EAAM0T,SAAU,OAAQ3b,SAAAA,GAElD,EAEM4tC,EAAkB,SAACp0B,GACrB,MAAiB,YAAbxZ,EACOosC,EAAoBnvB,GAAaumB,EAAAA,EAAAA,mBAAkBhqB,EAASxZ,IAAY,CAC3E2b,SAAUnC,EAAQ3E,aAClB5M,MAAMsrB,EAAAA,EAAAA,kBAAiB,CACnB7L,YAAalO,EAAQkO,YACrBwL,iBAAmB1Z,EAAoC0Z,iBACvDlzB,SAAAA,MAILosC,EAAoB5yB,EAAS,CAChCmC,SAAUnC,EAAQ3E,aAClB5M,MAAMsrB,EAAAA,EAAAA,kBAAiB,CACnB7L,YAAalO,EAAQkO,YACrBwL,iBAAmB1Z,EAAoC0Z,iBACvDlzB,SAAU,SAGtB,EAEM6tC,EAA2B,SAAC3a,GAC9B,GAAIsW,EAAuB,OAAO,EAElC,GAAyB,cAArBtW,GAAoCiZ,EAAWI,MAAO,OAAO,EAEjE,GAAIrvB,EAAO,CACP,IAAM1D,GAAU+qB,EAAAA,EAAAA,sBAAqB,CAAE5oB,SAAU,OAAQ1T,KAAMirB,IAC/D,OAAOwa,EAAwBl0B,aAAO,EAAPA,EAAS3E,aAC5C,CAEA,OAAQqe,GACJ,IAAK,YACL,IAAK,YACD,OAAOya,IAAoCjnB,EAC/C,QACI,OAAO,EAEnB,EAEM4iB,EAAyB,SAACvU,GAE5B,IAAM+Y,EACW,QAAb/Y,EAAqB,GAAH,OAAM/0B,EAAQ,iBAASA,EAAQ,YAAI+0B,GAAQ,UAAQ/0B,EAAQ,iBAAS+0B,GAc1F,OAVY3rB,OAAOwE,KAAKqP,GAAclU,MAClC,SAAAS,GAAG,OAAIA,EAAIwe,WAAW8lB,KAHCC,EAGiC9wB,EAAazT,GAFxD,YAAbxJ,GAA+C,IAAtB+tC,EAAUvB,SADb,IAACuB,CAGmD,IAExE3kC,OAAOwE,KAAKqP,GACPxO,QAAO,SAAAjF,GAAG,OAAIA,EAAIwe,WAAW8lB,EAAY,IACzCv8B,QAAO,SAACk7B,EAAMC,GAEX,OADAD,EAAKvB,KAAKjuB,EAAayvB,IAChBD,CACX,GAAG,SACPnuC,CAEV,EAEAkvC,EAAkClE,EAAuB,cACzDmE,EAAkCnE,EAAuB,cAEzD,IAwFMt4B,EAAQ,CAxFkB+7B,EAAuB,SACnD,kBAAC5D,EAAc,CACX3/B,IAAI,iBACJggC,sBAAuBA,EACvBjnC,MAAoB,QAAbvC,GAAqBI,EAAAA,EAAAA,UAAS,YAAaA,EAAAA,EAAAA,UAAS,aAC3DsmB,iBAAkBA,EAClBqiB,wBAAyBA,EACzB58B,YAAa0hC,EAAyB,aACtC/zB,aAAcA,EACd7R,KAAM,CACF0T,SAAU,OACV1T,KAAM,YACNjI,SAAAA,GAEJspC,uBAAwBA,EAAuB,aAC/CF,oBAAoBhpC,EAAAA,EAAAA,UAAS,iBAC7BuoC,gBAAiB,kBAAM7f,EAAoB,YAAY,EACvDiK,kBAAmBsZ,EACnB5C,YAAamE,EACb5tC,SAAUA,EACVqpC,WACiB,QAAbrpC,GACMI,EAAAA,EAAAA,UAAS,2DACTA,EAAAA,EAAAA,UAAS,kFAEnBspC,MAAOiD,EAAe3sC,GAAmC2rC,qBACzD/mC,WAAYA,EACZglC,iCAAkCA,EAClCD,qBAAsBA,IAIJqD,KACtB,kBAAC7D,EAAc,CACX3/B,IAAI,iBACJkd,iBAAkBA,EAClBva,YAAa0hC,EAAyB,aACtCtrC,MAAO4V,GAA0B/X,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,aAC7D6H,KAAM,CACF0T,SAAU,OACV1T,KAAM,YACNjI,SAAAA,GAEJspC,uBAAwBA,EAAuB,aAC/CF,oBAAoBhpC,EAAAA,EAAAA,UAAS,iBAC7BuoC,gBAAiB,kBAAM7f,EAAoB,YAAY,EACvDiK,kBAAmBsZ,EACnB5C,YAAamE,EACb5tC,SAAUA,EACVqpC,WAAYpB,EAA+CjoC,EAAUmY,GACrEuxB,MAAOyD,EACPpE,wBAAyBA,EACzBjvB,aAAcA,EACdlV,WAAYA,EACZglC,iCAAkCA,EAClCD,qBAAsBA,IAIU,YAAb3pC,GAA0ButC,EAAwB,SACzE,kBAACpE,EAAc,CACXC,oBAAoBhpC,EAAAA,EAAAA,UAAS,iBAC7BipC,YAAYjpC,EAAAA,EAAAA,UACR,+FAEJkpC,uBAAwBA,EAAuB,OAC/C5iB,iBAAkBA,EAClBqiB,wBAAyBA,EACzB58B,YAAaq9B,GAAyB2C,EAAWI,MACjDzyB,aAAcA,EACdlV,WAAYA,EACZ4E,IAAI,MACJigC,YAAamE,EACb7a,kBAAmBsZ,EACnB1D,gBAAiB,kBAAM7f,EAAoB,MAAM,EACjD9oB,SAAUA,EACV0pC,MAAOiD,EAAAA,QAAAA,eACPpqC,OAAOnC,EAAAA,EAAAA,UAAS,WAChBupC,qBAAsBA,EACtBC,iCAAkCA,EAClC3hC,KAAM,CACF0T,SAAU,OACV1T,KAAM,MACNjI,SAAAA,MAKmEyO,OAAO4S,SAEtF,OACI,yBAAK,cAAY,+BAA+B5hB,UAAWgC,IAAW,8BAClE,kBAAC,EAAA6K,eAAc,KACX,kBAAC,EAAA0hC,SAAQ,CACLxgC,KAAMwD,EACNlR,MAAO,IACPmuC,aAAa,SACbC,aAAa,EACbC,gBAAiB,EACjBC,QAAQ,KAGhB,kBAAC,EAAAvhC,cAAa,KAAEmE,GAG5B,+8CCtOyCq9B,GAAAA,SAAAA,OAAsBjwC,EAAK,WAChE,EAAMkwC,EAAgB,WACtB,EAAgB,oBACZ,KAAO,MACX,IAEA,SACH,0BAmCsDhoC,IAAAA,cAAU,mBChGjE,IDgGoB8Q,EAAAA,EAAAA,KAAE,gBAAEgB,GAAW,UAAErJ,EAAAA,EAAa,OAE9C,EACI8K,EAAAA,GACA6zB,EAAAA,EAAuB,YACvB5zB,EAwBAvc,EAxBAuc,cACAy0B,EAuBM,EAvBNA,kBACArxB,EAAK,0BACL0vB,EAAa,EAqBP,aApBNhoC,EAoBArH,EApBAqH,cACA4pC,EAAAA,EAAc,MACdz0B,EAAAA,EAkBAxc,cAjBAkxC,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,eACA7B,EAAAA,EAeAtvC,mBAdAoxC,EAA2B,EAc3BpxC,0BAbAslB,EAAS,gCACuBre,EAAhC6lB,EAAAA,wBACoCukB,EAWpCrxC,EAXAsxC,4BACoCC,EAAAA,EAAAA,UACIC,EAAAA,EAAAA,+BACAC,EAAAA,EAQxCzxC,mCAPyBmpB,EAAzBC,EAAAA,mCACAwlB,EAAU,yCACS8C,EAKnB1xC,EALA+gB,uCACA4wB,EAIA3xC,EAJA2xC,wBACAnoB,EAAAA,EAAAA,WACAV,EAAAA,EAEA9oB,kBADAwJ,GAAgB,EAChBxJ,eAEJ,GAGI0xC,EAAAA,8BADyCE,GACzCF,EAAAA,kCACJ,GAAqC,EAA6CC,iBAA1BE,GAA0BF,EAA3CG,oCACvC,GAA0EtoC,EAAlEuoC,wCAAsDpK,GAAYn+B,GAAd,WAE5D,GACI4W,GAAAA,gBACAmvB,GAAsB,GAAtBA,uBACA/D,GAAAA,GAYA3xB,UAXAm4B,GAAAA,EAAAA,yBAC0BC,GAUxB,EAVFC,uBACA9F,GAAAA,EAAAA,wBACAC,GAAAA,EAAAA,eACA/I,GAAAA,EAAAA,yBACA97B,GAAAA,EAAU,qBACVC,GAAS,mCACT0qC,GAAAA,EAAAA,gBACkCC,GAAAA,EAAAA,WAClCxpB,GAAAA,EAAAA,UACAG,GAAAA,EAAAA,wCAEJ,GAAoClO,EAAAA,iCACpC,GAAiCrJ,EAAAA,gCAEjC,GAkBe,EAAE,2BAjBb2P,GAAAA,EAAO,wBACPue,GAAAA,EAAS,qBACT5V,IAAc,SACdgb,GAAAA,GAAiB,QACjB/8B,GAAAA,GAAsB,UACtBq9B,GAAAA,GAAAA,eACAC,GAAAA,GAAAA,kBACAE,GAAmB,GAAnBA,uBACAX,GAAAA,GAAAA,qCACAjoB,GAAAA,GAAAA,qCACA0nB,GAAsB,uBACtBN,GAAAA,GAA0B,sBAC1BS,GAAgB,GAAhBA,wBACA9kB,GAAY,GAAZA,uBACAgX,GAAc,GAAdA,2BACAE,GAAc,GAAdA,iBACAD,GAAc,gBAGlB,MAAkD12B,eAAwB,qBAAnEoyC,GAAe,kBACtB,MADwC,iBACkC,YAAnE1pB,GAAe,MACtB,MADwC,iBACwB,YAAzDrP,GAAY,MACnB,MADmC,gBAC+B,YAA3DmP,GAAW,MAClB,MADgC,iBACwD,YAAjF6pB,GAAAA,GAAsB,GAC7B,MAD+BC,IAAAA,UAAuB,GAC0B,MAC3D,SACC,MAOtB,GAAgBn1B,GANQ,cACpB1D,YAAAA,EACAC,eAAAA,GACAC,iBAAiB,GACnB,mDAPK44B,gBAAgB,KASK,GAC5B,GAAiBC,GAAa,GAE9BjtC,GAAgB,GAAM,GAClB,IAAWynB,EAAAA,EAAAA,cACPylB,IAAQ/E,EAAAA,EAAAA,8BACZ,YACA+E,OAAS,wFAEbltC,GAAMrE,KAAW,wBAEbwxC,CAAAA,oBACAlhC,WAKA,OAJA0P,GAAS,MACT,UAEA,KACA,WACD,KAGH3b,GAAAA,mBAIiB,gBAML,WACIotC,QAAAA,SAAiBC,SAAAA,GACrB,yBAEqB,SAAjBv7B,GAA2B+6B,KAAoBQ,GAC/CC,GAAiBD,GAEvB,oBACN,KAGID,IAEJ,YACA,IAAmBG,GACfD,IAAiB,IAErB,4BACF,OAEFttC,GAAgB,sBAGZ,WAC4B,UAAxB3E,EAAMosB,SAAS8lB,MACfC,GAAe,GAEE,cAArBnyC,EAAMosB,SAAS8lB,MAAM,2BAEnBJ,GAAAA,MAEE,sBACJ,cAEAvyB,iBAAAA,KAAyB,GAAK,OAI9B,IAAqB,IAErB,cACA,OAAIiyB,GACO,EAGLU,GACE,EAER,QAEH,8BADG,CAKJ,EAKI,eACA,QAAc,IAAV7pC,EAAJ,CAGA,IAAIoQ,EAAY,CAAKpQ,EAErB,iDAEI,KAAe+pC,IACfD,EAAc,aAAe15B,IAEjC,wBACH,mBAEKu1B,GAAAA,EAAsB,aAbOpmB,MAmBLloB,SAA0BkG,EAAAA,GAI5CkW,SAAAA,EAAAA,SACA+1B,IACJ,wLACH,KACG,GAAI,sCAGX,gCAEKQ,UAQ0Bz5B,SAAU,eACpB,SAASP,SACvBi6B,CACAx5B,YAAAA,EAAwB8F,WACxB/F,eAAiC,iBAAVhP,EAAU,KACjCkP,iBAA2B,iBAAJ,EAAI,KAC9B,6BAAE,4BACN,sBAGGkQ,KAEH,eAED,GAAmB,GACf,MAA+F,iBAClG,yCAEKkmB,OAAAA,EAAAA,WAAAA,GAAuB,OAAG,GAA1BA,KAAAA,OAAAA,EAA2BoD,KAAAA,OAAwB,GACrD,KAGA,GAA8BC,SAA6B,GAE3D,IAAIC,EAAAA,EAAAA,SAEA92B,EAAuBD,GAAY,EAAa,aAEpD,EAAOkK,GAAwB,sBAC3BnK,IAAAA,OACA7Z,GAAQ,KACJ,6BAAE,CACR,oBACL,WAEK+sC,KAAAA,UAGF,GAA2B,SAAgC,oBAE3D,oBACI,EAAiBH,GAAe,EAAY,aAMhD,YAAO5oB,OAA0BnK,IAAAA,GAAiB,kCAAE7Z,IAAQ,mCAAM,6BAAE,CAAW,kBAAiB,EACnG,WAEKgtC,KAAAA,aACMhtC,MAGR,GAA2B,WAE3B,IAAI,EAAC6wC,EAAAA,SAEL,EAEI7sB,GAAAA,OAAuB,aACnBnK,EAAAA,GAAiB,6BACjB7Z,IAAQ,mCACF,kCACR,oBAET,WAEO0E,KAAAA,cAER,EACI,GACKoV,EACDkK,kBACInK,EAAAA,iDAaZ,+BACA,IAAMi3B,IAAAA,GAA0B,EAA1BA,OAA2BC,IAAAA,cAA8C,oBACjB,GAAmB,gCAAe,qBAAC,kCAE3FC,OAAAA,IAAAA,CACN,GACA,EACMC,GAAAA,GAAqC7B,cAAAA,EAAAA,GAA2B,MAEhE8B,GAAwBlrB,GACxBgrB,cAA8DvC,EAAyB,GACvF0C,MAEAC,KAA4BprB,WACsC,GAAI0oB,+BAG5E,kCACMlF,GAAwB6H,GAAiB,IAE5BrtC,GACbktC,EACAE,KAAyB,IAAiC,UAM1DE,GAAAA,IAAiCH,GAAgC1C,KAAAA,EAAAA,cAAAA,IAA8B,WAC/F8C,GAAiCP,IAAgCvC,EAA8B,UAE/FnwB,GAAiCta,IAAoBwtC,EAAiD,UAExGxxC,GAA8B,IAA+Bg2B,EACtD,KAAY,GAAS5d,IAAAA,EAAAA,KAAe,kCAC/C,OAAIpY,KAAagE,EAAAA,cAAAA,KAAqB,KAAK+V,EAAAA,cAAAA,QAA2B,kBAAS,YAACiS,GAAIylB,EAAAA,OAAAA,cAE/E33B,KAAa,yBAA0BtV,EAKS,IACrC,GAAC,EAAoB,kCACX,iGACN,sCACA,kBAAyBktC,GAAAA,CAC3B,UACG,uBAAU,GAAe,wBAnLpB,WACtB,IAAuB,MAmLQ,yBAAgC,2BAC7B,yBAAyC,UAClDzJ,kCAIU,wBAA+B,qDAEtC,EAAM,wCACNxoC,UAAU,iCACE,kBAAG,QACf,GAAI,IACJ,UAAM,wCACN,YAAO,IACP,KAAK,MAAS,kBAGV,gBACA,MAAM,UACQY,IAAAA,cAAoBL,EAAAA,SAAQ,CAC1C,0KACF,OAGb,CACI,UAAU,kCAEK+vC,IAAAA,cAAiB/4B,MAAW,CACxC,UAAUhX,mCACI,kBAAmB0V,EAAAA,QAAe,CAChD,cAAwBq6B,WACxB,YACA,eAAe,GAAkB,eACjC,uBAAaU,GAAAA,uBACf,sBACF,GAAC,sBACG,gBAAc55B,GAAa,gBAC3B,YAAG,KACG,sBACN,aAAYrS,GACZ,OACA,UACA,aACA,eAAkB,kBAEF,EACP,eAAgB,GAAiB,oBAAU,GAAM,IAClD,kBAAe,MACVmkB,CAEO,qBAAgB,4BACRtC,QACAC,IAAAA,cAA2B,aAAK,4CAC7B,WACH6b,GACJ,OAEJ,IAIJ,EACA,SAAOjlB,KACQ0vB,IAAAA,cAAc,GAC7B,wBAAc9yB,GACd,QACI,gBACA9Z,aAAagE,EAMjB,sBAEA,yBAAkC,aAClC,gBACA,kBACA,gBAAYY,GACZ,kCAAwBmoC,GACxB,kCAAwBC,GACxB,aACA,uBAAqBZ,GACrB,uBAAqBqE,GACrB,wBAAmB,GACnB,uBACA,oBAAkB/pB,GAClB,SAAU,GACV,wBAAsBijB,EACtB,mBACA,WAAW9mB,EACX,wBACA,iCAA0B8qB,GAC1B,YACA,gCAA4BrnB,GAC5B,yBAAyBnO,GAC3B,kCAIE,GACP,2BAAgB,GAAiB,wBAAU,OAC3CnY,IAAkC,kBAC/B,OACI,qBAAc8Z,gBACd,oBAKA,KAAYqyB,EAAAA,cAAAA,SAAW,qBACvB,aAAY3nC,EACZ,sBAAcyY,IAAa,MAC3B,aACA,aACA,gBACA,mBACA,kBAAUjd,EAEjB,oBACagE,GAEN,oBAAa,GACb,cACA,KAAc8V,EAAAA,cAAAA,KAAa,qBAC3B,QACA,gBACA,eACA,wBAAuB,EACvB,sBAAuB,GACvB,uBAAwBizB,GACxB,aACA,aACA,uBAAc9vB,GACd,uBAAiB8kB,GACjB,sBApMxB,kBACF,kCACR,oBAET,YAEKpZ,KAAAA,OAIN,EA2L4C,gBACA,mBACA,kBAAmB,EACnB,oBAAmB,GACnB,oBAAqB,GACrB,uBAEP,SAGH,GAEN,UAAU3oB,EACV,wBAAyB,OACR,kBAAE2xC,EAAAA,QAAsB,CACzC,YACA,eACA,qBACA,mBAGF,kCACD,GACkB,2BAAmBA,GAAyB,qBAC/D,UAAC,cAAa,yBACA,uDACV,kBAASrQ,KACT,kBAAmBmP,EAAAA,QAA2B,CAC9C,WACA,WACF,kBACF,GAAK,YAAU,GAA4B,cACvC,IAAK,OACI,kBAAgB,OACrB,UAAMtvC,8BACI,0BACZ,sBACG,sBAAU,MAAiC,UACnC,oCACK,kBAAkB,OAC/B,UACS,mCACI,8BAAkB,8BAC/B,kBAIb,4IACInB,KAAUA,EAAAA,cAAAA,KAAS,8BACnB,kBAAc6W,4JACGgqB,IAAAA,cAAgB,GACjC,YACA,aAAc,GACd,gBAAgB3M,GAClB,eACF,GAAmB,eAAUl0B,GAAY,eACzC,KAA4BA,IAAAA,cAAAA,EAAAA,QAAAA,CAAY,cAGPA,IAAAA,cAAAA,EAAAA,QAAAA,CAAY,cAE/BA,IAAAA,cAAS,4GACnB,SAAS,KACG+E,IAAAA,cAAW,KACvB,YACA,UAAU,GACV,WAAYP,GACZ,gCAAmB8Z,GACrB,WAEJ,GAGF,WAAY,EACZ,kBAAM,OAEE,kBAAkB,wBACV,gBACG,gDACU,wDACrB,OAAE,CACF,QAAU,GAAO,mBAAK,sCAE7B,oCACD,IAAQ,OAA4E,SAAK,+BACzF,MACA,kBAAiB,uDAGT,gBAAkB,8BACV,mCAAEszB,EAAyD,qDACrE,QAEE,sBAAO,2CAEC,kCAAEC,EAAqD,mDACjE,QAID,iEAxP0C,kBAAQ,WAAG,CAE1E,m/KEhbG,IAAMC,GAAmB,CAC5BC,UClBJ,SAAgB,KACdlzC,OADc,IAEXT,EAAK,gBACJ,4BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,qGAAqGF,KAAK,YAAY,0BAAME,EAAE,8HAA8HF,KAAK,SAAe,EDgB7WizC,WEnBJ,SAAgB,KACdnzC,OADc,IAEXT,EAAK,gBACJ,4BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,qGAAqGF,KAAK,YAAY,0BAAME,EAAE,uPAAuPF,KAAK,SAAe,EFiBtekzC,QGpBJ,SAAgB,KACdpzC,OADc,IAEXT,EAAK,gBACJ,4BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,qGAAqGF,KAAK,YAAY,0BAAMmzC,SAAS,UAAUC,SAAS,UAAUlzC,EAAE,yFAAyFF,KAAK,SAAS,0BAAME,EAAE,4HAA4HF,KAAK,SAAS,0BAAMmzC,SAAS,UAAUC,SAAS,UAAUlzC,EAAE,yOAAyOF,KAAK,SAAe,EHkBryBqzC,OIrBJ,SAAgB,KACdvzC,OADc,IAEXT,EAAK,gBACJ,4BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,qGAAqGF,KAAK,YAAY,0BAAME,EAAE,umDAAumDF,KAAK,SAAS,0BAAME,EAAE,gbAAgbF,KAAK,SAAe,EJmB5xEszC,aKtBJ,SAAgB,KACdxzC,OADc,IAEXT,EAAK,gBACJ,4BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,qGAAqGF,KAAK,YAAY,0BAAME,EAAE,umDAAumDF,KAAK,SAAS,0BAAME,EAAE,gbAAgbF,KAAK,SAAe,ELoB5xEuzC,YMvBJ,SAAgB,KACdzzC,OADc,IAEXT,EAAK,gBACJ,4BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,qGAAqGF,KAAK,YAAY,0BAAMmzC,SAAS,UAAUC,SAAS,UAAUlzC,EAAE,sSAAsSF,KAAK,SAAe,ENqB3jBwzC,MOxBJ,SAAgB,KACd1zC,OADc,IAEXT,EAAK,gBACJ,4BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,qGAAqGF,KAAK,YAAY,0BAAME,EAAE,uPAAuPF,KAAK,SAAe,EPsBteyzC,iBQzBJ,SAAgB,KACd3zC,OADc,IAEXT,EAAK,gBACJ,4BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,qGAAqGF,KAAK,YAAY,0BAAME,EAAE,oUAAoUF,KAAK,SAAe,ERuBnjB0zC,IS1BJ,SAAgB,KACd5zC,OADc,IAEXT,EAAK,gBACJ,4BAAKU,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCZ,GAAO,0BAAMa,EAAE,qGAAqGF,KAAK,YAAY,uBAAG2zC,SAAS,mCAAmC3zC,KAAK,QAAO,0BAAMmzC,SAAS,UAAUC,SAAS,UAAUlzC,EAAE,uGAAuG,0BAAMA,EAAE,8EAAiF,8BAAM,8BAAUuN,GAAG,8BAA6B,0BAAMzN,KAAK,OAAOuP,UAAU,iBAAiBrP,EAAE,mBAAyC,GTkCxoB,SAR+B,SAAH,GAAqF,IAA/EO,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAWC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAC/CgzC,EAAiBb,GAAiBtyC,GAExC,OAAOmzC,EACH,kBAACA,EAAc,CAAClzC,UAAWA,EAAWI,MAAO,CAAEC,MAAOJ,EAAMK,OAAQL,GAAQC,QAASA,IACrF,IACR,EUTA,SAtBiC,SAAH,GAA8E,IAAxEH,EAAI,EAAJA,KAAMuB,EAAI,EAAJA,KAAM6xC,EAAW,EAAXA,YAAanzC,EAAS,EAATA,UAAWozC,EAAW,EAAXA,YACpE,OACI,yBACIhzC,MAAO,CACHizC,QAASF,EAAc,GAAK,OAEhC,cAAY,gCACZnzC,UAAWA,GAEX,kBAAC,GAAsB,CAACD,KAAMA,EAAME,KAAM,GAAID,UAAU,8BACxD,kBAAC,EAAAe,KAAI,CAACoC,GAAG,IAAIpB,OAAO,SAASqd,YAAY,KAAKnf,KAAK,MAAMuE,MAAM,OAAOxE,UAAU,6BAC3EsB,GAEJ8xC,GACG,0BAAMpzC,UAAU,4BAA4BI,MAAO,CAAEkzC,QAASF,EAAc,QAAU,SAAS,KAM/G,2nFChBA,IAkGMG,GAAsB,SAACrrB,EAAmBoM,GAC5C,OAAQpM,GACJ,KAAKgQ,EAAAA,GAAAA,cACD,OAAO5D,GAAU3zB,EAAAA,EAAAA,UAAS,iBAAkBA,EAAAA,EAAAA,UAAS,iBACzD,KAAKu3B,EAAAA,GAAAA,cACD,OAAOv3B,EAAAA,EAAAA,UAAS,iBACpB,KAAKu3B,EAAAA,GAAAA,kBACD,OAAOv3B,EAAAA,EAAAA,UAAS,qBACpB,KAAKu3B,EAAAA,GAAAA,cACD,OAAO5D,GAAU3zB,EAAAA,EAAAA,UAAS,mBAAoBA,EAAAA,EAAAA,UAAS,mBAC3D,KAAKu3B,EAAAA,GAAAA,cACD,OAAOv3B,EAAAA,EAAAA,UAAS,mBACpB,KAAKu3B,EAAAA,GAAAA,kBACD,OAAOv3B,EAAAA,EAAAA,UAAS,uBACpB,KAAKu3B,EAAAA,GAAAA,iBACD,OAAOv3B,EAAAA,EAAAA,UAAS,sBACpB,KAAKu3B,EAAAA,GAAAA,QACD,OAAO5D,GAAU3zB,EAAAA,EAAAA,UAAS,mBAAoBA,EAAAA,EAAAA,UAAS,mBAC3D,KAAK4D,EAAAA,GAAAA,QACD,OAAO+vB,GAAU3zB,EAAAA,EAAAA,UAAS,iBAAkBA,EAAAA,EAAAA,UAAS,WACzD,KAAK4D,EAAAA,GAAAA,QACD,OAAO+vB,GAAU3zB,EAAAA,EAAAA,UAAS,iBAAkBA,EAAAA,EAAAA,UAAS,WACzD,QACI,OAAO2zB,GAAU3zB,EAAAA,EAAAA,UAAS,cAAeA,EAAAA,EAAAA,UAAS,QAE9D,EAgBM6yC,KACG7yC,EAAAA,EAAAA,UAAS,iBACFA,EAAAA,EAAAA,UAAS,wBAInB8yC,GAAiB,SAACvrB,GACpB,OAAQA,GACJ,KAAK2I,EAAAA,GAAAA,UACD,MAAO,UACX,KAAKA,EAAAA,GAAAA,UACD,MAAO,YACX,KAAKA,EAAAA,GAAAA,IACD,MAAO,WACX,KAAKtsB,EAAAA,GAAAA,QACD,MAAO,SACX,KAAKA,EAAAA,GAAAA,QACD,MAAO,UACX,QACI,MAAO,OAEnB,EAGMmvC,GAAgB,SAACC,GACnB,OAAOA,EAAkB1rB,cAAgB4I,EAAAA,GAAAA,OAAqBA,EAAAA,GAAAA,UAAwB8iB,EAAkB1rB,WAC5G,EAcM2rB,GAAa,WAAH,MAAU,CACtBvnB,SAAU,SACVwnB,sBAAsBlzC,EAAAA,EAAAA,UAAS,oBAC/BmzC,OAAQ,WACRC,oBAAoBpzC,EAAAA,EAAAA,UAAS,gBAC7BqzC,qBAAsB,kBACtBC,kCAAkCtzC,EAAAA,EAAAA,UAAS,wBAC3CuzC,aAAc,2BACdC,0BAA0BxzC,EAAAA,EAAAA,UAAS,gBACnCyzC,WAAWzzC,EAAAA,EAAAA,UAAS,wBACpB0zC,uBAAuB1zC,EAAAA,EAAAA,UAAS,yCAChC2zC,kBAAmB,GACtB,EA2FKC,GAAyD,CAC3DtsB,YAAa4I,EAAAA,GAAAA,IACbx0B,KAAM,UACNm4C,aAAc,CACVC,oBAAqB,CACjBC,qBAAsB,CAAC,KAE3BC,WAAY,CACR9xB,IAAK,CAAC,IACN+xB,gBAAiB,CAAC,KAEtBC,OAAQ,CAAC,KAEb3sB,UAAWzhB,EAAAA,GAAAA,IACXgtB,iBAAkB,GAClBlzB,SAAUgE,EAAAA,GAAAA,SAGRuwC,GAAyD,CAC3D7sB,YAAa4I,EAAAA,GAAAA,IACbx0B,KAAM,UACNm4C,aAAc,CACVC,oBAAqB,CACjBC,qBAAsB,CAAC,KAE3BC,WAAY,CACR9xB,IAAK,CAAC,IACN+xB,gBAAiB,CAAC,KAEtBC,OAAQ,CAAC,KAEb3sB,UAAWzhB,EAAAA,GAAAA,IACXgtB,iBAAkB,GAClBlzB,SAAUgE,EAAAA,GAAAA,k/BC/Sd,SAfuC,SAAH,GAA6D,IAAvDovC,EAAiB,EAAjBA,kBAAmBrf,EAAO,EAAPA,QAInDygB,EAA+B,GDDT,SAC5BpB,EACAqB,EACA1gB,GAEA,IACM2gB,EADcvB,GAAcC,GACQ3kB,OAAO,IAAK2kB,EAAkBzrB,WAElEgtB,EACFD,IAA0B/c,EAAAA,GAAAA,kBAC1B+c,IAA0B/c,EAAAA,GAAAA,mBAC1B5D,GACAqf,EAAkBpzC,WAAagE,EAAAA,GAAAA,SAC/BovC,EAAkBpzC,WAAagE,EAAAA,GAAAA,SAC/BywC,IAAoBtd,EAAAA,GAAAA,IACnBic,EAAkBpzC,WAAagE,EAAAA,GAAAA,KAA+C,YAA1B0wC,GAC/Ct0C,EAAAA,EAAAA,UAAS,UACTA,EAAAA,EAAAA,UAAS,yBAEnB,OAAQgzC,EAAkB1rB,aACtB,KAAK4I,EAAAA,GAAAA,OACD,MAAO,CACH,CAAE9wB,KAAM,aAAcuB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GACjE,CAAEpzC,KAAM,UAAWuB,MAAMX,EAAAA,EAAAA,UAAS,WAAYwyC,aAAa,GAC3D,CAAEpzC,KAAM,YAAauB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GAChE,CAAEpzC,KAAM,SAAUuB,MAAMX,EAAAA,EAAAA,UAAS,UAAWwyC,aAAa,GACzD,CAAEpzC,KAAM,eAAgBuB,MAAMX,EAAAA,EAAAA,UAAS,iBAAkBwyC,aAAa,GACtE,CAAEpzC,KAAM,cAAeuB,MAAMX,EAAAA,EAAAA,UAAS,eAAgBwyC,aAAa,GACnE,CAAEpzC,KAAM,QAASuB,KAAM4zC,EAAa/B,aAAa,GACjD,CAAEpzC,KAAM,mBAAoBuB,MAAMX,EAAAA,EAAAA,UAAS,oBAAqBwyC,aAAa,GAC7E,CAAEpzC,KAAM,MAAOuB,MAAMX,EAAAA,EAAAA,UAAS,OAAQwyC,aAAa,IAE3D,KAAKtiB,EAAAA,GAAAA,UACD,OAAQ8iB,EAAkBzrB,WACtB,KAAKzhB,EAAAA,GAAAA,aACD,MAAO,CACH,CAAE1G,KAAM,aAAcuB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,EAAMC,aAAa,GACpF,CAAErzC,KAAM,QAASuB,KAAM4zC,EAAa/B,aAAa,GACjD,CAAEpzC,KAAM,SAAUuB,MAAMX,EAAAA,EAAAA,UAAS,UAAWwyC,aAAa,GACzD,CAAEpzC,KAAM,eAAgBuB,MAAMX,EAAAA,EAAAA,UAAS,iBAAkBwyC,aAAa,GACtE,CAAEpzC,KAAM,cAAeuB,MAAMX,EAAAA,EAAAA,UAAS,eAAgBwyC,aAAa,GACnE,CAAEpzC,KAAM,mBAAoBuB,MAAMX,EAAAA,EAAAA,UAAS,oBAAqBwyC,aAAa,IAErF,KAAK1sC,EAAAA,GAAAA,OACD,MAAO,CACH,CAAE1G,KAAM,aAAcuB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GACjE,CAAEpzC,KAAM,UAAWuB,MAAMX,EAAAA,EAAAA,UAAS,WAAYwyC,aAAa,GAC3D,CAAEpzC,KAAM,YAAauB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GAChE,CAAEpzC,KAAM,SAAUuB,MAAMX,EAAAA,EAAAA,UAAS,UAAWwyC,aAAa,GACzD,CAAEpzC,KAAM,eAAgBuB,MAAMX,EAAAA,EAAAA,UAAS,iBAAkBwyC,aAAa,GACtE,CAAEpzC,KAAM,cAAeuB,MAAMX,EAAAA,EAAAA,UAAS,eAAgBwyC,aAAa,GACnE,CAAEpzC,KAAM,QAASuB,KAAM4zC,EAAa/B,aAAa,GACjD,CAAEpzC,KAAM,mBAAoBuB,MAAMX,EAAAA,EAAAA,UAAS,oBAAqBwyC,aAAa,GAC7E,CAAEpzC,KAAM,MAAOuB,MAAMX,EAAAA,EAAAA,UAAS,OAAQwyC,aAAa,IAE3D,QACI,MAAO,CACH,CAAEpzC,KAAM,aAAcuB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GACjE,CAAEpzC,KAAM,UAAWuB,MAAMX,EAAAA,EAAAA,UAAS,WAAYwyC,aAAa,GAC3D,CAAEpzC,KAAM,YAAauB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GAChE,CAAEpzC,KAAM,SAAUuB,MAAMX,EAAAA,EAAAA,UAAS,UAAWwyC,aAAa,GACzD,CAAEpzC,KAAM,eAAgBuB,MAAMX,EAAAA,EAAAA,UAAS,iBAAkBwyC,aAAa,GACtE,CAAEpzC,KAAM,cAAeuB,MAAMX,EAAAA,EAAAA,UAAS,eAAgBwyC,aAAa,GACnE,CAAEpzC,KAAM,QAASuB,KAAM4zC,EAAa/B,aAAa,GACjD,CAAEpzC,KAAM,mBAAoBuB,MAAMX,EAAAA,EAAAA,UAAS,oBAAqBwyC,aAAa,GAC7E,CAAEpzC,KAAM,MAAOuB,MAAMX,EAAAA,EAAAA,UAAS,OAAQwyC,aAAa,IAGnE,KAAKtiB,EAAAA,GAAAA,IACL,QACI,OAAI8iB,EAAkBpzC,WAAagE,EAAAA,GAAAA,IACxB,CACH,CAAExE,KAAM,aAAcuB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GACjE,CAAEpzC,KAAM,UAAWuB,MAAMX,EAAAA,EAAAA,UAAS,WAAYwyC,aAAa,GAC3D,CAAEpzC,KAAM,YAAauB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GAChE,CAAEpzC,KAAM,SAAUuB,MAAMX,EAAAA,EAAAA,UAAS,UAAWwyC,aAAa,GACzD,CAAEpzC,KAAM,eAAgBuB,MAAMX,EAAAA,EAAAA,UAAS,iBAAkBwyC,aAAa,GACtE,CAAEpzC,KAAM,cAAeuB,MAAMX,EAAAA,EAAAA,UAAS,eAAgBwyC,aAAa,GACnE,CAAEpzC,KAAM,QAASuB,KAAM4zC,EAAa/B,aAAa,GACjD,CAAEpzC,KAAM,mBAAoBuB,MAAMX,EAAAA,EAAAA,UAAS,oBAAqBwyC,aAAa,GAC7E,CAAEpzC,KAAM,MAAOuB,MAAMX,EAAAA,EAAAA,UAAS,OAAQwyC,aAAa,IAGpD,CACH,CAAEpzC,KAAM,aAAcuB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GACjE,CAAEpzC,KAAM,UAAWuB,MAAMX,EAAAA,EAAAA,UAAS,WAAYwyC,aAAa,GAC3D,CAAEpzC,KAAM,YAAauB,MAAMX,EAAAA,EAAAA,UAAS,cAAewyC,aAAa,GAChE,CAAEpzC,KAAM,SAAUuB,MAAMX,EAAAA,EAAAA,UAAS,UAAWwyC,aAAa,GACzD,CAAEpzC,KAAM,eAAgBuB,MAAMX,EAAAA,EAAAA,UAAS,iBAAkBwyC,aAAa,GACtE,CAAEpzC,KAAM,cAAeuB,MAAMX,EAAAA,EAAAA,UAAS,eAAgBwyC,aAAa,GACnE,CAAEpzC,KAAM,QAASuB,KAAM4zC,EAAa/B,aAAa,GACjD,CAAEpzC,KAAM,mBAAoBuB,MAAMX,EAAAA,EAAAA,UAAS,oBAAqBwyC,aAAa,GAC7E,CAAEpzC,KAAM,MAAOuB,MAAMX,EAAAA,EAAAA,UAAS,OAAQwyC,aAAa,IAGnE,CC9F6CgC,CAAwBxB,GAHzC9sC,EAAAA,EAAAA,MAAhB8R,YAC4Bq8B,gBAEiE1gB,IAErG,OACI,yBAAKt0B,UAAW,8BAA+B,cAAY,6CACtD+0C,EAAS5rC,KAAI,SAAArB,GAAI,OACd,kBAAC,GAAwB,IAACiC,IAAKjC,EAAKxG,MAAUwG,EAAI,CAAE9H,UAAU,wCAAwC,IAItH,ECyDA,SAnEsC,SAAH,GAA6D,IAAvD2zC,EAAiB,EAAjBA,kBAAmBrf,EAAO,EAAPA,QAGlD8gB,EF+LyB,SAACltB,GAChC,IAAMmtB,EAAoB,SACtBrB,EACAE,EACAE,EACAE,EACAD,GAA6B,IAC7BhoB,EAAmB,UAAH,6CAAGunB,KAAavnB,SAAQ,gBAErCunB,MAAY,IACfI,qBAAAA,EACAE,aAAAA,EACAE,UAAAA,EACAE,kBAAAA,EACAD,sBAAAA,EACAhoB,SAAAA,GAAQ,EAGZ,OAAQnE,GACJ,KAAKgQ,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACD,OAAOmd,EACH,kBACA,0BACA10C,EAAAA,EAAAA,UAAS,yDACTA,EAAAA,EAAAA,UAAS,iCACTA,EAAAA,EAAAA,UAAS,0CAEjB,KAAKu3B,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACD,OAAOmd,EACH,gBACA,WACA10C,EAAAA,EAAAA,UAAS,yCACT,IACAA,EAAAA,EAAAA,UAAS,0CAEjB,KAAKu3B,EAAAA,GAAAA,iBACD,OAAOmd,EACH,iBACA,UACA10C,EAAAA,EAAAA,UAAS,wCACTA,EAAAA,EAAAA,UAAS,6BACTA,EAAAA,EAAAA,UAAS,yCACT,SAER,KAAKu3B,EAAAA,GAAAA,uBACD,OAAOmd,EACH,qCACA,SACA10C,EAAAA,EAAAA,UAAS,yBACTA,EAAAA,EAAAA,UAAS,qFACT,GACA,cAGR,KAAKu3B,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACL,QACI,OAAO0b,KAEnB,CE9P8B0B,CAFN5B,GAAcC,GACQ3kB,OAAO,IAAK2kB,EAAkBzrB,YAGhE8sB,GADgBnuC,EAAAA,EAAAA,MAAhB8R,YACAq8B,gBACR,OACI,yBACIh1C,UAAWgC,IAAW,qCAAsC,CACxD,2CAA4CsyB,KAGhD,yBAAKt0B,UAAU,iDACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,KAAKpB,OAAO,OAAO9B,KAAK,IAAIuE,MAAM,UACtC4wC,EAAkB/oB,UAEvB,kBAAC,EAAAtrB,KAAI,CAACoC,GAAG,IAAIlD,KAAK,OAAOuE,MAAM,UAC1BwwC,IAAoBtd,EAAAA,GAAAA,OAAgB0d,EAAkBvB,sBAAuBlzC,EAAAA,EAAAA,UAAS,cAG9Fq0C,IAAoBtd,EAAAA,GAAAA,QACjB,yBAAK13B,UAAU,iDACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,KAAKpB,OAAO,OAAO9B,KAAK,IAAIuE,MAAM,UACtC4wC,EAAkBtB,QAEvB,kBAAC,EAAA/yC,KAAI,CAACoC,GAAG,IAAIlD,KAAK,OAAOuE,MAAM,UAC1B4wC,EAAkBrB,sBAI7Bzf,GACE,kBAAC,aAAc,KACX,yBAAKt0B,UAAU,iDACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,KAAKpB,OAAO,OAAO9B,KAAK,KAAKuE,MAAM,UACvC4wC,EAAkBpB,sBAEvB,kBAAC,EAAAjzC,KAAI,CAACoC,GAAG,IAAIlD,KAAK,OAAOuE,MAAM,UAC1B4wC,EAAkBnB,mCAG3B,yBAAKj0C,UAAU,iDACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,KAAKpB,OAAO,OAAO9B,KAAK,KAAKuE,MAAM,UACvC4wC,EAAkBlB,cAEvB,kBAAC,EAAAnzC,KAAI,CAACoC,GAAG,IAAIlD,KAAK,OAAOuE,MAAM,UAC1B4wC,EAAkBjB,2BAG3B,yBAAKn0C,UAAU,iDACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,KAAKpB,OAAO,OAAO9B,KAAK,KAAKuE,MAAM,UACvC4wC,EAAkBhB,WAEtBgB,EAAkBd,mBACf,kBAAC,EAAAvzC,KAAI,CAACoC,GAAG,IAAIlD,KAAK,OAAOuE,MAAM,UAC1B4wC,EAAkBd,mBAG3B,kBAAC,EAAAvzC,KAAI,CAACoC,GAAG,IAAIlD,KAAK,OAAOuE,MAAM,UAC1B4wC,EAAkBf,yBAO/C,2DCxBA,SA1CoC,SAAH,GAAyE,IAAnEV,EAAiB,EAAjBA,kBAAmBjsB,EAAU,EAAVA,WAAY4M,EAAO,EAAPA,QAC5DrM,EAAeP,EAAgD,OAAnCgsB,GAAcC,GAC1CsB,EAAwBhtB,EAAY+G,OAAO,IAAK2kB,EAAkBzrB,WAClEqtB,EACF5B,EAAkBpzC,WAAagE,EAAAA,GAAAA,SAAyBovC,EAAkBpzC,WAAagE,EAAAA,GAAAA,QACjFkvC,GAAeE,EAAkBpzC,UACjCkzC,GAAexrB,GACnButB,EACF7B,EAAkBpzC,WAAagE,EAAAA,GAAAA,SAAyBovC,EAAkBpzC,WAAagE,EAAAA,GAAAA,QACjFgvC,GAAoBI,EAAkBpzC,SAAU+zB,GAChDif,GAAoB0B,EAAuB3gB,GAC/CmhB,GAA8B90C,EAAAA,EAAAA,UAChC,0IAGJ,OACI,kBAAC,aAAc,KACX,yBAAKX,UAAW,kCACZ,kBAAC,KAAuB,CAACD,KAAMw1C,EAAwBt1C,KAAM,KAC7D,yBAAKD,UAAU,6CACX,kBAAC,EAAAe,KAAI,CAACoC,GAAG,KAAKpB,OAAO,OAAO9B,KAAK,KAAKuE,MAAM,UACvCgxC,GAEJP,IAA0B/c,EAAAA,GAAAA,kBACvB,kBAAC,EAAA13B,QAAO,CACJC,UAAU,SACVT,UAAU,qCACVa,gBAAgB,0CAChBd,KAAK,OACLsmB,sBAAoB,EACpBC,yBAAuB,EACvB5lB,QAAS+0C,EACT30C,OAAQ,SAKxB,wBAAId,UAAU,kCAG1B,ECzBA,SAjBwC,SAAH,GAAoD,IAC/E01C,EJgIe,SAACxtB,GACtB,OAAQA,GACJ,KAAK3jB,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,KACD,OAAO5D,EAAAA,EAAAA,UAAS,uBACpB,KAAK4D,EAAAA,GAAAA,IACL,QACI,OAAO5D,EAAAA,EAAAA,UAAS,gBAE5B,CI1I2Bg1C,CADiC,EAAjBhC,kBACmBpzC,UACpDq1C,EAA8BF,IJ2K3BlC,GACM,QAGA,OI7Kf,OACI,yBACIxzC,UAAWgC,IAAW,qCAAsC,CACxD,iDAAkD0zC,IAAmBlC,MAGzE,kBAAC,EAAAzyC,KAAI,CAACoC,GAAG,IAAIpB,OAAO,OAAO9B,KAAK,OAAOuE,MAAM,SAASE,MAAOkxC,GACxDF,GAIjB,qiCC4HA,UAhIiCruC,EAAAA,EAAAA,KAAS,YAA0D,IAAvDssC,EAAiB,EAAjBA,kBAAmBrf,EAAO,EAAPA,QACtDkc,GAAUt1B,EAAAA,EAAAA,cAEV+M,EAAcyrB,GAAcC,GAC5BsB,EAAwBhtB,EAAY+G,OAAO,IAAK2kB,EAAkBzrB,WACxE,GAKIrhB,EAAAA,EAAAA,MAJW+zB,EAAG,EAAdD,QAAWC,IACX5T,EAAM,EAANA,OACAlpB,EAAM,EAANA,OACA6a,EAAW,EAAXA,YAIAiP,EAKAgT,EALAhT,eACAC,EAIA+S,EAJA/S,iCACAhiB,EAGA+0B,EAHA/0B,uBACAC,EAEA80B,EAFA90B,2BACA0X,EACAod,EADApd,aAEIq4B,EAAel9B,EAAfk9B,WACAruB,EAAwBR,EAAxBQ,oBAGJviB,EAQAnH,EARAmH,eACAqC,EAOAxJ,EAPAwJ,iBACA6f,EAMArpB,EANAqpB,qCACAC,EAKAtpB,EALAspB,yCACA/M,EAIAvc,EAJAuc,aACAlV,EAGArH,EAHAqH,WACAmJ,EAEAxQ,EAFAwQ,mBACAjJ,EACAvH,EADAuH,gBAGJ,GAMIc,EAAAA,EAAAA,6BAA4BlB,GAL5BwjB,EAAwB,EAAxBA,yBACAqtB,EAAwC,EAAxCA,yCACAC,EAA+B,EAA/BA,gCACAzvC,EAAgB,EAAhBA,iBAIE6iB,GAHS,EAAXT,YAGoB,CACpBxM,SAAUoY,EAAUhiB,EAAAA,GAAAA,KAAgBA,EAAAA,GAAAA,KACpC9J,KAAMyf,IAGoF,KAArB3kB,IAAAA,UAAe,GAAM,GAAvFwkB,EAA8B,KAAEC,EAA8B,KACjEiuB,GAAmB,EAEnBrC,EAAkBpzC,WAAagE,EAAAA,GAAAA,IAC/ByxC,ELgUkB,SAACx4B,EAAwD1V,EAAcwsB,GAAiB,OAC9G3qB,OAAOC,QAAQ4T,GAAclU,MAAK,YAAkB,cAAhBS,EAAG,KAAEnM,EAAK,KACJ,KAAfkK,EAAKgW,MAAM,KAAI,GAA/BgL,EAAM,KAAEtgB,EAAI,KACbugB,EAAuBuL,EAAUhiB,EAAAA,GAAAA,KAAgBA,EAAAA,GAAAA,KACvD,OACI1U,EAAMqqB,cAAgBa,GACtBlrB,EAAMorB,wBAA0BxgB,GAChC5K,EAAMwX,eAAiB2T,GACvBhf,EAAIhD,SAASxC,EAAAA,GAAAA,IAErB,GAAE,CK1UqBskB,CAAkBrL,EAAcy3B,EAAuB3gB,GACnEqf,EAAkBpzC,WAAagE,EAAAA,GAAAA,QACtCyxC,EL0UsB,SAACx4B,EAAwD8W,GAAiB,OACpG3qB,OAAOC,QAAQ4T,GAAclU,MAAK,YAAkB,cAAhBS,EAAG,KAAEnM,EAAK,KACpCmrB,EAAuBuL,EAAUhiB,EAAAA,GAAAA,KAAgBA,EAAAA,GAAAA,KACvD,OAAO1U,EAAMwX,eAAiB2T,GAAwBhf,EAAIhD,SAASxC,EAAAA,GAAAA,QACvE,GAAE,CK9UqB0xC,CAAsBz4B,EAAc8W,GAChDqf,EAAkBpzC,WAAagE,EAAAA,GAAAA,UACtCyxC,EL8UsB,SAACx4B,EAAwD8W,GAAiB,OACpG3qB,OAAOC,QAAQ4T,GAAclU,MAAK,YAAkB,cAAhBS,EAAG,KAAEnM,EAAK,KACpCmrB,EAAuBuL,EAAUhiB,EAAAA,GAAAA,KAAgBA,EAAAA,GAAAA,KACvD,OAAO1U,EAAMwX,eAAiB2T,GAAwBhf,EAAIhD,SAASxC,EAAAA,GAAAA,QACvE,GAAE,CKlVqB2xC,CAAsB14B,EAAc8W,IAG3DhxB,IAAAA,WAAgB,WAIZ,GAHI+W,IAAiBlV,GACjBE,KAECyiB,EAAgC,CACjC,IAAInZ,EAAqC,CAAC,EACrCrH,EAMDqH,EAAwBrH,EALxBnK,EAAAA,GAAAA,WAAAA,QAAAA,cAAoC2R,MAAK,SAACvS,GACtCoS,EAAwBpS,EAASqS,aACjCN,EAAmB/R,EAASqS,aAChC,IAIJ,MACID,EADIjH,EAAO,EAAPA,QAAS+B,EAAc,EAAdA,eAAgBV,EAAa,EAAbA,cAAeM,EAAyB,EAAzBA,0BAA2BT,EAAsB,EAAtBA,uBAEvElB,GAAW+B,GAAkBV,GAAiBM,GAA6BT,GAC3Emf,GAA+B,EAEvC,CACJ,GAAG,CACCzgB,EACAwgB,EACAzN,EACAlV,EACAmJ,EACAjJ,IAGJ,IAAM8wC,ELiO0B,SAChClB,EACAxsB,EACAqtB,EACAC,EACAzvC,EACAoiB,EACAvB,EACAC,EACAU,EACAwM,GAEA,OAAQ2gB,GACJ,KAAK/c,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACD,OAAO,EACX,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACD,SACI6d,GACCttB,GACAtB,IACDW,IACAxhB,GAKR,KAAK4xB,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACD,SACI4d,GACCrtB,GACArB,IACDU,IACAxhB,GAMR,KAAK4xB,EAAAA,GAAAA,iBACD,SAAI6d,GAAmCzvC,GAAoBwhB,GAK/D,KAAKoQ,EAAAA,GAAAA,uBACD,SAAK4d,GAA4CxvC,GAAqBguB,GAI1E,QACI,OAAO,EAEnB,CKzRuC8hB,CAC/BnB,EACAxsB,EACAqtB,EACAC,EACAzvC,EACAoiB,EACAvB,EACAC,EACAU,EACAwM,GAmBJ,OACI,kBAAC,EAAArzB,OAAM,CACHjB,UAAU,8BACVsqB,eAAa,EACbpqB,QApBW,WACfsnB,EAAoBmsB,EAAkBpzC,UAClCozC,EAAkBpzC,WAAagE,EAAAA,GAAAA,KAC/BsjB,EAAiC8rB,EAAkBzrB,WAC/CiuB,GACAvuB,EAAeuB,GACftjB,KAEAC,MAGJ8hB,EAAeuB,GACf0sB,KAEJrF,EAAQ/E,KAAKuG,EAAAA,OAAAA,YACjB,EAMQhlC,SAAUgpC,EACV,cAAY,iCAEXA,GAAmBr1C,EAAAA,EAAAA,UAAS,UAAWA,EAAAA,EAAAA,UAAS,OAG7D,ICrGA,SA/B+B,SAAH,GAAyE,IAAnEgzC,EAAiB,EAAjBA,kBAAmBjsB,EAAU,EAAVA,WAAY4M,EAAO,EAAPA,QAC7D,OACI,yBAAKt0B,UAAU,sCACX,yBAAKA,UAAU,sCACX,kBAAC,GAA+B,CAAC2zC,kBAAmBA,KAClDA,EAAkBpzC,WAAagE,EAAAA,cAAAA,SAC7BovC,EAAkBpzC,WAAagE,EAAAA,cAAAA,UAC/B,kBAAC,EAAAxD,KAAI,CAACf,UAAU,6CAA6C+B,OAAO,OAAO9B,KAAK,MAC5E,kBAAC,EAAAmD,SAAQ,CAACC,kBAAkB,UAGpC,kBAAC,GAA2B,CACxBswC,kBAAmBA,EACnBjsB,WAAYA,EACZ4M,QAASA,IAEb,kBAAC,GAA6B,CAACqf,kBAAmBA,EAAmBrf,QAASA,IAC9E,kBAAC,GAA8B,CAACqf,kBAAmBA,EAAmBrf,QAASA,IAC9E5M,GACG,yBAAK1nB,UAAU,kDACX,kBAAC,EAAAe,KAAI,CAAC2D,MAAM,MAAMzE,KAAK,MAAM8B,OAAO,SAC/BpB,EAAAA,EAAAA,UAAS,mCAItB,kBAAC,GAAwB,CAACgzC,kBAAmBA,EAAmBrf,QAASA,KAIzF,owBCkJA,MCvLA,IDgBoBjtB,EAAAA,EAAAA,KAAS,WACzB,IPyPmCgvC,EAC7BC,EAGAC,EAGAC,EOhQAhG,GAAUt1B,EAAAA,EAAAA,cACV2f,GAAQh0B,EAAAA,EAAAA,MACN/I,EAAwB+8B,EAAxB/8B,OAAQ6a,EAAgBkiB,EAAhBliB,YACR0O,EAAwCvpB,EAAxCupB,oCACAiN,EACJ3b,EADI2b,QAAS5M,EACb/O,EADa+O,WAAY+uB,EACzB99B,EADyB89B,2BAA4BzB,EACrDr8B,EADqDq8B,gBAAiB0B,EACtE/9B,EADsE+9B,2BAGpEC,EAA6BjvB,EPgQR,SAAC2uB,GAI5B,OAAO,GAHoBA,EACtBrnC,QAAO,SAAAlH,GAAI,OAAIA,EAAKmgB,cAAgB4I,EAAAA,GAAAA,WAAyB/oB,EAAKogB,YAAczhB,EAAAA,GAAAA,YAAyB,IACzG0C,KAAI,SAAArB,GAAI,gBAAUA,GAAI,IAAEvH,SAAUgE,EAAAA,GAAAA,KAAiB,IAE5D,COnQUqyC,CAAuBvvB,IPiPvBivB,GAD6BD,EOjPChvB,GPmP/BrY,QAAO,SAAAlH,GAAI,OAAIA,EAAKmgB,cAAgB4I,EAAAA,GAAAA,GAAe,IACnD1nB,KAAI,SAAArB,GAAI,gBAAUA,GAAI,IAAEvH,SAAUgE,EAAAA,GAAAA,KAAiB,IAClDgyC,EAAqBF,EACtBrnC,QAAO,SAAAlH,GAAI,OAAIA,EAAKmgB,cAAgB4I,EAAAA,GAAAA,WAAyB/oB,EAAKogB,YAAczhB,EAAAA,GAAAA,YAAyB,IACzG0C,KAAI,SAAArB,GAAI,gBAAUA,GAAI,IAAEvH,SAAUgE,EAAAA,GAAAA,KAAiB,IAClDiyC,EAAkBH,EACnBrnC,QAAO,SAAAlH,GAAI,OAAIA,EAAKmgB,cAAgB4I,EAAAA,GAAAA,MAAkB,IACtD1nB,KAAI,SAAArB,GAAI,gBAAUA,GAAI,IAAEvH,SAAUgE,EAAAA,GAAAA,KAAiB,IACjD,GAAP,UAAWiyC,GAAe,GAAKD,GAAkB,GAAKD,KOvPhDO,EAAgCJ,EAA2BnsC,OAAS,EAEpEwsC,EAAgCJ,EAA2BpsC,OAAS,EAEpEysC,EACFrvB,GAAcivB,EAA0BrsC,OAAS,GAAIqsC,GAA6B,GAGhFK,EAC6B,GADatvB,EAEtCqvB,EADAJ,GAIJM,EAA8B,GAAH,UP+Wd,SAACZ,GACpB,IAAMa,EAA0Bb,EAAmBrnC,QAC/C,SAAAlH,GAAI,OACAA,EAAKmgB,cAAgB4I,EAAAA,GAAAA,KACrB/oB,EAAKogB,YAAczhB,EAAAA,GAAAA,KACnBqB,EAAKvH,WAAagE,EAAAA,GAAAA,GAAiB,IAErC4yC,EAA0Bd,EAAmBrnC,QAC/C,SAAAlH,GAAI,OAAIA,EAAKmgB,cAAgB4I,EAAAA,GAAAA,WAAyB/oB,EAAKogB,YAAczhB,EAAAA,GAAAA,GAAgB,IAEvF2wC,EAAuBf,EAAmBrnC,QAC5C,SAAAlH,GAAI,OAAIA,EAAKmgB,cAAgB4I,EAAAA,GAAAA,QAAsB/oB,EAAKogB,YAAczhB,EAAAA,GAAAA,GAAgB,IAE1F,MAAO,GAAP,UAAW2wC,GAAoB,GAAKD,GAAuB,GAAKD,GACpE,CO5XWG,CAAeL,IAAuC,GP6XtC,SAACX,GACxB,OAAOA,EAAmBrnC,QAAO,SAAAlH,GAAI,OAAIA,EAAKvH,WAAagE,EAAAA,GAAAA,OAAqB,GACpF,CO9XW+yC,CAAmBN,IAAuC,GPgY1C,SAACX,GACxB,OAAOA,EAAmBrnC,QAAO,SAAAlH,GAAI,OAAIA,EAAKvH,WAAagE,EAAAA,GAAAA,OAAqB,GACpF,COjYWgzC,CAAmBP,KAGpBQ,EACFljB,GAAW2iB,EAA4B3sC,OAAS,EAC1C2sC,EACAD,EAGJS,EACFZ,GAAiCC,EAC3BU,EAA2BltC,OAAS,EACpCktC,EAA2BltC,OAE/BotC,EACF,yBAAK13C,UAAU,sBACX,yBACIA,UAAU,gCACVE,QAAS,WACLswC,EAAQ/E,KAAKuG,EAAAA,OAAAA,YACjB,GAEA,kBAAC,EAAA7wC,KAAI,CAACpB,KAAK,oBACX,kBAAC,EAAAgB,KAAI,CAACd,KAAK,KAAK8B,OAAO,OAAO2C,MAAM,aAChC,kBAAC,EAAAtB,SAAQ,CAACC,kBAAkB,mBAGpC,wBAAIrD,UAAU,4BACV,kBAAC,EAAAe,KAAI,CAACd,KAAK,IAAI8B,OAAO,OAAO2C,MAAM,aAC/B,kBAAC,EAAAtB,SAAQ,CACLC,kBACI2xC,IAAoBtd,EAAAA,GAAAA,GACd,wCACA,uCAEVjzB,OAAQ,CACJkzC,WAAYrjB,GAAU3zB,EAAAA,EAAAA,UAAS,QAAU,GACzCi3C,WAAYtjB,GAAU3zB,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,cAQ1E,OACI,kBAAC,aAAc,KACX,kBAAC,EAAAkM,eAAc,KACX,yBAAK7M,UAAU,uBACX,kBAAC,EAAAgY,YAAW,CAACE,OAAQw/B,EAAeG,YAAa7F,EAAAA,OAAAA,cACjD,yBACIhyC,UAAWgC,IAAW,gCAAiC,CACnD,4CAA6Cy1C,EAAa,KAG9D,yBAAKz3C,UAAU,aACX,kBAAC,EAAA83C,2BAA0B,KACtBN,EAA2BruC,KAAI,SAAArB,GAAI,OAChC,kBAAC,GAAsB,CACnB6rC,kBAAmB7rC,EACnBiC,IAAKjC,EAAKmgB,YAAcngB,EAAKogB,UAC7BR,WAAYA,EACZ4M,QAASA,GACX,IAGLkjB,EAA2BltC,OAAS,GAAKusC,GACtC,kBAAC,GAAsB,CACnBlD,kBAAmBY,GACnB7sB,WAAYA,EACZ4M,QAASA,KAIuB,IAAvCkjB,EAA2BltC,QAAiBwsC,GACzC,kBAAC,GAAsB,CACnBnD,kBAAmBmB,GACnBptB,WAAYA,EACZ4M,QAASA,SAQrC,kBAAC,EAAAlnB,cAAa,KACV,kBAAC,EAAA4K,YAAW,CACRE,OACI,kBAAC,EAAA9U,SAAQ,CACLC,kBAAkB,uCAClBoB,OAAQ,CACJkzC,WAAYrjB,GAAU3zB,EAAAA,EAAAA,UAAS,QAAU,MAIrDkrB,iBAAiB,2BACjBgsB,aAAc7F,EAAAA,OAAAA,YACd75B,aAAc,kBAAMq4B,EAAQ/E,KAAKuG,EAAAA,OAAAA,YAAmB,GAEpD,yBACIhyC,UAAWgC,IAAW,gCAAiC,CACnD,oDAAqDy1C,EAAa,KAGtE,kBAAC,EAAAK,2BAA0B,KACtBN,EAA2BruC,KAAI,SAAArB,GAAI,OAChC,kBAAC,GAAsB,CACnB6rC,kBAAmB7rC,EACnBiC,IAAKjC,EAAKmgB,YAAcngB,EAAKogB,UAC7BR,WAAYA,EACZ4M,QAASA,GACX,IAGLkjB,EAA2BltC,OAAS,GAAKusC,GACtC,kBAAC,GAAsB,CACnBlD,kBAAmBY,GACnB7sB,WAAYA,EACZ4M,QAASA,IAIhBkjB,EAA2BltC,OAAS,GAAKwsC,GACtC,kBAAC,GAAsB,CACnBnD,kBAAmBmB,GACnBptB,WAAYA,EACZ4M,QAASA,QAS7C,2OElLA,IA8BIyjB,GA9BEC,GAAU10C,IAAAA,MAAW,kBAAM,2DAA0D,IAiCrF20C,GAAgB,CAAEC,KAAMlG,EAAAA,OAAAA,SAAiB/+B,UAAW+kC,GAASjkB,SAAU,kBAAMpzB,EAAAA,EAAAA,UAAS,YAAY,GAUxG,SARwB,WAKpB,OAJKo3C,KACDA,GAjCG,CACH,CACIG,KAAMlG,EAAAA,OAAAA,QAEN/+B,UAAW,SAAAtU,GAAK,OAAI,kBAAC,GAAG,MAAKA,EAAK,CAAE4B,SAAS,YAAY,EACzDwzB,SAAU,kBAAMpzB,EAAAA,EAAAA,UAAS,UAAU,EACnCw3C,kBAAkB,GAEtB,CACID,KAAMlG,EAAAA,OAAAA,IAEN/+B,UAAW,SAAAtU,GAAK,OAAI,kBAAC,GAAG,MAAKA,EAAK,CAAE4B,SAAS,QAAQ,EACrDwzB,SAAU,kBAAMpzB,EAAAA,EAAAA,UAAS,MAAM,EAC/Bw3C,kBAAkB,GAItB,CACID,KAAMlG,EAAAA,OAAAA,aACN/+B,UAAW,SAAAtU,GAAK,OAAI,kBAAC,GAAuBA,EAAS,EACrDo1B,SAAU,kBAAMpzB,EAAAA,EAAAA,UAAS,uBAAuB,EAChDw3C,kBAAkB,KAaT1M,KAAKwM,IAEfF,EACX,EC5CO,IAEMK,GAAkB,SAAlBA,EAAmBF,EAAMG,GAClC,IAAItpC,EAsBJ,OApBAspC,EAAc/uC,MAAK,SAAAgvC,GACf,IAAIC,EACJ,IACIA,GAAaC,EAAAA,EAAAA,WAAUN,EAAMI,EACjC,CAAE,MAAOv5C,GACL,GAAI,YAAY8e,KAAK9e,EAAE2B,SACnB,MAER,CAEA,OAAI63C,GACAxpC,EAASupC,GACF,KACAA,EAAWtG,SAClBjjC,EAASqpC,EAAgBF,EAAMI,EAAWtG,QAIlD,IAEOjjC,CACX,koBCtBA,IAAM0pC,GAAa,SAAH,GAAiD,IAA3CC,EAAY,EAAZA,aAAcnsB,EAAE,EAAFA,GAAItvB,EAAQ,EAARA,SAAa0B,EAAK,SAC9Cg6C,EAAiBr1C,IAAAA,WAAiBs1C,EAAAA,iBAAlCD,aACFT,EDNmB,SAAAA,GAAI,MAAK,MAAMr6B,KAAKq6B,GAAQA,EAAO,IAAH,OAAOA,GAAQ,GAAI,CCM/DW,CAActsB,GACrBusB,EAAQV,GAAgBF,EAAMa,GAAgB,CAAEJ,aAAAA,KAEtD,IAAKG,EACD,MAAM,IAAIhe,MAAM,oBAAD,OAAqBvO,IAGxC,OAAOA,EACH,kBAAC,EAAAysB,QAAO,IAACzsB,GAAI2rB,EAAMe,gBAAiBP,GAAgB,SAAUQ,MAAOJ,EAAMI,OAAWv6C,GACjF1B,GAGL,sBAAO0B,EAAQ1B,EAEvB,EAEAw7C,GAAW50C,UAAY,CACnB60C,aAAc50C,IAAAA,OACd7G,SAAU6G,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,MAAiBA,IAAAA,SAClEyoB,GAAIzoB,IAAAA,+9CCmBR,SA1C2B,SAAAg1C,GAuCvB,OAAO,kBAAC,EAAAK,MAAK,CAACD,MAAOJ,EAAMI,MAAOhB,KAAMY,EAAMZ,KAAMkB,OAtC9B,SAAAz6C,GAAS,MACvBoQ,EAAS,KAEb,GAAI+pC,EAAM7lC,YAAcomC,EAAAA,SAAU,CAC9B,IAAI9sB,EAAKusB,EAAMvsB,GAGf,GAAIusB,EAAMZ,OAASlG,EAAAA,OAAAA,MAEfzlB,EADqB5tB,EAAbosB,SACMC,SAASpU,cAAc0iC,QAAQR,EAAMZ,KAAM,IAE7DnpC,EAAS,kBAAC,EAAAsqC,SAAQ,CAAC9sB,GAAIA,GAC3B,MAAO,IAAIusB,EAAMX,kBAAqBW,EAAMz+B,cAAiBy+B,EAAMhK,cAE5D,OACGyK,GAAgC,QAAb,EAACT,EAAM9G,cAAM,QAAI,IAAIlgC,QAC1C,SAACiY,EAAKkjB,GAAG,gBACFljB,GACAkjB,EAAIuM,UAAU3xC,MAAK,SAAA4xC,GAAQ,OAAIA,EAAQ,OAAQ,IAAC,GAEvD,CAAC,GAECC,IAAwBpb,EAAAA,EAAAA,eAAcib,GACtCvuB,GAAW2uB,EAAAA,EAAAA,kBAAiB5uB,SAASC,UAE3Cjc,EACI,kBAAC,aAAc,KACV2qC,GAAwB1uB,IAAa8tB,EAAMZ,MAAQ,kBAAC,EAAAmB,SAAQ,CAAC9sB,GAAIgtB,EAAiBrB,OACnF,kBAACY,EAAM7lC,UAAS,MAAKtU,EAAK,CAAEqzC,OAAQ8G,EAAM9G,UAGtD,MAlBI9yB,EAAAA,EAAAA,iBAAgB45B,EAAMz+B,cAAc8E,EAAAA,EAAAA,gBAoBxC,IAAMrc,GAAsB,QAAd,EAAAg2C,EAAM/kB,gBAAQ,aAAd,OAAA+kB,KAAsB,GAEpC,OADAnR,SAAS7kC,MAAQ,GAAH,OAAMA,EAAK,cAAM82C,EAAAA,eACxB7qC,CACX,GAGJ,yOChBA,MCxBA,GDEqB,SAAApQ,GACjB,IAAQg6C,EAAiBr1C,IAAAA,WAAiBs1C,EAAAA,iBAAlCD,aAER,OACI,kBAAC,aAAc,CACX9gC,SAAU,WACN,OACI,6BACI,kBAAC,EAAAzU,SAAQ,CAACC,kBAAkB,eAGxC,GAEA,kBAAC,EAAAw2C,OAAM,KACFd,GAAgB,CAAEJ,aAAAA,IAAgBxvC,KAAI,SAAA2vC,GAAK,OACxC,kBAAC,GAAkB,IAAC/uC,IAAK+uC,EAAMZ,MAAUY,EAAWn6C,GAAS,KAKjF,EErBA,IAAMm7C,GAAiB,SAAH,GAOd,IANF5hC,EAAM,EAANA,OACAxX,EAAO,EAAPA,QACAq5C,EAAS,EAATA,UACAC,EAAc,EAAdA,eACAC,EAAe,EAAfA,gBAAe,IACfC,oBAEMC,OAFa,IAAG,GAAI,GAEoBx5C,EAAAA,EAAAA,UAAS,yCAA2C,GAElG,OAAIo5C,EAEI,kBAAC,EAAAx6B,OAAM,CACHzc,MAAOoV,IAAUvX,EAAAA,EAAAA,UAAS,sBAC1B4W,YAAU,EACViI,oBAAqBw6B,IAAkBr5C,EAAAA,EAAAA,UAAS,MAChDsD,UAAWg2C,GAAoB,kBAAMlvB,SAASqvB,QAAQ,GAErD15C,IAAWC,EAAAA,EAAAA,UAAS,2DAK7B,kBAAC,EAAA05C,mBAAkB,CACfC,aAAcpiC,QAAAA,EAAU,GACxBqiC,eAAgB75C,EAAU,CAACA,EAASy5C,GAAmB,GACvDK,cAAe,CAACxI,EAAAA,OAAAA,OAChByI,gBAAiB,CAACT,IAAkBr5C,EAAAA,EAAAA,UAAS,YAC7C+5C,cAAeT,GAAoB,kBAAMlvB,SAASqvB,QAAQ,GAGtE,EAEAN,GAAej2C,UAAY,CACvBqU,OAAQpU,IAAAA,OACRi2C,UAAWj2C,IAAAA,KACXpD,QAASoD,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,OAAkBA,IAAAA,SAChEk2C,eAAgBl2C,IAAAA,OAChBm2C,gBAAiBn2C,IAAAA,KACjBo2C,oBAAqBp2C,IAAAA,KACrB0E,KAAM1E,IAAAA,QAGV,YC1CA,IAAM62C,IAAStzC,EAAAA,EAAAA,KAAS,YAAqB,IAAlBwK,EAAW,EAAXA,YACvB,GAA2BhL,EAAAA,EAAAA,MAAnB/I,EAAM,EAANA,OAAQkpB,EAAM,EAANA,OAER3M,EAAgCvc,EAAhCuc,aAAcy0B,EAAkBhxC,EAAlBgxC,cACdtyC,EAAqBwqB,EAArBxqB,MAER,OAF6BwqB,EAAd7S,UAGJ,kBAAC,GAAmB3X,GAGxB,kBAAC,GAAY,CAAC6d,aAAcA,EAAcy0B,cAAeA,EAAej9B,YAAaA,GAChG,IAEA8oC,GAAO92C,UAAY,CACfgO,YAAa/N,IAAAA,QAKjB,UAAe82C,EAAAA,EAAAA,YAAWD,s4BC1Ba,IAElBE,GAAY,IAC7B,WAAYnd,gGAAY,SACpBxB,KAAKtB,IAAM,IAAI7jB,GAAAA,QAAS,CAAE2mB,WAAAA,GAC9B,u0BCLiC,ICK7Bod,GAFAC,GACEC,GDFWC,GAAS,IAC1B,WAAYC,gGAAY,SACpBhf,KAAKp+B,OAASo9C,EAAWp9C,OACzBo+B,KAAKlV,OAASk0B,EAAWl0B,OACzBkV,KAAKvB,QAAU,IAAIkgB,GAAa3e,KAAMgf,GACtChf,KAAKvkB,GAAKujC,EAAWvjC,GACrBukB,KAAKif,IAAMD,EAAWC,IACtBjf,KAAK5sB,cAAgB4rC,EAAW5rC,cAChC4sB,KAAKvjB,YAAcuiC,EAAWviC,WAClC,qCCaJ,UArBQoiC,IAAgB,EACdC,GAAU,IAAI7T,GAAAA,aAab,CACHiU,KAXS,SAAAvgB,GACJkgB,KACDD,GAAejgB,EACfmgB,GAAQ3W,QAAQyW,GAAaO,aAC7BN,IAAgB,EAExB,EAMI1a,IAJQ,WAAH,OAAU0a,IAAiBD,GAAaO,YAAcP,GAAaO,YAAYC,aAAUz8C,CAAS,EAKvG08C,YAAa,kBAAOR,GAAgB3W,QAAQC,QAAQyW,GAAaO,aAAeL,GAAQ5T,OAAO,ICbvG,IAAI1J,IAFJ8d,EAAAA,GAAAA,WAAU,CAAEC,eAAgB,aAc5B,SAVkB,SAACP,EAAYQ,GAC3B,OAAIhe,KAEJie,GAAAA,KAAgBT,EAAWl0B,SAC3B40B,EAAAA,EAAAA,cAAaF,GACbhe,GAAa,IAAIud,GAAUC,GAG/B,ECJA,SARqB,SAAH,GAA6E,IAAvEj+C,EAAQ,EAARA,SAAU49B,EAAK,EAALA,MAC9B,OACI,kBAAC,KAAa,CAACA,MAAOA,GAClB,kBAAC,IAAgB,KAAE59B,GAG/B,ECYA,SAVY,SAAH,GAAmC,IAA7B4U,EAAW,EAAXA,YAGX,OAFAgqC,GAAUhqC,EAAY6rB,WAAY7rB,EAAY1U,IAG1C,kBAAC,GAAY,CAAC09B,MAAOhpB,EAAY6rB,YAC7B,kBAAC,GAAM,MAGnB,uOChBA,SAFqB3hC,EAAAA,EAAAA,eAA8B,qCCUnD,QAViB,WACb,IAAM8+B,GAAQ5+B,EAAAA,EAAAA,YAAW6/C,GAEzB,IAAKjhB,EACD,MAAM,IAAIC,MAAM,8CAGpB,OAAOD,CACX,ECgBA,SArB8BxzB,EAAAA,EAAAA,KAAS,YAAoD,IAAjDpK,EAAQ,EAARA,SACtC,GAA4B8+C,EAAAA,EAAAA,IAAgB,kBAApC19C,EAAI,EAAJA,KAAM5B,EAAS,EAATA,UAEQu/C,EAClBn1C,IADAo1C,eAAkBD,OAetB,OAZA/8C,EAAAA,EAAAA,YAAU,WACNxC,EAAU,CAAEH,QAAS,CAAE4/C,cAAe,QAC1C,GAAG,CAACz/C,KAEJwC,EAAAA,EAAAA,YAAU,WACN,GAAIZ,EAAM,CACN,IAAQ49C,EAAmB59C,EAAnB49C,eAEJA,GAAgBD,GAAO,SAAAvxB,GAAI,OAAI0xB,IAAM1xB,EAAMwxB,EAAe,GAClE,CACJ,GAAG,CAACD,EAAQ39C,IAEL,oCAAGpB,EACd,gyBCxBqE,IAEhD89B,EAAS,WAG1B,WAAY1+B,EAAc+/C,gGAAgC,cAF1D/9C,UAAsBQ,GAGlBo9B,EAAAA,EAAAA,gBAAeC,KAAM,CACjB79B,KAAM89B,EAAAA,WACN6f,OAAQr3B,EAAAA,OAAAA,MACRlT,QAASkT,EAAAA,OAAAA,SAGb03B,EAAAA,EAAAA,IAAgBngB,KAAM,CAAE7/B,KAAAA,EAAM8hC,WAAY,CAAC,QAASU,QAASliC,OAAO+Y,eAAgB5G,MAAK,kBACrFstC,aAAe,EAAfA,GAAmB,GAE3B,WAQC,SARA,0BAED,SAAO/9C,GACH69B,KAAK79B,KAAOA,aAAgBi+C,SAAWj+C,EAAK69B,KAAK79B,MAAQA,CAC7D,GAAC,qBAED,YACIk+C,EAAAA,EAAAA,IAAergB,KACnB,oFAAC,EArByB,+pDCHM,IAGfsgB,EAAkB,yTACnC,aAAc,wHACJ,qBACV,CAAC,8FAHkC,CAASzhB,+pDCDhD,IAAM0hB,EAAQ,CACVC,QAAQ,EACRC,aAAa,EACbC,UAAU,GAGOC,EAAiB,yTAClC,aAAc,MAoBQ,mGApBR,UACV,cAAM,qBAAqB,WAElB,EAAKx+C,MAAM,EAAK29C,OAAOS,GAGxB,EAAKp+C,MAAQsL,OAAOwE,KAAK,EAAK9P,MAAMiM,SAAWX,OAAOwE,KAAKsuC,GAAOnyC,QAClE,EAAK0xC,QAAO,SAAAc,GACR,IAAMz+C,EAAOo+C,EAOb,OALA9yC,OAAOwE,KAAKsuC,GAAO5yC,SAAQ,SAAAkzC,QAELl+C,IAAdi+C,EAAIC,KAAqB1+C,EAAK0+C,GAAQD,EAAIC,GAClD,IAEO1+C,CACX,GAER,KAEKA,KAAOo+C,EAAM,CACtB,CAAC,8FAtBiC,CAAS1hB,uuCC6B/C,QA9BsB,SAAH,GAA6E,IAAvE99B,EAAQ,EAARA,SAAU49B,EAAK,EAALA,MACzBmiB,GAAyBzjC,EAAAA,EAAAA,UAAQ,WAEnC,MAAI,YAAashB,GAASA,EAAMoiB,QAAgBpiB,EAGzC,EAAP,KACOA,GAAK,IACRohB,eAAgB,IAAIO,EACpBU,cAAe,IAAIL,GAE3B,GAAG,CAAChiB,IAUJ,OARA57B,EAAAA,EAAAA,YAAU,WACN,OAAO,WACH0K,OAAOlF,OAAOu4C,GAAenzC,SAAQ,SAAAjM,GACZ,WAAjB,EAAOA,IAAsB,YAAaA,GAAOA,EAAM6T,SAC/D,GACJ,CACJ,GAAG,CAACurC,IAGA,kBAAC,KAAW,KACR,kBAAC,WAAqB,CAACp/C,MAAOo/C,GAC1B,kBAAC,EAAqB,KAAE//C,IAIxC","sources":["webpack://@deriv/cfd/../api/src/APIContext.ts","webpack://@deriv/cfd/../api/src/useAPI.ts","webpack://@deriv/cfd/../api/src/APIProvider.tsx","webpack://@deriv/cfd/../api/src/useSubscription.ts","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/index.tsx","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-derived.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-financial.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-cfds.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-ctrader.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-derivez.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-swap-free.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-deriv-x.svg","webpack://@deriv/cfd/./src/Components/passwordbox.tsx","webpack://@deriv/cfd/./src/Components/cfd-account-copy.tsx","webpack://@deriv/cfd/./src/Components/specbox.tsx","webpack://@deriv/cfd/./src/Components/success-dialog.jsx","webpack://@deriv/cfd/./src/Containers/cfd-change-password-confirmation.tsx","webpack://@deriv/cfd/./src/Containers/cfd-dbvi-onboarding.tsx","webpack://@deriv/cfd/../hooks/src/useIsAccountStatusPresent.ts","webpack://@deriv/cfd/./src/Components/cfd-poa.tsx","webpack://@deriv/cfd/./src/Components/cfd-poi.tsx","webpack://@deriv/cfd/./src/Components/cfd-personal-details-form.tsx","webpack://@deriv/cfd/./src/Containers/cfd-personal-details-container.tsx","webpack://@deriv/cfd/./src/Containers/cfd-financial-stp-real-account-signup.tsx","webpack://@deriv/cfd/./src/Containers/trading-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/investor-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-manager-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-reset-password-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-server-error-dialog.tsx","webpack://@deriv/cfd/./src/Containers/cfd-top-up-demo-modal.tsx","webpack://@deriv/cfd/./src/Containers/compare-accounts-content.tsx","webpack://@deriv/cfd/./src/Constants/cfd_compare_account_content.ts","webpack://@deriv/cfd/./src/Containers/mt5-compare-table-content.tsx","webpack://@deriv/cfd/./src/Components/cfd-dxtrade-compare-content.tsx","webpack://@deriv/cfd/./src/Containers/compare-accounts-modal.tsx","webpack://@deriv/cfd/./src/Containers/dynamic-leverage/dynamic-leverage-context.tsx","webpack://@deriv/cfd/./src/Constants/dynamic-leverage-content/dynamic-leverage-content.ts","webpack://@deriv/cfd/./src/Containers/dynamic-leverage/dynamic-leverage-table-column-header.tsx","webpack://@deriv/cfd/./src/Containers/dynamic-leverage/dynamic-leverage-market-card.tsx","webpack://@deriv/cfd/./src/Containers/dynamic-leverage/dynamic-leverage-modal-content.tsx","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-bvi-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-vanuatu-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-verification-contents.ts","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-back.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-clickable-description.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-title-indicator.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-section.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-front.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card.tsx","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-svg-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-labuan-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction_maltainvest_contents.ts","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-content.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-checkbox.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-foot-note.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-content-wrapper.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-title.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal.tsx","webpack://@deriv/cfd/./src/Containers/dmt5-trade-modal.tsx","webpack://@deriv/cfd/./src/Containers/mt5-trade-modal.tsx","webpack://@deriv/cfd/./src/Helpers/config.tsx","webpack://@deriv/cfd/./src/Containers/trade-modal.tsx","webpack://@deriv/cfd/./src/Helpers/cfd-config.ts","webpack://@deriv/cfd/./src/Helpers/constants.ts","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/useCfdStores.tsx","webpack://@deriv/cfd/./src/Stores/base-store.js","webpack://@deriv/cfd/./src/Stores/Modules/CFD/cfd-store.js","webpack://@deriv/cfd/./src/_common/utility.js","webpack://@deriv/cfd/./src/Containers/missing-real-account.tsx","webpack://@deriv/cfd/./src/templates/_common/components/loading.tsx","webpack://@deriv/cfd/./src/Containers/loading-cfd-real-account-display.tsx","webpack://@deriv/cfd/./src/Constants/cfd-shared-strings.js","webpack://@deriv/cfd/./src/Components/cfd-download-container.tsx","webpack://@deriv/cfd/./src/Containers/switch-to-real-account.tsx","webpack://@deriv/cfd/./src/Components/cfd-account-card.tsx","webpack://@deriv/cfd/./src/Constants/cfd-specifications.ts","webpack://@deriv/cfd/./src/Components/cfd-dxtrade-demo-account-display.tsx","webpack://@deriv/cfd/./src/Components/cfd-mt5-demo-account-display.tsx","webpack://@deriv/cfd/./src/Components/cfd-real-account-display.tsx","webpack://@deriv/cfd/./src/Containers/cfd-dashboard.tsx","webpack://@deriv/cfd/./src/Containers/index.js","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/index.tsx","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/ic-instrument-derived-fx.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/ic-instrument-synthetics.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/ic-instrument-baskets.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/ic-instrument-stocks.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/ic-instrument-stock-indices.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/ic-instrument-commodities.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/ic-instrument-forex.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/ic-instrument-cryptocurrencies.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-instruments/ic-instrument-etf.svg","webpack://@deriv/cfd/./src/Containers/cfd-compare-accounts/instruments-icon-with-label.tsx","webpack://@deriv/cfd/./src/Helpers/compare-accounts-config.ts","webpack://@deriv/cfd/./src/Containers/cfd-compare-accounts/cfd-instruments-label-highlighted.tsx","webpack://@deriv/cfd/./src/Containers/cfd-compare-accounts/cfd-compare-accounts-description.tsx","webpack://@deriv/cfd/./src/Containers/cfd-compare-accounts/cfd-compare-accounts-title-icon.tsx","webpack://@deriv/cfd/./src/Containers/cfd-compare-accounts/cfd-compare-accounts-platform-label.tsx","webpack://@deriv/cfd/./src/Containers/cfd-compare-accounts/cfd-compare-accounts-button.tsx","webpack://@deriv/cfd/./src/Containers/cfd-compare-accounts/cfd-compare-accounts-card.tsx","webpack://@deriv/cfd/./src/Containers/cfd-compare-accounts/cfd-compare-accounts.tsx","webpack://@deriv/cfd/./src/Containers/cfd-compare-accounts/index.tsx","webpack://@deriv/cfd/./src/Constants/routes-config.js","webpack://@deriv/cfd/./src/Components/Routes/helpers.js","webpack://@deriv/cfd/./src/Components/Routes/binary-link.jsx","webpack://@deriv/cfd/./src/Components/Routes/route-with-sub-routes.jsx","webpack://@deriv/cfd/./src/Components/Routes/binary-routes.jsx","webpack://@deriv/cfd/./src/Components/Routes/index.js","webpack://@deriv/cfd/./src/Components/Errors/error-component.jsx","webpack://@deriv/cfd/./src/Containers/routes.jsx","webpack://@deriv/cfd/./src/Stores/Modules/index.js","webpack://@deriv/cfd/./src/Stores/index.js","webpack://@deriv/cfd/./src/_common/base/server_time.js","webpack://@deriv/cfd/./src/init-store.js","webpack://@deriv/cfd/./src/cfd-providers.tsx","webpack://@deriv/cfd/./src/app.tsx","webpack://@deriv/cfd/../stores/src/storeContext.ts","webpack://@deriv/cfd/../stores/src/useStore.ts","webpack://@deriv/cfd/../stores/src/providers/ExchangeRatesProvider.tsx","webpack://@deriv/cfd/../stores/src/stores/BaseStore.ts","webpack://@deriv/cfd/../stores/src/stores/ExchangeRatesStore.ts","webpack://@deriv/cfd/../stores/src/stores/FeatureFlagsStore.ts","webpack://@deriv/cfd/../stores/src/storeProvider.tsx"],"sourcesContent":["import { createContext } from 'react';\n\n// Don't need to type `deriv_api` here, We will be using these methods inside\n// the `useQuery`, `useMutation` and `useSubscription` hook to make it type-safe.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst APIContext = createContext<Record<string, any> | null>(null);\n\nexport default APIContext;\n","import { useCallback, useContext } from 'react';\n\nimport type {\n    TSocketEndpointNames,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nimport APIContext from './APIContext';\n\nconst useAPI = () => {\n    const api = useContext(APIContext);\n\n    const send = useCallback(\n        async <T extends TSocketEndpointNames | TSocketPaginateableEndpointNames = TSocketEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): Promise<TSocketResponseData<T>> => {\n            const response = await api?.send({ [name]: 1, ...(payload || {}) });\n\n            if (response.error) {\n                throw response.error;\n            }\n\n            return response;\n        },\n        [api]\n    );\n\n    const subscribe = useCallback(\n        <T extends TSocketSubscribableEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): {\n            subscribe: (\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onData: (response: any) => void,\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onError: (response: any) => void\n            ) => { unsubscribe?: VoidFunction };\n        } => api?.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }),\n        [api]\n    );\n\n    return {\n        send,\n        subscribe,\n    };\n};\n\nexport default useAPI;\n","import React, { PropsWithChildren } from 'react';\n// @ts-expect-error `@deriv/deriv-api` is not in TypeScript, Hence we ignore the TS error.\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic';\nimport { getAppId, getSocketURL, useWS } from '@deriv/shared';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n// import { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport APIContext from './APIContext';\n\ndeclare global {\n    interface Window {\n        ReactQueryClient?: QueryClient;\n        DerivAPI?: Record<string, DerivAPIBasic>;\n    }\n}\n\n// This is a temporary workaround to share a single `QueryClient` instance between all the packages.\n// Later once we have each package separated we won't need this anymore and can remove this.\nconst getSharedQueryClientContext = (): QueryClient => {\n    if (!window.ReactQueryClient) {\n        window.ReactQueryClient = new QueryClient();\n    }\n\n    return window.ReactQueryClient;\n};\n\n// This is a temporary workaround to share a single `DerivAPIBasic` instance for every unique URL.\n// Later once we have each package separated we won't need this anymore and can remove this.\nconst getDerivAPIInstance = (): DerivAPIBasic => {\n    const endpoint = getSocketURL();\n    const app_id = getAppId();\n    const language = 'EN'; // Need to use the language from the app context.\n    const brand = 'deriv';\n    const wss = `wss://${endpoint}/websockets/v3?app_id=${app_id}&l=${language}&brand=${brand}`;\n\n    if (!window.DerivAPI) {\n        window.DerivAPI = {};\n    }\n\n    if (!window.DerivAPI?.[wss]) {\n        window.DerivAPI[wss] = new DerivAPIBasic({ connection: new WebSocket(wss) });\n    }\n\n    return window.DerivAPI?.[wss];\n};\n\nconst queryClient = getSharedQueryClientContext();\n\ntype TProps = {\n    /** If set to true, the APIProvider will instantiate it's own socket connection. */\n    standalone?: boolean;\n};\n\nconst APIProvider = ({ children, standalone = false }: PropsWithChildren<TProps>) => {\n    const WS = useWS();\n    // Use the new API instance if the `standalone` prop is set to true,\n    // else use the legacy socket connection.\n    const active_connection = standalone ? getDerivAPIInstance() : WS;\n\n    return (\n        <APIContext.Provider value={active_connection}>\n            <QueryClientProvider client={queryClient}>\n                {children}\n                {/* <ReactQueryDevtools /> */}\n            </QueryClientProvider>\n        </APIContext.Provider>\n    );\n};\n\nexport default APIProvider;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketError,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSubscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<TSocketError<T>>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const { subscribe: _subscribe } = useAPI();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            try {\n                subscriber.current = _subscribe(name, payload).subscribe(\n                    response => {\n                        setData(response);\n                        setIsLoading(false);\n                    },\n                    response => {\n                        setError(response.error);\n                        setIsLoading(false);\n                    }\n                );\n            } catch (e) {\n                setError(e as TSocketError<T>);\n            }\n        },\n        [_subscribe, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return {\n        subscribe,\n        unsubscribe,\n        isLoading,\n        isSubscribed,\n        error,\n        data,\n    };\n};\n\nexport default useSubscription;\n","import React from 'react';\nimport Derived from './ic-appstore-derived.svg';\nimport Financial from './ic-appstore-financial.svg';\nimport CFDs from './ic-appstore-cfds.svg';\nimport CTrader from './ic-appstore-ctrader.svg';\nimport DerivEz from './ic-appstore-derivez.svg';\nimport SwapFree from './ic-appstore-swap-free.svg';\nimport DerivX from './ic-appstore-deriv-x.svg';\n\nexport interface IconProps<T> {\n    icon: T;\n    className?: string;\n    size?: number;\n    onClick?: () => void;\n}\n\nexport const PlatformIcons = {\n    Derived,\n    Financial,\n    CFDs,\n    CTrader,\n    DerivEz,\n    SwapFree,\n    DerivX,\n};\n\nconst TradingPlatformIcon = ({ icon, className, size, onClick }: IconProps<keyof typeof PlatformIcons>) => {\n    const PlatformIcon = PlatformIcons[icon] as React.ElementType;\n\n    return PlatformIcon ? (\n        <PlatformIcon className={className} style={{ width: size, height: size }} onClick={onClick} />\n    ) : null;\n};\n\nexport default TradingPlatformIcon;\n","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M26 0H6a6 6 0 00-6 6v17.5h32V6a6 6 0 00-6-6z\" fill=\"#0364B9\" /><path d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm26 6c0-1.5-.55-2.88-1.47-3.93L26.6 23.5H32V6z\" fill=\"#0A559E\" /><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#2A3052\" /><path d=\"M7.34 9.68c.15.27.31.6.5.99.19.38.38.8.58 1.26.21.45.41.9.61 1.38l.57 1.33.56-1.33a78.87 78.87 0 011.19-2.64l.5-.99h1.7a52.27 52.27 0 01.4 4l.15 2.22.12 2.1h-1.83c-.02-.8-.05-1.69-.1-2.64-.03-.95-.1-1.91-.17-2.88a517.56 517.56 0 01-1.01 2.34 108.94 108.94 0 01-.9 2.12h-1.3a118.46 118.46 0 00-.92-2.12l-.52-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.71 18H4.9L5 15.9l.15-2.22a47.67 47.67 0 01.4-4h1.8zm14.02 0v1.6h-2.51V18h-1.88v-6.72h-2.5v-1.6h6.89zm3.96 5.87a1.18 1.18 0 00-.16-.61c-.1-.18-.28-.34-.54-.46a3.8 3.8 0 00-1.03-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.13.15 6.41 6.41 0 01-.68-.1 7.3 7.3 0 01-.59-.14 2.3 2.3 0 01-.4-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32.24-.22.37-.48.37-.78zM10.87 28.81l.15.02h.21c.47 0 .82-.12 1.04-.36.23-.23.34-.56.34-.98 0-.43-.1-.76-.32-.99-.22-.22-.56-.33-1.03-.33a3.37 3.37 0 00-.39.02v2.62zm2.7-1.32c0 .36-.05.68-.16.95a1.73 1.73 0 01-.48.66 2 2 0 01-.75.4 3.5 3.5 0 01-1 .13c-.16 0-.36 0-.58-.02a4.51 4.51 0 01-.66-.09v-4.05a9.16 9.16 0 011.28-.1c.35 0 .67.04.96.12.3.08.54.2.75.38.2.17.37.39.48.66.11.27.17.59.17.96zm2-2.12c.63 0 1.1.11 1.44.34.33.22.5.56.5 1.03 0 .29-.07.53-.2.71-.14.18-.33.32-.58.43a5.31 5.31 0 01.53.78 10.05 10.05 0 01.5.92h-1.05a49.79 49.79 0 00-.23-.42 6.82 6.82 0 00-.24-.4 7.53 7.53 0 00-.24-.38 3.8 3.8 0 00-.24-.32h-.47v1.52h-.93v-4.1a5.31 5.31 0 01.63-.09 8.2 8.2 0 01.59-.02zm.06.8a2.63 2.63 0 00-.34.02v1.12h.27c.35 0 .6-.04.75-.13.16-.09.23-.24.23-.45 0-.2-.07-.35-.23-.43a1.38 1.38 0 00-.68-.13zm3.88 3.4a31.27 31.27 0 01-.94-2.2 58.21 58.21 0 01-.72-1.95h1.03l.26.78.3.83.28.79.26.65a17.1 17.1 0 00.54-1.44 96.8 96.8 0 00.55-1.61h1l-.32.9a37.71 37.71 0 01-.86 2.17l-.48 1.09h-.9z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M26 0H6a6 6 0 00-6 6v17.5h32V6a6 6 0 00-6-6z\" fill=\"#0364B9\" /><path d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm26 6c0-1.5-.55-2.88-1.47-3.93L26.6 23.5H32V6z\" fill=\"#0A559E\" /><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#71BD0E\" /><path d=\"M7.34 9.68c.15.27.31.6.5.99.19.38.38.8.58 1.26.21.45.41.9.61 1.38l.57 1.33.56-1.33a78.87 78.87 0 011.19-2.64l.5-.99h1.7a52.27 52.27 0 01.4 4l.15 2.22.12 2.1h-1.83c-.02-.8-.05-1.69-.1-2.64-.03-.95-.1-1.91-.17-2.88a517.56 517.56 0 01-1.01 2.34 108.94 108.94 0 01-.9 2.12h-1.3a118.46 118.46 0 00-.92-2.12l-.52-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.71 18H4.9L5 15.9l.15-2.22a47.67 47.67 0 01.4-4h1.8zm14.02 0v1.6h-2.51V18h-1.88v-6.72h-2.5v-1.6h6.89zm3.96 5.87a1.18 1.18 0 00-.16-.61c-.1-.18-.28-.34-.54-.46a3.8 3.8 0 00-1.03-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.13.15 6.41 6.41 0 01-.68-.1 7.3 7.3 0 01-.59-.14 2.3 2.3 0 01-.4-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32.24-.22.37-.48.37-.78zM11.54 29.58v-4.16h2.78v.79h-1.84v.87h1.64v.78h-1.64v1.72h-.94zm3.45-4.16h.93v4.16H15v-4.16zm4.68 4.16a20.92 20.92 0 00-.87-1.41 14.33 14.33 0 00-1-1.32v2.73h-.92v-4.16h.77a7.33 7.33 0 01.92 1.1 15.66 15.66 0 01.96 1.35v-2.45h.93v4.16h-.79z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#FF8C00\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.35 9.68l.49.99a44.57 44.57 0 011.2 2.64l.56 1.33.57-1.33a78.87 78.87 0 011.18-2.64l.5-.99h1.71a52.27 52.27 0 01.4 4l.14 2.22.12 2.1H12.4l-.1-2.64c-.04-.95-.1-1.91-.18-2.88a517.56 517.56 0 01-1 2.34 108.94 108.94 0 01-.9 2.12H8.9a118.46 118.46 0 00-.92-2.12l-.51-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.72 18H4.9l.1-2.1.15-2.22.18-2.14c.07-.68.15-1.3.23-1.86h1.79zm14 0v1.6h-2.5V18h-1.87v-6.72h-2.51v-1.6h6.89zm3.97 5.87a1.18 1.18 0 00-.15-.61c-.1-.18-.29-.34-.54-.46a3.8 3.8 0 00-1.04-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.12.15 6.41 6.41 0 01-.69-.1 7.3 7.3 0 01-.58-.14 2.3 2.3 0 01-.41-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32s.37-.48.37-.78zm-14.3 14.12c-.68 0-1.2-.19-1.55-.57-.36-.37-.53-.9-.53-1.6 0-.34.05-.65.16-.91a1.84 1.84 0 011.12-1.11 2.42 2.42 0 011.32-.1c.15.02.27.05.38.08a1.68 1.68 0 01.43.19l-.27.76a2.25 2.25 0 00-.45-.18 2.1 2.1 0 00-.58-.07c-.14 0-.29.02-.43.07a.97.97 0 00-.36.24c-.1.1-.19.24-.25.4a1.72 1.72 0 00-.1.62c0 .19.02.37.06.54.04.16.11.3.2.42.1.12.22.22.38.29.15.07.33.1.55.1a2.52 2.52 0 00.65-.08 1.77 1.77 0 00.22-.07l.18-.08.26.75a2.2 2.2 0 01-.56.21c-.24.07-.52.1-.84.1zm1.99-.09v-4.15h2.78v.78h-1.84v.87h1.64v.79h-1.65v1.72h-.93zm4.38-.76l.15.02h.21c.47 0 .81-.12 1.04-.36.23-.23.34-.56.34-.98 0-.43-.1-.76-.32-.99-.22-.22-.56-.33-1.03-.33a3.37 3.37 0 00-.39.02v2.62zm2.7-1.32c0 .36-.05.68-.16.95a1.73 1.73 0 01-.48.66 2 2 0 01-.75.4 3.5 3.5 0 01-1 .13c-.17 0-.36 0-.59-.02a4.51 4.51 0 01-.66-.09v-4.05a9.16 9.16 0 011.28-.1c.36 0 .68.04.97.12.29.08.54.2.75.38.2.17.37.39.48.66.11.27.17.59.17.96zm1.63 1.44a.9.9 0 00.35-.04c.07-.04.1-.1.1-.2 0-.06-.04-.12-.13-.18a2.31 2.31 0 00-.4-.18 4.45 4.45 0 01-.38-.16 1.18 1.18 0 01-.3-.2.84.84 0 01-.18-.28 1.03 1.03 0 01-.06-.4c0-.3.1-.52.33-.7.22-.17.52-.25.9-.25a2.75 2.75 0 01.97.16l-.15.7a3.2 3.2 0 00-.34-.1 1.8 1.8 0 00-.41-.04c-.28 0-.42.07-.42.23 0 .04 0 .07.02.1a.23.23 0 00.07.08 1.77 1.77 0 00.38.18c.2.07.36.14.49.22.13.06.23.14.3.22.07.08.13.17.15.27.04.1.05.22.05.35a.8.8 0 01-.35.7c-.23.17-.56.25-1 .25a2.9 2.9 0 01-.7-.07 2.85 2.85 0 01-.38-.12l.15-.73a2.41 2.41 0 00.94.2z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 6a6 6 0 016-6h20a6 6 0 016 6v20a6 6 0 01-6 6H6a6 6 0 01-6-6V6z\" fill=\"#E22526\" /><path d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm24.53 2.07L25.04 32H26a6 6 0 006-6V6c0-1.5-.55-2.88-1.47-3.93z\" fill=\"#B51E1E\" /><path d=\"M9 17.07c0-.53.1-1.03.26-1.5a3.6 3.6 0 011.95-2.07 4.82 4.82 0 013.63.1l-.44 1.67a5.27 5.27 0 00-.65-.2 3.37 3.37 0 00-.78-.08c-.62 0-1.08.19-1.39.57-.3.38-.44.89-.44 1.51 0 .66.13 1.18.41 1.54.3.37.8.55 1.5.55a5.08 5.08 0 001.61-.3l.3 1.71a4.89 4.89 0 01-.91.27 6 6 0 01-1.2.1c-.68 0-1.26-.09-1.74-.29a3.41 3.41 0 01-1.2-.82 3.33 3.33 0 01-.7-1.22 5.44 5.44 0 01-.2-1.54zm14-6.02v1.86h-2.93v7.84h-2.19v-7.84h-2.92v-1.86h8.03z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 32 32\" {...props}><path fill=\"#FF444F\" d=\"M0 6a6 6 0 016-6h20a6 6 0 016 6v20a6 6 0 01-6 6H6a6 6 0 01-6-6V6z\" /><path fill=\"#E12E3A\" d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm24.53 2.07L25.04 32H26a6 6 0 006-6V6c0-1.5-.55-2.88-1.47-3.93z\" /><path fill=\"#fff\" d=\"M8.53 20.85v-9.7h6.55v1.83h-4.37v1.9h3.88v1.8h-3.88v2.34h4.7v1.83H8.52zm14.79-8.19a21.5 21.5 0 00-1.07 1.2 38.6 38.6 0 00-1.27 1.6 55.39 55.39 0 00-1.3 1.8c-.43.6-.82 1.2-1.15 1.76h4.94v1.83h-7.63v-1.3c.26-.48.58-1 .95-1.58.39-.6.78-1.18 1.2-1.77a43.21 43.21 0 011.24-1.72c.43-.56.82-1.06 1.19-1.5h-4.36v-1.83h7.26v1.51z\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M26 0H6a6 6 0 00-6 6v17.5h32V6a6 6 0 00-6-6z\" fill=\"#0364B9\" /><path d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm26 6c0-1.5-.55-2.88-1.47-3.93L26.6 23.5H32V6z\" fill=\"#0A559E\" /><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#0CC\" /><path d=\"M7.35 9.68l.49.99a44.57 44.57 0 011.2 2.64l.56 1.33.57-1.33a78.87 78.87 0 011.18-2.64l.5-.99h1.71a52.27 52.27 0 01.4 4l.14 2.22.12 2.1H12.4l-.1-2.64c-.04-.95-.1-1.91-.18-2.88a517.56 517.56 0 01-1 2.34 108.94 108.94 0 01-.9 2.12H8.9a118.46 118.46 0 00-.92-2.12l-.51-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.72 18H4.9l.1-2.1.15-2.22.18-2.14c.07-.68.15-1.3.23-1.86h1.79zm14 0v1.6h-2.5V18h-1.87v-6.72h-2.51v-1.6h6.89zm3.97 5.87a1.18 1.18 0 00-.15-.61c-.1-.18-.29-.34-.54-.46a3.8 3.8 0 00-1.04-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.12.15 6.41 6.41 0 01-.69-.1 7.3 7.3 0 01-.58-.14 2.3 2.3 0 01-.41-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32s.37-.48.37-.78zM11.31 28.87c.13 0 .24 0 .32-.03a.69.69 0 00.21-.09.32.32 0 00.11-.14.48.48 0 00.03-.17c0-.14-.06-.25-.19-.34-.13-.09-.35-.19-.66-.3a5.76 5.76 0 01-.4-.15 1.63 1.63 0 01-.38-.24 1.17 1.17 0 01-.26-.34 1.09 1.09 0 01-.1-.5 1.11 1.11 0 01.41-.91c.14-.1.3-.18.48-.24.2-.06.4-.09.64-.09a2.59 2.59 0 011.23.29l-.27.74a2.33 2.33 0 00-.39-.16 1.58 1.58 0 00-.51-.07.93.93 0 00-.49.1c-.1.05-.14.15-.14.28 0 .07.02.14.05.19.04.05.09.1.15.14l.23.12.29.1c.22.08.4.16.56.24.16.07.3.16.4.27a.97.97 0 01.24.36c.05.14.08.31.08.51 0 .4-.14.7-.41.91-.27.21-.68.32-1.23.32-.18 0-.35-.01-.5-.04a2.48 2.48 0 01-.69-.18 2.41 2.41 0 01-.2-.1l.26-.74c.13.06.28.13.46.18a2.5 2.5 0 00.67.08zm5.09-3l.15.56.2.63.2.66c.06.22.13.43.2.62a18.97 18.97 0 00.3-1.41 62.02 62.02 0 00.28-1.5h.97a40.98 40.98 0 01-.49 2.11c-.18.72-.37 1.4-.59 2.04h-.85a28.26 28.26 0 01-.41-1.2l-.4-1.27-.38 1.27c-.13.42-.26.82-.4 1.2h-.86a32 32 0 01-.6-2.04c-.17-.71-.33-1.42-.47-2.11h1.01a43.02 43.02 0 00.28 1.5 58.65 58.65 0 00.33 1.4 12.62 12.62 0 00.4-1.28l.18-.63.15-.55h.8zm2.9 3.71v-4.15h2.78v.78h-1.84v.87h1.64v.79h-1.64v1.72h-.94z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 6a6 6 0 016-6h20a6 6 0 016 6v20a6 6 0 01-6 6H6a6 6 0 01-6-6V6z\" fill=\"#FF444F\" /><path d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm24.53 2.07L25.04 32H26a6 6 0 006-6V6c0-1.5-.55-2.88-1.47-3.93z\" fill=\"#E12E3A\" /><path d=\"M9.54 19.07l.35.02h.5c1.09 0 1.9-.27 2.42-.82.53-.55.8-1.31.8-2.28 0-1.02-.26-1.8-.76-2.31-.5-.53-1.3-.79-2.4-.79a7.9 7.9 0 00-.46.02c-.16 0-.3 0-.45.02v6.14zm6.32-3.08c0 .84-.13 1.57-.4 2.2a4.04 4.04 0 01-1.11 1.55c-.48.4-1.06.72-1.75.92-.7.2-1.47.31-2.33.31-.39 0-.85-.02-1.37-.06a10.52 10.52 0 01-1.54-.2v-9.44a12.02 12.02 0 011.57-.18 21.39 21.39 0 011.41-.06c.83 0 1.58.1 2.26.28.68.19 1.26.48 1.75.88a3.92 3.92 0 011.12 1.54c.26.63.39 1.38.39 2.26z\" fill=\"#fff\" /><path d=\"M22.02 20.84a25.7 25.7 0 00-2-3.34 16.4 16.4 0 00-1.1 1.65l-.57.97-.39.72h-2.49c.41-.75.89-1.55 1.43-2.38.55-.83 1.16-1.7 1.83-2.64l-3.12-4.68h2.65l1.89 3.03 1.84-3.03h2.5l-3.08 4.7a32.63 32.63 0 011.97 2.83c.53.86.95 1.59 1.26 2.17h-2.62z\" fill=\"#fff\" /></svg>);","import React from 'react';\nimport { getCFDPlatformLabel } from '@deriv/shared';\nimport { Text, Button, Icon, Popover } from '@deriv/components';\nimport { TPasswordBoxProps } from './props.types';\nimport { localize } from '@deriv/translations';\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-trade-modal__password-box'>\n        <div className='cfd-trade-modal__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-trade-modal__password-tooltip'\n                zIndex={9999}\n            >\n                <Text size='xs'>***************</Text>\n            </Popover>\n        </div>\n        <Popover\n            className='cfd-trade-modal__password-popover'\n            alignment='left'\n            message={localize('Change Password')}\n            relative_render\n            zIndex={9999}\n        >\n            <Button\n                className='cfd-trade-modal__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nexport default PasswordBox;\n","import React from 'react';\nimport { Clipboard } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { TCFDAccountCopy } from './props.types';\n\nconst CFDAccountCopy = ({ text, className }: TCFDAccountCopy) => {\n    return (\n        <div className={className} data-testid='cfd_account_copy_main_div'>\n            <Clipboard\n                text_copy={text}\n                info_message={isMobile() ? '' : localize('copy')}\n                success_message={localize('copied!')}\n                popoverAlignment={isMobile() ? 'left' : 'bottom'}\n            />\n        </div>\n    );\n};\n\nexport { CFDAccountCopy };\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Text } from '@deriv/components';\n\nimport { CFDAccountCopy } from './cfd-account-copy';\n\nexport type TSpecBoxProps = {\n    value?: string;\n    is_bold?: boolean;\n    is_broker?: boolean;\n};\n\nconst SpecBox = ({ value, is_bold, is_broker }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box '>\n        <Text\n            size='xs'\n            weight={is_bold ? 'bold' : ''}\n            className={classNames('cfd-trade-modal__spec-text', { 'cfd-trade-modal__spec-text-broker': is_broker })}\n        >\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nexport default SpecBox;\n","import PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Button, Icon, Modal, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\n\nconst Checkmark = ({ className }) => (\n    <Icon className={className} icon='IcCheckmarkCircle' custom_color='var(--status-success)' size={24} />\n);\n\nconst SuccessDialog = ({\n    classNameMessage = '',\n    has_cancel,\n    has_submit,\n    icon,\n    message,\n    onCancel,\n    onSubmit,\n    heading,\n    icon_size,\n    text_submit,\n    text_cancel,\n    is_open,\n    toggleModal,\n    title,\n    has_close_icon,\n    width = '',\n    is_medium_button,\n}) => {\n    return (\n        <Modal\n            className='cfd-success-dialog'\n            is_open={is_open}\n            toggleModal={toggleModal}\n            has_close_icon={has_close_icon}\n            small={!title}\n            title={title}\n            width={width}\n        >\n            <Modal.Body>\n                <div\n                    className={classNames('success-change__icon-area', {\n                        'success-change__icon-area--large': icon_size === 'large',\n                        'success-change__icon-area--xlarge': icon_size === 'xlarge',\n                    })}\n                >\n                    {icon}\n                    <Checkmark className='bottom-right-overlay' />\n                </div>\n                {!heading && (\n                    <Text as='h2' weight='bold' size='s' className='dc-modal-header__title'>\n                        <Localize i18n_default_text='Success!' />\n                    </Text>\n                )}\n                {heading && heading}\n                {React.isValidElement(message) && message}\n                {!React.isValidElement(message) && <p className={classNameMessage}>{message}</p>}\n            </Modal.Body>\n            <Modal.Footer>\n                {has_cancel && (\n                    <Button\n                        onClick={onCancel}\n                        has_effect\n                        text={text_cancel || localize('Maybe later')}\n                        secondary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n                {has_submit && (\n                    <Button\n                        has_effect\n                        onClick={onSubmit}\n                        text={text_submit}\n                        primary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nSuccessDialog.defaultProps = {\n    icon_size: 'large',\n    has_cancel: false,\n    has_submit: true,\n};\n\nSuccessDialog.propTypes = {\n    classNameMessage: PropTypes.string,\n    has_cancel: PropTypes.bool,\n    has_close_icon: PropTypes.bool,\n    has_submit: PropTypes.bool,\n    heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    icon: PropTypes.object,\n    icon_size: PropTypes.string,\n    icon_type: PropTypes.string,\n    is_medium_button: PropTypes.bool,\n    is_open: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    onCancel: PropTypes.func,\n    onSubmit: PropTypes.func,\n    text_cancel: PropTypes.string,\n    text_submit: PropTypes.string,\n    title: PropTypes.string,\n    toggleModal: PropTypes.func,\n    width: PropTypes.string,\n};\n\nexport default SuccessDialog;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik } from 'formik';\nimport { Text, Icon, FormSubmitButton } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { CFD_PLATFORMS, getCFDPlatformLabel } from '@deriv/shared';\nimport { TCFDChangePasswordConfirmationProps } from './props.types';\n\nconst ChangePasswordConfirmation = ({\n    confirm_label,\n    className,\n    platform,\n    onConfirm,\n    onCancel,\n    context,\n}: TCFDChangePasswordConfirmationProps) => (\n    <Formik\n        initialValues={{\n            password: '',\n        }}\n        onSubmit={onConfirm}\n    >\n        {({ isSubmitting, handleSubmit }) => (\n            <form onSubmit={handleSubmit} data-testid='dt_cfd_change_password_form'>\n                <div\n                    className={classNames('cfd-change-password-confirmation__wrapper', {\n                        [`${className}-wrapper`]: className,\n                    })}\n                >\n                    <div className={classNames('cfd-change-password-confirmation', className)}>\n                        <Icon\n                            className='cfd-change-password__icon'\n                            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n                            width='122'\n                            height='108'\n                        />\n                        <Text as='p' align='center' size='s' weight='bold'>\n                            <Localize\n                                i18n_default_text='Confirm to change your {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text\n                            className='cfd-change-password-confirmation__description'\n                            as='p'\n                            align='center'\n                            color='loss-danger'\n                            size='xs'\n                        >\n                            <Localize\n                                i18n_default_text='This will change the password to all of your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <FormSubmitButton\n                            is_center={true}\n                            label={confirm_label || localize('Create')}\n                            cancel_label={localize('Cancel')}\n                            is_loading={isSubmitting}\n                            has_cancel={true}\n                            onCancel={onCancel}\n                            context={context}\n                        />\n                    </div>\n                </div>\n            </form>\n        )}\n    </Formik>\n);\n\nexport default ChangePasswordConfirmation;\n","import React from 'react';\nimport { PoiPoaDocsSubmitted } from '@deriv/account';\nimport { AccountStatusResponse } from '@deriv/api-types';\nimport {\n    Button,\n    DesktopWrapper,\n    Icon,\n    Loading,\n    MobileDialog,\n    MobileWrapper,\n    Modal,\n    Text,\n    UILoader,\n} from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getAuthenticationStatusInfo, isMobile, WS } from '@deriv/shared';\nimport CFDFinancialStpRealAccountSignup from './cfd-financial-stp-real-account-signup';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { JURISDICTION } from '../Helpers/cfd-config';\n\nconst SwitchToRealAccountMessage = ({ onClickOk }: { onClickOk: () => void }) => (\n    <div className='da-icon-with-message'>\n        <Icon icon={'IcPoaLock'} size={128} />\n        <Text className='da-icon-with-message__text' as='p' size={isMobile() ? 'xs' : 's'} weight='bold'>\n            {localize('Switch to your real account to submit your documents')}\n        </Text>\n        <Button\n            has_effect\n            text={localize('Ok')}\n            onClick={() => {\n                onClickOk();\n            }}\n            className='da-icon-with-message__button'\n            primary\n        />\n    </div>\n);\n\nconst CFDDbviOnboarding = observer(() => {\n    const { client, ui } = useStore();\n\n    const { account_status, fetchAccountSettings, is_virtual, updateAccountStatus, updateMT5Status } = client;\n    const { disableApp, enableApp } = ui;\n\n    const {\n        has_created_account_for_selected_jurisdiction,\n        has_submitted_cfd_personal_details,\n        is_cfd_verification_modal_visible,\n        jurisdiction_selected_shortcode,\n        enableCFDPasswordModal,\n        toggleCFDVerificationModal,\n    } = useCfdStore();\n\n    const [showSubmittedModal, setShowSubmittedModal] = React.useState(true);\n    const [is_loading, setIsLoading] = React.useState(false);\n\n    const getAccountStatusFromAPI = () => {\n        WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n            const { get_account_status } = response;\n\n            if (get_account_status?.authentication) {\n                const {\n                    poi_acknowledged_for_maltainvest,\n                    poi_acknowledged_for_bvi_labuan_vanuatu,\n                    poa_acknowledged,\n                    poa_resubmit_for_labuan,\n                    need_poa_submission,\n                } = getAuthenticationStatusInfo(get_account_status);\n                if (jurisdiction_selected_shortcode === JURISDICTION.MALTA_INVEST) {\n                    setShowSubmittedModal(poi_acknowledged_for_maltainvest && poa_acknowledged);\n                } else if (jurisdiction_selected_shortcode === JURISDICTION.LABUAN) {\n                    /* When verified with IDV+ Photo ID, POA is auto verified */\n                    const is_poa_submitted = poa_resubmit_for_labuan ? false : !need_poa_submission;\n                    setShowSubmittedModal(\n                        poi_acknowledged_for_bvi_labuan_vanuatu &&\n                            has_submitted_cfd_personal_details &&\n                            is_poa_submitted\n                    );\n                } else\n                    setShowSubmittedModal(\n                        poi_acknowledged_for_bvi_labuan_vanuatu &&\n                            poa_acknowledged &&\n                            has_submitted_cfd_personal_details\n                    );\n            }\n\n            setIsLoading(false);\n        });\n        setIsLoading(false);\n    };\n\n    React.useEffect(() => {\n        if (is_cfd_verification_modal_visible) {\n            setIsLoading(true);\n            getAccountStatusFromAPI();\n            fetchAccountSettings();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_cfd_verification_modal_visible]);\n\n    const getModalContent = () => {\n        if (is_loading) {\n            return <Loading is_fullscreen={false} />;\n        } else if (is_virtual) {\n            return <SwitchToRealAccountMessage onClickOk={toggleCFDVerificationModal} />;\n        }\n        return showSubmittedModal ? (\n            <PoiPoaDocsSubmitted\n                onClickOK={toggleCFDVerificationModal}\n                updateAccountStatus={updateAccountStatus}\n                account_status={account_status}\n                jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                has_created_account_for_selected_jurisdiction={has_created_account_for_selected_jurisdiction}\n                openPasswordModal={enableCFDPasswordModal}\n            />\n        ) : (\n            <CFDFinancialStpRealAccountSignup\n                onFinish={() => {\n                    updateMT5Status();\n                    if (has_created_account_for_selected_jurisdiction) {\n                        setShowSubmittedModal(true);\n                    } else {\n                        toggleCFDVerificationModal();\n                        enableCFDPasswordModal();\n                    }\n                }}\n            />\n        );\n    };\n\n    const getModalTitle = () =>\n        has_created_account_for_selected_jurisdiction\n            ? localize('Submit your proof of identity and address')\n            : localize('Add a real MT5 account');\n\n    return (\n        <React.Suspense fallback={<UILoader />}>\n            <DesktopWrapper>\n                <Modal\n                    className='cfd-financial-stp-modal'\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    is_open={is_cfd_verification_modal_visible}\n                    title={getModalTitle()}\n                    toggleModal={toggleCFDVerificationModal}\n                    height='700px'\n                    width='996px'\n                    onMount={() => getAccountStatusFromAPI()}\n                    exit_classname='cfd-modal--custom-exit'\n                >\n                    {getModalContent()}\n                </Modal>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <MobileDialog\n                    portal_element_id='deriv_app'\n                    title={getModalTitle()}\n                    wrapper_classname='cfd-financial-stp-modal'\n                    visible={is_cfd_verification_modal_visible}\n                    onClose={toggleCFDVerificationModal}\n                >\n                    {getModalContent()}\n                </MobileDialog>\n            </MobileWrapper>\n        </React.Suspense>\n    );\n});\n\nexport default CFDDbviOnboarding;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst AccountStatusList = [\n    'address_verified',\n    'age_verification',\n    'allow_document_upload',\n    'allow_poa_resubmission',\n    'allow_poi_resubmission',\n    'authenticated',\n    'authenticated_with_idv_photoid',\n    'cashier_locked',\n    'crs_tin_information',\n    'deposit_attempt',\n    'deposit_locked',\n    'df_deposit_requires_poi',\n    'disabled',\n    'document_expired',\n    'document_expiring_soon',\n    'document_under_review',\n    'dxtrade_password_not_set',\n    'financial_assessment_not_complete',\n    'financial_information_not_complete',\n    'financial_risk_approval',\n    'idv_revoked',\n    'max_turnover_limit_not_set',\n    'mt5_password_not_set',\n    'mt5_withdrawal_locked',\n    'needs_affiliate_coc_approval',\n    'no_trading',\n    'no_withdrawal_or_trading',\n    'p2p_blocked_for_pa',\n    'pa_withdrawal_explicitly_allowed',\n    'password_reset_required',\n    'personal_details_locked',\n    'poi_name_mismatch',\n    'professional',\n    'professional_requested',\n    'professional_rejected',\n    'shared_payment_method',\n    'social_signup',\n    'transfers_blocked',\n    'trading_experience_not_complete',\n    'ukgc_funds_protection',\n    'unwelcome',\n    'withdrawal_locked',\n] as const;\n\ntype TAccountStatus = typeof AccountStatusList[number];\n\n/**\n * Custom hook to check if a particular account status is present.\n * @name useIsAccountStatusPresent\n * @param status of the account to check\n * @returns boolean\n */\nconst useIsAccountStatusPresent = (status: TAccountStatus) => {\n    const {\n        client: { account_status },\n    } = useStore();\n\n    const status_list = account_status?.status;\n\n    return React.useMemo(() => status_list?.includes(status) ?? false, [status_list, status]);\n};\n\nexport default useIsAccountStatusPresent;\n","import React from 'react';\nimport { FormikValues } from 'formik/dist/types';\nimport ProofOfAddressForm from '@deriv/account/src/Sections/Verification/ProofOfAddress/proof-of-address-form';\n\ntype TCFDPOA = {\n    index: number;\n    onSave: (index: number, values: FormikValues) => void;\n    onSubmit: (index: number, values: FormikValues) => void;\n};\n\nconst CFDPOA = ({ index, onSave, onSubmit }: TCFDPOA) => {\n    const onSubmitForCFDModal = (index: number, values: FormikValues) => {\n        onSave(index, values);\n        onSubmit(index, values);\n    };\n\n    return (\n        <div className='cfd-proof-of-address'>\n            <ProofOfAddressForm step_index={index} is_for_cfd_modal onSubmitForCFDModal={onSubmitForCFDModal} />\n        </div>\n    );\n};\n\nexport default CFDPOA;\n","// @ts-expect-error remove this line when ProofOfIdentityContainerForMt5 is converted to TS\nimport ProofOfIdentityContainerForMt5 from '@deriv/account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-container-for-mt5.jsx';\nimport React from 'react';\nimport { useStore, observer } from '@deriv/stores';\nimport type { TCoreStores } from '@deriv/stores/types';\n\ntype TCFDValue = {\n    poi_state: string;\n};\n\ntype TFormValues = {\n    poi_state?: string;\n};\n\nexport type TCFDPOIProps = {\n    index: number;\n    onSubmit: (index: number, value: TCFDValue) => void;\n    value: TCFDValue;\n    addNotificationMessageByKey: TCoreStores['notifications']['addNotificationMessageByKey'];\n    height: string;\n    onSave: (index: number, values: TFormValues) => void;\n    removeNotificationByKey: TCoreStores['notifications']['removeNotificationByKey'];\n    removeNotificationMessage: TCoreStores['notifications']['removeNotificationMessage'];\n    jurisdiction_selected_shortcode: string;\n};\n\nconst CFDPOI = observer(({ index, onSave, onSubmit, ...props }: TCFDPOIProps) => {\n    const { client } = useStore();\n    const { account_settings, residence_list } = client;\n\n    const [poi_state, setPOIState] = React.useState<string>('none');\n    const citizen = account_settings?.citizen || account_settings?.country_code;\n    const citizen_data = residence_list?.find(item => item.value === citizen);\n\n    const onStateChange = (status: string) => {\n        setPOIState(status);\n        onSave(index, { poi_state: status });\n        onSubmit(index, { poi_state });\n    };\n    return (\n        <ProofOfIdentityContainerForMt5\n            {...props}\n            onStateChange={(status: string) => onStateChange(status)}\n            citizen_data={citizen_data}\n        />\n    );\n});\n\nexport default CFDPOI;\n","import { Field, FieldProps, Formik, FormikHelpers as FormikActions, FormikProps } from 'formik';\nimport React from 'react';\nimport { ResidenceList } from '@deriv/api-types';\nimport {\n    Autocomplete,\n    AutoHeightWrapper,\n    DesktopWrapper,\n    Div100vhContainer,\n    Dropdown,\n    FormSubmitButton,\n    FormSubmitErrorMessage,\n    Input,\n    Loading,\n    MobileWrapper,\n    Modal,\n    SelectNative,\n    Text,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { isDeepEqual, isDesktop, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\ntype TCFDPersonalDetailsFormProps = {\n    changeable_fields?: string[];\n    form_error?: string;\n    index: number;\n    is_loading: boolean;\n    onSubmit: TOnSubmit;\n    residence_list: ResidenceList;\n    initial_values: TFormValues;\n};\n\ntype TValidatePersonalDetailsParams = {\n    values: TFormValues;\n    residence_list: ResidenceList;\n    account_opening_reason: TAccountOpeningReasonList;\n};\n\ntype TFindDefaultValuesInResidenceList = (params: {\n    residence_list: ResidenceList;\n    citizen_text: string;\n    tax_residence_text: string;\n    place_of_birth_text?: string;\n}) => {\n    citizen?: ResidenceList[0];\n    place_of_birth?: ResidenceList[0];\n    tax_residence?: ResidenceList[0];\n};\n\ntype TCFDInputFieldProps = {\n    id?: string;\n    value?: string;\n    name: string;\n    maxLength?: number;\n    label: string;\n    optional?: boolean;\n    required?: boolean;\n    placeholder: string;\n    disabled?: boolean;\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n};\n\ntype TFormValues = { [key: string]: string };\n\ntype TOnSubmit = (\n    index: number,\n    value: TFormValues,\n    setSubmitting: (isSubmitting: boolean) => void,\n    is_dirty?: boolean\n) => void;\n\ntype TSubmitForm = (\n    values: TFormValues,\n    actions: FormikActions<TFormValues>,\n    idx: number,\n    onSubmitFn: TOnSubmit,\n    is_dirty: boolean,\n    residence_list: ResidenceList\n) => void;\n\ntype TAccountOpeningReasonList = {\n    text: string;\n    value: string;\n}[];\n\nconst getAccountOpeningReasonList = (): TAccountOpeningReasonList => [\n    {\n        text: localize('Hedging'),\n        value: 'Hedging',\n    },\n    {\n        text: localize('Income Earning'),\n        value: 'Income Earning',\n    },\n    {\n        text: localize('Speculative'),\n        value: 'Speculative',\n    },\n    {\n        text: localize('Peer-to-peer exchange'),\n        value: 'Peer-to-peer exchange',\n    },\n];\n\nexport const InputField = ({ maxLength, name, optional = false, ...props }: TCFDInputFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { errors, touched } }: FieldProps<string, TFormValues>) => (\n            <Input\n                {...field}\n                type='text'\n                required={!optional}\n                name={name}\n                autoComplete='off'\n                maxLength={maxLength || 30}\n                error={touched[field.name as keyof TFormValues] && errors[field.name as keyof TFormValues]}\n                {...props}\n            />\n        )}\n    </Field>\n);\n\nconst validatePersonalDetails = ({\n    values,\n    residence_list,\n    account_opening_reason,\n}: TValidatePersonalDetailsParams) => {\n    const tin_format = residence_list.find(res => res.text === values.tax_residence)?.tin_format;\n\n    const tin_regex = tin_format || ['^[A-Za-z0-9./s-]{0,25}$']; // fallback to API's default rule check\n\n    const validations: { [key: string]: ((v: string) => boolean | RegExpMatchArray | null)[] } = {\n        citizen: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n        tax_residence: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n        tax_identification_number: [\n            (v: string) => !!v,\n            (v: string) => (tin_regex ? tin_regex?.some(regex => v.match(regex)) : true),\n            () => !!values.tax_residence,\n        ],\n        account_opening_reason: [\n            (v: string) => !!v,\n            (v: string) => account_opening_reason.map(i => i.value).includes(v),\n        ],\n        place_of_birth: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n    };\n    const mappedKey: { [key: string]: string } = {\n        citizen: localize('Citizenship'),\n        tax_residence: localize('Tax residence'),\n        tax_identification_number: localize('Tax identification number'),\n        account_opening_reason: localize('Account opening reason'),\n        place_of_birth: localize('Place of birth'),\n    };\n\n    const field_error_messages = (field_name: string): string[] => [\n        localize('{{field_name}} is required', { field_name }),\n        localize('{{field_name}} is not properly formatted.', { field_name }),\n        // this rule is specifically for tax_identification_number when tax_residence is empty\n        localize('Please fill in Tax residence.'),\n    ];\n\n    const errors: { [key: string]: React.ReactNode } = {};\n\n    Object.entries(validations).forEach(([key, rules]) => {\n        const error_index = rules.findIndex(v => !v(values[key as 'citizen']));\n        if (error_index !== -1) {\n            errors[key] = field_error_messages(mappedKey[key])[error_index];\n        }\n    });\n\n    return errors;\n};\n\nconst findDefaultValuesInResidenceList: TFindDefaultValuesInResidenceList = ({\n    residence_list,\n    citizen_text,\n    tax_residence_text,\n    place_of_birth_text,\n}) => {\n    let citizen, tax_residence, place_of_birth;\n    residence_list?.forEach((item: ResidenceList[0]) => {\n        if (item.text === citizen_text) {\n            citizen = item;\n        }\n        if (item.text === place_of_birth_text) {\n            place_of_birth = item;\n        }\n        if (item.text === tax_residence_text) {\n            tax_residence = item;\n        }\n    });\n    return { citizen, place_of_birth, tax_residence };\n};\n\nconst submitForm: TSubmitForm = (values, actions, idx, onSubmit, is_dirty, residence_list) => {\n    const { citizen, place_of_birth, tax_residence } = findDefaultValuesInResidenceList({\n        residence_list,\n        citizen_text: values.citizen,\n        tax_residence_text: values.tax_residence,\n        place_of_birth_text: values.place_of_birth,\n    });\n\n    const payload = {\n        ...values,\n        citizen: citizen?.value || '',\n        place_of_birth: place_of_birth?.value || '',\n        tax_residence: tax_residence?.value || '',\n    };\n    onSubmit(idx, payload, actions.setSubmitting, is_dirty);\n};\n\nconst CFDPersonalDetailsForm = ({\n    changeable_fields,\n    is_loading,\n    residence_list,\n    onSubmit,\n    initial_values,\n    index,\n    form_error,\n}: TCFDPersonalDetailsFormProps) => {\n    const account_opening_reason = getAccountOpeningReasonList();\n\n    const onSubmitForm = (values: TFormValues, actions: FormikActions<TFormValues>) =>\n        submitForm(values, actions, index, onSubmit, !isDeepEqual(initial_values, values), residence_list);\n\n    const isFieldDisabled = (field: string) => !!initial_values[field] && !changeable_fields?.includes(field);\n\n    if (is_loading || residence_list.length === 0) return <Loading is_fullscreen={false} />;\n\n    return (\n        <Formik\n            initialValues={{ ...initial_values }}\n            validateOnChange\n            validateOnBlur\n            validate={values =>\n                validatePersonalDetails({\n                    values,\n                    residence_list,\n                    account_opening_reason,\n                })\n            }\n            onSubmit={onSubmitForm}\n            validateOnMount\n        >\n            {({\n                handleSubmit,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                errors,\n                touched,\n                values,\n                setFieldValue,\n                isValid,\n            }: FormikProps<TFormValues>) => {\n                const citizenship_error = touched.citizen && errors.citizen;\n                const place_of_birth_error = touched.place_of_birth && errors.place_of_birth;\n                const tax_residence_error = touched.tax_residence && errors.tax_residence;\n\n                const handleItemSelection = (item: ResidenceList[0], _field: string) => {\n                    const item_value = item.value ? item.text : '';\n                    setFieldValue(_field, item_value, true);\n                };\n\n                return (\n                    <AutoHeightWrapper default_height={200} height_offset={isDesktop() ? 148 : null}>\n                        {({ setRef }: { setRef: (instance: HTMLFormElement | null) => void }) => (\n                            <form\n                                className='cfd-personal-details-modal__form'\n                                ref={setRef}\n                                onSubmit={handleSubmit}\n                                autoComplete='off'\n                                noValidate\n                            >\n                                <Div100vhContainer\n                                    className='details-form'\n                                    max_autoheight_offset='179px'\n                                    is_disabled={isDesktop()}\n                                >\n                                    <Text\n                                        as='p'\n                                        size='xxs'\n                                        align='center'\n                                        className='details-form__description'\n                                        data-testid='dt_cfd_details_form_description'\n                                    >\n                                        <Localize\n                                            i18n_default_text={\n                                                'Any information you provide is confidential and will be used for verification purposes only.'\n                                            }\n                                        />\n                                    </Text>\n                                    <ThemedScrollbars height='512px' is_bypassed={isMobile()}>\n                                        <div className='details-form__elements'>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='citizen'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                {...field}\n                                                                id='real_mt5_citizenship'\n                                                                data-lpignore='true'\n                                                                autoComplete='off'\n                                                                type='text'\n                                                                label={localize('Citizenship*')}\n                                                                error={citizenship_error}\n                                                                disabled={isFieldDisabled('citizen')}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'citizen')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                required\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Citizenship*')}\n                                                        value={values.citizen}\n                                                        list_items={residence_list}\n                                                        error={citizenship_error}\n                                                        disabled={isFieldDisabled('citizen')}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('citizen', e.target.value, true)\n                                                        }\n                                                        required\n                                                        should_hide_disabled_options={false}\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='place_of_birth'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                {...field}\n                                                                id='real_mt5_place_of_birth'\n                                                                data-lpignore='true'\n                                                                autoComplete='off'\n                                                                type='text'\n                                                                label={localize('Place of birth*')}\n                                                                error={place_of_birth_error}\n                                                                disabled={isFieldDisabled('place_of_birth')}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'place_of_birth')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                required\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Place of birth*')}\n                                                        value={values.place_of_birth}\n                                                        list_items={residence_list}\n                                                        error={place_of_birth_error}\n                                                        disabled={isFieldDisabled('place_of_birth')}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('place_of_birth', e.target.value, true)\n                                                        }\n                                                        required\n                                                        should_hide_disabled_options={false}\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='tax_residence'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                id='real_mt5_tax_residence'\n                                                                data-lpignore='true'\n                                                                type='text'\n                                                                autoComplete='off'\n                                                                label={localize('Tax residence*')}\n                                                                error={tax_residence_error}\n                                                                disabled={isFieldDisabled('tax_residence')}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'tax_residence')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                {...field}\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Tax residence*')}\n                                                        value={values.tax_residence}\n                                                        error={tax_residence_error}\n                                                        disabled={isFieldDisabled('tax_residence')}\n                                                        list_items={residence_list}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('tax_residence', e.target.value, true)\n                                                        }\n                                                        required\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <InputField\n                                                    id='real_mt5_tax_identification_number'\n                                                    name='tax_identification_number'\n                                                    label={localize('Tax identification number*')}\n                                                    placeholder={localize('Tax identification number*')}\n                                                    value={values.tax_identification_number}\n                                                    onBlur={handleBlur}\n                                                    disabled={isFieldDisabled('tax_identification_number')}\n                                                    optional\n                                                />\n                                            </fieldset>\n                                            <Field name='account_opening_reason'>\n                                                {({\n                                                    field,\n                                                    meta: { error, touched },\n                                                }: FieldProps<string, TFormValues>) => (\n                                                    <React.Fragment>\n                                                        <DesktopWrapper>\n                                                            <Dropdown\n                                                                {...field}\n                                                                placeholder={localize('Account opening reason*')}\n                                                                is_align_text_left\n                                                                name={field.name}\n                                                                list={account_opening_reason}\n                                                                value={values.account_opening_reason}\n                                                                disabled={isFieldDisabled('account_opening_reason')}\n                                                                onChange={handleChange}\n                                                                handleBlur={handleBlur}\n                                                                error={touched && error}\n                                                                list_portal_id='modal_root'\n                                                            />\n                                                        </DesktopWrapper>\n                                                        <MobileWrapper>\n                                                            <SelectNative\n                                                                {...field}\n                                                                placeholder={localize('Please select')}\n                                                                name={field.name}\n                                                                label={localize('Account opening reason*')}\n                                                                list_items={account_opening_reason}\n                                                                value={values.account_opening_reason}\n                                                                disabled={isFieldDisabled('account_opening_reason')}\n                                                                error={touched && error}\n                                                                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                                                    handleChange(e);\n                                                                    setFieldValue(\n                                                                        'account_opening_reason',\n                                                                        e.target.value,\n                                                                        true\n                                                                    );\n                                                                }}\n                                                                data_testid='account_opening_reason_mobile'\n                                                            />\n                                                        </MobileWrapper>\n                                                    </React.Fragment>\n                                                )}\n                                            </Field>\n                                        </div>\n                                    </ThemedScrollbars>\n                                </Div100vhContainer>\n                                <Modal.Footer is_bypassed={isMobile()} has_separator>\n                                    {form_error && <FormSubmitErrorMessage message={form_error} />}\n                                    <FormSubmitButton\n                                        is_disabled={isSubmitting || !isValid || Object.keys(errors).length > 0}\n                                        is_absolute={isMobile()}\n                                        label={localize('Next')}\n                                    />\n                                </Modal.Footer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default CFDPersonalDetailsForm;\n","import React from 'react';\nimport { Div100vhContainer, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { TCFDPersonalDetailsContainerProps } from './props.types';\nimport CFDPersonalDetailsForm from '../Components/cfd-personal-details-form';\nimport { getPropertyValue, isDesktop, WS } from '@deriv/shared';\nimport { GetSettings } from '@deriv/api-types';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TFormValues = { [key: string]: string };\ntype TSetSubmitting = (isSubmitting: boolean) => void;\n\nconst CFDPersonalDetailsContainer = observer(({ onSubmit }: TCFDPersonalDetailsContainerProps) => {\n    const { client } = useStore();\n\n    const { account_settings, getChangeableFields, residence_list, setAccountSettings } = client;\n\n    const [form_error, setFormError] = React.useState('');\n    const [is_loading, setIsLoading] = React.useState(false);\n    const [form_values, setFormValues] = React.useState<TFormValues>({\n        citizen: '',\n        place_of_birth: '',\n        tax_residence: '',\n        tax_identification_number: '',\n        account_opening_reason: '',\n    });\n\n    const initiatePersonalDetails = async (setSubmitting?: TSetSubmitting) => {\n        // force request to update settings cache since settings have been updated\n        let get_settings_response: GetSettings;\n        if (!account_settings) {\n            const response = await WS.authorized.storage.getSettings();\n\n            if (response.error) {\n                setFormError(response.error.message);\n                if (typeof setSubmitting === 'function') {\n                    setSubmitting(false);\n                }\n                return;\n            }\n            get_settings_response = response.get_settings;\n        } else {\n            get_settings_response = account_settings;\n        }\n\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            get_settings_response;\n\n        setFormValues({\n            ...form_values,\n            citizen: transform(citizen) || '',\n            place_of_birth: transform(place_of_birth) || '',\n            tax_residence: transform(tax_residence) || '',\n            tax_identification_number: tax_identification_number || '',\n            account_opening_reason: account_opening_reason || '',\n        });\n    };\n\n    React.useEffect(() => {\n        setIsLoading(true);\n        initiatePersonalDetails().then(() => {\n            setIsLoading(false);\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const transform = (value: unknown) => {\n        const [result] = residence_list?.filter(item => item.value === value);\n        return getPropertyValue(result, ['text']) || value;\n    };\n\n    const saveFormData = (_index: number, value: TFormValues) => {\n        setFormValues({\n            ...value,\n            citizen: transform(value.citizen),\n            place_of_birth: transform(value.place_of_birth),\n            tax_residence: transform(value.tax_residence),\n        });\n    };\n\n    const updateValue = async (index: number, value: TFormValues, setSubmitting: TSetSubmitting, is_dirty = true) => {\n        if (is_dirty) {\n            // Set account settings\n            const data = await WS.setSettings(value);\n            if (data.error) {\n                setFormError(data.error.message);\n                setSubmitting(false);\n                return;\n            }\n            initiatePersonalDetails(setSubmitting);\n        }\n        saveFormData(index, value);\n        setAccountSettings({ ...account_settings, ...value });\n        onSubmit(index, value);\n    };\n\n    return (\n        <Div100vhContainer\n            className='cfd-personal-details-modal'\n            id='cfd-personal-details-modal'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='cfd-personal-details-modal__heading-container'>\n                <Text as='p' weight='bold' align='center' size='s'>\n                    {localize('Complete your personal details')}\n                </Text>\n            </div>\n            <div className='cfd-personal-details-modal__body'>\n                <CFDPersonalDetailsForm\n                    form_error={form_error}\n                    index={2}\n                    is_loading={is_loading}\n                    onSubmit={updateValue}\n                    residence_list={residence_list}\n                    changeable_fields={getChangeableFields()}\n                    initial_values={form_values}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n});\n\nexport default CFDPersonalDetailsContainer;\n","import React from 'react';\nimport { Div100vhContainer } from '@deriv/components';\nimport { useIsAccountStatusPresent } from '@deriv/hooks';\nimport { isDesktop, getAuthenticationStatusInfo } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport type { TCoreStores } from '@deriv/stores/types';\nimport CFDPOA from '../Components/cfd-poa';\nimport CFDPOI from '../Components/cfd-poi';\nimport CFDPersonalDetailsContainer from './cfd-personal-details-container';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { JURISDICTION } from '../Helpers/cfd-config';\n\ntype TCFDFinancialStpRealAccountSignupProps = {\n    onFinish: () => void;\n};\n\ntype TNextStep = (index: number, value: { [key: string]: string | undefined }) => void;\n\ntype TItem = {\n    refreshNotifications: TCoreStores['notifications']['refreshNotifications'];\n    removeNotificationMessage: TCoreStores['notifications']['removeNotificationMessage'];\n    removeNotificationByKey: TCoreStores['notifications']['removeNotificationByKey'];\n    addNotificationMessageByKey: TCoreStores['notifications']['addNotificationMessageByKey'];\n    authentication_status: TCoreStores['client']['authentication_status'];\n    account_settings: TCoreStores['client']['account_settings'];\n    email: TCoreStores['client']['email'];\n    is_fully_authenticated: TCoreStores['client']['is_fully_authenticated'];\n    landing_company: TCoreStores['client']['landing_company'];\n    residence_list: TCoreStores['client']['residence_list'];\n    states_list: TCoreStores['client']['states_list'];\n    fetchStatesList: TCoreStores['client']['fetchStatesList'];\n    account_status: TCoreStores['client']['account_status'];\n    jurisdiction_selected_shortcode: TCoreStores['modules']['cfd']['jurisdiction_selected_shortcode'];\n    has_submitted_cfd_personal_details: TCoreStores['modules']['cfd']['has_submitted_cfd_personal_details'];\n    onFinish: TCFDFinancialStpRealAccountSignupProps['onFinish'];\n};\n\ntype TItemsState<T extends TItem> = {\n    body: typeof CFDPOI | typeof CFDPOA | typeof CFDPersonalDetailsContainer;\n    form_value: { [key: string]: string | undefined };\n    forwarded_props: Array<Partial<keyof T>>;\n};\n\nconst CFDFinancialStpRealAccountSignup = observer(({ onFinish }: TCFDFinancialStpRealAccountSignupProps) => {\n    const { notifications, client } = useStore();\n\n    const { refreshNotifications, removeNotificationMessage, removeNotificationByKey, addNotificationMessageByKey } =\n        notifications;\n\n    const {\n        authentication_status,\n        account_settings,\n        email,\n        is_fully_authenticated,\n        landing_company,\n        residence_list,\n        states_list,\n        fetchStatesList,\n        account_status,\n    } = client;\n\n    const { jurisdiction_selected_shortcode, has_submitted_cfd_personal_details } = useCfdStore();\n\n    const passthroughProps = {\n        refreshNotifications,\n        removeNotificationMessage,\n        removeNotificationByKey,\n        addNotificationMessageByKey,\n        authentication_status,\n        account_settings,\n        email,\n        is_fully_authenticated,\n        landing_company,\n        residence_list,\n        states_list,\n        fetchStatesList,\n        account_status,\n        jurisdiction_selected_shortcode,\n        has_submitted_cfd_personal_details,\n        onFinish,\n    } as const;\n\n    const [step, setStep] = React.useState(0);\n    const [form_error, setFormError] = React.useState('');\n    const state_index = step;\n    let is_mounted = React.useRef(true).current;\n\n    const { need_poi_for_maltainvest, need_poi_for_bvi_labuan_vanuatu } = getAuthenticationStatusInfo(account_status);\n\n    const is_authenticated_with_idv_photoid = useIsAccountStatusPresent('authenticated_with_idv_photoid');\n\n    const poi_config: TItemsState<typeof passthroughProps> = {\n        body: CFDPOI,\n        form_value: {\n            poi_state: 'unknown',\n        },\n        forwarded_props: [\n            'addNotificationMessageByKey',\n            'authentication_status',\n            'refreshNotifications',\n            'removeNotificationMessage',\n            'removeNotificationByKey',\n            'jurisdiction_selected_shortcode',\n        ],\n    };\n\n    const poa_config: TItemsState<typeof passthroughProps> = {\n        body: CFDPOA,\n        form_value: {},\n        forwarded_props: [],\n    };\n\n    const personal_details_config: TItemsState<typeof passthroughProps> = {\n        body: CFDPersonalDetailsContainer,\n        form_value: {\n            citizen: '',\n            place_of_birth: '',\n            tax_residence: '',\n            tax_identification_number: '',\n            account_opening_reason: '',\n        },\n        forwarded_props: ['residence_list', 'landing_company'],\n    };\n\n    const should_show_poi = () => {\n        if (jurisdiction_selected_shortcode === JURISDICTION.MALTA_INVEST) {\n            return need_poi_for_maltainvest;\n        }\n        return need_poi_for_bvi_labuan_vanuatu;\n    };\n\n    const shouldShowPOA = () => {\n        if (JURISDICTION.LABUAN === jurisdiction_selected_shortcode && is_authenticated_with_idv_photoid) {\n            return true;\n        }\n        return !['pending', 'verified'].includes(authentication_status.document_status);\n    };\n\n    const should_show_personal_details =\n        !has_submitted_cfd_personal_details && jurisdiction_selected_shortcode !== JURISDICTION.MALTA_INVEST;\n\n    const verification_configs = [\n        ...(should_show_poi() ? [poi_config] : []),\n        ...(shouldShowPOA() ? [poa_config] : []),\n        ...(should_show_personal_details ? [personal_details_config] : []),\n    ];\n\n    const [items, setItems] = React.useState<TItemsState<typeof passthroughProps>[]>(verification_configs);\n\n    const clearError = () => {\n        setFormError('');\n    };\n\n    React.useEffect(() => {\n        refreshNotifications();\n    }, [items, refreshNotifications]);\n\n    React.useEffect(() => {\n        fetchStatesList();\n    }, [fetchStatesList]);\n\n    const unmount = () => {\n        is_mounted = false;\n        onFinish();\n    };\n\n    const saveFormData = (index: number, value: { [key: string]: string | undefined }) => {\n        if (!is_mounted) return; // avoiding state update on unmounted component\n        const cloned_items: TItemsState<typeof passthroughProps>[] = [...items];\n        cloned_items[index].form_value = value;\n        setItems(cloned_items);\n    };\n\n    const nextStep: TNextStep = (index, value) => {\n        clearError();\n        if (step + 1 < items.length) {\n            saveFormData(index, value);\n            setStep(step + 1);\n        } else unmount();\n    };\n\n    const prevStep = () => {\n        if (step - 1 >= 0) {\n            setStep(step - 1);\n            setFormError('');\n        } else unmount();\n    };\n\n    const getCurrent = (key?: keyof TItemsState<typeof passthroughProps>) => {\n        return key ? items[state_index][key] : items[state_index];\n    };\n\n    const BodyComponent = getCurrent('body') as typeof CFDPOI & typeof CFDPOA & typeof CFDPersonalDetailsContainer;\n\n    const form_value = getCurrent('form_value');\n\n    const passthrough: Partial<TCFDFinancialStpRealAccountSignupProps> & {\n        is_authenticated_with_idv_photoid?: boolean;\n    } = ((getCurrent('forwarded_props') || []) as TItemsState<typeof passthroughProps>['forwarded_props']).reduce(\n        (forwarded_prop, item) => {\n            return Object.assign(forwarded_prop, {\n                [item]: passthroughProps[item],\n            });\n        },\n        {}\n    );\n\n    if (shouldShowPOA()) {\n        passthrough.is_authenticated_with_idv_photoid = is_authenticated_with_idv_photoid;\n    }\n\n    return (\n        <Div100vhContainer\n            className='cfd-financial-stp-modal'\n            id='real_mt5_financial_stp_account_opening'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='cfd-financial-stp-modal__body' data-testid='dt_cfd_financial_stp_modal_body'>\n                <BodyComponent\n                    /** TODO: Body component is 3 different component in which one of them does not have prop `value`\n                     * it needs a refactor\n                     */\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    value={form_value}\n                    index={state_index}\n                    onSubmit={nextStep}\n                    height='auto'\n                    onCancel={prevStep}\n                    onSave={saveFormData}\n                    form_error={form_error}\n                    {...passthrough}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n});\n\nexport default CFDFinancialStpRealAccountSignup;\n","import React from 'react';\nimport { Text, Button, Icon, MultiStep, SendEmailTemplate } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getCFDPlatformLabel, WS } from '@deriv/shared';\nimport ChangePasswordConfirmation from './cfd-change-password-confirmation';\nimport { TChangePassword, TPasswordResetAndTradingPasswordManager } from './props.types';\nimport { CATEGORY, CFD_PLATFORMS } from '../Helpers/cfd-config';\n\nconst ChangePassword = ({ platform, onConfirm }: TChangePassword) => (\n    <div className='cfd-change-password'>\n        <Icon\n            className='cfd-change-password__icon'\n            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n            width='122'\n            height='108'\n        />\n        <Text as='p' align='center' size='s' weight='bold'>\n            <Localize\n                i18n_default_text='{{platform}} password'\n                values={{\n                    platform: getCFDPlatformLabel(platform),\n                }}\n            />\n        </Text>\n        <Text as='p' align='center' className='cfd-change-password__description' size='xs'>\n            {platform === CFD_PLATFORMS.MT5 ? (\n                <Localize i18n_default_text='Use this password to log in to your Deriv MT5 accounts on the desktop, web, and mobile apps.' />\n            ) : (\n                <Localize i18n_default_text='Use this password to log in to your Deriv X accounts on the web and mobile apps.' />\n            )}\n        </Text>\n        <Button\n            className='dc-btn dc-btn--primary dc-btn__large dc-modal__container_cfd-reset-password-modal__button'\n            onClick={onConfirm}\n        >\n            <Text size='xs' weight='bold' color='colored-background'>\n                <Localize i18n_default_text='Change password' />\n            </Text>\n        </Button>\n    </div>\n);\n\nconst PasswordReset = ({ email, platform, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const onClickSendEmail = React.useCallback(() => {\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_group === CATEGORY.REAL) {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_group === CATEGORY.DEMO) {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n    }, [email, platform, account_group]);\n\n    React.useEffect(() => {\n        onClickSendEmail();\n    }, [onClickSendEmail]);\n\n    return (\n        <SendEmailTemplate\n            title={localize(\"We've sent you an email\")}\n            subtitle={localize('Please click on the link in the email to change your {{platform}} password.', {\n                platform: getCFDPlatformLabel(platform),\n            })}\n            lbl_no_receive={localize(\"Didn't receive the email?\")}\n            txt_resend={localize('Resend email')}\n            txt_resend_in={localize('Resend email in')}\n            onClickSendEmail={onClickSendEmail}\n        />\n    );\n};\n\nconst TradingPasswordManager = ({ platform, email, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const multi_step_ref = React.useRef<{ goNextStep: () => void; goPrevStep: () => void }>();\n\n    const steps = [\n        {\n            component: <ChangePassword platform={platform} onConfirm={() => multi_step_ref.current?.goNextStep()} />,\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    confirm_label={localize('Confirm')}\n                    platform={platform}\n                    onConfirm={() => multi_step_ref.current?.goNextStep()}\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n        {\n            component: <PasswordReset platform={platform} email={email} account_group={account_group} />,\n        },\n    ];\n\n    return (\n        <div className='cfd-trading-password'>\n            <MultiStep ref={multi_step_ref} steps={steps} />\n        </div>\n    );\n};\n\nexport default TradingPasswordManager;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Field, Form, Formik, FieldProps } from 'formik';\nimport { PasswordInput, PasswordMeter, Text, Button, Icon } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getErrorMessages } from '@deriv/shared';\nimport { TCFDPasswordSuccessMessage, TInvestorPasswordManager, TPasswordManagerModalFormValues } from './props.types';\n\nconst CFDPasswordSuccessMessage = ({ toggleModal, is_investor }: TCFDPasswordSuccessMessage) => (\n    <div className='cfd-password-manager__success'>\n        <Icon icon='IcPasswordUpdated' size={128} />\n        <Text as='p' size='xxs' align='center'>\n            {is_investor ? (\n                <Localize i18n_default_text='Your investor password has been changed.' />\n            ) : (\n                <Localize i18n_default_text='Your password has been changed.' />\n            )}\n        </Text>\n        <Button onClick={toggleModal} className='cfd-password-manager__success-btn' primary large>\n            <p className='dc-btn__text'>{localize('OK')}</p>\n        </Button>\n    </div>\n);\n\nconst InvestorPasswordManager = ({\n    error_message_investor,\n    is_submit_success_investor,\n    multi_step_ref,\n    onSubmit,\n    setPasswordType,\n    toggleModal,\n    validatePassword,\n}: TInvestorPasswordManager) => {\n    if (is_submit_success_investor) {\n        return <CFDPasswordSuccessMessage toggleModal={toggleModal} is_investor />;\n    }\n\n    const type_investor = 'investor';\n\n    const initial_values = { old_password: '', new_password: '', password_type: `${type_investor}` };\n\n    return (\n        <div className='cfd-password-manager__investor-wrapper'>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='Use this password to grant viewing access to another user. While they may view your trading account, they will not be able to trade or take any other actions.' />\n            </Text>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='If this is the first time you try to create a password, or you have forgotten your password, please reset it.' />\n            </Text>\n            {error_message_investor && (\n                <Text\n                    as='p'\n                    color='loss-danger'\n                    size='xs'\n                    className='cfd-password-manager--error-message'\n                    data-testid='dt_error_message_investor'\n                >\n                    {error_message_investor}\n                </Text>\n            )}\n            <Formik initialValues={initial_values} validate={validatePassword} onSubmit={onSubmit}>\n                {({ isSubmitting, errors, setFieldTouched, values, touched }) => (\n                    <Form className='cfd-password-manager__investor-form' noValidate>\n                        <Field name='old_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordInput\n                                    {...field}\n                                    autoComplete='current-password'\n                                    label={localize('Current investor password')}\n                                    error={touched.old_password && errors.old_password}\n                                    required\n                                />\n                            )}\n                        </Field>\n                        <Field name='new_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordMeter\n                                    input={field.value}\n                                    has_error={!!(touched.new_password && errors.new_password)}\n                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                >\n                                    {({ has_warning }: { has_warning: boolean }) => (\n                                        <PasswordInput\n                                            {...field}\n                                            autoComplete='new-password'\n                                            label={localize('New investor password')}\n                                            hint={\n                                                !has_warning &&\n                                                localize(\n                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters and numbers.'\n                                                )\n                                            }\n                                            error={touched.new_password && errors.new_password}\n                                            onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                                                setFieldTouched('new_password', true, true);\n                                                field.onChange(e);\n                                            }}\n                                            className='cfd-password-manager__new-password'\n                                            required\n                                        />\n                                    )}\n                                </PasswordMeter>\n                            )}\n                        </Field>\n                        <div className='cfd-password-manager__actions'>\n                            <Button\n                                className='cfd-password-manager--button'\n                                is_disabled={\n                                    isSubmitting ||\n                                    !values.old_password ||\n                                    !values.new_password ||\n                                    Object.keys(errors).length > 0\n                                }\n                                is_loading={isSubmitting}\n                                text={localize('Change investor password')}\n                                primary\n                                large\n                            />\n                            <Button\n                                className='cfd-password-manager--button'\n                                type='button'\n                                onClick={() => {\n                                    setPasswordType('investor');\n                                    multi_step_ref.current?.goNextStep();\n                                }}\n                                text={localize('Create or reset investor password')}\n                                tertiary\n                                large\n                            />\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nInvestorPasswordManager.propTypes = {\n    error_message_investor: PropTypes.string,\n    is_submit_success_investor: PropTypes.bool,\n    multi_step_ref: PropTypes.object,\n    onSubmit: PropTypes.func,\n    setPasswordType: PropTypes.func,\n    toggleModal: PropTypes.func,\n    validatePassword: PropTypes.func,\n};\n\nexport default InvestorPasswordManager;\n","import React from 'react';\nimport {\n    Icon,\n    Modal,\n    Tabs,\n    Button,\n    DesktopWrapper,\n    Div100vhContainer,\n    MobileWrapper,\n    MultiStep,\n    PageOverlay,\n    ThemedScrollbars,\n    UILoader,\n    Text,\n} from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isMobile, validLength, validPassword, getErrorMessages, getCFDPlatformLabel } from '@deriv/shared';\nimport { FormikErrors } from 'formik';\nimport CFDStore from '../Stores/Modules/CFD/cfd-store';\nimport TradingPasswordManager from './trading-password-manager';\nimport InvestorPasswordManager from './investor-password-manager';\nimport {\n    TCountdownComponent,\n    TCFDPasswordReset,\n    TCFDPasswordManagerTabContentWrapper,\n    TCFDPasswordManagerTabContent,\n    TCFDPasswordManagerModal,\n    TFormValues,\n    TPasswordManagerModalFormValues,\n} from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\n\nconst CountdownComponent = ({ count_from = 60, onTimeout }: TCountdownComponent) => {\n    const [count, setCount] = React.useState<number>(count_from);\n\n    React.useEffect(() => {\n        let interval: ReturnType<typeof setTimeout>;\n\n        if (count !== 0) {\n            interval = setTimeout(() => {\n                setCount(count - 1);\n            }, 1000);\n        } else {\n            onTimeout();\n        }\n\n        return () => {\n            clearTimeout(interval);\n        };\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [count]);\n    return <span className='countdown'>{count}</span>;\n};\n\nconst CFDPasswordReset = ({\n    sendVerifyEmail,\n    account_type,\n    account_group,\n    server,\n    password_type,\n}: TCFDPasswordReset) => {\n    const [is_resend_verification_requested, setResendVerification] = React.useState<boolean>(false);\n    const [is_resend_verification_sent, setResendVerificationSent] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        localStorage.setItem('cfd_reset_password_intent', [server, account_group, account_type].join('.'));\n        localStorage.setItem('cfd_reset_password_type', password_type);\n        sendVerifyEmail();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onClickVerification = () => {\n        setResendVerification(true);\n    };\n\n    const resendVerification = () => {\n        sendVerifyEmail();\n        setResendVerificationSent(true);\n    };\n\n    return (\n        <div className='cfd-verification-email-sent'>\n            <Icon icon='IcEmailSent' size={128} />\n            <h2 className='cfd-verification-email-sent__title'>\n                <Localize i18n_default_text=\"We've sent you an email\" />\n            </h2>\n            <Text as='p' size='xs' align='center'>\n                <Localize i18n_default_text='Please click on the link in the email to reset your password.' />\n            </Text>\n            {!is_resend_verification_requested && (\n                <Button className='cfd-verification-email-sent__resend-button' primary onClick={onClickVerification}>\n                    <Localize i18n_default_text=\"Didn't receive the email?\" />\n                </Button>\n            )}\n            {is_resend_verification_requested && (\n                <>\n                    <Text\n                        as='p'\n                        size='xs'\n                        align='center'\n                        weight='bold'\n                        className='cfd-verification-email-sent__title--sub'\n                    >\n                        <Localize i18n_default_text={\"Didn't receive the email?\"} />\n                    </Text>\n                    <Text as='p' size='xs' align='center'>\n                        <Localize i18n_default_text=\"Check your spam or junk folder. If it's not there, try resending the email.\" />\n                    </Text>\n                    <Button\n                        className='cfd-verification-email-sent__resend-button'\n                        large\n                        primary\n                        disabled={is_resend_verification_sent}\n                        onClick={resendVerification}\n                    >\n                        {!is_resend_verification_sent && <Localize i18n_default_text='Resend email' />}\n                        {is_resend_verification_sent && (\n                            <>\n                                <Localize\n                                    i18n_default_text='Resend in <0 /> seconds'\n                                    components={[\n                                        <CountdownComponent\n                                            key={0}\n                                            onTimeout={() => setResendVerificationSent(false)}\n                                            count_from={60}\n                                        />,\n                                    ]}\n                                />\n                            </>\n                        )}\n                    </Button>\n                </>\n            )}\n        </div>\n    );\n};\n\nconst CFDPasswordManagerTabContentWrapper = ({ multi_step_ref, steps }: TCFDPasswordManagerTabContentWrapper) => (\n    <MultiStep ref={multi_step_ref} steps={steps} className='cfd-password-manager' lbl_previous={localize('Back')} />\n);\n\nconst CFDPasswordManagerTabContent = ({\n    toggleModal,\n    selected_login,\n    email,\n    setPasswordType,\n    multi_step_ref,\n    platform,\n    onChangeActiveTabIndex,\n    account_group,\n}: TCFDPasswordManagerTabContent) => {\n    const [active_tab_index, setActiveTabIndex] = React.useState<number>(0);\n    const [error_message_investor, setErrorMessageInvestor] = React.useState<string>('');\n    const [is_submit_success_investor, setSubmitSuccessInvestor] = React.useState<boolean>(false);\n\n    // view height - margin top and bottom of modal - modal title - modal content margin top and bottom - table title\n    const container_height = 'calc(100vh - 84px - 5.6rem - 8.8rem - 4rem)';\n    const validatePassword = (values: TFormValues) => {\n        const errors: FormikErrors<TFormValues> = {};\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        } else if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        if (!values.old_password && values.old_password !== undefined) {\n            errors.old_password = localize('This field is required');\n        }\n\n        return errors;\n    };\n    const showError = (error_message: string) => {\n        setErrorMessageInvestor(error_message);\n    };\n\n    const hideError = () => {\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(true);\n    };\n\n    const onSubmit = React.useCallback(\n        async (values: TPasswordManagerModalFormValues) => {\n            if (!selected_login) {\n                return;\n            }\n\n            const error = await CFDStore.changePassword({ login: selected_login, ...values });\n            if (error) {\n                showError(error);\n            } else {\n                hideError();\n            }\n        },\n        [selected_login]\n    );\n\n    const updateAccountTabIndex = (index: number) => {\n        setActiveTabIndex(index);\n        onChangeActiveTabIndex(index);\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(false);\n    };\n\n    const trading_password_manager = (\n        <React.Fragment>\n            <DesktopWrapper>\n                <ThemedScrollbars height={container_height} is_bypassed={isMobile()} autohide={false}>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </ThemedScrollbars>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </Div100vhContainer>\n            </MobileWrapper>\n        </React.Fragment>\n    );\n\n    if (platform === CFD_PLATFORMS.DXTRADE) return trading_password_manager;\n\n    return (\n        <Tabs active_index={active_tab_index} onTabItemClick={updateAccountTabIndex} top>\n            <div\n                label={localize('{{platform}} password', {\n                    platform: getCFDPlatformLabel(platform),\n                })}\n            >\n                {trading_password_manager}\n            </div>\n            <div label={localize('Investor password')}>\n                <DesktopWrapper>\n                    <ThemedScrollbars height={container_height}>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validatePassword}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </ThemedScrollbars>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validatePassword}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </Div100vhContainer>\n                </MobileWrapper>\n            </div>\n        </Tabs>\n    );\n};\n\nconst CFDPasswordManagerModal = observer(\n    ({\n        is_visible,\n        platform,\n        selected_login,\n        toggleModal,\n        selected_account_type,\n        selected_account_group,\n        selected_server,\n    }: TCFDPasswordManagerModal) => {\n        const { client, ui } = useStore();\n\n        const { email } = client;\n        const { enableApp, disableApp } = ui;\n\n        const { sendVerifyEmail } = useCfdStore();\n\n        const multi_step_ref: React.MutableRefObject<undefined> = React.useRef();\n        const [index, setIndex] = React.useState<number>(0);\n\n        const [password_type, setPasswordType] = React.useState('main');\n\n        if (!selected_login) return null;\n\n        const getTitle = () => {\n            return localize('Manage {{platform}} password', {\n                platform: getCFDPlatformLabel(platform),\n            });\n        };\n\n        const getHeader = (i: number) => {\n            if (i === 0) {\n                return localize('Manage {{platform}} password', {\n                    platform: getCFDPlatformLabel(platform),\n                });\n            }\n            return localize('Manage password');\n        };\n\n        const onChangeActiveTabIndex = (i: number) => {\n            setIndex(i);\n        };\n\n        const steps = [\n            {\n                component: (\n                    <CFDPasswordManagerTabContent\n                        email={email}\n                        selected_login={selected_login}\n                        toggleModal={toggleModal}\n                        setPasswordType={setPasswordType}\n                        multi_step_ref={multi_step_ref}\n                        platform={platform}\n                        onChangeActiveTabIndex={onChangeActiveTabIndex}\n                        account_group={selected_account_group}\n                    />\n                ),\n            },\n            {\n                component: (\n                    <CFDPasswordReset\n                        server={selected_server}\n                        sendVerifyEmail={sendVerifyEmail}\n                        account_type={selected_account_type}\n                        account_group={selected_account_group}\n                        password_type={password_type}\n                    />\n                ),\n            },\n        ];\n\n        return (\n            <React.Suspense fallback={<UILoader />}>\n                <DesktopWrapper>\n                    <Modal\n                        className='cfd-password-manager__modal'\n                        disableApp={disableApp}\n                        enableApp={enableApp}\n                        is_open={is_visible}\n                        title={getTitle()}\n                        toggleModal={toggleModal}\n                        height='688px'\n                        width='904px'\n                        should_header_stick_body={false}\n                    >\n                        <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <PageOverlay\n                        is_open={is_visible}\n                        portal_id='deriv_app'\n                        header={getHeader(index)}\n                        onClickClose={toggleModal}\n                    >\n                        <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                    </PageOverlay>\n                </MobileWrapper>\n            </React.Suspense>\n        );\n    }\n);\n\nexport default CFDPasswordManagerModal;\n","import React from 'react';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport { useHistory } from 'react-router';\nimport { SentEmailModal } from '@deriv/account';\nimport {\n    getDxCompanies,\n    getMtCompanies,\n    getDerivezCompanies,\n    getFormattedJurisdictionCode,\n    TMtCompanies,\n    TDxCompanies,\n    TDerivezCompanies,\n} from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport {\n    FormSubmitButton,\n    Icon,\n    MobileDialog,\n    Modal,\n    PasswordInput,\n    PasswordMeter,\n    Text,\n    MultiStep,\n} from '@deriv/components';\nimport {\n    getCFDPlatformNames,\n    getAuthenticationStatusInfo,\n    getCFDPlatformLabel,\n    getErrorMessages,\n    getLegalEntityName,\n    isDesktop,\n    isMobile,\n    routes,\n    validLength,\n    validPassword,\n    WS,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport SuccessDialog from '../Components/success-dialog.jsx';\nimport '../sass/cfd.scss';\nimport ChangePasswordConfirmation from './cfd-change-password-confirmation';\nimport TradingPlatformIcon from '../Assets/svgs/trading-platform';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CFD_PLATFORMS, JURISDICTION } from '../Helpers/cfd-config';\n\nexport type TCFDPasswordFormValues = { password: string };\n\ntype TOnSubmitPassword = (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\n\ntype TPasswordModalHeaderProps = {\n    should_set_trading_password: boolean;\n    is_password_reset_error: boolean;\n    platform: string;\n    has_mt5_account?: boolean;\n};\n\ntype TIconTypeProps = {\n    platform: string;\n    type?: string;\n    show_eu_related_content: boolean;\n};\n\ntype TCFDPasswordFormReusedProps = {\n    platform: string;\n    error_message: string;\n    validatePassword: (values: TCFDPasswordFormValues) => FormikErrors<TCFDPasswordFormValues>;\n};\n\ntype TCFDCreatePasswordProps = TCFDPasswordFormReusedProps & {\n    password: string;\n    onSubmit: TOnSubmitPassword;\n    is_real_financial_stp: boolean;\n};\n\ntype TCFDCreatePasswordFormProps = TCFDPasswordFormReusedProps & {\n    has_mt5_account: boolean;\n    submitPassword: TOnSubmitPassword;\n    is_real_financial_stp: boolean;\n};\n\ntype TMultiStepRefProps = {\n    goNextStep: () => void;\n    goPrevStep: () => void;\n};\ntype TReviewMsgForMT5 = {\n    is_selected_mt5_verified: boolean;\n    jurisdiction_selected_shortcode: string;\n    manual_status: string;\n};\n\ntype TCFDPasswordFormProps = TCFDPasswordFormReusedProps & {\n    account_title: string;\n    account_type: {\n        category?: string;\n        type?: string;\n    };\n    closeModal: () => void;\n    error_type?: string;\n    form_error?: string;\n    has_mt5_account: boolean;\n    is_bvi: boolean;\n    is_dxtrade_allowed: boolean;\n    is_real_financial_stp: boolean;\n    jurisdiction_selected_shortcode: string;\n    onCancel: () => void;\n    onForgotPassword: () => void;\n    should_set_trading_password: boolean;\n    show_eu_related_content: boolean;\n    submitPassword: TOnSubmitPassword;\n};\n\ntype TCFDPasswordModalProps = {\n    error_type?: string;\n    form_error?: string;\n    platform: string;\n};\n\nconst getAccountTitle = (\n    platform: string,\n    account_type: {\n        category?: string;\n        type?: string;\n    },\n    account_title: string\n) => {\n    if (platform === CFD_PLATFORMS.DXTRADE) {\n        return getDxCompanies()[account_type.category as keyof TDxCompanies][\n            account_type.type as keyof TDxCompanies['demo' | 'real']\n        ].short_title;\n    }\n\n    return account_title;\n};\n\nconst PasswordModalHeader = ({\n    should_set_trading_password,\n    is_password_reset_error,\n    platform,\n}: TPasswordModalHeaderProps) => {\n    const element = isMobile() ? 'p' : 'span';\n    const alignment = 'center';\n    const font_size = 's';\n    const style = isMobile()\n        ? {\n              padding: '2rem',\n          }\n        : {};\n\n    return (\n        <Text styles={style} as={element} line_height='m' weight='bold' size={font_size} align={alignment}>\n            {!should_set_trading_password && !is_password_reset_error && (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                    }}\n                />\n            )}\n            {is_password_reset_error && <Localize i18n_default_text='Too many attempts' />}\n        </Text>\n    );\n};\nconst ReviewMessageForMT5 = ({\n    is_selected_mt5_verified,\n    jurisdiction_selected_shortcode,\n    manual_status,\n}: TReviewMsgForMT5) => {\n    if (is_selected_mt5_verified) {\n        return (\n            <Localize i18n_default_text='To start trading, top-up funds from your Deriv account into this account.' />\n        );\n    } else if (\n        jurisdiction_selected_shortcode === JURISDICTION.BVI ||\n        jurisdiction_selected_shortcode === JURISDICTION.VANUATU\n    ) {\n        if (manual_status === 'pending') {\n            return <Localize i18n_default_text='We’re reviewing your documents. This should take about 1 to 3 days.' />;\n        }\n        return <Localize i18n_default_text='We’re reviewing your documents. This should take about 5 minutes.' />;\n    } else if (\n        jurisdiction_selected_shortcode === JURISDICTION.LABUAN ||\n        jurisdiction_selected_shortcode === JURISDICTION.MALTA_INVEST\n    ) {\n        return <Localize i18n_default_text='We’re reviewing your documents. This should take about 1 to 3 days.' />;\n    }\n    return null;\n};\n\nconst IconType = React.memo(({ platform, type, show_eu_related_content }: TIconTypeProps) => {\n    const traders_hub = window.location.pathname === routes.traders_hub;\n    if (platform === CFD_PLATFORMS.DXTRADE) {\n        return <Icon icon='IcRebrandingDxtradeDashboard' size={128} />;\n    } else if (platform === CFD_PLATFORMS.DERIVEZ) {\n        return <Icon icon='IcBrandDerivEz' size={128} />;\n    } else if (traders_hub) {\n        if (platform === CFD_PLATFORMS.CTRADER) {\n            return <TradingPlatformIcon icon='CTrader' size={128} />;\n        }\n        switch (type) {\n            case 'synthetic':\n                return <TradingPlatformIcon icon='Derived' size={128} />;\n            case 'all':\n                return <TradingPlatformIcon icon='SwapFree' size={128} />;\n            case 'financial':\n                if (show_eu_related_content) {\n                    return <TradingPlatformIcon icon='CFDs' size={128} />;\n                }\n                return <TradingPlatformIcon icon='Financial' size={128} />;\n            default:\n                return <TradingPlatformIcon icon='Financial' size={128} />;\n        }\n    } else {\n        switch (type) {\n            case 'synthetic':\n                return <Icon icon='IcMt5SyntheticPlatform' size={128} />;\n            case 'all':\n                return <Icon icon='IcMt5SwapFreePlatform' size={128} />;\n            case 'financial':\n                if (show_eu_related_content) {\n                    return <Icon icon='IcMt5CfdPlatform' size={128} />;\n                }\n                return <Icon icon='IcMt5FinancialPlatform' size={128} />;\n            default:\n                return <Icon icon='IcMt5FinancialStpPlatform' size={128} />;\n        }\n    }\n});\nIconType.displayName = 'IconType';\n\nconst getCancelButtonLabel = ({\n    should_set_trading_password,\n    error_type,\n}: Pick<TCFDPasswordFormProps, 'should_set_trading_password' | 'error_type'>) => {\n    if (should_set_trading_password && error_type !== 'PasswordReset') {\n        return isDesktop() ? null : localize('Cancel');\n    }\n\n    return localize('Forgot password?');\n};\n\nconst handlePasswordInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handleChange: (el: React.ChangeEvent<HTMLInputElement>) => void,\n    validateForm: (values?: TCFDPasswordFormValues) => Promise<FormikErrors<TCFDPasswordFormValues>>,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n) => {\n    handleChange(e);\n    validateForm().then(() => {\n        setFieldTouched('password', true);\n    });\n};\n\nconst CreatePassword = ({\n    password,\n    platform,\n    validatePassword,\n    onSubmit,\n    error_message,\n    is_real_financial_stp,\n}: TCFDCreatePasswordProps) => {\n    return (\n        <Formik\n            initialValues={{\n                password,\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={onSubmit}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div\n                        className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body cfd-password-modal__create-password-content'\n                        data-testid='dt_create_password'\n                    >\n                        <Icon\n                            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n                            width='122'\n                            height='108'\n                        />\n                        <Text\n                            size='s'\n                            align='center'\n                            weight='bold'\n                            className='cfd-password-modal__create-password-title'\n                        >\n                            <Localize\n                                i18n_default_text='Create a {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text size='xs' align='center' className='cfd-password-modal__create-password-description'>\n                            <Localize\n                                i18n_default_text='You can use this password for all your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <div className='input-element'>\n                            <PasswordMeter\n                                input={values.password}\n                                has_error={!!(touched.password && errors.password)}\n                                custom_feedback_messages={getErrorMessages().password_warnings}\n                            >\n                                {() => (\n                                    <PasswordInput\n                                        autoComplete='new-password'\n                                        label={localize('{{platform}} password', {\n                                            platform: getCFDPlatformLabel(platform),\n                                        })}\n                                        error={\n                                            (touched.password && errors.password) ||\n                                            (values.password.length === 0 ? error_message : '')\n                                        }\n                                        name='password'\n                                        value={values.password}\n                                        onBlur={handleBlur}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                            handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                        }}\n                                        data_testId={`dt_${platform}_password`}\n                                    />\n                                )}\n                            </PasswordMeter>\n                        </div>\n                        {is_real_financial_stp && (\n                            <div className='dc-modal__container_cfd-password-modal__description'>\n                                <Localize i18n_default_text='Your MT5 Financial STP account will be opened through Deriv (FX) Ltd. All trading in this account is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA). None of your other accounts, including your Deriv account, is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA).' />\n                            </div>\n                        )}\n                        <FormSubmitButton\n                            is_disabled={!values.password || Object.keys(errors).length > 0}\n                            is_loading={isSubmitting}\n                            label={localize('Create {{platform}} password', {\n                                platform: getCFDPlatformLabel(platform),\n                            })}\n                            is_center={true}\n                        />\n                    </div>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDCreatePasswordForm = ({\n    has_mt5_account,\n    platform,\n    error_message,\n    validatePassword,\n    submitPassword,\n    is_real_financial_stp,\n}: TCFDCreatePasswordFormProps) => {\n    const multi_step_ref = React.useRef<TMultiStepRefProps>();\n    const [password, setPassword] = React.useState('');\n\n    const onSubmit: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5 && has_mt5_account) {\n            setPassword(values.password);\n            multi_step_ref.current?.goNextStep();\n        } else {\n            submitPassword(values, actions);\n        }\n    };\n\n    const steps = [\n        {\n            component: (\n                <CreatePassword\n                    password={password}\n                    platform={platform}\n                    error_message={error_message}\n                    validatePassword={validatePassword}\n                    onSubmit={onSubmit}\n                    is_real_financial_stp={is_real_financial_stp}\n                />\n            ),\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    className='cfd-password-modal__change-password-confirmation'\n                    platform={platform}\n                    onConfirm={(_values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) =>\n                        submitPassword({ password }, actions)\n                    }\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n    ];\n\n    return <MultiStep ref={multi_step_ref} steps={steps} />;\n};\n\nconst CFDPasswordForm = ({\n    account_title,\n    account_type,\n    closeModal,\n    error_message,\n    error_type,\n    form_error,\n    has_mt5_account,\n    is_real_financial_stp,\n    jurisdiction_selected_shortcode,\n    onCancel,\n    onForgotPassword,\n    platform,\n    should_set_trading_password,\n    show_eu_related_content,\n    submitPassword,\n    validatePassword,\n}: TCFDPasswordFormProps) => {\n    const button_label = React.useMemo(() => {\n        if (error_type === 'PasswordReset') {\n            return localize('Try later');\n        }\n        return localize('Add account');\n    }, [error_type]);\n\n    const has_cancel_button = (isDesktop() ? !should_set_trading_password : true) || error_type === 'PasswordReset';\n\n    const cancel_button_label = getCancelButtonLabel({ should_set_trading_password, error_type });\n\n    const handleCancel = () => {\n        if (!has_cancel_button) {\n            return undefined;\n        }\n        if (should_set_trading_password) {\n            return onCancel();\n        }\n\n        return onForgotPassword();\n    };\n\n    if (error_type === 'PasswordReset') {\n        return (\n            <React.Fragment>\n                <div className='cfd-password-reset'>\n                    <div className='cfd-password-modal__content cfd-password-modal__content--password-reset'>\n                        <Text as='p' line_height='24' size='xs'>\n                            <Localize i18n_default_text='Please try again in a minute.' />\n                        </Text>\n                    </div>\n                    <Formik onSubmit={closeModal} initialValues={{}}>\n                        {({ handleSubmit }) => (\n                            <form onSubmit={handleSubmit}>\n                                <FormSubmitButton\n                                    has_cancel={has_cancel_button}\n                                    cancel_label={cancel_button_label}\n                                    onCancel={handleCancel}\n                                    is_absolute={isMobile()}\n                                    label={button_label}\n                                />\n                            </form>\n                        )}\n                    </Formik>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    if (should_set_trading_password) {\n        return (\n            <CFDCreatePasswordForm\n                platform={platform}\n                error_message={error_message}\n                validatePassword={validatePassword}\n                submitPassword={submitPassword}\n                has_mt5_account={has_mt5_account}\n                is_real_financial_stp={is_real_financial_stp}\n            />\n        );\n    }\n\n    const accountTitle = (category: string) => {\n        switch (platform) {\n            case 'ctrader':\n            case 'derivez':\n                return 'CFD';\n            case 'dxtrade':\n                return category === 'real' ? 'Real' : '';\n            default:\n                return account_title;\n        }\n    };\n\n    const showJuristiction = () => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            return '';\n        } else if (!show_eu_related_content) {\n            return getFormattedJurisdictionCode(jurisdiction_selected_shortcode);\n        }\n        return 'CFDs';\n    };\n\n    return (\n        <Formik\n            initialValues={{\n                password: '',\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={submitPassword}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body'>\n                        {!should_set_trading_password && (\n                            <Text size='xs' className='dc-modal__container_cfd-password-modal__account-title'>\n                                {account_type.category === 'real' && (\n                                    <Localize\n                                        i18n_default_text='Enter your {{platform}} password to add a {{platform_name}} {{account}} {{jurisdiction_shortcode}} account.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                            platform_name: getCFDPlatformNames(platform),\n                                            account: !show_eu_related_content\n                                                ? accountTitle(account_type.category)\n                                                : '',\n                                            jurisdiction_shortcode: showJuristiction(),\n                                        }}\n                                    />\n                                )}\n                                {account_type.category === 'demo' && (\n                                    <Localize\n                                        i18n_default_text='Enter your {{platform}} password to add a {{platform_name}} {{account}} account.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                            platform_name: getCFDPlatformNames(platform),\n                                            account: accountTitle(account_type.category),\n                                        }}\n                                    />\n                                )}\n                            </Text>\n                        )}\n                        <div className='input-element'>\n                            <PasswordInput\n                                autoComplete='new-password'\n                                label={localize('{{platform}} password', {\n                                    platform: getCFDPlatformLabel(platform),\n                                })}\n                                error={\n                                    (touched.password && errors.password) ||\n                                    (values.password.length === 0 ? error_message : '')\n                                }\n                                name='password'\n                                value={values.password}\n                                onBlur={handleBlur}\n                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                    handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                }}\n                                data_testId={`dt_${platform}_password`}\n                            />\n                        </div>\n\n                        {is_real_financial_stp && (\n                            <div className='dc-modal__container_cfd-password-modal__description'>\n                                <Localize\n                                    i18n_default_text='Your MT5 Financial STP account will be opened through {{legal_entity_name}}. All trading in this account is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA). None of your other accounts, including your Deriv account, is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA).'\n                                    values={{\n                                        legal_entity_name: getLegalEntityName('fx'),\n                                    }}\n                                />\n                            </div>\n                        )}\n                        {error_type === 'PasswordError' && (\n                            <Text size='xs' as='p' className='dc-modal__container_mt5-password-modal__hint'>\n                                <Localize\n                                    i18n_default_text='Hint: You may have entered your Deriv password, which is different from your {{platform}} password.'\n                                    values={{\n                                        platform: getCFDPlatformLabel(platform),\n                                    }}\n                                />\n                            </Text>\n                        )}\n                    </div>\n                    <FormSubmitButton\n                        is_disabled={!values.password}\n                        has_cancel={has_cancel_button}\n                        cancel_label={cancel_button_label}\n                        onCancel={handleCancel}\n                        is_absolute={isMobile()}\n                        is_loading={isSubmitting}\n                        label={button_label}\n                        is_center={should_set_trading_password}\n                        form_error={form_error}\n                    />\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDPasswordModal = observer(({ form_error, platform }: TCFDPasswordModalProps) => {\n    const { client, traders_hub } = useStore();\n\n    const {\n        email,\n        account_status,\n        landing_companies,\n        is_logged_in,\n        is_dxtrade_allowed,\n        mt5_login_list,\n        updateAccountStatus,\n    } = client;\n    const { show_eu_related_content } = traders_hub;\n\n    const {\n        account_title,\n        account_type,\n        disableCFDPasswordModal,\n        error_message,\n        error_type,\n        getAccountStatus,\n        has_cfd_error,\n        is_cfd_success_dialog_enabled,\n        is_cfd_password_modal_enabled,\n        jurisdiction_selected_shortcode,\n        setError,\n        setCFDSuccessDialog,\n        submitMt5Password,\n        submitCFDPassword,\n        new_account_response,\n    } = useCfdStore();\n\n    const history = useHistory();\n\n    const [is_password_modal_exited, setPasswordModalExited] = React.useState(true);\n    const is_bvi = landing_companies?.mt_financial_company?.financial_stp?.shortcode === 'bvi';\n    const has_mt5_account = Boolean(mt5_login_list?.length);\n    const should_set_trading_password =\n        Array.isArray(account_status?.status) &&\n        account_status.status.includes(\n            platform === CFD_PLATFORMS.MT5 ? 'mt5_password_not_set' : 'dxtrade_password_not_set'\n        );\n    const is_password_error = error_type === 'PasswordError';\n    const is_password_reset = error_type === 'PasswordReset';\n    const [is_sent_email_modal_open, setIsSentEmailModalOpen] = React.useState(false);\n\n    const { poi_verified_for_bvi_labuan_vanuatu, poi_verified_for_maltainvest, poa_verified, manual_status } =\n        getAuthenticationStatusInfo(account_status);\n\n    const [is_selected_mt5_verified, setIsSelectedMT5Verified] = React.useState(false);\n\n    const getVerificationStatus = () => {\n        switch (jurisdiction_selected_shortcode) {\n            case JURISDICTION.SVG:\n                setIsSelectedMT5Verified(true);\n                break;\n            case JURISDICTION.BVI:\n            case JURISDICTION.VANUATU:\n                setIsSelectedMT5Verified(poi_verified_for_bvi_labuan_vanuatu);\n                break;\n            case JURISDICTION.LABUAN:\n                setIsSelectedMT5Verified(poi_verified_for_bvi_labuan_vanuatu && poa_verified);\n                break;\n            case JURISDICTION.MALTA_INVEST:\n                setIsSelectedMT5Verified(poi_verified_for_maltainvest && poa_verified);\n                break;\n            default:\n        }\n    };\n\n    React.useEffect(() => {\n        if (is_logged_in) {\n            updateAccountStatus();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        getVerificationStatus();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [jurisdiction_selected_shortcode, account_status]);\n\n    const validatePassword = (values: TCFDPasswordFormValues) => {\n        const errors: FormikErrors<TCFDPasswordFormValues> = {};\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n        if (values.password?.toLowerCase() === email.toLowerCase()) {\n            errors.password = localize('Your password cannot be the same as your email address.');\n        }\n        return errors;\n    };\n\n    const closeDialogs = () => {\n        setCFDSuccessDialog(false);\n        setError(false);\n    };\n\n    const closeModal = () => {\n        closeDialogs();\n        disableCFDPasswordModal();\n    };\n\n    const closeOpenSuccess = () => {\n        disableCFDPasswordModal();\n        closeDialogs();\n        if (account_type.category === 'real') {\n            sessionStorage.setItem('cfd_transfer_to_login_id', new_account_response.login || '');\n            history.push(routes.cashier_acc_transfer);\n        }\n    };\n\n    const handleForgotPassword = () => {\n        closeModal();\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_type.category === 'real') {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_type.category === 'demo') {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n        setIsSentEmailModalOpen(true);\n    };\n\n    const submitPassword: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5) {\n            submitMt5Password(\n                {\n                    ...values,\n                },\n                actions\n            );\n        } else {\n            (values as TCFDPasswordFormValues & { platform: string }).platform = platform;\n            submitCFDPassword(values, actions);\n        }\n    };\n\n    const should_show_password =\n        is_cfd_password_modal_enabled &&\n        !is_cfd_success_dialog_enabled &&\n        (!has_cfd_error || is_password_error || is_password_reset);\n\n    const should_show_success =\n        !has_cfd_error && is_cfd_success_dialog_enabled && is_cfd_password_modal_enabled && is_password_modal_exited;\n\n    const should_show_sent_email_modal = is_sent_email_modal_open && is_password_modal_exited;\n\n    const is_real_financial_stp = [account_type.category, account_type.type].join('_') === 'real_financial_stp';\n\n    const should_show_password_modal = React.useMemo(() => {\n        if (should_show_password) {\n            return should_set_trading_password ? true : isDesktop();\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const should_show_password_dialog = React.useMemo(() => {\n        if (should_show_password) {\n            if (!should_set_trading_password) return isMobile();\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const success_modal_submit_label = React.useMemo(() => {\n        if (account_type.category === 'real') {\n            if (platform === CFD_PLATFORMS.MT5) {\n                return is_selected_mt5_verified ? localize('Transfer now') : localize('OK');\n            }\n            return localize('Transfer now');\n        }\n        return localize('Continue');\n    }, [platform, account_type, is_selected_mt5_verified]);\n\n    const getSubmitText = () => {\n        const { category, type } = account_type;\n        if (!category && !type) return '';\n\n        const category_label = category === 'real' ? localize('real') : localize('demo');\n        let type_label = '';\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                type_label =\n                    getMtCompanies(show_eu_related_content)[category as keyof TMtCompanies][\n                        type as keyof TMtCompanies['demo' | 'real']\n                    ].short_title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                type_label =\n                    getDxCompanies()[category as keyof TDxCompanies][type as keyof TDxCompanies['demo' | 'real']]\n                        .short_title;\n                break;\n            case CFD_PLATFORMS.DERIVEZ:\n                type_label =\n                    getDerivezCompanies()[category as keyof TDerivezCompanies][\n                        type as keyof TDerivezCompanies['demo' | 'real']\n                    ].short_title;\n                break;\n            default:\n                type_label = '';\n                break;\n        }\n\n        const jurisdiction_label =\n            jurisdiction_selected_shortcode && getFormattedJurisdictionCode(jurisdiction_selected_shortcode);\n        const mt5_platform_label = jurisdiction_selected_shortcode !== JURISDICTION.MALTA_INVEST ? 'Deriv MT5' : '';\n\n        const accountTypes = () => {\n            if (platform === 'dxtrade' && type_label === 'Derived') {\n                return 'Synthetic';\n            } else if (platform === 'derivez' || platform === 'ctrader') {\n                return 'CFDs';\n            }\n            return type_label;\n        };\n\n        if (category === 'real') {\n            let platformName = '';\n            switch (platform) {\n                case CFD_PLATFORMS.MT5:\n                    platformName = mt5_platform_label;\n                    break;\n                case CFD_PLATFORMS.DERIVEZ:\n                    platformName = 'Deriv Ez';\n                    break;\n                default:\n                    platformName = 'Deriv X';\n                    break;\n            }\n\n            return (\n                <React.Fragment>\n                    <Localize\n                        i18n_default_text='Congratulations, you have successfully created your {{category}} <0>{{platform}}</0> <1>{{type}} {{jurisdiction_selected_shortcode}}</1> account. '\n                        values={{\n                            // TODO: remove below condition once deriv x changes are completed\n                            type: accountTypes(),\n                            platform:\n                                platform === CFD_PLATFORMS.MT5 ? mt5_platform_label : getCFDPlatformLabel(platform),\n                            category: category_label,\n                            jurisdiction_selected_shortcode:\n                                platform === CFD_PLATFORMS.MT5 && !show_eu_related_content ? jurisdiction_label : '',\n                        }}\n                        components={[<span key={0} className='cfd-account__platform' />, <strong key={1} />]}\n                    />\n                    {platform === CFD_PLATFORMS.DXTRADE || platform === CFD_PLATFORMS.CTRADER ? (\n                        <Localize i18n_default_text='To start trading, transfer funds from your Deriv account into this account.' />\n                    ) : (\n                        <ReviewMessageForMT5\n                            is_selected_mt5_verified={is_selected_mt5_verified}\n                            jurisdiction_selected_shortcode={jurisdiction_label}\n                            manual_status={manual_status}\n                        />\n                    )}\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <Localize\n                i18n_default_text='Congratulations, you have successfully created your {{category}} <0>{{platform}}</0> <1>{{type}}</1> account. '\n                values={{\n                    type: accountTypes(),\n                    platform: platform === CFD_PLATFORMS.MT5 ? 'MT5' : getCFDPlatformLabel(platform),\n                    category: category_label,\n                }}\n                components={[<span key={0} className='cfd-account__platform' />, <strong key={1} />]}\n            />\n        );\n    };\n\n    const cfd_password_form = (\n        <CFDPasswordForm\n            is_bvi={is_bvi}\n            account_title={account_title}\n            account_type={account_type}\n            closeModal={closeModal}\n            error_type={error_type}\n            error_message={error_message}\n            has_mt5_account={has_mt5_account}\n            form_error={form_error}\n            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n            should_set_trading_password={should_set_trading_password}\n            is_real_financial_stp={is_real_financial_stp}\n            validatePassword={validatePassword}\n            onForgotPassword={handleForgotPassword}\n            submitPassword={submitPassword}\n            platform={platform}\n            is_dxtrade_allowed={is_dxtrade_allowed}\n            onCancel={closeModal}\n            show_eu_related_content={show_eu_related_content}\n        />\n    );\n\n    const password_modal = (\n        <Modal\n            className='cfd-password-modal'\n            has_close_icon\n            is_open={should_show_password_modal}\n            toggleModal={closeModal}\n            should_header_stick_body\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                />\n            )}\n            onUnmount={() => getAccountStatus(platform)}\n            onExited={() => setPasswordModalExited(true)}\n            onEntered={() => setPasswordModalExited(false)}\n            width={isMobile() ? '32.8rem' : 'auto'}\n        >\n            {cfd_password_form}\n        </Modal>\n    );\n\n    const password_dialog = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_dialog}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal'\n        >\n            <PasswordModalHeader\n                should_set_trading_password={should_set_trading_password}\n                has_mt5_account={has_mt5_account}\n                is_password_reset_error={is_password_reset}\n                platform={platform}\n            />\n\n            {cfd_password_form}\n        </MobileDialog>\n    );\n\n    return (\n        <React.Fragment>\n            {password_modal}\n            {password_dialog}\n            <SuccessDialog\n                is_open={should_show_success}\n                toggleModal={closeModal}\n                onCancel={closeModal}\n                onSubmit={platform === CFD_PLATFORMS.MT5 && !is_selected_mt5_verified ? closeModal : closeOpenSuccess}\n                classNameMessage='cfd-password-modal__message'\n                message={getSubmitText()}\n                icon={\n                    <IconType\n                        platform={platform}\n                        type={account_type.type}\n                        show_eu_related_content={show_eu_related_content}\n                    />\n                }\n                icon_size='xlarge'\n                text_submit={success_modal_submit_label}\n                has_cancel={\n                    platform === CFD_PLATFORMS.MT5\n                        ? is_selected_mt5_verified && account_type.category === 'real'\n                        : account_type.category === 'real'\n                }\n                has_close_icon={false}\n                width={isMobile() ? '32.8rem' : 'auto'}\n                is_medium_button={isMobile()}\n            />\n            <SentEmailModal\n                is_open={should_show_sent_email_modal}\n                identifier_title='trading_password'\n                onClose={() => setIsSentEmailModalOpen(false)}\n                onClickSendEmail={handleForgotPassword}\n            />\n        </React.Fragment>\n    );\n});\n\nexport default CFDPasswordModal;\n","import { Formik, FormikHelpers } from 'formik';\nimport React from 'react';\nimport { Button, Icon, PasswordMeter, PasswordInput, FormSubmitButton, Loading, Modal, Text } from '@deriv/components';\nimport { validLength, validPassword, getErrorMessages, WS, redirectToLogin } from '@deriv/shared';\nimport { localize, Localize, getLanguage } from '@deriv/translations';\nimport { getMtCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { TResetPasswordIntent, TCFDResetPasswordModal, TError } from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\n\nconst ResetPasswordIntent = ({ current_list, children, is_eu, ...props }: TResetPasswordIntent) => {\n    const reset_password_intent = localStorage.getItem('cfd_reset_password_intent');\n    const reset_password_type = localStorage.getItem('cfd_reset_password_type') || 'main'; // Default to main\n    const has_intent =\n        reset_password_intent &&\n        /(real|demo)\\.(financial|financial_demo|financial_stp|financial_svg|financial_bvi|financial_fx|financial_v|synthetic|synthetic_svg|synthetic_bvi|synthetic_v|all_svg|dxtrade|all)/.test(\n            reset_password_intent\n        );\n\n    let group, type, login, title, server;\n    if (has_intent && current_list) {\n        [server, group, type] = reset_password_intent.split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`].login;\n        title =\n            getMtCompanies(is_eu)[group as keyof TMtCompanies][type as keyof TMtCompanies['demo' | 'real']]?.title ??\n            '';\n    } else if (current_list) {\n        [server, group, type] = (Object.keys(current_list).pop() as string).split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`]?.login ?? '';\n        title =\n            getMtCompanies(is_eu)?.[group as keyof TMtCompanies]?.[type as keyof TMtCompanies['demo' | 'real']]\n                ?.title ?? '';\n    } else {\n        // Set a default intent\n        login = '';\n        title = '';\n    }\n\n    return children({\n        login,\n        title,\n        type: reset_password_type,\n        ...props,\n    });\n};\n\nconst CFDResetPasswordModal = observer(({ platform }: TCFDResetPasswordModal) => {\n    const { client, ui } = useStore();\n\n    const { email, is_eu, is_logged_in } = client;\n    const { is_cfd_reset_password_modal_enabled, setCFDPasswordResetModal } = ui;\n\n    const { current_list } = useCfdStore();\n\n    const [state, setState] = React.useState<{\n        error_code: string | number | undefined;\n        has_error: boolean;\n        error_message: string | undefined;\n        is_finished: boolean;\n        changed_password_type: string;\n    }>({\n        error_code: undefined,\n        has_error: false,\n        error_message: undefined,\n        is_finished: false,\n        changed_password_type: '',\n    });\n\n    const renderErrorBox = (error: TError) => {\n        setState({\n            ...state,\n            error_code: error.code,\n            has_error: true,\n            error_message: error.message,\n        });\n    };\n    const clearAddressBar = () => {\n        localStorage.removeItem('cfd_reset_password_intent');\n        localStorage.removeItem('cfd_reset_password_type');\n        localStorage.removeItem('cfd_reset_password_code');\n    };\n    const validatePassword = (values: { new_password: string }) => {\n        const errors: { new_password?: string } = {};\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        }\n        if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        return errors;\n    };\n\n    const resetPassword = (\n        values: { new_password: string },\n        password_type: string,\n        login: string,\n        actions: FormikHelpers<{ new_password: string }>\n    ) => {\n        const { setSubmitting } = actions;\n        setSubmitting(true);\n        const request = {\n            account_id: login,\n            platform: CFD_PLATFORMS.MT5,\n            new_password: values.new_password,\n            verification_code: localStorage.getItem('cfd_reset_password_code'),\n        };\n\n        WS.tradingPlatformInvestorPasswordReset(request).then((response: { error: TError; password_type: string }) => {\n            if (response?.error?.code) {\n                renderErrorBox(response.error);\n            } else {\n                setState({\n                    ...state,\n                    is_finished: true,\n                    changed_password_type: password_type,\n                });\n                clearAddressBar();\n            }\n            setSubmitting(false);\n        });\n    };\n    const getIsListFetched = () => {\n        return Object.keys(current_list).length !== 0;\n    };\n\n    const is_invalid_investor_token = !getIsListFetched() && localStorage.getItem('cfd_reset_password_code');\n\n    return (\n        <Modal\n            className='cfd-reset-password-modal'\n            is_open={is_cfd_reset_password_modal_enabled && !is_invalid_investor_token}\n            toggleModal={() => setCFDPasswordResetModal(false)}\n            title={\n                platform === CFD_PLATFORMS.DXTRADE\n                    ? localize('Reset Deriv X investor password')\n                    : localize('Reset Deriv MT5 investor password')\n            }\n            onMount={() => redirectToLogin(is_logged_in, getLanguage(), true)}\n            should_header_stick_body={false}\n        >\n            {!getIsListFetched() && !state.has_error && <Loading is_fullscreen={false} />}\n            {getIsListFetched() && !state.has_error && !state.is_finished && (\n                <ResetPasswordIntent current_list={current_list} is_eu={is_eu}>\n                    {({ type, login }) => (\n                        <Formik\n                            initialValues={{ new_password: '' }}\n                            validate={validatePassword}\n                            onSubmit={(values, actions) => resetPassword(values, type, login, actions)}\n                        >\n                            {({ handleSubmit, errors, values, isSubmitting, handleChange, handleBlur, touched }) => (\n                                <form autoComplete='off' onSubmit={handleSubmit}>\n                                    <div className='cfd-reset-password'>\n                                        <div className='cfd-reset-password__container'>\n                                            <div className='cfd-reset-password__password-area'>\n                                                <PasswordMeter\n                                                    input={values.new_password}\n                                                    has_error={!!(touched.new_password && errors.new_password)}\n                                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                                >\n                                                    {({ has_warning }: { has_warning: boolean }) => (\n                                                        <PasswordInput\n                                                            autoComplete='new-password'\n                                                            className='cfd-reset-password__password-field'\n                                                            name='new_password'\n                                                            label={localize('New {{type}} password', { type })}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            error={touched.new_password && errors.new_password}\n                                                            value={values.new_password}\n                                                            data-lpignore='true'\n                                                            required\n                                                            hint={\n                                                                !has_warning &&\n                                                                localize(\n                                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.'\n                                                                )\n                                                            }\n                                                        />\n                                                    )}\n                                                </PasswordMeter>\n                                            </div>\n                                            {isSubmitting && <Loading is_fullscreen={false} />}\n                                            {!isSubmitting && (\n                                                <FormSubmitButton\n                                                    is_disabled={\n                                                        isSubmitting ||\n                                                        !values.new_password ||\n                                                        Object.keys(errors).length > 0\n                                                    }\n                                                    errors={errors}\n                                                    is_center={true}\n                                                    large\n                                                    label={localize('Create {{type}} password', { type })}\n                                                />\n                                            )}\n                                        </div>\n                                    </div>\n                                </form>\n                            )}\n                        </Formik>\n                    )}\n                </ResetPasswordIntent>\n            )}\n            {state.has_error && (\n                <div className='cfd-reset-password__error'>\n                    <Icon icon='IcMt5Expired' size={128} />\n                    <Text as='p' size='xs' weight='bold' align='center' className='cfd-reset-password__heading'>\n                        {state.error_message}\n                    </Text>\n                    {state.error_code === 'InvalidToken' && (\n                        <Text\n                            as='p'\n                            color='prominent'\n                            size='xs'\n                            align='center'\n                            className='cfd-reset-password__description--is-centered'\n                        >\n                            <Localize i18n_default_text='Please request a new password and check your email for the new token.' />\n                        </Text>\n                    )}\n                    <Button\n                        primary\n                        large\n                        className='cfd-reset-password__confirm-button'\n                        onClick={() => {\n                            clearAddressBar();\n                            setCFDPasswordResetModal(false);\n                        }}\n                    >\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n            {state.is_finished && (\n                <div className='cfd-reset-password__success'>\n                    <Icon icon='IcMt5PasswordUpdated' size={128} />\n                    <div className='cfd-reset-password__description'>\n                        <Text as='p' size='xs' align='center' weight='bold' line_height='xxl'>\n                            <Localize i18n_default_text='Password saved' />\n                        </Text>\n                        <Localize\n                            i18n_default_text='Your {{account_type}} password has been changed.'\n                            values={{\n                                account_type:\n                                    state.changed_password_type === 'main' ? localize('main') : localize('investor'),\n                            }}\n                        />\n                    </div>\n                    <Button primary large onClick={() => setCFDPasswordResetModal(false)}>\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n        </Modal>\n    );\n});\n\nexport default React.memo(CFDResetPasswordModal);\n","import React from 'react';\nimport { Dialog, UnhandledErrorModal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst CFDServerErrorDialog = observer(() => {\n    const { ui } = useStore();\n    const { enableApp, disableApp } = ui;\n    const { clearCFDError, error_message, error_type, has_cfd_error, is_cfd_success_dialog_enabled } = useCfdStore();\n\n    const should_show_error =\n        has_cfd_error &&\n        !is_cfd_success_dialog_enabled &&\n        error_type &&\n        error_type !== 'PasswordReset' &&\n        error_type !== 'PasswordError';\n\n    if (should_show_error) {\n        return error_message ? (\n            <Dialog\n                title={localize('Something’s not right')}\n                confirm_button_text={localize('OK')}\n                onConfirm={clearCFDError}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_visible={should_show_error}\n            >\n                {error_message}\n            </Dialog>\n        ) : (\n            <UnhandledErrorModal />\n        );\n    }\n    return null;\n});\n\nexport default CFDServerErrorDialog;\n","import React from 'react';\nimport SuccessDialog from '../Components/success-dialog.jsx';\nimport { Icon, Modal, Button, Money, Text } from '@deriv/components';\nimport { getCFDPlatformLabel } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport {\n    TDxCompanies,\n    TMtCompanies,\n    TDerivezCompanies,\n    TCTraderCompanies,\n    getCTraderCompanies,\n} from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { getTopUpConfig } from '../Helpers/constants';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\n\ntype TCFDTopUpDemoModalProps = {\n    platform: string;\n};\n\nconst CFDTopUpDemoModal = observer(({ platform }: TCFDTopUpDemoModalProps) => {\n    const { ui } = useStore();\n\n    const {\n        is_top_up_virtual_open,\n        is_top_up_virtual_in_progress,\n        is_top_up_virtual_success,\n        closeTopUpModal,\n        closeSuccessTopUpModal,\n    } = ui;\n\n    const { current_account, dxtrade_companies, derivez_companies, mt5_companies, topUpVirtual } = useCfdStore();\n\n    const ctrader_companies = getCTraderCompanies();\n\n    const getAccountTitle = React.useCallback(() => {\n        let title = '';\n        if ((!mt5_companies && !dxtrade_companies && !derivez_companies) || !current_account) return '';\n\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                title =\n                    mt5_companies[current_account.category as keyof TMtCompanies][\n                        current_account.type as keyof TMtCompanies['demo' | 'real']\n                    ].title;\n                break;\n            case CFD_PLATFORMS.DERIVEZ:\n                title =\n                    derivez_companies[current_account.category as keyof TDerivezCompanies][\n                        current_account.type as keyof TDerivezCompanies['demo' | 'real']\n                    ].title;\n                break;\n            case CFD_PLATFORMS.CTRADER:\n                title =\n                    ctrader_companies[current_account.category as keyof TCTraderCompanies][\n                        current_account.type as keyof TCTraderCompanies['demo' | 'real']\n                    ].title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                title =\n                    dxtrade_companies[current_account.category as keyof TDxCompanies][\n                        current_account.type as keyof TDxCompanies['demo' | 'real']\n                    ].title;\n                break;\n            default:\n                break;\n        }\n\n        return title;\n    }, [mt5_companies, dxtrade_companies, derivez_companies, current_account, platform, ctrader_companies]);\n\n    const onCloseSuccess = () => {\n        closeSuccessTopUpModal();\n    };\n\n    const has_sub_title = platform === CFD_PLATFORMS.CTRADER;\n\n    const platform_title = getCFDPlatformLabel(platform, has_sub_title);\n\n    if ((!mt5_companies && !dxtrade_companies && !derivez_companies && !getCTraderCompanies()) || !current_account)\n        return null;\n    const { minimum_amount, additional_amount } = getTopUpConfig();\n\n    return (\n        <React.Fragment>\n            <Modal\n                toggleModal={closeTopUpModal}\n                is_open={is_top_up_virtual_open}\n                className='top-up-virtual'\n                title={localize('Fund top up')}\n                width='384px'\n            >\n                <div className='dc-modal__container_top-up-virtual__body'>\n                    <Text\n                        as='p'\n                        align='center'\n                        size='xxs'\n                        line_height='xs'\n                        className='dc-modal__container_top-up-virtual__description'\n                        data-testid='dt_top_up_virtual_description'\n                    >\n                        <Localize\n                            i18n_default_text='You can top up your demo account with an additional <0></0> if your balance is <1></1> or less.'\n                            components={[\n                                <Money\n                                    key={0}\n                                    amount={additional_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                                <Money\n                                    key={1}\n                                    amount={minimum_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                            ]}\n                        />\n                    </Text>\n                    <h4 className='dc-modal__container_top-up-virtual--h4'>\n                        <Localize\n                            i18n_default_text='{{ platform }} {{ account_title }} account'\n                            values={{\n                                platform: platform_title,\n                                account_title: getAccountTitle(),\n                            }}\n                        />\n                    </h4>\n                    <div>\n                        <Text as='p' align='center' size='xxs'>\n                            <Localize i18n_default_text='Current balance' />\n                        </Text>\n                        <div className='dc-modal__container_top-up-virtual--balance'>\n                            <Money\n                                amount={current_account.display_balance}\n                                currency={current_account.currency}\n                                has_sign={(current_account.balance as number) < 0}\n                            />\n                        </div>\n                    </div>\n                    <div className='dc-modal__container_top-up-virtual--button'>\n                        <Button\n                            is_disabled={(current_account.balance as number) > 1000 || is_top_up_virtual_in_progress}\n                            type='button'\n                            is_loading={is_top_up_virtual_in_progress}\n                            onClick={() => topUpVirtual(platform)}\n                            primary\n                            large\n                        >\n                            {!is_top_up_virtual_in_progress && (\n                                <Localize\n                                    i18n_default_text='Top up &nbsp;<0></0>'\n                                    components={[\n                                        <Money\n                                            key={0}\n                                            amount={additional_amount}\n                                            currency={current_account.currency}\n                                            show_currency\n                                        />,\n                                    ]}\n                                />\n                            )}\n                        </Button>\n                    </div>\n                </div>\n            </Modal>\n            <SuccessDialog\n                is_open={is_top_up_virtual_success}\n                toggleModal={onCloseSuccess}\n                has_close_icon\n                title={localize('Fund top up')}\n                icon={<Icon icon='IcCashierWallet' size={128} />}\n                heading={\n                    <h3 className='cfd-success-topup__heading'>\n                        <Localize\n                            i18n_default_text='<0></0> has been credited into your {{platform}} {{title}} account.'\n                            values={{ platform: platform_title, title: getAccountTitle() }}\n                            components={[\n                                <Money\n                                    key={0}\n                                    amount={additional_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                            ]}\n                        />\n                    </h3>\n                }\n                message={\n                    <div className='cfd-success-topup__description'>\n                        <p>\n                            <Localize i18n_default_text='New current balance' />\n                        </p>\n                        <div className='dc-modal__container_top-up-virtual--balance'>\n                            <Money amount={current_account.balance} currency={current_account.currency} />\n                        </div>\n                    </div>\n                }\n                icon_size='large'\n                has_cancel={false}\n                has_submit={false}\n                width='384px'\n            />\n        </React.Fragment>\n    );\n});\n\nexport default CFDTopUpDemoModal;\n","import React from 'react';\n\nimport { LandingCompany } from '@deriv/api-types';\nimport { Div100vhContainer, Table, Text, ThemedScrollbars } from '@deriv/components';\nimport { CFD_PLATFORMS, isDesktop, isLandingCompanyEnabled } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\ntype TCFDAttributeDescriberProps = {\n    name: string;\n    counter: number | null;\n};\n\ntype TFilterAvailableAccounts = (\n    landing_companies: LandingCompany,\n    table: TAccountsDescription[],\n    is_logged_in: boolean,\n    is_eu_client: boolean,\n    platform: string,\n    is_australian: boolean\n) => Array<{ [key: string]: string | React.ReactNode | undefined }>;\n\ntype TAccountsDescription = {\n    attribute: string;\n    mt5: TDxTradeAccountsDescription & { financial_stp: string };\n    dxtrade: TDxTradeAccountsDescription;\n};\n\ntype TDxTradeAccountsDescription = {\n    synthetic: string;\n    synthetic_eu: string;\n    financial: string;\n    financial_au: string;\n    financial_eu: string | React.ReactNode;\n    footnote: string | null;\n};\n\ntype TCompareAccountsReusedProps = {\n    landing_companies: LandingCompany;\n    platform: string;\n    is_logged_in: boolean;\n    is_uk: boolean;\n};\n\ntype TCompareAccountsDataParams = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n};\n\ntype TCFDCompareAccountHintProps = TCompareAccountsReusedProps & {\n    show_risk_message: boolean;\n};\n\ntype TModalContentProps = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n    is_eu: boolean;\n};\n\ntype TGetAccounts = (params: TCompareAccountsReusedProps) => TAccountsDescription[];\n\ntype TAccountTypesToFilter = (\n    | NonNullable<LandingCompany['mt_gaming_company']>['financial']\n    | NonNullable<LandingCompany['mt_financial_company']>['financial']\n    | NonNullable<LandingCompany['mt_financial_company']>['financial_stp']\n    | LandingCompany['dxtrade_gaming_company']\n    | LandingCompany['dxtrade_financial_company']\n    | boolean\n    | undefined\n)[];\n\nconst getAccounts: TGetAccounts = ({ landing_companies, platform, is_logged_in, is_uk }) => {\n    const getLoggedOutTypesCount = () => (platform === CFD_PLATFORMS.MT5 ? 3 : 2);\n    const getLoggedInTypesCount = () =>\n        (\n            (platform === CFD_PLATFORMS.MT5\n                ? [\n                      landing_companies?.mt_gaming_company?.financial,\n                      landing_companies?.mt_financial_company?.financial,\n                      landing_companies?.mt_financial_company?.financial_stp && platform === CFD_PLATFORMS.MT5,\n                  ]\n                : [\n                      landing_companies?.dxtrade_gaming_company,\n                      landing_companies?.dxtrade_financial_company,\n                  ]) as TAccountTypesToFilter\n        ).filter(Boolean).length;\n\n    const account_types_count = is_logged_in ? getLoggedInTypesCount() : getLoggedOutTypesCount();\n    const financial_eu_trading_instruments = is_uk ? (\n        <div>\n            {localize('Forex, stocks, stock indices, cryptocurrencies')}\n            <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                **\n            </Text>\n            {localize(', synthetic indices')}\n        </div>\n    ) : (\n        localize('Forex, stocks, stock indices, cryptocurrencies, synthetic indices')\n    );\n\n    const account_currencies_config = {\n        synthetic: localize('USD'),\n        synthetic_eu: localize('EUR'),\n        financial: localize('USD'),\n        financial_au: localize('USD'),\n        footnote: null,\n    };\n    const maximum_leverages_config = {\n        synthetic: localize('Up to 1:1000'),\n        synthetic_eu: localize('Up to 1:1000'),\n        financial: localize('Up to 1:1000'),\n        financial_au: localize('Up to 1:30'),\n        financial_eu: localize('Up to 1:30'),\n        footnote: localize(\n            'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n        ),\n    };\n    const order_execution_config = {\n        synthetic: localize('Market'),\n        synthetic_eu: localize('Market'),\n        financial: localize('Market'),\n        financial_au: localize('Market'),\n        financial_eu: localize('Market'),\n        financial_stp: localize('Market'),\n        footnote: localize(\n            \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n            {\n                count: account_types_count,\n            }\n        ),\n    };\n    const spread_config = {\n        synthetic: localize('Fixed/Variable'),\n        synthetic_eu: localize('Fixed/Variable'),\n        financial: localize('Variable'),\n        financial_au: localize('Variable'),\n        footnote: localize(\n            \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n        ),\n    };\n    const commission_config = {\n        synthetic: localize('No'),\n        synthetic_eu: localize('No'),\n        financial: localize('No'),\n        financial_au: localize('No'),\n        financial_eu: localize('No'),\n        footnote: localize('Deriv charges no commission across all account types.'),\n    };\n    const minimum_deposit_config = {\n        ...commission_config,\n        footnote: null,\n    };\n    const margin_call_config = {\n        synthetic: localize('100%'),\n        synthetic_eu: localize('100%'),\n        financial: localize('100%'),\n        financial_au: localize('100%'),\n        financial_eu: localize('100%'),\n        footnote: localize(\n            'You’ll get a warning, known as margin call, if your account balance drops down close to the stop out level.'\n        ),\n    };\n    const stop_out_level_config = {\n        synthetic: localize('50%'),\n        synthetic_eu: localize('50%'),\n        financial: localize('50%'),\n        financial_au: localize('50%'),\n        financial_eu: localize('50%'),\n        footnote: localize(\n            \"To understand stop out, first you need to learn about margin level, which is  the ratio of your equity (the total balance you would have if you close all your positions at that point) to the margin you're using at the moment. If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.\"\n        ),\n    };\n\n    const cryptocurrency_trading_config = {\n        synthetic: localize('N/A'),\n        synthetic_eu: localize('N/A'),\n        financial: localize('24/7'),\n        financial_au: localize('24/7'),\n        financial_eu: localize('24/7'),\n        footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n    };\n\n    return [\n        {\n            attribute: localize('Account currency'),\n            mt5: {\n                ...account_currencies_config,\n                financial_eu: localize('EUR/GBP/USD'),\n                financial_stp: localize('USD'),\n            },\n            dxtrade: {\n                ...account_currencies_config,\n                financial_eu: localize('EUR/GBP'),\n            },\n        },\n        {\n            attribute: localize('Maximum leverage'),\n            mt5: {\n                ...maximum_leverages_config,\n                financial_stp: localize('Up to 1:100'),\n            },\n            dxtrade: {\n                ...maximum_leverages_config,\n            },\n        },\n        {\n            attribute: localize('Order execution'),\n            mt5: {\n                ...order_execution_config,\n            },\n            dxtrade: {\n                ...order_execution_config,\n            },\n        },\n        {\n            attribute: localize('Spread'),\n            mt5: {\n                ...spread_config,\n                financial_eu: localize('Fixed/Variable'),\n                financial_stp: localize('Variable'),\n            },\n            dxtrade: {\n                ...spread_config,\n                financial_eu: localize('Variable'),\n            },\n        },\n        {\n            attribute: localize('Commission'),\n            mt5: {\n                ...commission_config,\n                financial_stp: localize('No'),\n            },\n            dxtrade: {\n                ...commission_config,\n            },\n        },\n        {\n            attribute: localize('Minimum deposit'),\n            mt5: {\n                ...minimum_deposit_config,\n                financial_stp: localize('No'),\n            },\n            dxtrade: {\n                ...minimum_deposit_config,\n            },\n        },\n        {\n            attribute: localize('Margin call'),\n            mt5: {\n                ...margin_call_config,\n                financial_stp: localize('100%'),\n            },\n            dxtrade: {\n                ...margin_call_config,\n            },\n        },\n        {\n            attribute: localize('Stop out level'),\n            mt5: {\n                ...stop_out_level_config,\n                financial_stp: localize('50%'),\n            },\n            dxtrade: {\n                ...stop_out_level_config,\n            },\n        },\n        {\n            attribute: localize('Number of assets'),\n            mt5: {\n                synthetic: localize('20+'),\n                synthetic_eu: localize('20+'),\n                financial: localize('150+'),\n                financial_au: localize('100+'),\n                financial_eu: localize('50+'),\n                financial_stp: localize('70+'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('20+'),\n                synthetic_eu: localize('20+'),\n                financial: localize('90+'),\n                financial_au: localize('90+'),\n                financial_eu: localize('90+'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Cryptocurrency trading'),\n            mt5: {\n                ...cryptocurrency_trading_config,\n                financial_stp: localize('24/7'),\n            },\n            dxtrade: {\n                ...cryptocurrency_trading_config,\n            },\n        },\n        {\n            attribute: localize('Trading instruments'),\n            mt5: {\n                synthetic: localize('Synthetics'),\n                synthetic_eu: localize('Synthetics'),\n                financial: localize(\n                    'FX-majors (standard/micro lots), FX-minors, basket indices, commodities, cryptocurrencies, and stocks and stock indices'\n                ),\n                financial_au: localize(\n                    'FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies, Stocks, and Stock Indices'\n                ),\n                financial_eu: financial_eu_trading_instruments,\n                financial_stp: localize('FX-majors, FX-minors, FX-exotics, and cryptocurrencies'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('Synthetics'),\n                synthetic_eu: localize('Synthetics'),\n                financial: localize(\n                    'FX majors (standard/micro lots), FX minors, basket indices, commodities, and cryptocurrencies'\n                ),\n                financial_au: localize('FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies'),\n                financial_eu: localize(\n                    'FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies (except UK)'\n                ),\n                footnote: null,\n            },\n        },\n    ];\n};\n\nconst CFDAttributeDescriber = ({ name, counter }: TCFDAttributeDescriberProps) => {\n    const [is_visible, setIsVisible] = React.useState(false);\n    const toggleModal = () => setIsVisible(!is_visible);\n\n    return counter ? (\n        <React.Fragment>\n            <Text\n                as='p'\n                weight='bold'\n                size='xs'\n                line_height='s'\n                className='cfd-attribute-describer'\n                onClick={toggleModal}\n            >\n                {name}\n                <Text weight='bold' as='span' line_height='x' size='xxxs' className='counter'>\n                    {counter}\n                </Text>\n            </Text>\n        </React.Fragment>\n    ) : (\n        <Text as='p' weight='bold' size='xs' line_height='s' className='cfd-attribute-describer'>\n            {name}\n        </Text>\n    );\n};\n\nconst filterAvailableAccounts: TFilterAvailableAccounts = (\n    landing_companies,\n    table,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    is_australian\n) => {\n    const getFinancialObject = (financial?: string, financial_au?: string, financial_eu?: string | React.ReactNode) => {\n        if (is_australian) {\n            return financial_au;\n        }\n        if (is_eu_client) {\n            return financial_eu;\n        }\n        return financial;\n    };\n\n    let footnote_number = 0;\n    return table\n        .filter(row => row[platform as keyof TAccountsDescription])\n        .map(({ attribute, mt5 = {}, dxtrade = {} }) => {\n            const { synthetic, synthetic_eu, financial, financial_au, financial_eu, footnote } =\n                platform === CFD_PLATFORMS.MT5 ? mt5 : dxtrade;\n            const synthetic_object = { synthetic: is_eu_client ? synthetic_eu : synthetic };\n            const financial_object = { financial: getFinancialObject(financial, financial_au, financial_eu) };\n            const footnote_counter = footnote ? ++footnote_number : null;\n\n            if (is_logged_in) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    ...(landing_companies?.mt_gaming_company?.financial ? synthetic_object : {}),\n                    ...(landing_companies?.mt_financial_company?.financial ? financial_object : {}),\n                    ...(landing_companies?.mt_financial_company?.financial_stp && platform === CFD_PLATFORMS.MT5\n                        ? { financial_stp: mt5?.financial_stp }\n                        : {}),\n                };\n            }\n            if (platform === CFD_PLATFORMS.DXTRADE) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    ...synthetic_object,\n                    ...financial_object,\n                };\n            }\n            return {\n                attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                ...synthetic_object,\n                ...financial_object,\n                ...{ financial_stp: mt5?.financial_stp },\n            };\n        });\n};\n\nconst compareAccountsData = ({\n    landing_companies,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    residence,\n    is_uk,\n}: TCompareAccountsDataParams) => {\n    const is_australian = residence === 'au';\n    return filterAvailableAccounts(\n        landing_companies,\n        getAccounts({ landing_companies, platform, is_logged_in, is_uk }),\n        is_logged_in,\n        is_eu_client,\n        platform,\n        is_australian\n    );\n};\n\nconst CFDCompareAccountHint = ({\n    platform,\n    show_risk_message,\n    landing_companies,\n    is_logged_in,\n    is_uk,\n}: TCFDCompareAccountHintProps) => {\n    return (\n        <div className='cfd-compare-account--hint'>\n            <div className='cfd-compare-accounts__bullet-wrapper'>\n                <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                <Localize i18n_default_text='At bank rollover, liquidity in the forex markets is reduced and may increase the spread and processing time for client orders. This happens around 21:00 GMT during daylight saving time, and 22:00 GMT non-daylight saving time.' />\n            </div>\n            {show_risk_message && (\n                <React.Fragment>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                        <Localize i18n_default_text='Margin call and stop out level will change from time to time based on market condition.' />\n                    </div>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <Text\n                            size='xs'\n                            line_height='x'\n                            weight='bold'\n                            className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                        >\n                            *\n                        </Text>\n                        <Localize\n                            i18n_default_text='To protect your portfolio from adverse market movements due to the market opening gap, we reserve the right to decrease leverage on all offered symbols for financial accounts before market close and increase it again after market open. Please make sure that you have enough funds available in your {{platform}} account to support your positions at all times.'\n                            values={{\n                                platform: platform === CFD_PLATFORMS.MT5 ? localize('MT5') : localize('Deriv X'),\n                            }}\n                        />\n                    </div>\n                    {is_uk && (\n                        <div className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                **\n                            </Text>\n                            <Localize\n                                i18n_default_text='Cryptocurrency trading is not available for clients residing in the United Kingdom.'\n                                values={{\n                                    platform: platform === CFD_PLATFORMS.MT5 ? localize('MT5') : localize('Deriv X'),\n                                }}\n                            />\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n            {getAccounts({ landing_companies, platform, is_logged_in, is_uk })\n                .filter(\n                    item =>\n                        !!(item[platform as keyof TAccountsDescription] as TAccountsDescription['mt5' | 'dxtrade'])\n                            ?.footnote\n                )\n                .map((account, index) => {\n                    return (\n                        <div key={index} className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                {index + 1}\n                            </Text>\n                            <div className='cfd-compare-accounts__footnote'>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className='cfd-compare-accounts__footnote-title'\n                                >\n                                    {account.attribute}\n                                </Text>\n                                <Text size='xs' color='prominent'>\n                                    {\n                                        (\n                                            account[platform as keyof TAccountsDescription] as TAccountsDescription[\n                                                | 'mt5'\n                                                | 'dxtrade']\n                                        ).footnote\n                                    }\n                                </Text>\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nconst ModalContent = ({\n    landing_companies,\n    is_logged_in,\n    platform,\n    is_eu_client,\n    residence,\n    is_eu,\n    is_uk,\n}: TModalContentProps) => {\n    const [cols, setCols] = React.useState<Array<Record<string, string | React.ReactNode | undefined>>>([]);\n    const [template_columns, updateColumnsStyle] = React.useState(\n        platform === CFD_PLATFORMS.DXTRADE ? '1.5fr 1fr 2fr' : '1.5fr 1fr 2fr 1fr'\n    );\n\n    React.useEffect(() => {\n        setCols(compareAccountsData({ landing_companies, is_logged_in, platform, is_eu_client, residence, is_uk }));\n\n        if (is_logged_in && platform === CFD_PLATFORMS.MT5) {\n            updateColumnsStyle(\n                `1.5fr ${landing_companies?.mt_gaming_company?.financial ? '1fr' : ''} ${\n                    landing_companies?.mt_financial_company?.financial ? '2fr' : ''\n                } ${landing_companies?.mt_financial_company?.financial_stp ? ' 1fr ' : ''}`\n            );\n        } else if (is_logged_in && platform === CFD_PLATFORMS.DXTRADE) {\n            updateColumnsStyle(\n                `1.5fr ${landing_companies?.dxtrade_gaming_company ? '1fr' : ''} ${\n                    landing_companies?.dxtrade_financial_company ? '2fr' : ''\n                }`\n            );\n        }\n    }, [\n        landing_companies?.mt_financial_company,\n        landing_companies?.mt_gaming_company,\n        is_logged_in,\n        is_uk,\n        landing_companies,\n        platform,\n        is_eu_client,\n        residence,\n    ]);\n\n    const show_risk_message = platform === CFD_PLATFORMS.MT5 || !is_eu_client;\n    const financial_account_table_head_text = is_eu ? localize('CFDs') : localize('Financial');\n\n    return (\n        <Div100vhContainer height_offset='40px' is_bypassed={isDesktop()}>\n            <ThemedScrollbars\n                className='cfd-compare-accounts'\n                style={{\n                    '--cfd-compare-accounts-template-columns': template_columns,\n                }}\n            >\n                <div className='cfd-compare-accounts__table-wrapper'>\n                    <Table className='cfd-compare-accounts__table'>\n                        <Table.Header>\n                            <Table.Row className='cfd-compare-accounts__table-row'>\n                                <Table.Head fixed />\n                                {is_logged_in ? (\n                                    <React.Fragment>\n                                        {isLandingCompanyEnabled({ landing_companies, platform, type: 'gaming' }) && (\n                                            <Table.Head>{localize('Derived')}</Table.Head>\n                                        )}\n                                        {isLandingCompanyEnabled({\n                                            landing_companies,\n                                            platform,\n                                            type: 'financial',\n                                        }) && (\n                                            <Table.Head>\n                                                {financial_account_table_head_text}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                        {isLandingCompanyEnabled({\n                                            landing_companies,\n                                            platform,\n                                            type: 'financial_stp',\n                                        }) && (\n                                            <Table.Head>\n                                                {localize('Financial STP')}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                    </React.Fragment>\n                                ) : (\n                                    <React.Fragment>\n                                        <Table.Head>{localize('Derived')}</Table.Head>\n                                        <Table.Head>\n                                            {localize('Financial')}\n                                            <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                *\n                                            </Text>\n                                        </Table.Head>\n                                        {platform === CFD_PLATFORMS.MT5 && (\n                                            <Table.Head>\n                                                {localize('Financial STP')}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {cols.map((row, i) => (\n                                <Table.Row key={i} className='cfd-compare-accounts__table-row'>\n                                    {Object.keys(row).map((col, j) => (\n                                        <Table.Cell key={j} fixed={j === 0}>\n                                            {row[col]}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                    </Table>\n                </div>\n                <CFDCompareAccountHint\n                    platform={platform}\n                    show_risk_message={show_risk_message}\n                    landing_companies={landing_companies}\n                    is_logged_in={is_logged_in}\n                    is_uk={is_uk}\n                />\n            </ThemedScrollbars>\n        </Div100vhContainer>\n    );\n};\n\nexport default ModalContent;\n","import { localize } from '@deriv/translations';\nimport { TCompareAccountContentProps, TCompareAccountFooterButtonData } from '../Containers/props.types';\n\nexport const getEuRealContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            financial_maltainvest: { text: localize('MT5'), options: { size: 'xxs' } },\n        },\n    },\n    {\n        id: 'jurisdiction',\n        attribute: localize('Jurisdiction'),\n        values: {\n            financial_maltainvest: { text: localize('Malta'), options: { weight: 'bold' } },\n        },\n    },\n    {\n        id: 'counterparty',\n        attribute: localize('Counterparty company'),\n        values: {\n            financial_maltainvest: { text: localize('Deriv Investments (Europe) Limited') },\n        },\n    },\n    {\n        id: 'regulator',\n        attribute: localize('Regulator'),\n        values: {\n            financial_maltainvest: {\n                text: localize('Regulated by the Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n                options: { styles: { padding: '1.8rem 0.8rem' } },\n            },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            financial_maltainvest: { text: localize('Up to 1:30'), options: { size: 'xxxs' } },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            financial_maltainvest: [\n                { text: localize('Synthetics'), options: { should_show_asterick_at_end: true } },\n                { text: localize('Forex: standard') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n                {\n                    text: localize('*Boom 300 and Crash 300 Index'),\n                    options: { color: 'loss-danger', weight: 'bold', styles: { paddingTop: '2rem' } },\n                },\n            ],\n        },\n    },\n];\nexport const getCrRealContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            synthetic_svg: { text: localize('MT5') },\n            derivx: { text: localize('Deriv X') },\n        },\n    },\n    {\n        id: 'jurisdiction',\n        attribute: localize('Jurisdiction'),\n        values: {\n            synthetic_svg: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n            synthetic_bvi: { text: localize('British Virgin Islands'), options: { weight: 'bold' } },\n            synthetic_vanuatu: { text: localize('Vanuatu'), options: { weight: 'bold' } },\n            financial_svg: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n            financial_bvi: { text: localize('British Virgin Islands'), options: { weight: 'bold' } },\n            financial_vanuatu: { text: localize('Vanuatu'), options: { weight: 'bold' } },\n            financial_labuan: {\n                text: localize('Labuan'),\n                options: { weight: 'bold' },\n                tooltip_msg: localize(\n                    'Choosing this jurisdiction will give you a Financial STP account. Your trades will go directly to the market and have tighter spreads.'\n                ),\n            },\n            derivx: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n        },\n    },\n    {\n        id: 'counterparty',\n        attribute: localize('Counterparty company'),\n        values: {\n            synthetic_svg: { text: localize('Deriv (SVG) LLC') },\n            synthetic_bvi: { text: localize('Deriv (BVI) Ltd') },\n            synthetic_vanuatu: { text: localize('Deriv (V) Ltd') },\n            financial_svg: { text: localize('Deriv (SVG) LLC') },\n            financial_bvi: { text: localize('Deriv (BVI) Ltd') },\n            financial_vanuatu: { text: localize('Deriv (V) Ltd') },\n            financial_labuan: { text: localize('Deriv (FX) Ltd') },\n            derivx: { text: localize('Deriv (SVG) LLC') },\n        },\n    },\n    {\n        id: 'regulator',\n        attribute: localize('Regulator/External dispute resolution'),\n        values: {\n            synthetic_svg: { text: localize('Financial Commission') },\n            synthetic_bvi: {\n                text: localize('British Virgin Islands Financial Services Commission (licence no. SIBA/L/18/1114)'),\n            },\n            synthetic_vanuatu: {\n                text: localize('Vanuatu Financial Services Commission'),\n            },\n            financial_svg: { text: localize('Financial Commission') },\n            financial_bvi: {\n                text: localize('British Virgin Islands Financial Services Commission (licence no. SIBA/L/18/1114)'),\n            },\n            financial_vanuatu: {\n                text: localize('Vanuatu Financial Services Commission'),\n            },\n            financial_labuan: { text: localize('Labuan Financial Services Authority (Licence no. MB/18/0024)') },\n            derivx: { text: 'Financial Commission' },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            synthetic_svg: { text: localize('Up to 1:1000') },\n            financial_vanuatu: { text: localize('Up to 1:1000') },\n            financial_labuan: { text: localize('Up to 1:100') },\n            derivx: { text: localize('Up to 1:1000') },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            synthetic_svg: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n            ],\n            financial_svg: [\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            financial_vanuatu: [\n                { text: localize('Forex') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            financial_labuan: [{ text: localize('Forex') }, { text: localize('Cryptocurrencies') }],\n            derivx: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n        },\n    },\n];\n\nexport const getCrRealFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'synthetic_svg' },\n    { label: localize('Add'), action: 'synthetic_bvi' },\n    { label: localize('Add'), action: 'synthetic_vanuatu' },\n    { label: localize('Add'), action: 'financial_svg' },\n    { label: localize('Add'), action: 'financial_bvi' },\n    { label: localize('Add'), action: 'financial_vanuatu' },\n    { label: localize('Add'), action: 'financial_labuan' },\n    { label: localize('Add'), action: 'derivx' },\n];\nexport const getEuFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'financial_maltainvest' },\n];\n\nexport const getPreappstoreCrDemoContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            synthetic_svg: { text: localize('MT5') },\n            financial_svg: { text: localize('MT5') },\n            derivx: { text: localize('Deriv X') },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            synthetic_svg: { text: localize('Up to 1:1000') },\n            financial_svg: { text: localize('Up to 1:1000') },\n            derivx: { text: localize('Up to 1:1000') },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            synthetic_svg: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n            ],\n            financial_svg: [\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            derivx: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n        },\n    },\n];\n\nexport const getPreappstoreCrDemoFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'synthetic_svg' },\n    { label: localize('Add'), action: 'financial_svg' },\n    { label: localize('Add'), action: 'derivx' },\n];\n\nexport const getPreappstoreEuDemoContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            financial_maltainvest: { text: localize('Up to 1:30'), options: { size: 'xxxs' } },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            financial_maltainvest: [\n                { text: localize('Synthetics'), options: { should_show_asterick_at_end: true } },\n                { text: localize('Forex: standard') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n                {\n                    text: localize('*Boom 300 and Crash 300 Index'),\n                    options: { color: 'loss-danger', weight: 'bold', styles: { paddingTop: '2rem' } },\n                },\n            ],\n        },\n    },\n];\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Table, Button, Text, Popover } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isDesktop, WS, getAuthenticationStatusInfo, CFD_PLATFORMS, ContentFlag, Jurisdiction } from '@deriv/shared';\nimport {\n    TDMT5CompareModalContentProps,\n    TCompareAccountContentProps,\n    TCompareAccountFooterButtonData,\n    TCompareAccountContentValues,\n    TCompareAccountRowProps,\n    TCompareAccountRowItem,\n} from './props.types';\nimport {\n    getEuRealContent,\n    getCrRealContent,\n    getCrRealFooterButtons,\n    getPreappstoreCrDemoContent,\n    getPreappstoreCrDemoFooterButtons,\n    getPreappstoreEuDemoContent,\n    getEuFooterButtons,\n} from '../Constants/cfd_compare_account_content';\nimport { GetSettings, GetAccountSettingsResponse } from '@deriv/api-types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst Row = ({\n    id,\n    attribute,\n    values,\n    pre_appstore_class,\n    available_accounts_count,\n    classname_for_demo_and_eu,\n    is_pre_appstore_setting,\n    content_flag,\n    is_high_risk_for_mt5,\n    CFDs_restricted_countries,\n    financial_restricted_countries,\n    is_preappstore_restricted_cr_demo_account,\n    residence,\n}: TCompareAccountRowProps) => {\n    const is_leverage_row = id === 'leverage';\n    const is_platform_row = id === 'platform';\n    const is_instruments_row = id === 'instruments';\n    const is_other_countries = ['af', 'pk', 'mg'].includes(residence);\n\n    const getContentSize = () => {\n        if (id === 'counterparty' || id === 'leverage') return isDesktop() ? 'xxs' : 'xxxs';\n        return isDesktop() ? 'xxxs' : 'xxxxs';\n    };\n\n    if (is_platform_row && !is_pre_appstore_setting) {\n        return null;\n    }\n\n    if (is_platform_row && is_pre_appstore_setting && CFDs_restricted_countries) {\n        values.synthetic_bvi = { text: 'MT5' };\n    }\n    if (CFDs_restricted_countries) {\n        if (is_leverage_row) values.synthetic_bvi = { text: localize('Up to 1:1000') };\n        delete values.derivx;\n    }\n    if (is_platform_row && financial_restricted_countries) {\n        values.financial_svg = { text: localize('MT5') };\n        if ('financial_labuan' in values) values.financial_labuan = { text: localize('MT5') };\n    }\n    // As we only show one account for Demo\n    if (content_flag === ContentFlag.CR_DEMO) {\n        delete values.financial_labuan;\n    }\n\n    if (is_pre_appstore_setting && is_preappstore_restricted_cr_demo_account) {\n        delete values.synthetic_bvi;\n    }\n\n    if (is_platform_row && content_flag === ContentFlag.HIGH_RISK_CR && is_high_risk_for_mt5) {\n        // needed to adjust the design for high risk\n        values.financial_svg = { text: 'MT5' };\n    }\n    return (\n        <Table.Row\n            className={\n                classname_for_demo_and_eu ??\n                classNames(`cfd-accounts-compare-modal__table-row${pre_appstore_class}`, {\n                    [`cfd-accounts-compare-modal__table-row--leverage${pre_appstore_class}`]: is_leverage_row,\n                    [`cfd-accounts-compare-modal__row-with-columns-count-${available_accounts_count + 1}`]:\n                        available_accounts_count < 6,\n                    [`cfd-accounts-compare-modal__table-row--platform${pre_appstore_class}`]: is_platform_row,\n                    [`cfd-accounts-compare-modal__table-row--instruments${pre_appstore_class}`]: is_instruments_row,\n                    'cfd-accounts-compare-modal__table-row--other-country': is_other_countries,\n                    [`cfd-accounts-compare-modal__table-row--leverage__${residence}`]:\n                        is_leverage_row && is_other_countries,\n                    [`cfd-accounts-compare-modal__table-row--instruments__${residence}`]:\n                        is_instruments_row && is_other_countries,\n                })\n            }\n        >\n            <Table.Cell fixed>\n                <Text as='p' weight='bold' color='prominent' size='xxs'>\n                    {attribute}\n                </Text>\n            </Table.Cell>\n\n            {Object.keys(values).map(rowKey => (\n                <Table.Cell\n                    key={rowKey}\n                    className={classNames('cfd-accounts-compare-modal__table-row-item', {\n                        'cfd-accounts-compare-modal__table-row-item--tooltip': (\n                            values[rowKey] as TCompareAccountRowItem\n                        )?.tooltip_msg,\n                    })}\n                >\n                    <>\n                        {Array.isArray(values[rowKey]) ? (\n                            (values[rowKey] as TCompareAccountRowItem[])?.map((item, index) => (\n                                <Text\n                                    key={index}\n                                    as='p'\n                                    color={item?.options?.color ?? 'prominent'}\n                                    weight={item?.options?.weight ?? 'normal'}\n                                    align={item?.options?.align ?? 'center'}\n                                    size={item?.options?.size ?? getContentSize()}\n                                    styles={item?.options?.styles ?? ''}\n                                >\n                                    {item.text}\n                                    {item?.options?.should_show_asterick_at_end && (\n                                        <Text color={'loss-danger'} size={'xxxs'}>\n                                            *\n                                        </Text>\n                                    )}\n                                </Text>\n                            ))\n                        ) : (\n                            <>\n                                <Text\n                                    as='p'\n                                    weight={(values[rowKey] as TCompareAccountRowItem)?.options?.weight ?? 'normal'}\n                                    align={(values[rowKey] as TCompareAccountRowItem)?.options?.align ?? 'center'}\n                                    color={(values[rowKey] as TCompareAccountRowItem)?.options?.color ?? 'prominent'}\n                                    size={(values[rowKey] as TCompareAccountRowItem)?.options?.size ?? getContentSize()}\n                                    styles={(values[rowKey] as TCompareAccountRowItem)?.options?.styles ?? ''}\n                                >\n                                    {(values[rowKey] as TCompareAccountRowItem)?.text}\n                                </Text>\n                                {(values[rowKey] as TCompareAccountRowItem)?.tooltip_msg && (\n                                    <Popover\n                                        alignment='left'\n                                        className='cfd-compare-accounts-tooltip'\n                                        classNameBubble='cfd-compare-accounts-tooltip--msg'\n                                        icon='info'\n                                        disable_message_icon\n                                        is_bubble_hover_enabled\n                                        message={(values[rowKey] as TCompareAccountRowItem)?.tooltip_msg}\n                                        zIndex={9999}\n                                    />\n                                )}\n                            </>\n                        )}\n                    </>\n                </Table.Cell>\n            ))}\n        </Table.Row>\n    );\n};\n\nconst DMT5CompareModalContent = observer(\n    ({\n        content_flag,\n        is_demo_tab,\n        is_logged_in,\n        is_pre_appstore_setting,\n        is_preappstore_cr_demo_account,\n        is_preappstore_restricted_cr_demo_account,\n        is_real_enabled,\n        openDerivRealAccountNeededModal,\n        openPasswordModal,\n        real_account_creation_unlock_date,\n        setShouldShowCooldownModal,\n        should_show_derivx,\n        show_eu_related_content,\n        toggleCompareAccounts,\n    }: TDMT5CompareModalContentProps) => {\n        const { client, ui, common, traders_hub } = useStore();\n\n        const {\n            account_settings,\n            account_status,\n            has_active_real_account: has_real_account,\n            is_virtual,\n            should_restrict_bvi_account_creation,\n            setAccountSettings,\n            should_restrict_vanuatu_account_creation,\n            trading_platform_available_accounts,\n            updateMT5Status,\n            upgradeable_landing_companies,\n            residence,\n        } = client;\n        const { openSwitchToRealAccountModal } = ui;\n        const { setAppstorePlatform } = common;\n        const { no_CR_account, is_eu_user, no_MF_account, CFDs_restricted_countries, financial_restricted_countries } =\n            traders_hub;\n\n        const {\n            clearCFDError,\n            current_list,\n            setAccountType,\n            setJurisdictionSelectedShortcode,\n            toggleCFDVerificationModal,\n        } = useCfdStore();\n\n        const [has_submitted_personal_details, setHasSubmittedPersonalDetails] = React.useState(false);\n\n        const mt5_platforms = trading_platform_available_accounts.map(\n            account => `${account.market_type === 'gaming' ? 'synthetic' : account.market_type}_${account.shortcode}`\n        );\n\n        const has_synthetic = trading_platform_available_accounts.some(account => account.market_type === 'gaming');\n        const available_accounts_keys = [...mt5_platforms, ...(should_show_derivx && has_synthetic ? ['derivx'] : [])];\n\n        const logged_out_available_accounts_count = show_eu_related_content ? 1 : 6;\n        const available_accounts_count = is_logged_in\n            ? available_accounts_keys.length\n            : logged_out_available_accounts_count;\n        const synthetic_accounts_count =\n            !is_logged_in && !show_eu_related_content\n                ? 2\n                : available_accounts_keys.filter(key => key.startsWith('synthetic')).length;\n        const financial_accounts_count =\n            !is_logged_in && !show_eu_related_content\n                ? 4\n                : available_accounts_keys.filter(key => key.startsWith('financial')).length || 1;\n\n        const is_high_risk_for_mt5 = synthetic_accounts_count === 1 && financial_accounts_count === 1;\n        const {\n            poi_or_poa_not_submitted,\n            poi_acknowledged_for_maltainvest,\n            poi_acknowledged_for_bvi_labuan_vanuatu,\n            poa_acknowledged,\n            poa_pending,\n        } = getAuthenticationStatusInfo(account_status);\n\n        const is_other_countries = ['af', 'pk', 'mg'].includes(residence);\n\n        React.useEffect(() => {\n            if (is_logged_in && !is_virtual) {\n                updateMT5Status();\n            }\n            if (!has_submitted_personal_details) {\n                let get_settings_response: GetSettings = {};\n                if (!account_settings) {\n                    WS.authorized.storage.getSettings().then((response: GetAccountSettingsResponse) => {\n                        get_settings_response = response.get_settings as GetSettings;\n                        setAccountSettings(response.get_settings as GetSettings);\n                    });\n                } else {\n                    get_settings_response = account_settings;\n                }\n                const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n                    get_settings_response;\n                if (citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason) {\n                    setHasSubmittedPersonalDetails(true);\n                }\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        const getAvailableAccountsContent = (modal_content: TCompareAccountContentProps[]) => {\n            if (!is_logged_in) {\n                if (show_eu_related_content) {\n                    return modal_content;\n                }\n                const mt5_data = modal_content.map(item => {\n                    const { derivx, ...rest } = item.values; // eslint-disable-line @typescript-eslint/no-unused-vars\n                    return { ...item, values: rest };\n                });\n                return mt5_data;\n            }\n            return modal_content.map(row_data => {\n                const available_accounts_values = Object.entries(row_data.values).reduce(\n                    (acc, [key, value]) => (available_accounts_keys.includes(key) ? { ...acc, [key]: value } : acc),\n                    {} as TCompareAccountContentValues\n                );\n                const content_data = { ...row_data, values: {} as TCompareAccountContentValues };\n                const col_num = should_show_derivx ? 7 : 6;\n                if (available_accounts_keys.length < col_num && !show_eu_related_content) {\n                    // order of the values matters for data to be correctly displayed in the table\n                    const sorted_values = [\n                        'synthetic_svg',\n                        'synthetic_bvi',\n                        'financial_svg',\n                        'financial_bvi',\n                        'financial_vanuatu',\n                        'financial_labuan',\n                        ...(should_show_derivx && synthetic_accounts_count > 0 ? ['derivx'] : []),\n                    ];\n                    content_data.values = sorted_values.reduce(\n                        (acc, el) => (available_accounts_keys.includes(el) ? { ...acc, [el]: undefined } : acc),\n                        {}\n                    );\n                    available_accounts_keys.forEach(key => {\n                        if (row_data.id === 'leverage' && (key === 'financial_svg' || key === 'financial_bvi')) {\n                            content_data.values[key] = row_data.values.financial_vanuatu;\n                        } else if (row_data.id === 'instruments' && key === 'synthetic_bvi') {\n                            content_data.values[key] = row_data.values.synthetic_svg;\n                        } else if (row_data.id === 'instruments' && key === 'financial_bvi') {\n                            content_data.values[key] = row_data.values.financial_svg;\n                        }\n                    });\n                }\n                return { ...content_data, values: { ...content_data.values, ...available_accounts_values } };\n            });\n        };\n\n        const getAvailableAccountsFooterButtons = (footer_button_data: TCompareAccountFooterButtonData[]) => {\n            return footer_button_data.filter(data => {\n                if (CFDs_restricted_countries) {\n                    //remove derivx button if user is from restricted countries\n                    if (data.action === 'derivx') return false;\n                }\n                return available_accounts_keys.includes(data.action);\n            });\n        };\n\n        const onSelectRealAccount = (item: TCompareAccountFooterButtonData) => {\n            const selected_account_type = () => {\n                if (item.action === 'derivx') return 'all';\n                return item.action.startsWith('financial') ? 'financial' : 'synthetic';\n            };\n\n            const type_of_account = {\n                category: is_demo_tab ? 'demo' : 'real',\n                type: selected_account_type(),\n            };\n            clearCFDError();\n            setAccountType(type_of_account);\n\n            switch (item.action) {\n                case 'synthetic_svg':\n                case 'financial_svg':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                    openPasswordModal(type_of_account);\n                    break;\n                case 'synthetic_bvi':\n                case 'financial_bvi':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.BVI);\n                    if (\n                        poi_acknowledged_for_bvi_labuan_vanuatu &&\n                        !poi_or_poa_not_submitted &&\n                        !should_restrict_bvi_account_creation &&\n                        has_submitted_personal_details &&\n                        poa_acknowledged\n                    ) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'synthetic_vanuatu':\n                case 'financial_vanuatu':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.VANUATU);\n                    if (\n                        poi_acknowledged_for_bvi_labuan_vanuatu &&\n                        !poi_or_poa_not_submitted &&\n                        !should_restrict_vanuatu_account_creation &&\n                        has_submitted_personal_details &&\n                        poa_acknowledged\n                    ) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'financial_labuan':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.LABUAN);\n                    if (poi_acknowledged_for_bvi_labuan_vanuatu && poa_acknowledged && has_submitted_personal_details) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'financial_maltainvest':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                    if ((poi_acknowledged_for_maltainvest && poa_acknowledged) || is_demo_tab) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'dxtrade':\n                    setAppstorePlatform(CFD_PLATFORMS.DXTRADE);\n                    openPasswordModal(type_of_account);\n                    break;\n                default:\n            }\n        };\n\n        const isMt5AccountAdded = (item: TCompareAccountFooterButtonData) =>\n            Object.entries(current_list).some(([key, value]) => {\n                const [market, type] = item.action.split('_');\n                const current_account_type = is_demo_tab ? 'demo' : 'real';\n                return (\n                    value.market_type === market &&\n                    value.landing_company_short === type &&\n                    value.account_type === current_account_type &&\n                    key.includes(CFD_PLATFORMS.MT5)\n                );\n            });\n\n        const isDxtradeAccountAdded = () =>\n            Object.entries(current_list).some(([key, value]) => {\n                const current_account_type = is_demo_tab ? 'demo' : 'real';\n                return value.account_type === current_account_type && key.includes(CFD_PLATFORMS.DXTRADE);\n            });\n\n        const onButtonClick = (item: TCompareAccountFooterButtonData) => {\n            const if_no_corresponding_real_account = is_pre_appstore_setting\n                ? (no_CR_account && !is_eu_user) || (no_MF_account && is_eu_user)\n                : !has_real_account;\n\n            const should_show_missing_real_account =\n                is_logged_in &&\n                if_no_corresponding_real_account &&\n                upgradeable_landing_companies?.length > 0 &&\n                is_real_enabled;\n\n            toggleCompareAccounts();\n            if (should_show_missing_real_account) {\n                if (real_account_creation_unlock_date && item.action === 'financial_maltainvest') {\n                    setShouldShowCooldownModal(true);\n                } else {\n                    openDerivRealAccountNeededModal();\n                }\n            } else if (\n                is_virtual &&\n                !['synthetic_svg', 'financial_svg', 'derivx', 'financial_maltainvest'].includes(item.action)\n            ) {\n                openSwitchToRealAccountModal();\n            } else {\n                onSelectRealAccount(item);\n            }\n        };\n\n        const getModalContent = () => {\n            if (is_preappstore_cr_demo_account) {\n                return getPreappstoreCrDemoContent();\n            } else if (show_eu_related_content) {\n                if (is_pre_appstore_setting && content_flag === ContentFlag.EU_DEMO) {\n                    return getPreappstoreEuDemoContent();\n                }\n                return getEuRealContent();\n            }\n            return getCrRealContent();\n        };\n\n        const modal_footer = () => {\n            if (is_preappstore_cr_demo_account) return getPreappstoreCrDemoFooterButtons();\n            else if (is_demo_tab && show_eu_related_content) return getEuFooterButtons();\n            return show_eu_related_content ? getEuFooterButtons() : getCrRealFooterButtons();\n        };\n\n        const shouldShowPendingStatus = (item: TCompareAccountFooterButtonData) => {\n            const type = item.action.split('_')[1];\n            if (isMt5AccountAdded(item)) {\n                return false;\n            } else if (item.action === 'derivx') {\n                return false;\n            } else if (type === 'bvi' && should_restrict_bvi_account_creation && poa_pending) {\n                return true;\n            } else if (type === 'vanuatu' && should_restrict_vanuatu_account_creation && poa_pending) {\n                return true;\n            }\n\n            return false;\n        };\n\n        const pre_appstore_class = should_show_derivx && synthetic_accounts_count ? '__pre-appstore' : '';\n\n        const getClassNamesForDemoAndEu = () => {\n            if (is_preappstore_cr_demo_account) return 'cfd-accounts-compare-modal-row-demo';\n            else if (show_eu_related_content) return 'cfd-accounts-compare-modal-row-eu';\n            return null;\n        };\n\n        const classname_for_demo_and_eu = getClassNamesForDemoAndEu();\n\n        return (\n            <div className='cfd-accounts-compare-modal'>\n                <div className='cfd-accounts-compare-modal__table-wrapper'>\n                    <Table className='cfd-accounts-compare-modal__table'>\n                        <Table.Header>\n                            <Table.Row\n                                className={\n                                    classname_for_demo_and_eu ??\n                                    classNames(`cfd-accounts-compare-modal__table-header${pre_appstore_class}`, {\n                                        [`cfd-accounts-compare-modal__table-header-for-synthetic-${synthetic_accounts_count}-financial-${financial_accounts_count}${pre_appstore_class}`]:\n                                            available_accounts_count < 6 && !CFDs_restricted_countries,\n                                        [`cfd-accounts-compare-modal__table-header-for-synthetic-${synthetic_accounts_count}${pre_appstore_class}`]:\n                                            CFDs_restricted_countries,\n                                    })\n                                }\n                            >\n                                <Table.Head fixed className='cfd-accounts-compare-modal__table-empty-cell' />\n                                {!show_eu_related_content && synthetic_accounts_count > 0 && (\n                                    <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                        {localize('Derived')}\n                                    </Table.Head>\n                                )}\n                                {!CFDs_restricted_countries && financial_accounts_count > 0 && (\n                                    <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                        {show_eu_related_content ? localize('CFDs') : localize('Financial')}\n                                    </Table.Head>\n                                )}\n                                {!CFDs_restricted_countries && should_show_derivx && synthetic_accounts_count > 0 && (\n                                    <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                        {localize('Deriv X')}\n                                    </Table.Head>\n                                )}\n                            </Table.Row>\n                        </Table.Header>\n\n                        <React.Fragment>\n                            <Table.Body>\n                                {getAvailableAccountsContent(getModalContent()).map(row => (\n                                    <Row\n                                        key={row.id}\n                                        {...row}\n                                        pre_appstore_class={pre_appstore_class}\n                                        available_accounts_count={available_accounts_count}\n                                        classname_for_demo_and_eu={classname_for_demo_and_eu}\n                                        is_pre_appstore_setting={is_pre_appstore_setting}\n                                        content_flag={content_flag}\n                                        is_high_risk_for_mt5={is_high_risk_for_mt5}\n                                        CFDs_restricted_countries={CFDs_restricted_countries}\n                                        financial_restricted_countries={financial_restricted_countries}\n                                        is_preappstore_restricted_cr_demo_account={\n                                            is_preappstore_restricted_cr_demo_account\n                                        }\n                                        residence={residence}\n                                    />\n                                ))}\n                            </Table.Body>\n                            {is_logged_in && (\n                                <Table.Row\n                                    className={\n                                        classname_for_demo_and_eu ??\n                                        classNames(`cfd-accounts-compare-modal__table-footer${pre_appstore_class}`, {\n                                            [`cfd-accounts-compare-modal__row-with-columns-count-${\n                                                available_accounts_count + 1\n                                            }`]: available_accounts_count < 6,\n                                            [`cfd-accounts-compare-modal__table-footer__${residence}`]:\n                                                is_other_countries,\n                                        })\n                                    }\n                                >\n                                    <Table.Cell\n                                        fixed\n                                        className={\n                                            'cfd-accounts-compare-modal__table-empty-cell cfd-accounts-compare-modal__table-footer__item'\n                                        }\n                                    />\n\n                                    {getAvailableAccountsFooterButtons(modal_footer()).map((item, index) => (\n                                        <Table.Cell\n                                            key={index}\n                                            className={classNames('cfd-accounts-compare-modal__table-footer__item', {\n                                                [`cfd-accounts-compare-modal__table-footer__item--eu-pre_appstore}`]:\n                                                    is_pre_appstore_setting && show_eu_related_content,\n                                            })}\n                                        >\n                                            {!is_demo_tab && shouldShowPendingStatus(item) ? (\n                                                <div className='cfd-accounts-compare-modal__table-footer__item--verification-pending'>\n                                                    <Text size={isDesktop ? 'xxs' : 'xxxs'} align='center'>\n                                                        {localize('Pending verification')}\n                                                    </Text>\n                                                </div>\n                                            ) : (\n                                                <Button\n                                                    className='cfd-accounts-compare-modal__table-footer__button'\n                                                    disabled={\n                                                        item.action === 'derivx'\n                                                            ? isDxtradeAccountAdded()\n                                                            : isMt5AccountAdded(item)\n                                                    }\n                                                    type='button'\n                                                    primary_light\n                                                    onClick={() => onButtonClick(item)}\n                                                >\n                                                    {item.label}\n                                                </Button>\n                                            )}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            )}\n                        </React.Fragment>\n                    </Table>\n                </div>\n            </div>\n        );\n    }\n);\n\nexport default DMT5CompareModalContent;\n","import React from 'react';\nimport { Table, Text, ThemedScrollbars, Div100vhContainer } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isDesktop, CFD_PLATFORMS } from '@deriv/shared';\nimport { LandingCompany, CurrencyConfigStructure } from '@deriv/api-types';\n\n// TODO: Remove this temporary type when api-types updates\ntype TLandingCompany = LandingCompany & {\n    /**\n     * Available Deriv X financial account types (all except Synthetic Indices).\n     */\n    dxtrade_all_company?: {\n        /**\n         * Landing Company details.\n         */\n        standard?: {\n            /**\n             * Landing Company address\n             */\n            address?: string[] | null;\n            /**\n             * Special conditions for changing sensitive fields\n             */\n            changeable_fields?: {\n                [k: string]: unknown;\n            };\n            /**\n             * Landing Company country of incorporation\n             */\n            country?: string;\n            currency_config?: CurrencyConfigStructure;\n            /**\n             * Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.\n             */\n            has_reality_check?: 0 | 1;\n            /**\n             * Allowed contract types\n             */\n            legal_allowed_contract_categories?: string[];\n            /**\n             * Allowable currencies\n             */\n            legal_allowed_currencies?: string[];\n            /**\n             * Allowable markets\n             */\n            legal_allowed_markets?: string[];\n            /**\n             * Default account currency\n             */\n            legal_default_currency?: string;\n            /**\n             * Landing Company legal name\n             */\n            name?: string;\n            /**\n             * Legal requirements for the Landing Company\n             */\n            requirements?: {\n                [k: string]: unknown;\n            };\n            /**\n             * Landing Company short code\n             */\n            shortcode?: string;\n            /**\n             * Flag that indicates whether the landing company supports professional accounts or not\n             */\n            support_professional_client?: 0 | 1;\n        };\n    };\n};\n\ntype TCFDAttributeDescriberProps = {\n    name: string;\n    counter: number | null;\n};\n\ntype TFilterAvailableAccounts = (\n    landing_companies: TLandingCompany,\n    table: TAccountsDescription[],\n    is_logged_in: boolean,\n    is_eu_client: boolean,\n    platform: string,\n    is_australian: boolean\n) => Array<{ [key: string]: string | React.ReactNode | undefined }>;\n\ntype TAccountsDescription = {\n    attribute: string;\n    dxtrade: TDxTradeAccountsDescription;\n};\n\ntype TDxTradeAccountsDescription = {\n    derivx: string;\n    footnote: string | null;\n};\n\ntype TCompareAccountsReusedProps = {\n    landing_companies: TLandingCompany;\n    platform: string;\n    is_logged_in: boolean;\n    is_uk: boolean;\n};\n\ntype TCompareAccountsDataParams = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n};\n\ntype TCFDCompareAccountHintProps = TCompareAccountsReusedProps & {\n    show_risk_message: boolean;\n};\n\ntype TModalContentProps = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n    is_eu: boolean;\n};\n\ntype TGetAccounts = (params: TCompareAccountsReusedProps) => TAccountsDescription[];\n\ntype TAccountTypesToFilter = (TLandingCompany['dxtrade_all_company'] | boolean | undefined)[];\n\nconst getAccounts: TGetAccounts = ({ landing_companies, is_logged_in }) => {\n    const getLoggedInTypesCount = ([landing_companies?.dxtrade_all_company] as TAccountTypesToFilter).length;\n\n    const account_types_count = is_logged_in ? getLoggedInTypesCount : 2;\n\n    return [\n        {\n            attribute: localize('Currency'),\n            dxtrade: {\n                derivx: localize('USD'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Maximum leverage'),\n            dxtrade: {\n                derivx: localize('Up to 1:1000'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Order execution'),\n            dxtrade: {\n                derivx: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n        },\n        {\n            attribute: localize('Spread'),\n            dxtrade: {\n                derivx: localize('Fixed/Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Commission'),\n            dxtrade: {\n                derivx: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n        },\n        {\n            attribute: localize('Minimum deposit'),\n            dxtrade: {\n                derivx: localize('No'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Margin call'),\n            dxtrade: {\n                derivx: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, named margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Stop out level'),\n            dxtrade: {\n                derivx: localize('50%'),\n                footnote: localize(\n                    'If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Negative Balance Protection'),\n            dxtrade: {\n                derivx: localize('Available'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Number of assets'),\n            dxtrade: {\n                derivx: localize('110+'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Cryptocurrency trading'),\n            dxtrade: {\n                derivx: localize('N/A'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n        },\n        {\n            attribute: localize('Trading instruments'),\n            dxtrade: {\n                derivx: localize(\n                    'Synthetics, Baskets, Derived FX, Forex: standard/micro, Stocks, Stock indices, Commodities, Cryptocurrencies'\n                ),\n                footnote: null,\n            },\n        },\n    ];\n};\n\nconst CFDAttributeDescriber = ({ name, counter }: TCFDAttributeDescriberProps) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [is_visible, setIsVisible] = React.useState(false);\n    const toggleModal = () => setIsVisible(prev => !prev);\n\n    return counter ? (\n        <React.Fragment>\n            <Text\n                as='p'\n                weight='bold'\n                size='xs'\n                line_height='s'\n                className='cfd-attribute-describer'\n                onClick={toggleModal}\n            >\n                {name}\n                <Text weight='bold' as='span' line_height='x' size='xxxs' className='counter'>\n                    {counter}\n                </Text>\n            </Text>\n        </React.Fragment>\n    ) : (\n        <Text as='p' weight='bold' size='xs' line_height='s' className='cfd-attribute-describer'>\n            {name}\n        </Text>\n    );\n};\n\nconst filterAvailableAccounts: TFilterAvailableAccounts = (\n    landing_companies,\n    table,\n    is_logged_in,\n    is_eu_client,\n    platform\n) => {\n    let footnote_number = 0;\n    return table\n        .filter(row => row[platform as keyof TAccountsDescription])\n        .map(({ attribute, dxtrade = {} }) => {\n            const { derivx, footnote } = dxtrade;\n            const footnote_counter = footnote ? ++footnote_number : null;\n\n            if (platform === CFD_PLATFORMS.DXTRADE) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    derivx,\n                };\n            }\n            if (is_logged_in) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                };\n            }\n            return {\n                attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n            };\n        });\n};\n\nconst compareAccountsData = ({\n    landing_companies,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    residence,\n    is_uk,\n}: TCompareAccountsDataParams) => {\n    const is_australian = residence === 'au';\n    return filterAvailableAccounts(\n        landing_companies,\n        getAccounts({ landing_companies, platform, is_logged_in, is_uk }),\n        is_logged_in,\n        is_eu_client,\n        platform,\n        is_australian\n    );\n};\n\nconst CFDCompareAccountHint = ({\n    platform,\n    show_risk_message,\n    landing_companies,\n    is_logged_in,\n    is_uk,\n}: TCFDCompareAccountHintProps) => {\n    return (\n        <div className='cfd-compare-account--hint'>\n            <div className='cfd-compare-accounts__bullet-wrapper'>\n                <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                <Localize i18n_default_text='At bank rollover, liquidity in the forex markets is reduced and may increase the spread and processing time for client orders. This happens around 21:00 GMT during daylight saving time, and 22:00 GMT non-daylight saving time.' />\n            </div>\n            {show_risk_message && (\n                <React.Fragment>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                        <Localize i18n_default_text='Margin call and stop out level will change from time to time based on market condition.' />\n                    </div>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <Text\n                            size='xs'\n                            line_height='x'\n                            weight='bold'\n                            className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                        >\n                            *\n                        </Text>\n                        <Localize\n                            i18n_default_text='To protect your portfolio from adverse market movements due to the market opening gap, we reserve the right to decrease leverage on all offered symbols for financial accounts before market close and increase it again after market open. Please make sure that you have enough funds available in your {{platform}} account to support your positions at all times.'\n                            values={{\n                                platform: localize('Deriv X'),\n                            }}\n                        />\n                    </div>\n                    {is_uk && (\n                        <div className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                **\n                            </Text>\n                            <Localize\n                                i18n_default_text='Cryptocurrency trading is not available for clients residing in the United Kingdom.'\n                                values={{\n                                    platform: localize('Deriv X'),\n                                }}\n                            />\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n            {getAccounts({ landing_companies, platform, is_logged_in, is_uk })\n                .filter(\n                    item =>\n                        !!(item[platform as keyof TAccountsDescription] as TAccountsDescription['dxtrade'])?.footnote\n                )\n                .map((account, index) => {\n                    return (\n                        <div key={index} className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                {index + 1}\n                            </Text>\n                            <div className='cfd-compare-accounts__footnote'>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className='cfd-compare-accounts__footnote-title'\n                                >\n                                    {account.attribute}\n                                </Text>\n                                <Text size='xs' color='prominent'>\n                                    {\n                                        (\n                                            account[\n                                                platform as keyof TAccountsDescription\n                                            ] as TAccountsDescription['dxtrade']\n                                        ).footnote\n                                    }\n                                </Text>\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nconst CfdDxtradeCompareContent = ({\n    landing_companies,\n    is_logged_in,\n    platform,\n    is_eu_client,\n    residence,\n    is_uk,\n}: TModalContentProps) => {\n    const [cols, setCols] = React.useState<Array<Record<string, string | React.ReactNode | undefined>>>([]);\n    const [template_columns, updateColumnsStyle] = React.useState('1fr 1.5fr');\n\n    React.useEffect(() => {\n        setCols(compareAccountsData({ landing_companies, is_logged_in, platform, is_eu_client, residence, is_uk }));\n        updateColumnsStyle('1fr 1.5fr');\n    }, [\n        landing_companies?.mt_financial_company,\n        landing_companies?.mt_gaming_company,\n        is_logged_in,\n        is_uk,\n        landing_companies,\n        platform,\n        is_eu_client,\n        residence,\n    ]);\n\n    const show_risk_message = !is_eu_client;\n\n    return (\n        <Div100vhContainer height_offset='40px' is_bypassed={isDesktop()}>\n            <ThemedScrollbars\n                className='cfd-compare-accounts'\n                style={{\n                    '--cfd-compare-accounts-template-columns': template_columns,\n                }}\n            >\n                <div className='cfd-compare-accounts__table-wrapper'>\n                    <Table className='cfd-compare-accounts__table'>\n                        <Table.Header>\n                            <Table.Row className='cfd-compare-accounts__table-row'>\n                                <Table.Head fixed />\n                                <Table.Head>{localize('Deriv X')}</Table.Head>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {cols.map((row, i) => (\n                                <Table.Row key={i} className='cfd-compare-accounts__table-row'>\n                                    {Object.keys(row).map((col, j) => (\n                                        <Table.Cell key={j} fixed={j === 0}>\n                                            {row[col]}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                    </Table>\n                </div>\n                <CFDCompareAccountHint\n                    platform={platform}\n                    show_risk_message={show_risk_message}\n                    landing_companies={landing_companies}\n                    is_logged_in={is_logged_in}\n                    is_uk={is_uk}\n                />\n            </ThemedScrollbars>\n        </Div100vhContainer>\n    );\n};\n\nexport default CfdDxtradeCompareContent;\n","import React from 'react';\nimport { Button, Modal, DesktopWrapper, MobileDialog, MobileWrapper, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { CFD_PLATFORMS, isLandingCompanyEnabled, ContentFlag } from '@deriv/shared';\nimport ModalContent from './compare-accounts-content';\nimport DMT5CompareModalContent from './mt5-compare-table-content';\nimport CfdDxtradeCompareContent from '../Components/cfd-dxtrade-compare-content';\nimport { observer, useStore } from '@deriv/stores';\nimport { LandingCompany } from '@deriv/api-types';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\ntype TCompareAccountsReusedProps = {\n    platform: string;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCompareAccountsModalProps = TCompareAccountsReusedProps & {\n    is_real_enabled: boolean;\n    is_demo_tab: boolean;\n    has_unmerged_account: boolean;\n    openPasswordModal: (account_type: TOpenAccountTransferMeta) => void;\n    real_account_creation_unlock_date: string;\n    setShouldShowCooldownModal: (value: boolean) => void;\n};\n\ntype TDxtradeCompareAccountContent = TCompareAccountsReusedProps & {\n    is_demo_tab: boolean;\n    is_eu_client: boolean;\n    has_unmerged_account: boolean;\n    residence: string;\n    is_eu: boolean;\n    is_logged_in: boolean;\n    is_uk: boolean;\n    landing_companies: LandingCompany;\n};\n\n// TODO: Remove this component and use one component for both when real released.\nconst DxtradeCompareAccountContent = ({\n    is_demo_tab,\n    is_logged_in,\n    landing_companies,\n    platform,\n    is_eu_client,\n    has_unmerged_account,\n    residence,\n    is_eu,\n    is_uk,\n}: TDxtradeCompareAccountContent) => {\n    if (is_demo_tab || !has_unmerged_account) {\n        return (\n            <CfdDxtradeCompareContent\n                is_logged_in={is_logged_in}\n                landing_companies={landing_companies}\n                platform={platform}\n                is_eu_client={is_eu_client}\n                residence={residence}\n                is_eu={is_eu}\n                is_uk={is_uk}\n            />\n        );\n    }\n\n    return (\n        <ModalContent\n            is_logged_in={is_logged_in}\n            landing_companies={landing_companies}\n            platform={platform}\n            is_eu_client={is_eu_client}\n            residence={residence}\n            is_eu={is_eu}\n            is_uk={is_uk}\n        />\n    );\n};\n\nconst CompareAccountsModal = observer(\n    ({\n        has_unmerged_account,\n        is_demo_tab,\n        is_real_enabled,\n        openPasswordModal,\n        platform,\n        real_account_creation_unlock_date,\n        setShouldShowCooldownModal,\n    }: TCompareAccountsModalProps) => {\n        const { ui, client, traders_hub } = useStore();\n\n        const { disableApp, enableApp, openDerivRealAccountNeededModal } = ui;\n        const {\n            is_populating_mt5_account_list: is_loading,\n            is_eu,\n            is_uk,\n            is_logged_in,\n            landing_companies,\n            residence,\n        } = client;\n        const { content_flag, show_eu_related_content, CFDs_restricted_countries } = traders_hub;\n\n        const { is_compare_accounts_visible, toggleCompareAccountsModal } = useCfdStore();\n        const location = window.location.pathname;\n        const is_pre_appstore_setting = location.startsWith('/appstore/traders-hub');\n\n        // TODO : should change the type to all after changing derivx api\n        const has_derivx =\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform: CFD_PLATFORMS.DXTRADE,\n                type: 'financial',\n            }) ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform: CFD_PLATFORMS.DXTRADE,\n                type: 'gaming',\n            }) ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform: CFD_PLATFORMS.DXTRADE,\n                type: 'all',\n            });\n\n        const should_show_derivx = is_pre_appstore_setting && has_derivx && !show_eu_related_content;\n\n        const is_preappstore_cr_demo_account = is_pre_appstore_setting && content_flag === ContentFlag.CR_DEMO;\n\n        const is_preappstore_restricted_cr_demo_account =\n            is_pre_appstore_setting && CFDs_restricted_countries && content_flag === ContentFlag.CR_DEMO;\n\n        const is_dxtrade = platform && platform === CFD_PLATFORMS.DXTRADE;\n        const mt5_accounts = [\n            landing_companies?.mt_gaming_company?.financial,\n            landing_companies?.mt_financial_company?.financial,\n            landing_companies?.mt_financial_company?.financial_stp,\n        ];\n\n        const cfd_account_button_label =\n            mt5_accounts.filter(Boolean).length === 1 ||\n            (is_demo_tab && platform === CFD_PLATFORMS.DXTRADE) ||\n            (!has_unmerged_account && platform === CFD_PLATFORMS.DXTRADE)\n                ? localize('Account Information')\n                : localize('Compare accounts');\n\n        const getCFDModalTitle = () => {\n            if (is_pre_appstore_setting && show_eu_related_content) {\n                return is_demo_tab ? localize('Deriv MT5 CFDs demo account') : localize('Deriv MT5 CFDs real account');\n            } else if (should_show_derivx) {\n                return is_demo_tab ? localize('Compare CFDs demo accounts') : localize('Compare CFDs real accounts');\n            }\n            return is_dxtrade ? cfd_account_button_label : localize('Compare available accounts');\n        };\n        const getModalStyle = () => {\n            if (is_dxtrade) {\n                return {\n                    height: '696px',\n                    width: '903px',\n                };\n            } else if (is_preappstore_cr_demo_account) {\n                return {\n                    height: '404px',\n                    width: '610px',\n                };\n            } else if (show_eu_related_content) {\n                if (is_pre_appstore_setting) {\n                    if (content_flag === ContentFlag.EU_DEMO) {\n                        return {\n                            height: '350px',\n                            width: '483px',\n                        };\n                    }\n                    return {\n                        height: '560px',\n                        width: '483px',\n                    };\n                }\n                return {\n                    height: '525px',\n                    width: '300px',\n                };\n            } else if (is_pre_appstore_setting && should_show_derivx) {\n                return {\n                    height: '600px',\n                    width: '1115px',\n                };\n            }\n            return {\n                height: '506px',\n                width: '996px',\n            };\n        };\n\n        const getModalContent = () => {\n            return is_dxtrade ? (\n                <DxtradeCompareAccountContent\n                    is_demo_tab={is_demo_tab}\n                    is_logged_in={is_logged_in}\n                    landing_companies={landing_companies}\n                    platform={platform}\n                    is_eu_client={!!show_eu_related_content}\n                    residence={residence}\n                    has_unmerged_account={has_unmerged_account}\n                    is_eu={is_eu}\n                    is_uk={is_uk}\n                />\n            ) : (\n                <DMT5CompareModalContent\n                    content_flag={content_flag}\n                    is_demo_tab={is_demo_tab}\n                    is_logged_in={is_logged_in}\n                    is_pre_appstore_setting={is_pre_appstore_setting}\n                    is_preappstore_cr_demo_account={is_preappstore_cr_demo_account}\n                    is_preappstore_restricted_cr_demo_account={is_preappstore_restricted_cr_demo_account}\n                    is_real_enabled={is_real_enabled}\n                    openDerivRealAccountNeededModal={openDerivRealAccountNeededModal}\n                    openPasswordModal={openPasswordModal}\n                    real_account_creation_unlock_date={real_account_creation_unlock_date}\n                    setShouldShowCooldownModal={setShouldShowCooldownModal}\n                    should_show_derivx={should_show_derivx}\n                    show_eu_related_content={show_eu_related_content}\n                    toggleCompareAccounts={toggleCompareAccountsModal}\n                />\n            );\n        };\n\n        return (\n            <>\n                <div\n                    className='cfd-compare-accounts-modal__wrapper'\n                    style={{ marginTop: is_dxtrade ? '5rem' : '2.4rem' }}\n                >\n                    {!(is_demo_tab && platform === 'mt5') && !is_pre_appstore_setting && (\n                        <Button\n                            className='cfd-dashboard__welcome-message--button'\n                            has_effect\n                            text={cfd_account_button_label}\n                            onClick={toggleCompareAccountsModal}\n                            secondary\n                            disabled={is_loading}\n                        />\n                    )}\n                    <React.Suspense fallback={<UILoader />}>\n                        <DesktopWrapper>\n                            <Modal\n                                className={\n                                    is_dxtrade ? 'cfd-dashboard__compare-accounts' : 'cfd-accounts-compare-modal'\n                                }\n                                disableApp={disableApp}\n                                enableApp={enableApp}\n                                is_open={is_compare_accounts_visible}\n                                title={getCFDModalTitle()}\n                                toggleModal={toggleCompareAccountsModal}\n                                type='button'\n                                height={getModalStyle().height}\n                                width={getModalStyle().width}\n                                exit_classname={is_dxtrade ? '' : 'cfd-modal--custom-exit'}\n                            >\n                                {getModalContent()}\n                            </Modal>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <MobileDialog\n                                portal_element_id='deriv_app'\n                                title={getCFDModalTitle()}\n                                wrapper_classname='cfd-dashboard__compare-accounts'\n                                visible={is_compare_accounts_visible}\n                                onClose={toggleCompareAccountsModal}\n                                header_classname={is_dxtrade ? '' : 'cfd-accounts-compare-modal-mobile-header'}\n                                has_full_height\n                            >\n                                {getModalContent()}\n                            </MobileDialog>\n                        </MobileWrapper>\n                    </React.Suspense>\n                </div>\n            </>\n        );\n    }\n);\n\nexport default CompareAccountsModal;\n","import React, { useContext } from 'react';\n\ntype TDynamicLeverageContext = {\n    is_dynamic_leverage_visible: boolean;\n    toggleDynamicLeverage: React.MouseEventHandler<HTMLSpanElement>;\n};\n\nexport const DynamicLeverageContext = React.createContext<TDynamicLeverageContext>({\n    is_dynamic_leverage_visible: false,\n    toggleDynamicLeverage: () => null,\n});\n\nexport const useDynamicLeverage = () => {\n    const dynamic_leverage = useContext(DynamicLeverageContext);\n    return dynamic_leverage;\n};\n","import { localize } from '@deriv/translations';\n\nexport const dynamic_leverages = [\n    {\n        key: 'forex',\n        title: localize('Forex majors'),\n        description: '',\n        leverage: localize('Up to 1:1500'),\n        data: [\n            {\n                from: 0.01,\n                to: 1,\n                leverage: 1500,\n            },\n            {\n                from: 1.01,\n                to: 5,\n                leverage: 1000,\n            },\n            {\n                from: 5.01,\n                to: 10,\n                leverage: 500,\n            },\n            {\n                from: 10.01,\n                to: 15,\n                leverage: 100,\n            },\n        ],\n    },\n    {\n        key: 'metals',\n        title: localize('Metals'),\n        description: localize('(XAUUSD, XAGUSD)'),\n        leverage: localize('Up to 1:1000'),\n        data: [\n            {\n                from: 0.01,\n                to: 1,\n                leverage: 1000,\n            },\n            {\n                from: 1.01,\n                to: 5,\n                leverage: 500,\n            },\n            {\n                from: 5.01,\n                to: 10,\n                leverage: 100,\n            },\n            {\n                from: 10.01,\n                to: 15,\n                leverage: 50,\n            },\n        ],\n    },\n    {\n        key: 'cryptocurrencies',\n        title: localize('Cryptocurrencies'),\n        description: localize('(BTCUSD, ETHUSD)'),\n        leverage: localize('Up to 1:300'),\n        data: [\n            {\n                from: 0.01,\n                to: 1,\n                leverage: 300,\n            },\n            {\n                from: 1.01,\n                to: 3,\n                leverage: 200,\n            },\n            {\n                from: 3.01,\n                to: 5,\n                leverage: 100,\n            },\n            {\n                from: 5.01,\n                to: 10,\n                leverage: 50,\n            },\n        ],\n    },\n    {\n        key: 'stock_indices',\n        title: localize('Stock indices'),\n        description: localize('(US_30, US_100, US_500)'),\n        leverage: localize('Up to 1:300'),\n        data: [\n            {\n                from: 0.1,\n                to: 5,\n                leverage: 300,\n            },\n            {\n                from: 5.1,\n                to: 50,\n                leverage: 200,\n            },\n            {\n                from: 50.1,\n                to: 5,\n                leverage: 100,\n            },\n        ],\n    },\n];\n","import React from 'react';\nimport { Table, Text } from '@deriv/components';\nimport { TDynamicLeverageTableColumnHeader } from 'Containers/props.types';\n\nexport const DynamicLeverageTableColumnHeader = ({ title, subtitle }: TDynamicLeverageTableColumnHeader) => (\n    <Table.Head>\n        <div className='dynamic-leverage-modal__market-table-header-cell'>\n            <Text size='xs' align='center' weight='bold'>\n                {title}\n            </Text>\n            <Text size='xxs' align='center'>\n                {subtitle}\n            </Text>\n        </div>\n    </Table.Head>\n);\n","import React from 'react';\nimport { Table, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { TDynamicLeverageMarketCardProps } from 'Containers/props.types';\nimport { DynamicLeverageTableColumnHeader } from './dynamic-leverage-table-column-header';\n\nexport const DynamicLeverageMarketCard = ({ title, description, leverage, data }: TDynamicLeverageMarketCardProps) => (\n    <div className='dynamic-leverage-modal__market'>\n        <div className='dynamic-leverage-modal__market-title'>\n            <Text data-testid='market_title' size='xs' weight='bolder' align='center'>\n                {title}\n            </Text>\n            {!!description && (\n                <Text\n                    data-testid='description_title'\n                    size='xxxs'\n                    align='center'\n                    className='dynamic-leverage-modal__market-description'\n                >\n                    {description}\n                </Text>\n            )}\n            <Text data-testid='leverage_title' size='xxs' color='red' align='center'>\n                {leverage}\n            </Text>\n        </div>\n        <Table className='dynamic-leverage-modal__market-table'>\n            <Table.Header>\n                <Table.Row className='dynamic-leverage-modal__market-table-header-row'>\n                    <DynamicLeverageTableColumnHeader title={localize('From')} subtitle={localize('(lots)')} />\n                    <DynamicLeverageTableColumnHeader title={localize('to')} subtitle={localize('(lots)')} />\n                    <DynamicLeverageTableColumnHeader title={localize('Leverage')} subtitle={localize('(1:x)')} />\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {data.map(columns => (\n                    <Table.Row\n                        key={`${columns.from}-${columns.to}-${columns.leverage}`}\n                        className='dynamic-leverage-modal__market-table-row'\n                    >\n                        {Object.entries(columns).map(([column_key, value]) => (\n                            <Table.Cell key={`${title}_${column_key}_${value}`}>\n                                <Text size='xs' align='center'>\n                                    {value}\n                                </Text>\n                            </Table.Cell>\n                        ))}\n                    </Table.Row>\n                ))}\n            </Table.Body>\n        </Table>\n    </div>\n);\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { dynamic_leverages } from '../../Constants/dynamic-leverage-content/dynamic-leverage-content';\nimport { DynamicLeverageMarketCard } from './dynamic-leverage-market-card';\n\nconst DynamicLeverageModalContent = () => (\n    <div className='dynamic-leverage-modal'>\n        <Text as='h4' size='s'>\n            <Localize\n                i18n_default_text='Enjoy dynamic leverage of  <0>up to 1:1500</0> when trading selected instruments in the forex, commodities, cryptocurrencies, and stock indices markets. Our dynamic leverage adjusts automatically to your trading position, based on asset type and trading volume.'\n                components={[<strong key={0} />]}\n            />\n        </Text>\n        <div className='dynamic-leverage-modal__content'>\n            {dynamic_leverages.map(market => (\n                <DynamicLeverageMarketCard\n                    key={`dynamic-leverage-modal__${market.key}`}\n                    title={market.title}\n                    leverage={market.leverage}\n                    description={market.description}\n                    data={market.data}\n                />\n            ))}\n        </div>\n    </div>\n);\n\nexport default DynamicLeverageModalContent;\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems, TJurisdictionCardParams } from 'Components/props.types';\n\nexport const getJurisdictionBviContents = ({\n    toggleDynamicLeverage,\n}: TJurisdictionCardParams): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('British Virgin Islands'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Baskets and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('170+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n            clickable_description: [\n                {\n                    type: 'link',\n                    text: localize('Dynamic Leverage'),\n                    onClick: toggleDynamicLeverage,\n                },\n            ],\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114)'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems, TJurisdictionCardParams } from 'Components/props.types';\n\nexport const getJurisdictionVanuatuContents = ({\n    toggleDynamicLeverage,\n}: TJurisdictionCardParams): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('Vanuatu'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Baskets and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Vanuatu Financial Services Commission'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stock indices, Commodities and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('90+'),\n                display_text_skin_color: 'red-dark',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n            clickable_description: [\n                {\n                    type: 'link',\n                    text: localize('Dynamic Leverage'),\n                    onClick: toggleDynamicLeverage,\n                },\n            ],\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Vanuatu Financial Services Commission'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionVerificationItems, TJurisdictionVerificationStatus } from 'Components/props.types';\n\ntype TJurisdictionVerificationContents = {\n    short_description: string;\n    required_verification_docs: TJurisdictionVerificationItems;\n    status_references: Array<TJurisdictionVerificationStatus>;\n};\n\nexport const jurisdictionVerificationContents = (): TJurisdictionVerificationContents => ({\n    short_description: localize('We need you to submit these in order to get this account:'),\n    required_verification_docs: {\n        document_number: {\n            icon: 'IcDocumentNumberVerification',\n            text: localize('Document number (identity card, passport)'),\n        },\n        selfie: {\n            icon: 'IcSelfieVerification',\n            text: localize('A selfie of yourself.'),\n        },\n        identity_document: {\n            icon: 'IcIdentityDocumentVerification',\n            text: localize('A copy of your identity document (identity card, passport)'),\n        },\n        name_and_address: {\n            icon: 'IcNameAndAddressVerification',\n            text: localize(\n                'A recent utility bill (electricity, water or gas) or recent bank statement or government-issued letter with your name and address.'\n            ),\n        },\n        not_applicable: {\n            icon: 'IcNotApplicableVerification',\n            text: '',\n        },\n    },\n    status_references: [\n        {\n            icon: 'IcVerificationStatusYellow',\n            text: localize('Your document is pending for verification.'),\n            color: 'yellow',\n        },\n        {\n            icon: 'IcVerificationStatusRed',\n            text: localize('Verification failed. Resubmit during account creation.'),\n            color: 'red',\n        },\n        { icon: 'IcVerificationStatusGreen', text: localize('Your document is verified.'), color: 'green' },\n    ],\n});\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { jurisdictionVerificationContents } from '../../Constants/jurisdiction-contents/jurisdiction-verification-contents';\nimport { TJurisdictionCardBackProps } from 'Containers/props.types';\n\nconst JurisdictionCardBack = ({\n    card_classname,\n    disabled,\n    is_card_selected,\n    toggleCardFlip,\n    verification_docs,\n}: TJurisdictionCardBackProps) => (\n    <div\n        data-testid='dt_jurisdiction_card_back_container'\n        className={classNames(card_classname, 'cfd-card-back', {\n            [`${card_classname}--selected selected-card`]: is_card_selected,\n            'cfd-card-disabled-flat': disabled,\n        })}\n    >\n        <div\n            data-testid='dt_jurisdiction_card_back'\n            className={classNames(\n                `${card_classname}__card-content-container`,\n                `${card_classname}__card-flipped-container`\n            )}\n        >\n            <div>\n                <Icon\n                    onClick={toggleCardFlip}\n                    className='cfd-card-back-section-back-button'\n                    icon='IcBackButton'\n                    size={20}\n                />\n            </div>\n            <Text as='div' size='xxs'>\n                {jurisdictionVerificationContents().short_description}\n            </Text>\n            <div className={classNames('cfd-card-back-section-items-container')}>\n                {verification_docs?.map(verification_item => (\n                    <div key={verification_item} className='cfd-card-back-section-items-sub-container'>\n                        <div>\n                            <Icon\n                                icon={\n                                    jurisdictionVerificationContents().required_verification_docs[verification_item]\n                                        ?.icon\n                                }\n                            />\n                        </div>\n                        <Text as='span' size='xxs' className='cfd-card-back-section-text-icon-aligned'>\n                            {jurisdictionVerificationContents().required_verification_docs[verification_item]?.text}\n                        </Text>\n                    </div>\n                ))}\n            </div>\n            <div className='cfd-card-section-divider' />\n            <div className='cfd-card-back-section-items-container'>\n                {jurisdictionVerificationContents().status_references.map(status_item => (\n                    <div className='cfd-card-back-section-items-sub-container' key={status_item.color}>\n                        <div>\n                            <Icon icon={status_item.icon} />\n                        </div>\n                        <Text as='span' size='xxs' className='cfd-card-back-section-text-icon-aligned'>\n                            {status_item.text}\n                        </Text>\n                    </div>\n                ))}\n            </div>\n        </div>\n    </div>\n);\n\nexport default JurisdictionCardBack;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { TJurisdictionClickableDescriptionProps } from 'Containers/props.types';\n\nconst JurisdictionClickableDescription = ({\n    clickable_description,\n    toggleCardFlip,\n}: TJurisdictionClickableDescriptionProps) => (\n    <div>\n        {clickable_description.map(description_part => {\n            const { type, text, onClick } = description_part;\n            return type === 'link' ? (\n                <span key={text} onClick={onClick || toggleCardFlip}>\n                    <Text\n                        data-testid='dt_jurisdiction_clickable_description'\n                        as='span'\n                        size='xxs'\n                        className='cfd-card-clickable-description-link'\n                    >\n                        {text}\n                    </Text>\n                    &nbsp;\n                </span>\n            ) : (\n                <Text key={text} as='span' size='xxs'>\n                    {text}\n                </Text>\n            );\n        })}\n    </div>\n);\n\nexport default JurisdictionClickableDescription;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { getAuthenticationStatusInfo } from '@deriv/shared';\nimport { jurisdictionVerificationContents } from '../../Constants/jurisdiction-contents/jurisdiction-verification-contents';\nimport { TJurisdictionTitleIndicatorProps } from 'Containers/props.types';\nimport { TJurisdictionCardItemVerificationItem, TJurisdictionCardVerificationStatus } from 'Components/props.types';\nimport { JURISDICTION } from '../../Helpers/cfd-config';\n\nconst JurisdictionTitleIndicator = ({\n    account_status,\n    title_indicators,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionTitleIndicatorProps) => {\n    const {\n        poi_pending_for_bvi_labuan_vanuatu,\n        poi_resubmit_for_bvi_labuan_vanuatu,\n        poi_verified_for_bvi_labuan_vanuatu,\n        poi_pending_for_maltainvest,\n        poi_resubmit_for_maltainvest,\n        poi_verified_for_maltainvest,\n        poa_pending,\n        need_poa_resubmission,\n        poa_verified,\n    } = getAuthenticationStatusInfo(account_status);\n\n    const getVerificationIconVariant = (verification_document: TJurisdictionCardItemVerificationItem): string => {\n        let icon_variant: TJurisdictionCardVerificationStatus = 'Default';\n        if (\n            type_of_card === JURISDICTION.BVI ||\n            type_of_card === JURISDICTION.LABUAN ||\n            type_of_card === JURISDICTION.VANUATU\n        ) {\n            if (['document_number', 'selfie', 'identity_document'].includes(verification_document)) {\n                if (poi_pending_for_bvi_labuan_vanuatu) {\n                    icon_variant = 'Pending';\n                } else if (poi_resubmit_for_bvi_labuan_vanuatu) {\n                    icon_variant = 'Failed';\n                } else if (poi_verified_for_bvi_labuan_vanuatu) {\n                    icon_variant = 'Verified';\n                }\n            }\n        } else if (type_of_card === JURISDICTION.MALTA_INVEST) {\n            if (['document_number', 'selfie', 'identity_document'].includes(verification_document)) {\n                if (poi_pending_for_maltainvest) {\n                    icon_variant = 'Pending';\n                } else if (poi_resubmit_for_maltainvest) {\n                    icon_variant = 'Failed';\n                } else if (poi_verified_for_maltainvest) {\n                    icon_variant = 'Verified';\n                }\n            }\n        }\n        if (verification_document === 'name_and_address') {\n            if (poa_pending) {\n                icon_variant = 'Pending';\n            } else if (need_poa_resubmission) {\n                icon_variant = 'Failed';\n            } else if (poa_verified) {\n                icon_variant = 'Verified';\n            }\n        }\n        return icon_variant;\n    };\n\n    return title_indicators.type === 'displayText' ? (\n        <Text\n            as='span'\n            color='colored-background'\n            weight='bold'\n            align='center'\n            size='xxxs'\n            className={classNames(\n                'cfd-card-section-title-indicator',\n                `cfd-card-section-title-indicator__${title_indicators.display_text_skin_color}`\n            )}\n        >\n            {title_indicators.display_text}\n        </Text>\n    ) : (\n        <div\n            data-testid='dt_jurisdiction_title_indicator_icon'\n            className='cfd-card-section-title-indicator-icon-container'\n        >\n            {verification_docs?.map(verification_document => (\n                <div\n                    data-testid={`dt_jurisdiction_title_indicator_${getVerificationIconVariant(\n                        verification_document\n                    )}_icon`}\n                    key={verification_document}\n                >\n                    <Icon\n                        size={24}\n                        icon={jurisdictionVerificationContents().required_verification_docs[\n                            verification_document\n                        ]?.icon.concat(getVerificationIconVariant(verification_document))}\n                    />\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default JurisdictionTitleIndicator;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { TJurisdictionCardSectionProps } from '../props.types';\nimport JurisdictionClickableDescription from './jurisdiction-clickable-description';\nimport JurisdictionTitleIndicator from './jurisdiction-title-indicator';\n\nconst JurisdictionCardSection = ({\n    account_status,\n    card_section_item,\n    toggleCardFlip,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionCardSectionProps) => (\n    <div className='cfd-card-section'>\n        <div className='cfd-card-title-container'>\n            <Text as='span' weight='bold' size='xs'>\n                {card_section_item.title}\n            </Text>\n            {card_section_item.title_indicators && (\n                <JurisdictionTitleIndicator\n                    account_status={account_status}\n                    title_indicators={card_section_item.title_indicators}\n                    type_of_card={type_of_card}\n                    verification_docs={verification_docs}\n                />\n            )}\n        </div>\n        {(card_section_item.clickable_description || card_section_item.description) && (\n            <div className={`cfd-card-section-description-height-${card_section_item.key.toLowerCase()}`}>\n                {card_section_item.clickable_description ? (\n                    <JurisdictionClickableDescription\n                        clickable_description={card_section_item.clickable_description}\n                        toggleCardFlip={toggleCardFlip}\n                    />\n                ) : (\n                    card_section_item.description && (\n                        <Text as='span' size='xxs'>\n                            {card_section_item.description}\n                        </Text>\n                    )\n                )}\n            </div>\n        )}\n    </div>\n);\n\nexport default JurisdictionCardSection;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionCardFrontProps } from 'Containers/props.types';\nimport JurisdictionCardSection from './jurisdiction-card-section';\n\nconst JurisdictionCardFront = ({\n    account_status,\n    card_classname,\n    card_data,\n    card_values,\n    disabled,\n    is_card_selected,\n    toggleCardFlip,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionCardFrontProps) => (\n    <div\n        className={classNames(card_classname, 'cfd-card-front', {\n            [`${card_classname}--selected selected-card`]: is_card_selected,\n            'cfd-card-disabled-flat': disabled,\n        })}\n    >\n        <div className={`${card_classname}__card-content-container`}>\n            {card_values.is_over_header_available ? (\n                <Text\n                    as='div'\n                    weight='bold'\n                    color='info-blue'\n                    align='center'\n                    size='xs'\n                    className={`${card_classname}__card-content-over-header`}\n                >\n                    <Localize i18n_default_text={card_values.over_header} />\n                </Text>\n            ) : (\n                <div className={`${card_classname}__card-content-over-header-blank`} />\n            )}\n            <Text\n                as='p'\n                weight='bold'\n                color='prominent'\n                align='center'\n                size='xsm'\n                className={`${card_classname}__h2-header`}\n            >\n                <Localize i18n_default_text={card_values.header} />\n            </Text>\n            <div className={`${card_classname}__card-section-container`}>\n                {card_data.map((item, index) => (\n                    <React.Fragment key={item.key}>\n                        <JurisdictionCardSection\n                            account_status={account_status}\n                            card_section_item={item}\n                            toggleCardFlip={toggleCardFlip}\n                            type_of_card={type_of_card}\n                            verification_docs={verification_docs}\n                        />\n                        {index < card_data.length - 1 && <div className='cfd-card-section-divider' />}\n                    </React.Fragment>\n                ))}\n            </div>\n            {disabled && (\n                <div className={`${card_classname}__card-content-footer`}>\n                    <Text\n                        as='div'\n                        weight='bold'\n                        color='colored-background'\n                        align='center'\n                        size='xs'\n                        className={`${card_classname}__card-content-footer-text`}\n                    >\n                        <Localize i18n_default_text='Added' />\n                    </Text>\n                </div>\n            )}\n        </div>\n    </div>\n);\n\nexport default JurisdictionCardFront;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Jurisdiction } from '@deriv/shared';\nimport { getJurisdictionContents } from '../../Constants/jurisdiction-contents/jurisdiction-contents';\nimport { TJurisdictionCardProps } from '../props.types';\nimport JurisdictionCardBack from './jurisdiction-card-back';\nimport JurisdictionCardFront from './jurisdiction-card-front';\nimport { useDynamicLeverage } from '../dynamic-leverage/dynamic-leverage-context';\n\nconst JurisdictionCard = ({\n    account_status,\n    account_type,\n    disabled,\n    is_non_idv_design = false,\n    jurisdiction_selected_shortcode,\n    setJurisdictionSelectedShortcode,\n    type_of_card,\n}: TJurisdictionCardProps) => {\n    const card_classname = `cfd-jurisdiction-card--${account_type}`;\n    const is_synthetic = account_type === 'synthetic';\n    const is_swapfree = account_type === 'all';\n    const { toggleDynamicLeverage } = useDynamicLeverage();\n    const card_values = getJurisdictionContents({ toggleDynamicLeverage })[type_of_card];\n    const non_synthetic_card_data = is_swapfree\n        ? card_values?.swapfree_contents ?? []\n        : card_values?.financial_contents;\n    const card_data = is_synthetic ? card_values?.synthetic_contents : non_synthetic_card_data;\n    const [is_card_flipped, setIsCardFlipped] = React.useState(false);\n    const is_card_selected = jurisdiction_selected_shortcode === type_of_card;\n    let verification_docs = is_synthetic\n        ? card_values?.synthetic_verification_docs\n        : card_values?.financial_verification_docs;\n    if ([Jurisdiction.BVI, Jurisdiction.VANUATU, Jurisdiction.LABUAN].includes(type_of_card) && is_non_idv_design) {\n        verification_docs = ['selfie', 'identity_document', 'name_and_address'];\n    }\n\n    const cardSelection = (cardType: string) => {\n        setJurisdictionSelectedShortcode(jurisdiction_selected_shortcode === cardType ? '' : cardType);\n    };\n\n    const toggleCardFlip: React.MouseEventHandler<HTMLSpanElement> = event => {\n        event.stopPropagation();\n        setIsCardFlipped(!is_card_flipped);\n    };\n\n    return (\n        <div className='cfd-card-perspective'>\n            <div\n                data-testid='dt_jurisdiction_card'\n                className={classNames('cfd-card-container', `${account_type}`, {\n                    'cfd-card-flipped': is_card_flipped,\n                    'cfd-card-disabled': disabled,\n                })}\n                onClick={disabled ? () => undefined : () => cardSelection(type_of_card)}\n            >\n                <JurisdictionCardFront\n                    account_status={account_status}\n                    card_classname={card_classname}\n                    card_data={card_data}\n                    card_values={card_values}\n                    disabled={disabled}\n                    is_card_selected={is_card_selected}\n                    toggleCardFlip={toggleCardFlip}\n                    type_of_card={type_of_card}\n                    verification_docs={verification_docs}\n                />\n                <JurisdictionCardBack\n                    card_classname={card_classname}\n                    disabled={disabled}\n                    is_card_selected={is_card_selected}\n                    toggleCardFlip={toggleCardFlip}\n                    verification_docs={verification_docs}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default JurisdictionCard;\n","import { TJurisdictionCardItems, TJurisdictionCardParams } from 'Components/props.types';\nimport { getJurisdictionBviContents } from './jurisdiction-bvi-contents';\nimport { getJurisdictionLabuanContents } from './jurisdiction-labuan-contents';\nimport { getJurisdictionSvgContents } from './jurisdiction-svg-contents';\nimport { getJurisdictionVanuatuContents } from './jurisdiction-vanuatu-contents';\nimport { getJurisdictionMaltainvestContents } from './jurisdiction_maltainvest_contents';\n\ntype TJurisdictionContent = {\n    svg: TJurisdictionCardItems;\n    vanuatu: TJurisdictionCardItems;\n    labuan: TJurisdictionCardItems;\n    maltainvest: TJurisdictionCardItems;\n    bvi: TJurisdictionCardItems;\n};\n\nexport const getJurisdictionContents = (params: TJurisdictionCardParams): TJurisdictionContent => ({\n    svg: getJurisdictionSvgContents(params),\n    bvi: getJurisdictionBviContents(params),\n    vanuatu: getJurisdictionVanuatuContents(params),\n    labuan: getJurisdictionLabuanContents(),\n    maltainvest: getJurisdictionMaltainvestContents(),\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems, TJurisdictionCardParams } from 'Components/props.types';\n\nexport const getJurisdictionSvgContents = ({\n    toggleDynamicLeverage,\n}: TJurisdictionCardParams): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('St. Vincent & Grenadines'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Baskets and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('170+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n            clickable_description: [\n                {\n                    type: 'link',\n                    text: localize('Dynamic Leverage'),\n                    onClick: toggleDynamicLeverage,\n                },\n            ],\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.6 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    swapfree_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock Indices, Cryptocurrencies, and ETFs'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    synthetic_verification_docs: ['not_applicable'],\n    financial_verification_docs: ['not_applicable'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionLabuanContents = (): TJurisdictionCardItems => ({\n    over_header: localize('Straight-through processing'),\n    is_over_header_available: true,\n    header: localize('Labuan'),\n    synthetic_contents: [\n        { key: 'assets', title: localize('Assets'), description: localize('Forex and Cryptocurrencies') },\n        { key: 'leverage', title: localize('Leverage') },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Labuan Financial Services Authority (licence no. MB/18/0024)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('80+'),\n                display_text_skin_color: 'red-dark',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:100'),\n                display_text_skin_color: 'yellow-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.6 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Labuan Financial Services Authority (licence no. MB/18/0024)'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionMaltainvestContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('Malta'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('140+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:30'),\n                display_text_skin_color: 'brown-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('140+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:30'),\n                display_text_skin_color: 'brown-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n        },\n    ],\n    synthetic_verification_docs: ['selfie', 'identity_document', 'name_and_address'],\n    financial_verification_docs: ['selfie', 'identity_document', 'name_and_address'],\n});\n","import React from 'react';\nimport { TJurisdictionModalContentProps } from '../props.types';\nimport JurisdictionCard from './jurisdiction-card';\nimport { MARKET_TYPE, JURISDICTION } from '../../Helpers/cfd-config';\n\nconst JurisdictionModalContent = ({\n    account_status,\n    account_type,\n    is_non_idv_design = false,\n    is_virtual,\n    jurisdiction_selected_shortcode,\n    setJurisdictionSelectedShortcode,\n    synthetic_available_accounts,\n    financial_available_accounts,\n    real_synthetic_accounts_existing_data,\n    real_financial_accounts_existing_data,\n    real_swapfree_accounts_existing_data,\n    swapfree_available_accounts,\n}: TJurisdictionModalContentProps) => {\n    const card_classname = `cfd-jurisdiction-card--${account_type}`;\n\n    const cardsToBeShown = (type_of_card: string) => {\n        switch (account_type) {\n            case MARKET_TYPE.SYNTHETIC:\n                return synthetic_available_accounts?.some(account => account.shortcode === type_of_card);\n            case MARKET_TYPE.ALL:\n                return swapfree_available_accounts?.some(account => account.shortcode === type_of_card);\n            default:\n                return financial_available_accounts?.some(account => account.shortcode === type_of_card);\n        }\n    };\n\n    const disableCard = (type_of_card: string) => {\n        if (is_virtual && type_of_card !== JURISDICTION.SVG) {\n            return true;\n        }\n        switch (account_type) {\n            case MARKET_TYPE.SYNTHETIC:\n                return real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n            case MARKET_TYPE.ALL:\n                return real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n            default:\n                return real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n        }\n    };\n\n    const jurisdiction_cards_array = [\n        JURISDICTION.SVG,\n        JURISDICTION.BVI,\n        JURISDICTION.VANUATU,\n        JURISDICTION.LABUAN,\n        JURISDICTION.MALTA_INVEST,\n    ];\n\n    return (\n        <div data-testid='dt-jurisdiction-modal-content' className={`${card_classname}__wrapper`}>\n            {jurisdiction_cards_array.map(\n                card =>\n                    cardsToBeShown(card) && (\n                        <JurisdictionCard\n                            account_status={account_status}\n                            account_type={account_type}\n                            disabled={disableCard(card)}\n                            is_non_idv_design={is_non_idv_design}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            key={card}\n                            setJurisdictionSelectedShortcode={setJurisdictionSelectedShortcode}\n                            type_of_card={card}\n                        />\n                    )\n            )}\n        </div>\n    );\n};\n\nexport default JurisdictionModalContent;\n","import React from 'react';\nimport { Checkbox, StaticUrl, Text } from '@deriv/components';\nimport { isMobile, Jurisdiction } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionCheckBoxProps } from '../props.types';\n\nconst JurisdictionCheckBox = ({\n    class_name,\n    is_checked,\n    jurisdiction_selected_shortcode,\n    onCheck,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n}: TJurisdictionCheckBoxProps) => {\n    const shouldShowCheckBox = () => {\n        if (\n            !jurisdiction_selected_shortcode ||\n            jurisdiction_selected_shortcode === Jurisdiction.SVG ||\n            (jurisdiction_selected_shortcode === Jurisdiction.BVI && should_restrict_bvi_account_creation) ||\n            (jurisdiction_selected_shortcode === Jurisdiction.VANUATU && should_restrict_vanuatu_account_creation)\n        ) {\n            return false;\n        }\n        return true;\n    };\n\n    const dbvi_company_names: { [key: string]: { [key: string]: string } } = {\n        bvi: { name: 'Deriv (BVI) Ltd', tnc_url: 'tnc/deriv-(bvi)-ltd.pdf' },\n        labuan: { name: 'Deriv (FX) Ltd', tnc_url: 'tnc/deriv-(fx)-ltd.pdf' },\n        maltainvest: {\n            name: 'Deriv Investments (Europe) Limited',\n            tnc_url: 'tnc/deriv-investments-(europe)-limited.pdf',\n        },\n        vanuatu: { name: 'Deriv (V) Ltd', tnc_url: 'tnc/general-terms.pdf' },\n    };\n\n    const getCheckboxLabel = () => (\n        <Text as='p' align='center' size={isMobile() ? 'xxs' : 'xs'} line_height='xs'>\n            <Localize\n                i18n_default_text=\"I confirm and accept {{company}} 's <0>Terms and Conditions</0>\"\n                values={{ company: dbvi_company_names[jurisdiction_selected_shortcode].name }}\n                components={[\n                    <StaticUrl\n                        key={0}\n                        className='link--no-bold'\n                        href={dbvi_company_names[jurisdiction_selected_shortcode].tnc_url}\n                    />,\n                ]}\n            />\n        </Text>\n    );\n    return (\n        <React.Fragment>\n            {shouldShowCheckBox() && (\n                <div className={class_name}>\n                    <Checkbox\n                        value={is_checked}\n                        onChange={onCheck}\n                        label={getCheckboxLabel()}\n                        defaultChecked={!!is_checked}\n                    />\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default JurisdictionCheckBox;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { getAuthenticationStatusInfo, isMobile, getMT5Title, CFD_PLATFORMS } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionModalFootNoteProps } from '../props.types';\nimport { JURISDICTION } from '../../Helpers/cfd-config';\n\nconst FooterNote = ({\n    account_status,\n    account_type,\n    card_classname,\n    jurisdiction_selected_shortcode,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n}: TJurisdictionModalFootNoteProps) => {\n    const { common } = useStore();\n\n    const { platform } = common;\n\n    const account_type_name = getMT5Title(account_type);\n\n    const { poa_pending } = getAuthenticationStatusInfo(account_status);\n\n    if (platform === CFD_PLATFORMS.CTRADER && jurisdiction_selected_shortcode === 'svg') {\n        return (\n            <Localize i18n_default_text='Add your Deriv cTrader account under Deriv (SVG) LLC (company no. 273 LLC 2020).' />\n        );\n    }\n    if (jurisdiction_selected_shortcode === JURISDICTION.SVG) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0> account under Deriv (SVG) LLC (company no. 273 LLC 2020).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (\n        (jurisdiction_selected_shortcode === JURISDICTION.BVI && should_restrict_bvi_account_creation) ||\n        (jurisdiction_selected_shortcode === JURISDICTION.VANUATU && should_restrict_vanuatu_account_creation)\n    ) {\n        return poa_pending ? (\n            <Localize\n                i18n_default_text='<0>You can open this account once your submitted documents have been verified.</0>'\n                components={[<span key={0} className={`${card_classname}__footnote--pending`} />]}\n            />\n        ) : (\n            <Localize i18n_default_text='To create this account first we need you to resubmit your proof of address.' />\n        );\n    } else if (jurisdiction_selected_shortcode === JURISDICTION.BVI) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0>  account under Deriv (BVI) Ltd, regulated by the British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === JURISDICTION.VANUATU) {\n        return (\n            <Localize\n                i18n_default_text='Add Your Deriv MT5 <0>{{account_type_name}}</0>  account under Deriv (V) Ltd, regulated by the Vanuatu Financial Services Commission.'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === JURISDICTION.LABUAN) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0>  STP account under Deriv (FX) Ltd regulated by Labuan Financial Services Authority (Licence no. MB/18/0024).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === JURISDICTION.MALTA_INVEST) {\n        return (\n            <Localize i18n_default_text='Add your Deriv MT5 CFDs account under Deriv Investments (Europe) Limited, regulated by the Malta Financial Services Authority (MFSA) (licence no. IS/70156).' />\n        );\n    }\n\n    return null;\n};\n\nconst JurisdictionModalFootNote = (props: TJurisdictionModalFootNoteProps) => {\n    return (\n        <React.Fragment>\n            {props.jurisdiction_selected_shortcode && (\n                <div data-testid='dt-jurisdiction-footnote' className={`${props.card_classname}__footnote`}>\n                    <Text\n                        as='p'\n                        color='prominent'\n                        align='center'\n                        size={isMobile() ? 'xxs' : 'xs'}\n                        weight='bold'\n                        line_height='xs'\n                    >\n                        <FooterNote {...props} />\n                    </Text>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default observer(JurisdictionModalFootNote);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { getAuthenticationStatusInfo, isMobile } from '@deriv/shared';\nimport { useStore, observer } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\nimport { TJurisdictionModalContentWrapperProps } from '../props.types';\nimport JurisdictionModalContent from './jurisdiction-modal-content';\nimport JurisdictionCheckBox from './jurisdiction-modal-checkbox';\nimport JurisdictionModalFootNote from './jurisdiction-modal-foot-note';\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { MARKET_TYPE, JURISDICTION } from '../../Helpers/cfd-config';\n\nconst JurisdictionModalContentWrapper = observer(({ openPasswordModal }: TJurisdictionModalContentWrapperProps) => {\n    const { client, traders_hub } = useStore();\n\n    const { show_eu_related_content } = traders_hub;\n\n    const {\n        trading_platform_available_accounts,\n        account_status,\n        fetchAccountSettings,\n        residence,\n        residence_list,\n        is_virtual,\n        updateMT5Status,\n        should_restrict_vanuatu_account_creation,\n        should_restrict_bvi_account_creation,\n    } = client;\n\n    const {\n        is_jurisdiction_modal_visible,\n        has_submitted_cfd_personal_details,\n        jurisdiction_selected_shortcode,\n        toggleCFDVerificationModal,\n        toggleJurisdictionModal,\n        account_type,\n        real_financial_accounts_existing_data,\n        real_swapfree_accounts_existing_data,\n        real_synthetic_accounts_existing_data,\n        setJurisdictionSelectedShortcode,\n    } = useCfdStore();\n\n    const [checked, setChecked] = React.useState(false);\n\n    const {\n        poi_or_poa_not_submitted,\n        poi_acknowledged_for_bvi_labuan_vanuatu,\n        poi_acknowledged_for_maltainvest,\n        poa_acknowledged,\n        need_poa_resubmission,\n        poa_resubmit_for_labuan,\n    } = getAuthenticationStatusInfo(account_status);\n\n    React.useEffect(() => {\n        if (is_jurisdiction_modal_visible) {\n            if (!is_virtual) {\n                updateMT5Status();\n                fetchAccountSettings();\n            }\n            setJurisdictionSelectedShortcode('');\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_jurisdiction_modal_visible]);\n\n    React.useEffect(() => {\n        if (jurisdiction_selected_shortcode) {\n            setChecked(false);\n        }\n    }, [jurisdiction_selected_shortcode, is_jurisdiction_modal_visible]);\n\n    const financial_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === MARKET_TYPE.FINANCIAL &&\n            (show_eu_related_content\n                ? available_account.shortcode === JURISDICTION.MALTA_INVEST\n                : available_account.shortcode !== JURISDICTION.MALTA_INVEST)\n    );\n\n    const synthetic_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === MARKET_TYPE.GAMING &&\n            (show_eu_related_content\n                ? available_account.shortcode === JURISDICTION.MALTA_INVEST\n                : available_account.shortcode !== JURISDICTION.MALTA_INVEST)\n    );\n\n    const all_market_type_available_accounts = trading_platform_available_accounts?.filter(\n        available_account => available_account.market_type === MARKET_TYPE.ALL\n    );\n\n    const is_svg_selected = jurisdiction_selected_shortcode === JURISDICTION.SVG;\n    const is_bvi_selected = jurisdiction_selected_shortcode === JURISDICTION.BVI;\n    const is_vanuatu_selected = jurisdiction_selected_shortcode === JURISDICTION.VANUATU;\n    const is_labuan_selected = jurisdiction_selected_shortcode === JURISDICTION.LABUAN;\n    const is_maltainvest_selected = jurisdiction_selected_shortcode === JURISDICTION.MALTA_INVEST;\n\n    const is_idv_country =\n        residence_list.find(elem => elem?.value === residence)?.identity?.services?.idv?.is_country_supported === 1;\n    const has_idv_attempts = (account_status?.authentication?.identity?.services?.idv?.submissions_left ?? 0) > 0;\n    const is_non_idv_design = !is_idv_country || (is_idv_country && !has_idv_attempts);\n\n    const swapfree_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === MARKET_TYPE.ALL &&\n            (show_eu_related_content\n                ? available_account.shortcode === JURISDICTION.MALTA_INVEST\n                : available_account.shortcode !== JURISDICTION.MALTA_INVEST)\n    );\n\n    const isNextButtonDisabled = () => {\n        if (jurisdiction_selected_shortcode) {\n            let is_account_created;\n            if (account_type.type === MARKET_TYPE.SYNTHETIC) {\n                is_account_created = real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            } else if (account_type.type === MARKET_TYPE.ALL) {\n                is_account_created = real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            } else {\n                is_account_created = real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            }\n            if (!is_account_created) {\n                if (\n                    is_svg_selected ||\n                    (is_bvi_selected && should_restrict_bvi_account_creation && need_poa_resubmission) ||\n                    (is_vanuatu_selected && should_restrict_vanuatu_account_creation && need_poa_resubmission)\n                ) {\n                    return false;\n                }\n                return !checked;\n            }\n            return true;\n        }\n        return true;\n    };\n\n    const onSelectRealAccount = () => {\n        const type_of_account = {\n            category: account_type.category,\n            type: account_type.type,\n        };\n\n        if (is_svg_selected) {\n            openPasswordModal(type_of_account);\n        } else if (is_vanuatu_selected) {\n            if (\n                poi_acknowledged_for_bvi_labuan_vanuatu &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_vanuatu_account_creation &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_bvi_selected) {\n            if (\n                poi_acknowledged_for_bvi_labuan_vanuatu &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_bvi_account_creation &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_labuan_selected) {\n            if (\n                poi_acknowledged_for_bvi_labuan_vanuatu &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details &&\n                !poa_resubmit_for_labuan\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_maltainvest_selected) {\n            if (poi_acknowledged_for_maltainvest && poa_acknowledged) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        }\n    };\n\n    return (\n        <div className='jurisdiction-modal__content-wrapper'>\n            <div className='jurisdiction-modal__scrollable-content'>\n                <JurisdictionModalContent\n                    account_status={account_status}\n                    account_type={account_type.type}\n                    financial_available_accounts={financial_available_accounts}\n                    is_non_idv_design={is_non_idv_design}\n                    is_virtual={is_virtual}\n                    real_financial_accounts_existing_data={real_financial_accounts_existing_data}\n                    real_synthetic_accounts_existing_data={real_synthetic_accounts_existing_data}\n                    jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    real_swapfree_accounts_existing_data={real_swapfree_accounts_existing_data}\n                    setJurisdictionSelectedShortcode={setJurisdictionSelectedShortcode}\n                    swapfree_available_accounts={swapfree_available_accounts}\n                    synthetic_available_accounts={synthetic_available_accounts}\n                    all_market_type_available_accounts={all_market_type_available_accounts}\n                />\n                <div\n                    className={classNames(\n                        'jurisdiction-modal__footer-content',\n                        `cfd-jurisdiction-card--${account_type.type}__footer-wrapper`\n                    )}\n                >\n                    <div className={`cfd-jurisdiction-card--${account_type.type}__footnotes-container`}>\n                        <JurisdictionModalFootNote\n                            account_status={account_status}\n                            account_type={account_type.type}\n                            card_classname={`cfd-jurisdiction-card--${account_type.type}`}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            should_restrict_bvi_account_creation={should_restrict_bvi_account_creation}\n                            should_restrict_vanuatu_account_creation={should_restrict_vanuatu_account_creation}\n                        />\n                        <JurisdictionCheckBox\n                            is_checked={checked}\n                            onCheck={() => setChecked(!checked)}\n                            class_name={`cfd-jurisdiction-card--${account_type.type}__jurisdiction-checkbox`}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            should_restrict_bvi_account_creation={should_restrict_bvi_account_creation}\n                            should_restrict_vanuatu_account_creation={should_restrict_vanuatu_account_creation}\n                        />\n                    </div>\n                </div>\n            </div>\n            <Modal.Footer className='jurisdiction-modal__footer-button' has_separator>\n                <Button\n                    disabled={isNextButtonDisabled()}\n                    primary\n                    style={{ width: isMobile() ? '100%' : 'unset' }}\n                    onClick={() => {\n                        toggleJurisdictionModal();\n                        onSelectRealAccount();\n                    }}\n                >\n                    {localize('Next')}\n                </Button>\n            </Modal.Footer>\n        </div>\n    );\n});\n\nexport default JurisdictionModalContentWrapper;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { getMT5Title, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDynamicLeverage } from '../dynamic-leverage/dynamic-leverage-context';\nimport { TJurisdictionModalTitleProps } from '../props.types';\nimport { CFD_PLATFORMS } from '../../Helpers/cfd-config';\n\nexport const JurisdictionModalTitle = ({\n    show_eu_related_content,\n    account_type,\n    platform,\n}: TJurisdictionModalTitleProps) => {\n    const { is_dynamic_leverage_visible, toggleDynamicLeverage } = useDynamicLeverage();\n    if (is_dynamic_leverage_visible) {\n        return (\n            <div className='jurisdiction-modal__title'>\n                <span\n                    data-testid='back_icon'\n                    className='jurisdiction-modal__title-back'\n                    onClick={toggleDynamicLeverage}\n                >\n                    <Icon icon='IcArrowLeftBold' />\n                </span>\n                <Text size={isMobile() ? 'xs' : 's'} weight='bold' color='prominent'>\n                    {localize('Get more out of Deriv MT5 Financial')}\n                </Text>\n            </div>\n        );\n    } else if (show_eu_related_content) {\n        return <Localize i18n_default_text='Choose a jurisdiction for your Deriv MT5 CFDs account' />;\n    }\n\n    return (\n        <Localize\n            i18n_default_text={\n                platform === CFD_PLATFORMS.MT5\n                    ? 'Choose a jurisdiction for your Deriv MT5 {{account_type}} account'\n                    : 'Choose a jurisdiction for your cTrader account'\n            }\n            values={{ account_type: getMT5Title(account_type) }}\n        />\n    );\n};\n\nexport default JurisdictionModalTitle;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { DesktopWrapper, MobileDialog, MobileWrapper, Modal, UILoader } from '@deriv/components';\nimport { TJurisdictionModalProps } from '../props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { DynamicLeverageContext } from '../dynamic-leverage/dynamic-leverage-context';\nimport DynamicLeverageModalContent from '../dynamic-leverage/dynamic-leverage-modal-content';\nimport JurisdictionModalContentWrapper from './jurisdiction-modal-content-wrapper';\nimport JurisdictionModalTitle from './jurisdiction-modal-title';\nimport { MARKET_TYPE } from '../../Helpers/cfd-config';\n\nconst JurisdictionModal = observer(({ openPasswordModal }: TJurisdictionModalProps) => {\n    const { traders_hub, ui, common } = useStore();\n\n    const { show_eu_related_content } = traders_hub;\n    const { disableApp, enableApp } = ui;\n    const { platform } = common;\n\n    const { account_type, is_jurisdiction_modal_visible, toggleJurisdictionModal } = useCfdStore();\n\n    const [is_dynamic_leverage_visible, setIsDynamicLeverageVisible] = React.useState(false);\n\n    const toggleDynamicLeverage: React.MouseEventHandler<HTMLSpanElement> = event => {\n        event.stopPropagation();\n        setIsDynamicLeverageVisible(!is_dynamic_leverage_visible);\n    };\n\n    const onJurisdictionModalToggle = () => {\n        setIsDynamicLeverageVisible(false);\n        toggleJurisdictionModal();\n    };\n\n    const modal_content = (\n        <div\n            data-testid='modal_content'\n            className={classNames('jurisdiction-modal__wrapper', {\n                'jurisdiction-modal__flipped': is_dynamic_leverage_visible,\n            })}\n        >\n            <JurisdictionModalContentWrapper openPasswordModal={openPasswordModal} />\n            <DynamicLeverageModalContent />\n        </div>\n    );\n\n    return (\n        <div>\n            <React.Suspense fallback={<UILoader />}>\n                <DynamicLeverageContext.Provider value={{ is_dynamic_leverage_visible, toggleDynamicLeverage }}>\n                    <DesktopWrapper>\n                        <Modal\n                            className='jurisdiction-modal'\n                            disableApp={disableApp}\n                            enableApp={enableApp}\n                            exit_classname='cfd-modal--custom-exit'\n                            is_open={is_jurisdiction_modal_visible}\n                            toggleModal={onJurisdictionModalToggle}\n                            type='button'\n                            width={account_type.type === MARKET_TYPE.FINANCIAL ? '1200px' : '1040px'}\n                            has_close_icon={!is_dynamic_leverage_visible}\n                            title={\n                                <JurisdictionModalTitle\n                                    show_eu_related_content={show_eu_related_content}\n                                    account_type={account_type.type}\n                                    platform={platform}\n                                />\n                            }\n                        >\n                            {modal_content}\n                        </Modal>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <MobileDialog\n                            portal_element_id='deriv_app'\n                            visible={is_jurisdiction_modal_visible}\n                            onClose={onJurisdictionModalToggle}\n                            has_close_icon={!is_dynamic_leverage_visible}\n                            title={\n                                <JurisdictionModalTitle\n                                    show_eu_related_content={show_eu_related_content}\n                                    account_type={account_type.type}\n                                    platform={platform}\n                                />\n                            }\n                        >\n                            {modal_content}\n                        </MobileDialog>\n                    </MobileWrapper>\n                </DynamicLeverageContext.Provider>\n            </React.Suspense>\n        </div>\n    );\n});\n\nexport default JurisdictionModal;\n","import React from 'react';\n\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { Icon, Money, Text } from '@deriv/components';\nimport {\n    getCFDAccountDisplay,\n    getCFDAccountKey,\n    getCFDPlatformLabel,\n    getPlatformSettings,\n    getUrlBase,\n    isMobile,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { getPlatformMt5DownloadLink } from '../Helpers/constants';\nimport SpecBox from '../Components/specbox';\nimport PasswordBox from '../Components/passwordbox';\nimport TradingPlatformIcon from '../Assets/svgs/trading-platform';\nimport { TTradingPlatformAccounts } from '../Components/props.types';\n\nimport { TCFDPasswordReset } from './props.types';\nimport { CATEGORY, CFD_PLATFORMS, MARKET_TYPE, JURISDICTION } from '../Helpers/cfd-config';\n\ntype TMT5TradeModalProps = {\n    mt5_trade_account: DetailsOfEachMT5Loginid & {\n        webtrader_url?: string;\n    };\n    show_eu_related_content: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n};\n\nconst getTitle = (market_type: string, show_eu_related_content: boolean) => {\n    if (show_eu_related_content) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst DMT5TradeModal = ({\n    mt5_trade_account,\n    show_eu_related_content,\n    onPasswordManager,\n    toggleModal,\n}: TMT5TradeModalProps) => {\n    const getCompanyShortcode = () => {\n        if (\n            (mt5_trade_account.account_type === CATEGORY.DEMO &&\n                mt5_trade_account.market_type === MARKET_TYPE.FINANCIAL &&\n                mt5_trade_account.landing_company_short === JURISDICTION.LABUAN) ||\n            mt5_trade_account.account_type === CATEGORY.REAL\n        ) {\n            return mt5_trade_account.landing_company_short;\n        }\n        return undefined;\n    };\n\n    const getHeadingTitle = () =>\n        getCFDAccountDisplay({\n            market_type: mt5_trade_account.market_type,\n            sub_account_type: mt5_trade_account.sub_account_type,\n            platform: CFD_PLATFORMS.MT5,\n            is_eu: show_eu_related_content,\n            shortcode: getCompanyShortcode(),\n            is_mt5_trade_modal: true,\n        });\n    const getAccountTitle = () => {\n        if (show_eu_related_content) return 'CFDs';\n        else if (mt5_trade_account.market_type === MARKET_TYPE.SYNTHETIC) return 'Derived';\n        else if (mt5_trade_account.market_type === MARKET_TYPE.ALL) return 'SwapFree';\n        return 'Financial';\n    };\n    return (\n        <div className='cfd-trade-modal-container'>\n            <div className='cfd-trade-modal'>\n                <TradingPlatformIcon icon={getAccountTitle()} size={24} />\n                <div className='cfd-trade-modal__desc'>\n                    <Text size='xs' line_height='l' className='cfd-trade-modal__desc-heading'>\n                        {getHeadingTitle()}\n                    </Text>\n                    {(mt5_trade_account as TTradingPlatformAccounts)?.display_login && (\n                        <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                            {(mt5_trade_account as TTradingPlatformAccounts)?.display_login}\n                        </Text>\n                    )}\n                </div>\n                {mt5_trade_account?.display_balance && (\n                    <Text size='xs' color='profit-success' className='cfd-trade-modal__desc-balance' weight='bold'>\n                        <Money\n                            amount={mt5_trade_account.display_balance}\n                            currency={mt5_trade_account.currency}\n                            has_sign={!!mt5_trade_account.balance && mt5_trade_account.balance < 0}\n                            show_currency\n                        />\n                    </Text>\n                )}\n            </div>\n            <div className='cfd-trade-modal__login-specs'>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Broker')}</Text>\n                    <SpecBox is_bold is_broker value={'Deriv.com Limited'} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Server')}</Text>\n                    <SpecBox is_bold value={(mt5_trade_account as DetailsOfEachMT5Loginid)?.server_info?.environment} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Login ID')}</Text>\n                    <SpecBox is_bold value={(mt5_trade_account as TTradingPlatformAccounts)?.display_login} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                    <div className='cfd-trade-modal--paragraph'>\n                        <PasswordBox\n                            platform='mt5'\n                            onClick={() => {\n                                const account_type = getCFDAccountKey({\n                                    market_type: mt5_trade_account.market_type,\n                                    sub_account_type: mt5_trade_account.sub_account_type,\n                                    platform: CFD_PLATFORMS.MT5,\n                                    shortcode: mt5_trade_account.landing_company_short,\n                                });\n                                onPasswordManager(\n                                    mt5_trade_account?.login,\n                                    getTitle(mt5_trade_account.market_type || '', show_eu_related_content),\n                                    mt5_trade_account.account_type || '',\n                                    account_type,\n                                    (mt5_trade_account as DetailsOfEachMT5Loginid)?.server\n                                );\n                                toggleModal();\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className='cfd-trade-modal__maintenance'>\n                    <Icon\n                        icon='IcAlertWarning'\n                        size={isMobile() ? 28 : 20}\n                        className='cfd-trade-modal__maintenance-icon'\n                    />\n                    <div className='cfd-trade-modal__maintenance-text'>\n                        <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                    </div>\n                </div>\n            </div>\n            <div className='cfd-trade-modal__download-center-app'>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcRebrandingMt5Logo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 web')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={mt5_trade_account.webtrader_url}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Open')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option cfd-trade-modal__download-center-app--option-hide'>\n                    <Icon icon='IcWindowsLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 Windows app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('windows')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Download')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option cfd-trade-modal__download-center-app--option-hide'>\n                    <Icon icon='IcMacosLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 MacOS app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('macos')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Download')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option cfd-trade-modal__download-center-app--option-hide'>\n                    <Icon icon='IcLinuxLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 Linux app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('linux')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Learn more')}\n                        </Text>\n                    </a>\n                </div>\n            </div>\n            <Text\n                align='center'\n                as='div'\n                className='cfd-trade-modal__download-center-text'\n                size={isMobile() ? 'xxxs' : 'xxs'}\n                weight='bold'\n            >\n                {localize(\n                    'Download {{ platform }} on your phone to trade with the {{ platform }} {{ account }} account',\n                    {\n                        platform: getCFDPlatformLabel(CFD_PLATFORMS.MT5),\n                        account: getAccountTitle(),\n                    }\n                )}\n            </Text>\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    <a href={getPlatformMt5DownloadLink('ios')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationApple' width={135} height={40} />\n                    </a>\n                    <a href={getPlatformMt5DownloadLink('android')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                    </a>\n                    <a href={getPlatformMt5DownloadLink('huawei')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationHuawei' width={135} height={40} />\n                    </a>\n                </div>\n\n                <div className='cfd-trade-modal__download-center-options--qrcode cfd-trade-modal__download-center-options--qrcode-hide'>\n                    <img src={getUrlBase('/public/images/common/mt5_download.png')} width={80} height={80} />\n                    <Text align='center' size='xxs'>\n                        {localize('Scan the QR code to download {{ platform }}.', {\n                            platform: getPlatformSettings('mt5').name,\n                        })}\n                    </Text>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DMT5TradeModal;\n","import React from 'react';\nimport { DesktopWrapper, Div100vhContainer, Modal, MobileWrapper, PageOverlay, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport TradeModal from './trade-modal';\nimport DMT5TradeModal from './dmt5-trade-modal';\nimport { TCFDPasswordReset } from './props.types';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\ntype TMT5TradeModalProps = {\n    is_eu_user: boolean;\n    is_open: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    is_demo: string;\n};\n\nconst MT5TradeModal = observer(\n    ({ is_eu_user, is_open, onPasswordManager, toggleModal, is_demo }: TMT5TradeModalProps) => {\n        const { traders_hub, common, ui } = useStore();\n\n        const { show_eu_related_content } = traders_hub;\n        const { platform } = common;\n        const { is_mobile } = ui;\n\n        const { mt5_trade_account, dxtrade_tokens, derivez_tokens, ctrader_tokens } = useCfdStore();\n\n        const CFDTradeModal = () => {\n            if (platform === 'mt5') {\n                return (\n                    <DMT5TradeModal\n                        mt5_trade_account={mt5_trade_account}\n                        show_eu_related_content={show_eu_related_content}\n                        onPasswordManager={onPasswordManager}\n                        toggleModal={toggleModal}\n                    />\n                );\n            }\n            return (\n                <TradeModal\n                    mt5_trade_account={mt5_trade_account}\n                    is_eu_user={is_eu_user}\n                    onPasswordManager={onPasswordManager}\n                    toggleModal={toggleModal}\n                    is_demo={is_demo}\n                    platform={platform}\n                    ctrader_tokens={ctrader_tokens}\n                    dxtrade_tokens={dxtrade_tokens}\n                    derivez_tokens={derivez_tokens}\n                    is_mobile={is_mobile}\n                />\n            );\n        };\n\n        return (\n            <React.Suspense fallback={<UILoader />}>\n                <DesktopWrapper>\n                    <Modal\n                        is_open={is_open}\n                        title={localize('Trade')}\n                        toggleModal={toggleModal}\n                        should_header_stick_body={false}\n                        width='600px'\n                        exit_classname='cfd-modal--custom-exit'\n                    >\n                        <CFDTradeModal />\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <PageOverlay\n                        is_open={is_open}\n                        portal_id='deriv_app'\n                        header='Trade'\n                        onClickClose={toggleModal}\n                        header_classname='cfd-trade-modal__mobile-title'\n                    >\n                        <Div100vhContainer className='cfd-trade-modal__mobile-view-wrapper' height_offset='80px'>\n                            <CFDTradeModal />\n                        </Div100vhContainer>\n                    </PageOverlay>\n                </MobileWrapper>\n            </React.Suspense>\n        );\n    }\n);\n\nexport default MT5TradeModal;\n","import React from 'react';\nimport { QRCode } from 'react-qrcode';\nimport { TCFDsPlatformType, TMobilePlatforms } from 'Components/props.types';\nimport {\n    getPlatformDXTradeDownloadLink,\n    getPlatformCTraderDownloadLink,\n    getPlatformDerivEZDownloadLink,\n    getDXTradeWebTerminalLink,\n    getDerivEzWebTerminalLink,\n    getCTraderWebTerminalLink,\n    platformsText,\n    platformsIcons,\n} from './constants';\nimport { isMobile } from '@deriv/shared';\nimport { Text, Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { TCFDDashboardContainer } from 'Containers/props.types';\nimport { CATEGORY, CFD_PLATFORMS } from './cfd-config';\n\nexport const mobileDownloadLink = (platform: TCFDsPlatformType, type: TMobilePlatforms) => {\n    switch (platform) {\n        case CFD_PLATFORMS.DXTRADE:\n            return getPlatformDXTradeDownloadLink(type);\n        case CFD_PLATFORMS.CTRADER:\n            return getPlatformCTraderDownloadLink(type);\n        case CFD_PLATFORMS.DERIVEZ:\n            return getPlatformDerivEZDownloadLink(type);\n        default:\n            return getPlatformDXTradeDownloadLink(type);\n    }\n};\n\nexport const getPlatformQRCode = (acc_type: TCFDsPlatformType) => {\n    const qr_code_mobile = isMobile() ? '100%' : '80%';\n\n    const QRCodeLinks = () => {\n        switch (acc_type) {\n            case CFD_PLATFORMS.DERIVEZ:\n                return 'https://onelink.to/bkdwkd';\n            case CFD_PLATFORMS.DXTRADE:\n                return 'https://onelink.to/grmtyx';\n            case CFD_PLATFORMS.CTRADER:\n                return 'https://onelink.to/hyqpv7';\n            default:\n                return 'https://onelink.to/grmtyx';\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <QRCode\n                value={QRCodeLinks()}\n                size={5}\n                style={{ height: 'auto', maxWidth: '100%', width: qr_code_mobile }}\n            />\n            <Text align='center' size='xxs'>\n                <Localize\n                    i18n_default_text='Scan the QR code to download Deriv {{ platform }}.'\n                    values={{ platform: platformsText(acc_type) }}\n                />\n            </Text>\n        </React.Fragment>\n    );\n};\n\ntype TPlatformsDesktopDownload = {\n    platform: TCFDsPlatformType;\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    ctrader_tokens: TCFDDashboardContainer['ctrader_tokens'];\n    derivez_tokens: TCFDDashboardContainer['derivez_tokens'];\n    is_demo: string;\n};\n\nexport const PlatformsDesktopDownload = ({\n    platform,\n    dxtrade_tokens,\n    ctrader_tokens,\n    derivez_tokens,\n    is_demo,\n}: TPlatformsDesktopDownload) => {\n    const PlatformsDesktopDownloadLinks = () => {\n        switch (platform) {\n            case CFD_PLATFORMS.CTRADER:\n                return getCTraderWebTerminalLink(\n                    is_demo ? CATEGORY.DEMO : CATEGORY.REAL,\n                    ctrader_tokens && ctrader_tokens[is_demo ? CATEGORY.DEMO : CATEGORY.REAL]\n                );\n\n            case CFD_PLATFORMS.DERIVEZ:\n                return getDerivEzWebTerminalLink(\n                    is_demo ? 'demo' : 'real',\n                    derivez_tokens && derivez_tokens[is_demo ? CATEGORY.DEMO : CATEGORY.REAL]\n                );\n            case CFD_PLATFORMS.DXTRADE:\n                return getDXTradeWebTerminalLink(\n                    is_demo ? 'demo' : 'real',\n                    dxtrade_tokens && dxtrade_tokens[is_demo ? CATEGORY.DEMO : CATEGORY.REAL]\n                );\n            default:\n                return '';\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <a\n                className='cfd-trade-modal__platform-button'\n                href={PlatformsDesktopDownloadLinks()}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                {platform === CFD_PLATFORMS.CTRADER ? (\n                    <Icon\n                        className='cfd-trade-modal__platform-button-icon'\n                        icon={`IcBrand${platformsIcons(platform)}Wordmark`}\n                        width={60}\n                        height={30}\n                    />\n                ) : (\n                    <Icon\n                        className='cfd-trade-modal__platform-button-icon'\n                        icon={`IcBrand${platformsIcons(platform)}Wordmark`}\n                        size={36}\n                    />\n                )}\n                <div className='cfd-trade-modal__platform-button-text'>\n                    <Text color='colored-background' size='xxs' weight='bold'>\n                        <Localize i18n_default_text='Web terminal' />\n                    </Text>\n                </div>\n            </a>\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport { Text, Icon, Money } from '@deriv/components';\nimport { TTradingPlatformAccounts, TCFDDashboardContainer, TCFDsPlatformType } from 'Components/props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { getCFDAccountKey, isMobile, mobileOSDetect } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { getPlatformQRCode, PlatformsDesktopDownload, mobileDownloadLink } from '../Helpers/config';\nimport { getTitle, platformsText, CTRADER_DESKTOP_DOWNLOAD } from '../Helpers/constants';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\nimport SpecBox from '../Components/specbox';\nimport PasswordBox from '../Components/passwordbox';\nimport { TCFDPasswordReset } from './props.types';\n\ntype TTradeModalProps = {\n    mt5_trade_account: Required<DetailsOfEachMT5Loginid>;\n    is_eu_user: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    ctrader_tokens: TCFDDashboardContainer['ctrader_tokens'];\n    derivez_tokens: TCFDDashboardContainer['derivez_tokens'];\n    is_demo: string;\n    platform: TCFDsPlatformType;\n    is_mobile?: boolean;\n};\n\nconst PlatformIconsAndDescriptions = (\n    platform: TCFDsPlatformType,\n    is_demo: string,\n    mt5_trade_account: Required<DetailsOfEachMT5Loginid>\n) => {\n    return (\n        <React.Fragment>\n            <Icon icon={`IcRebranding${platform.charAt(0).toUpperCase()}${platform.slice(1)}Dashboard`} size={24} />\n            <div className='cfd-trade-modal__desc'>\n                <Text size='xs' line_height='l' className='cfd-trade-modal__desc-heading'>\n                    <Localize\n                        i18n_default_text='Deriv {{platform}} <0>{{is_demo}}</0>'\n                        values={{\n                            platform: platformsText(platform),\n                            is_demo: is_demo ? 'Demo' : '',\n                        }}\n                        components={[\n                            <span\n                                key={0}\n                                className={platform === CFD_PLATFORMS.CTRADER && is_demo ? 'cfd-trade-modal--tag' : ''}\n                            />,\n                        ]}\n                    />\n                </Text>\n                {(mt5_trade_account as TTradingPlatformAccounts)?.display_login && (\n                    <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                        {(mt5_trade_account as TTradingPlatformAccounts)?.display_login}\n                    </Text>\n                )}\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst TradeModal = ({\n    mt5_trade_account,\n    is_eu_user,\n    onPasswordManager,\n    toggleModal,\n    dxtrade_tokens,\n    derivez_tokens,\n    ctrader_tokens,\n    is_demo,\n    platform,\n    is_mobile,\n}: TTradeModalProps) => {\n    const CTraderAndDerivEZDescription = () => {\n        const platform_name = platform === 'derivez' ? 'Deriv EZ' : 'cTrader';\n        return (\n            <div className='cfd-trade-modal__login-specs-item'>\n                <Text className='cfd-trade-modal--paragraph'>\n                    <Localize\n                        i18n_default_text='Use your Deriv account email and password to login into the {{ platform }} platform.'\n                        values={{ platform: platform_name }}\n                    />\n                </Text>\n            </div>\n        );\n    };\n    const downloadCenterDescription = () => {\n        switch (platform) {\n            case 'dxtrade':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={isMobile() ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download Deriv X on your phone to trade with the Deriv X account')}\n                    </Text>\n                );\n            case 'derivez':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={isMobile() ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download Deriv GO on your phone to trade with the Deriv EZ account')}\n                    </Text>\n                );\n            case 'ctrader':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={isMobile() ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download cTrader on your phone to trade with the Deriv cTrader account')}\n                    </Text>\n                );\n            default:\n                return '';\n        }\n    };\n\n    const downloadCenterAppOption = (platform_type: TCFDsPlatformType) => {\n        let app_title = '';\n        if (platform_type === 'dxtrade') {\n            app_title = localize('Run Deriv X on your browser');\n        } else if (platform_type === 'derivez') {\n            app_title = localize('Run Deriv EZ on your browser');\n        } else if (platform_type === 'ctrader' && !is_mobile) {\n            app_title = localize('Run cTrader on your browser');\n        } else if (platform_type === 'ctrader' && is_mobile) {\n            return null;\n        } else {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {app_title}\n                    </Text>\n                    <PlatformsDesktopDownload\n                        platform={platform}\n                        is_demo={is_demo}\n                        dxtrade_tokens={dxtrade_tokens}\n                        derivez_tokens={derivez_tokens}\n                        ctrader_tokens={ctrader_tokens}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <div className='cfd-trade-modal-container'>\n            <div className='cfd-trade-modal'>\n                {PlatformIconsAndDescriptions(platform, is_demo, mt5_trade_account)}\n                {mt5_trade_account?.display_balance && (\n                    <Text\n                        size='xs'\n                        color={platform !== CFD_PLATFORMS.CTRADER ? 'profit-success' : 'prominent'}\n                        className='cfd-trade-modal__desc-balance'\n                        weight='bold'\n                    >\n                        <Money\n                            amount={mt5_trade_account.display_balance}\n                            currency={mt5_trade_account.currency}\n                            has_sign={!!mt5_trade_account.balance && mt5_trade_account.balance < 0}\n                            show_currency\n                        />\n                    </Text>\n                )}\n            </div>\n            <div className='cfd-trade-modal__login-specs'>\n                {platform !== CFD_PLATFORMS.DXTRADE && <CTraderAndDerivEZDescription />}\n                {platform === CFD_PLATFORMS.DXTRADE && (\n                    <React.Fragment>\n                        <div className='cfd-trade-modal__login-specs-item'>\n                            <Text className='cfd-trade-modal--paragraph'>{localize('Username')}</Text>\n                            <SpecBox is_bold value={(mt5_trade_account as TTradingPlatformAccounts)?.login} />\n                        </div>\n                        <div className='cfd-trade-modal__login-specs-item'>\n                            <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                            <div className='cfd-trade-modal--paragraph'>\n                                <PasswordBox\n                                    platform='dxtrade'\n                                    onClick={() => {\n                                        const account_type = getCFDAccountKey({\n                                            market_type: mt5_trade_account.market_type,\n                                            sub_account_type: mt5_trade_account.sub_account_type,\n                                            platform: CFD_PLATFORMS.MT5,\n                                            shortcode: mt5_trade_account.landing_company_short,\n                                        });\n                                        onPasswordManager(\n                                            mt5_trade_account?.login,\n                                            getTitle(mt5_trade_account.market_type, is_eu_user),\n                                            mt5_trade_account.account_type,\n                                            account_type,\n                                            (mt5_trade_account as DetailsOfEachMT5Loginid)?.server\n                                        );\n                                        toggleModal();\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                )}\n\n                <div className='cfd-trade-modal__maintenance'>\n                    <Icon\n                        icon='IcAlertWarning'\n                        size={isMobile() ? 28 : 24}\n                        className='cfd-trade-modal__maintenance-icon'\n                    />\n                    <div className='cfd-trade-modal__maintenance-text'>\n                        <Text size='xxxs' className='cfd-trade-modal__maintenance-text'>\n                            {platform === CFD_PLATFORMS.DXTRADE && (\n                                <Localize i18n_default_text='Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                            )}\n                            {platform === CFD_PLATFORMS.MT5 && (\n                                <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                            )}\n                            {platform === CFD_PLATFORMS.DERIVEZ && (\n                                <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                            )}\n                            {platform === CFD_PLATFORMS.CTRADER && (\n                                <Localize i18n_default_text='Server maintenance occurs every first Saturday of the month from 7 to 10 GMT time. You may experience service disruption during this time.' />\n                            )}\n                        </Text>\n                    </div>\n                </div>\n            </div>\n            <div className='cfd-trade-modal__download-center-app'>{downloadCenterAppOption(platform)}</div>\n            {platform === CFD_PLATFORMS.CTRADER && (\n                <React.Fragment>\n                    {!is_mobile && (\n                        <div className='cfd-trade-modal__download-center-app--windows'>\n                            <Icon icon='IcWindowsLogo' size={32} />\n                            <Text className='cfd-trade-modal__download-center-app--windows-item' size='xs'>\n                                {localize('cTrader Windows app')}\n                            </Text>\n                            <a\n                                className='dc-btn cfd-trade-modal__download-center-app--windows-link'\n                                type='button'\n                                href={CTRADER_DESKTOP_DOWNLOAD}\n                                target='_blank'\n                                rel='noopener noreferrer'\n                            >\n                                <Text size='xxs' weight='bold' color='prominent'>\n                                    {localize('Download')}\n                                </Text>\n                            </a>\n                        </div>\n                    )}\n                    {is_mobile && mobileOSDetect() === 'iOS' && (\n                        <div className='cfd-trade-modal__download-center-app-ctrader-container'>\n                            <Text\n                                className='cfd-trade-modal__download-center-app-ctrader__banner-text'\n                                align='center'\n                                size='xs'\n                                weight='bold'\n                            >\n                                <Localize i18n_default_text='Coming soon on IOS' />\n                            </Text>\n                            <Text\n                                className='cfd-trade-modal__download-center-app-ctrader__banner-text'\n                                align='center'\n                                size='xxs'\n                            >\n                                <Localize i18n_default_text='cTrader is only available on desktop for now.' />\n                            </Text>\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n            {mobileOSDetect() !== 'iOS' && (\n                <div className='cfd-trade-modal__download-center-description'>{downloadCenterDescription()}</div>\n            )}\n\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    {platform !== CFD_PLATFORMS.CTRADER && (\n                        <div className='cfd-trade-modal__download-center-options--mobile-links--apple'>\n                            <a href={mobileDownloadLink(platform, 'ios')} target='_blank' rel='noopener noreferrer'>\n                                <Icon icon='IcInstallationApple' width={isMobile() ? '160' : '130'} height={40} />\n                            </a>\n                        </div>\n                    )}\n                    {platform === CFD_PLATFORMS.CTRADER && mobileOSDetect() !== 'iOS' && (\n                        <a href={mobileDownloadLink(platform, 'android')} target='_blank' rel='noopener noreferrer'>\n                            <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                        </a>\n                    )}\n                    {platform !== CFD_PLATFORMS.CTRADER && (\n                        <React.Fragment>\n                            <a href={mobileDownloadLink(platform, 'android')} target='_blank' rel='noopener noreferrer'>\n                                <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                            </a>\n\n                            <a href={mobileDownloadLink(platform, 'huawei')} target='_blank' rel='noopener noreferrer'>\n                                <Icon icon='IcInstallationHuawei' width={135} height={40} />\n                            </a>\n                        </React.Fragment>\n                    )}\n                </div>\n                {!isMobile() && (\n                    <div className='cfd-trade-modal__download-center-options--qrcode'>\n                        {getPlatformQRCode(platform)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TradeModal;\n","export const CFD_PLATFORMS = {\n    MT5: 'mt5',\n    DXTRADE: 'dxtrade',\n    DERIVEZ: 'derivez',\n    CTRADER: 'ctrader',\n    CFD: 'cfd',\n    CFDS: 'CFDs',\n} as const;\n\nexport const CATEGORY = {\n    DEMO: 'demo',\n    REAL: 'real',\n} as const;\n\nexport const MARKET_TYPE = {\n    SYNTHETIC: 'synthetic',\n    GAMING: 'gaming',\n    FINANCIAL: 'financial',\n    ALL: 'all',\n} as const;\n\nexport const MOBILE_PLATFORMS = {\n    IOS: 'ios',\n    HAUWEI: 'huawei',\n    ANDROID: 'android',\n} as const;\n\nexport const DESKTOP_PLATFORMS = {\n    WINDOWS: 'windows',\n    LINUX: 'linux',\n    MACOS: 'macos',\n} as const;\n\nexport const REGION = {\n    EU: 'EU',\n    NON_EU: 'Non-EU',\n} as const;\n\nexport const JURISDICTION = {\n    SVG: 'svg',\n    BVI: 'bvi',\n    VANUATU: 'vanuatu',\n    LABUAN: 'labuan',\n    MALTA_INVEST: 'maltainvest',\n} as const;\n\nexport const MARKET_TYPE_SHORTCODE = {\n    SYNTHETIC_SVG: 'synthetic_svg',\n    SYNTHETIC_BVI: 'synthetic_bvi',\n    SYNTHETIC_VANUATU: 'synthetic_vanuatu',\n    GAMING: 'gaming',\n    FINANCIAL_SVG: 'financial_svg',\n    FINANCIAL_BVI: 'financial_bvi',\n    FINANCIAL_VANUATU: 'financial_vanuatu',\n    FINANCIAL_LABUAN: 'financial_labuan',\n    FINANCIAL_MALTA_INVEST: 'financial_maltainvest',\n    ALL_SVG: 'all_svg',\n    ALL_DXTRADE: 'all_',\n} as const;\n","import { OSDetect, getPlatformFromUrl } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TCFDsPlatformType, TMobilePlatforms } from 'Components/props.types';\nimport { CFD_PLATFORMS, MOBILE_PLATFORMS, DESKTOP_PLATFORMS, CATEGORY } from './cfd-config';\n\nconst platformsText = (platform: TCFDsPlatformType) => {\n    switch (platform) {\n        case CFD_PLATFORMS.CTRADER:\n            return 'cTrader';\n        case CFD_PLATFORMS.DERIVEZ:\n            return 'EZ';\n        case CFD_PLATFORMS.DXTRADE:\n            return 'X';\n        default:\n            return '';\n    }\n};\n\nconst platformsIcons = (platform: TCFDsPlatformType) => {\n    switch (platform) {\n        case CFD_PLATFORMS.DERIVEZ:\n            return 'DerivEz';\n        case CFD_PLATFORMS.DXTRADE:\n            return 'Dxtrade';\n        case CFD_PLATFORMS.CTRADER:\n            return 'Ctrader';\n        default:\n            return '';\n    }\n};\n\nconst getTitle = (market_type: string, is_eu_user: boolean) => {\n    if (is_eu_user) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst { is_staging, is_test_link } = getPlatformFromUrl();\n\nconst REAL_DXTRADE_URL = 'https://dx.deriv.com';\nconst DEMO_DXTRADE_URL = 'https://dx-demo.deriv.com';\n\nconst CTRADER_DESKTOP_DOWNLOAD = 'https://getctrader.com/deriv/ctrader-deriv-setup.exe';\nconst CTRADER_DOWNLOAD_LINK = 'https://ctrader.com/download/';\n\nconst CTRADER_UAT_URL = 'https://ct-uat.deriv.com/';\nconst CTRADER_PRODUCTION_URL = 'https://ct.deriv.com/';\n\nconst DERIVEZ_URL = 'https://dqwsqxuu0r6t9.cloudfront.net/';\nconst DERIVEZ_IOS_APP_URL = 'https://apps.apple.com/my/app/deriv-go/id1550561298';\nconst DERIVEZ_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.app&pli=1';\nconst DERIVEZ_HUAWEI_APP_URL = 'https://appgallery.huawei.com/#/app/C103801913';\n\nconst DXTRADE_IOS_APP_URL = 'https://apps.apple.com/us/app/deriv-x/id1563337503';\nconst DXTRADE_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.dx';\nconst DXTRADE_HUAWEI_APP_URL = 'https://appgallery.huawei.com/app/C104633219';\n\nconst CTRADER_IOS_APP_URL = 'https://apps.apple.com/cy/app/ctrader/id767428811';\nconst CTRADER_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.ct';\n\nconst getBrokerName = () => 'Deriv.com Limited';\n\nconst CTRADER_URL = is_staging || is_test_link ? CTRADER_UAT_URL : CTRADER_PRODUCTION_URL;\n\nconst getTopUpConfig = () => {\n    return {\n        minimum_amount: 1000,\n        additional_amount: 10000,\n    };\n};\n\nconst getPlatformDXTradeDownloadLink = (platform?: TMobilePlatforms) => {\n    switch (platform) {\n        case MOBILE_PLATFORMS.IOS:\n            return DXTRADE_IOS_APP_URL;\n        case MOBILE_PLATFORMS.HAUWEI:\n            return DXTRADE_HUAWEI_APP_URL;\n        case MOBILE_PLATFORMS.ANDROID:\n            return DXTRADE_ANDROID_APP_URL;\n        default:\n            return '';\n    }\n};\n\nconst getPlatformDerivEZDownloadLink = (platform: TMobilePlatforms) => {\n    switch (platform) {\n        case MOBILE_PLATFORMS.IOS:\n            return DERIVEZ_IOS_APP_URL;\n        case MOBILE_PLATFORMS.ANDROID:\n            return DERIVEZ_ANDROID_APP_URL;\n        case MOBILE_PLATFORMS.HAUWEI:\n            return DERIVEZ_HUAWEI_APP_URL;\n        default:\n            return '';\n    }\n};\n\nconst getPlatformCTraderDownloadLink = (platform: TMobilePlatforms) => {\n    switch (platform) {\n        case MOBILE_PLATFORMS.IOS:\n            return CTRADER_IOS_APP_URL;\n        case MOBILE_PLATFORMS.ANDROID:\n            return CTRADER_ANDROID_APP_URL;\n        case MOBILE_PLATFORMS.HAUWEI:\n            return '';\n        default:\n            return CTRADER_ANDROID_APP_URL;\n    }\n};\n\nconst getPlatformMt5DownloadLink = (platform: string | undefined = undefined) => {\n    switch (platform || OSDetect()) {\n        case DESKTOP_PLATFORMS.WINDOWS:\n            return 'https://download.mql5.com/cdn/web/deriv.com.limited/mt5/deriv5setup.exe';\n        case DESKTOP_PLATFORMS.LINUX:\n            return 'https://www.metatrader5.com/en/terminal/help/start_advanced/install_linux';\n        case MOBILE_PLATFORMS.IOS:\n            return 'https://download.mql5.com/cdn/mobile/mt5/ios?server=Deriv-Demo,Deriv-Server,Deriv-Server-02';\n        case DESKTOP_PLATFORMS.MACOS:\n            return 'https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/MetaTrader5.dmg';\n        case MOBILE_PLATFORMS.HAUWEI:\n            return 'https://appgallery.huawei.com/#/app/C102015329';\n        case MOBILE_PLATFORMS.ANDROID:\n            return 'https://download.mql5.com/cdn/mobile/mt5/android?server=Deriv-Demo,Deriv-Server,Deriv-Server-02';\n        default:\n            return '';\n    }\n};\n\nconst getDXTradeWebTerminalLink = (category: string, token?: string) => {\n    let url = category === CATEGORY.REAL ? REAL_DXTRADE_URL : DEMO_DXTRADE_URL;\n\n    if (token) {\n        url += `?token=${token}`;\n    }\n\n    return url;\n};\n\nconst getCTraderWebTerminalLink = (category: string, token?: string) => {\n    return `${CTRADER_URL}${token && `?token=${token}`}`;\n};\n\nconst getDerivEzWebTerminalLink = (category: string, token?: string) => {\n    let url = DERIVEZ_URL;\n\n    if (token) {\n        url += `?lang=en&token=${token}`;\n    }\n\n    return url;\n};\n\nexport {\n    REAL_DXTRADE_URL,\n    DEMO_DXTRADE_URL,\n    CTRADER_URL,\n    DERIVEZ_URL,\n    CTRADER_DOWNLOAD_LINK,\n    getBrokerName,\n    platformsText,\n    getPlatformDXTradeDownloadLink,\n    getPlatformCTraderDownloadLink,\n    getPlatformDerivEZDownloadLink,\n    getPlatformMt5DownloadLink,\n    CTRADER_DESKTOP_DOWNLOAD,\n    getDXTradeWebTerminalLink,\n    getCTraderWebTerminalLink,\n    platformsIcons,\n    getTitle,\n    getDerivEzWebTerminalLink,\n    getTopUpConfig,\n};\n","import { localize } from '@deriv/translations';\nimport { Jurisdiction } from '@deriv/shared';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\nexport type TDerivezCompanies = ReturnType<typeof getDerivezCompanies>;\nexport type TCTraderCompanies = ReturnType<typeof getCTraderCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getCTraderCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('All'),\n    };\n    return {\n        demo: {\n            all: {\n                ctrader_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('All'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean) => {\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: localize('Swap-Free'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? localize('CFDs') : localize('Financial'),\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: localize('Swap-Free SVG'),\n            },\n            derivez: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Demo'),\n                short_title: localize('cTrader'),\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            financial_demo: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Real'),\n                short_title: localize('cTrader'),\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            derivez: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_v: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived Vanuatu'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getDerivezCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 1000,\n        short_title: localize('CFDs'),\n    };\n    return {\n        demo: {\n            all: {\n                derivez_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                derivez_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport { useStore } from '@deriv/stores';\nimport type { TCFDStore } from '../../../../types/cfd-store.types';\n\nconst CFDStoreContext = createContext<TCFDStore | null>(null);\n\nexport const CFDStoreProvider = ({ children }: PropsWithChildren<unknown>) => {\n    const { modules } = useStore();\n\n    return (\n        <CFDStoreContext.Provider\n            // value={memoizedValue}\n            value={modules?.cfd || {}}\n        >\n            {children}\n        </CFDStoreContext.Provider>\n    );\n};\n\nexport const useCfdStore = () => {\n    const store = useContext(CFDStoreContext);\n\n    if (!store) {\n        throw new Error('useCfdStore must be used within CfdStoreContext');\n    }\n\n    return store;\n};\n","import { action, intercept, makeObservable, observable, reaction, toJS, when } from 'mobx';\n\nimport { isEmptyObject, isProduction, Validator } from '@deriv/shared';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import { action, computed, observable, reaction, runInAction, makeObservable, override } from 'mobx';\nimport { getAccountListKey, getAccountTypeFields, CFD_PLATFORMS, WS, Jurisdiction } from '@deriv/shared';\nimport BaseStore from '../../base-store';\nimport { getDxCompanies, getMtCompanies, getDerivezCompanies } from './Helpers/cfd-config';\n\nexport default class CFDStore extends BaseStore {\n    is_compare_accounts_visible = false;\n    is_cfd_personal_details_modal_visible = false;\n    is_jurisdiction_modal_visible = false;\n    is_mt5_trade_modal_visible = false;\n    jurisdiction_selected_shortcode = '';\n\n    account_type = {\n        category: '',\n        type: '',\n    };\n\n    mt5_trade_account = {};\n    new_account_response = {};\n    map_type = {};\n    has_cfd_error = false;\n    error_message = '';\n\n    is_account_being_created = false;\n    is_cfd_success_dialog_enabled = false;\n    is_mt5_financial_stp_modal_open = false;\n    is_cfd_password_modal_enabled = false;\n\n    current_account = undefined; // this is a tmp value, don't rely on it, unless you set it first.\n\n    error_type = undefined;\n\n    is_cfd_verification_modal_visible = false;\n    dxtrade_tokens = {\n        demo: '',\n        real: '',\n    };\n    derivez_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    ctrader_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    real_synthetic_accounts_existing_data = [];\n    real_financial_accounts_existing_data = [];\n    real_swapfree_accounts_existing_data = [];\n\n    constructor({ root_store }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            is_compare_accounts_visible: observable,\n            is_cfd_personal_details_modal_visible: observable,\n            is_jurisdiction_modal_visible: observable,\n            is_mt5_trade_modal_visible: observable,\n            jurisdiction_selected_shortcode: observable,\n            account_type: observable,\n            mt5_trade_account: observable,\n            new_account_response: observable,\n            map_type: observable,\n            has_cfd_error: observable,\n            error_message: observable,\n            is_account_being_created: observable,\n            is_cfd_success_dialog_enabled: observable,\n            is_mt5_financial_stp_modal_open: observable,\n            is_cfd_password_modal_enabled: observable,\n            current_account: observable,\n            is_cfd_verification_modal_visible: observable,\n            error_type: observable,\n            dxtrade_tokens: observable,\n            ctrader_tokens: observable,\n            derivez_tokens: observable,\n            account_title: computed,\n            current_list: computed,\n            has_created_account_for_selected_jurisdiction: computed,\n            has_submitted_cfd_personal_details: computed,\n            onMount: action.bound,\n            onUnmount: override,\n            checkShouldOpenAccount: action.bound,\n            realAccountSignupEndListener: action.bound,\n            resetFormErrors: action.bound,\n            clearCFDError: action.bound,\n            createCFDAccount: action.bound,\n            disableCFDPasswordModal: action.bound,\n            enableCFDPasswordModal: action.bound,\n            getName: action.bound,\n            openMT5Account: action.bound,\n            openCFDAccount: action.bound,\n            beginRealSignupForMt5: action.bound,\n            enableMt5FinancialStpModal: action.bound,\n            setAccountType: action.bound,\n            setCurrentAccount: action.bound,\n            setMT5TradeAccount: action.bound,\n            setIsAccountBeingCreated: action.bound,\n            setError: action.bound,\n            setCFDNewAccount: action.bound,\n            setCFDSuccessDialog: action.bound,\n            getAccountStatus: action.bound,\n            creatMT5Password: action.bound,\n            submitMt5Password: action.bound,\n            createCFDPassword: action.bound,\n            submitCFDPassword: action.bound,\n            toggleCompareAccountsModal: action.bound,\n            getRealSyntheticAccountsExistingData: action.bound,\n            getRealFinancialAccountsExistingData: action.bound,\n            getRealSwapfreeAccountsExistingData: action.bound,\n            toggleJurisdictionModal: action.bound,\n            toggleMT5TradeModal: action.bound,\n            disableMt5FinancialStpModal: action.bound,\n            topUpVirtual: action.bound,\n            sendVerifyEmail: action.bound,\n            setJurisdictionSelectedShortcode: action.bound,\n            toggleCFDVerificationModal: action.bound,\n            setDxtradeToken: action.bound,\n            setCTraderToken: action.bound,\n            loadDxtradeTokens: action.bound,\n            loadCTraderTokens: action.bound,\n            setDerivezToken: action.bound,\n            loadDerivezTokens: action.bound,\n        });\n\n        // reaction(\n        //     () => [this.root_store.client.dxtrade_accounts_list],\n        //     () => {\n        //         if (this.root_store.client.dxtrade_accounts_list.length > 0) {\n        //             this.loadDxtradeTokens();\n        //         }\n        //     }\n        // );\n\n        reaction(\n            () => [this.root_store.client.derivez_accounts_list],\n            () => {\n                if (this.root_store.client.derivez_accounts_list.length > 0) {\n                    this.loadDerivezTokens();\n                }\n            }\n        );\n\n        reaction(\n            () => [this.root_store.client.ctrader_accounts_list],\n            () => {\n                if (this.root_store.client.ctrader_accounts_list.length > 0) {\n                    this.loadCTraderTokens();\n                }\n            }\n        );\n    }\n\n    get account_title() {\n        return this.account_type.category\n            ? getMtCompanies(this.root_store.traders_hub.show_eu_related_content)[this.account_type.category][\n                  this.account_type.type\n              ].title\n            : '';\n    }\n\n    get has_submitted_cfd_personal_details() {\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            this.root_store.client.account_settings;\n        return !!(citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason);\n    }\n\n    get current_list() {\n        const list = {};\n        const show_eu_related_content = this.root_store.traders_hub.show_eu_related_content;\n        this.root_store.client.mt5_login_list\n            .filter(acc =>\n                show_eu_related_content\n                    ? acc.landing_company_short === 'maltainvest'\n                    : acc.landing_company_short !== 'maltainvest'\n            )\n            .forEach(account => {\n                // e.g. mt5.real.financial_stp\n                list[getAccountListKey(account, CFD_PLATFORMS.MT5, account.landing_company_short)] = {\n                    ...account,\n                };\n            });\n\n        this.root_store.client.dxtrade_accounts_list.forEach(account => {\n            // e.g. dxtrade.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DXTRADE)] = {\n                ...account,\n            };\n        });\n        this.root_store.client.ctrader_accounts_list.forEach(account => {\n            list[getAccountListKey(account, CFD_PLATFORMS.CTRADER)] = {\n                ...account,\n            };\n        });\n\n        this.root_store.client.derivez_accounts_list.forEach(account => {\n            // e.g. derivez.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DERIVEZ)] = {\n                ...account,\n            };\n        });\n\n        return list;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get mt5_companies() {\n        return getMtCompanies(this.root_store.client.is_eu);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get dxtrade_companies() {\n        return getDxCompanies();\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get derivez_companies() {\n        return getDerivezCompanies();\n    }\n\n    get has_created_account_for_selected_jurisdiction() {\n        switch (this.account_type.type) {\n            case 'synthetic':\n                return this.real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            case 'all':\n                return this.real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            default:\n                return this.real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n        }\n    }\n\n    onMount() {\n        this.checkShouldOpenAccount();\n        this.onRealAccountSignupEnd(this.realAccountSignupEndListener);\n        this.root_store.ui.is_cfd_page = true;\n    }\n\n    onUnmount() {\n        this.disposeRealAccountSignupEnd();\n        this.root_store.ui.is_cfd_page = false;\n    }\n\n    // other platforms can redirect to here using account switcher's `Add` account button\n    // so in that case we should open the corresponding account opening modal on load/component update\n    checkShouldOpenAccount() {\n        const account_type = sessionStorage.getItem('open_cfd_account_type');\n        if (account_type) {\n            const [category, platform, type, set_password] = account_type.split('.');\n            this.createCFDAccount({ category, platform, type, set_password });\n            sessionStorage.removeItem('open_cfd_account_type');\n        }\n    }\n\n    setIsAccountBeingCreated(is_account_being_created) {\n        this.is_account_being_created = is_account_being_created;\n    }\n\n    realAccountSignupEndListener() {\n        const post_signup = JSON.parse(sessionStorage.getItem('post_real_account_signup'));\n        if (post_signup && post_signup.category && post_signup.type) {\n            sessionStorage.removeItem('post_real_account_signup');\n            this.enableCFDPasswordModal();\n        }\n        return Promise.resolve();\n    }\n\n    resetFormErrors() {\n        this.error_message = '';\n        this.error_type = undefined;\n        this.has_cfd_error = false;\n    }\n\n    clearCFDError() {\n        this.resetFormErrors();\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    async createCFDAccount({ category, platform, type, set_password }) {\n        this.clearCFDError();\n        this.setAccountType({\n            category,\n            type,\n        });\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (category === 'real') {\n                this.realCFDSignup(set_password);\n            } else {\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.CTRADER) {\n            this.setJurisdictionSelectedShortcode('svg');\n            if (this.account_type.category === 'demo') {\n                this.setIsAccountBeingCreated(true);\n            }\n            const account_creation_values = {\n                platform,\n                account_type: this.account_type.category,\n                market_type: this.account_type.type,\n                company: this.jurisdiction_selected_shortcode,\n            };\n            const response = await this.openCFDAccount(account_creation_values);\n            if (!response.error) {\n                this.setError(false);\n                this.enableCFDPasswordModal();\n                this.setCFDSuccessDialog(true);\n\n                const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(\n                    CFD_PLATFORMS.CTRADER\n                );\n                this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n                WS.transferBetweenAccounts();\n                this.setIsAccountBeingCreated(false);\n            } else {\n                this.setError(true, response.error);\n                this.setIsAccountBeingCreated(false);\n            }\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (category === 'real') {\n                this.toggleJurisdictionModal();\n            } else {\n                if (this.root_store.traders_hub.show_eu_related_content) {\n                    this.setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                } else this.setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.DERIVEZ) {\n            this.setIsAccountBeingCreated(true);\n            this.setJurisdictionSelectedShortcode('svg');\n            const values = {\n                platform,\n                account_type: this.account_type.category,\n                market_type: this.account_type.type,\n                company: this.jurisdiction_selected_shortcode,\n            };\n            const response = await this.openCFDAccount(values);\n            if (!response.error) {\n                this.enableCFDPasswordModal();\n                this.setCFDSuccessDialog(true);\n                const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n                this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n                this.setCFDNewAccount(response.trading_platform_new_account);\n                this.setIsAccountBeingCreated(false);\n            } else {\n                this.setError(true, response.error);\n                this.setIsAccountBeingCreated(false);\n            }\n        }\n    }\n\n    demoCFDSignup() {\n        this.enableCFDPasswordModal();\n    }\n\n    disableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    enableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = true;\n    }\n\n    getName() {\n        const { first_name } = this.root_store.client.account_settings && this.root_store.client.account_settings;\n        const title = this.mt5_companies[this.account_type.category][this.account_type.type].title;\n\n        // First name is not set when user has no real account\n        return first_name ? [first_name, title].join(' ') : title;\n    }\n\n    openMT5Account(values) {\n        const name = this.getName();\n        const leverage = this.mt5_companies[this.account_type.category][this.account_type.type].leverage;\n        const type_request = getAccountTypeFields(this.account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            ...(this.account_type.type === 'all' ? { sub_account_category: 'swap_free' } : {}),\n            ...(values.server ? { server: values.server } : {}),\n            ...(this.jurisdiction_selected_shortcode ? { company: this.jurisdiction_selected_shortcode } : {}),\n            ...(this.jurisdiction_selected_shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: 'financial',\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openCFDAccount(values) {\n        return WS.tradingPlatformNewAccount({\n            password: CFD_PLATFORMS.DXTRADE ? values.password : '',\n            platform: values.platform,\n            account_type: this.account_type.category,\n            market_type:\n                this.account_type.type === 'dxtrade' ||\n                this.account_type.type === 'cTrader' ||\n                this.account_type.type === 'derivez'\n                    ? 'all'\n                    : this.account_type.type,\n            company: CFD_PLATFORMS.DERIVEZ ? this.jurisdiction_selected_shortcode : '',\n        });\n    }\n\n    beginRealSignupForMt5() {\n        sessionStorage.setItem('post_real_account_signup', JSON.stringify(this.account_type));\n        this.root_store.ui.openRealAccountSignup('svg');\n    }\n\n    realCFDSignup(set_password) {\n        switch (this.account_type.type) {\n            case 'financial':\n                this.enableCFDPasswordModal();\n                break;\n            case 'financial_stp':\n                this.root_store.client.fetchResidenceList();\n                this.root_store.client.fetchStatesList();\n                this.root_store.client.fetchAccountSettings();\n                if (set_password) this.enableCFDPasswordModal();\n                else this.enableMt5FinancialStpModal();\n                break;\n            case 'synthetic':\n            case 'dxtrade':\n            case 'all':\n                this.enableCFDPasswordModal();\n                break;\n            default:\n                throw new Error('Cannot determine mt5 account signup.');\n        }\n    }\n\n    enableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = true;\n    }\n\n    setAccountType(account_type) {\n        this.account_type = account_type;\n    }\n\n    setCurrentAccount(data, meta) {\n        this.current_account = {\n            ...meta,\n            ...data,\n        };\n    }\n\n    setMT5TradeAccount(mt5_trade_account) {\n        this.mt5_trade_account = mt5_trade_account;\n    }\n\n    setError(state, obj) {\n        this.has_cfd_error = state;\n        this.error_message = obj ? obj.message : '';\n        this.error_type = obj?.code ?? undefined;\n    }\n\n    setCFDNewAccount(cfd_new_account) {\n        this.new_account_response = cfd_new_account;\n    }\n\n    setCFDSuccessDialog(value) {\n        this.is_cfd_success_dialog_enabled = !!value;\n    }\n\n    async getAccountStatus(platform) {\n        const should_load_account_status =\n            (platform === CFD_PLATFORMS.MT5 && this.root_store.client.is_mt5_password_not_set) ||\n            (platform === CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set);\n\n        if (should_load_account_status) {\n            await WS.getAccountStatus();\n        }\n    }\n\n    async creatMT5Password(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.MT5,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n        return false;\n    }\n\n    async submitMt5Password(values, actions) {\n        if (this.root_store.client.is_mt5_password_not_set) {\n            const has_error = await this.creatMT5Password(values, actions);\n            if (has_error) return;\n        }\n\n        this.resetFormErrors();\n        const response = await this.openMT5Account(values);\n        if (!response.error) {\n            actions.setStatus({ success: true });\n            actions.setSubmitting(false);\n            this.setError(false);\n            this.setCFDSuccessDialog(true);\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n            const mt5_login_list_response = await WS.authorized.mt5LoginList();\n            this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n            WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n            this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n            this.setCFDNewAccount(response.mt5_new_account);\n        } else {\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n        }\n    }\n\n    async createCFDPassword(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.DXTRADE,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n\n        return false;\n    }\n\n    async submitCFDPassword(values, actions) {\n        if (CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set) {\n            const has_error = await this.createCFDPassword(values, actions);\n            if (has_error) return;\n        }\n\n        const response = await this.openCFDAccount(values);\n\n        if (response.error) {\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return;\n        }\n\n        actions.setStatus({ success: true });\n        actions.setSubmitting(false);\n        this.setError(false);\n        this.setCFDSuccessDialog(true);\n        await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n\n        const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n        this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n\n        WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n        this.setCFDNewAccount(response.trading_platform_new_account);\n    }\n\n    toggleCompareAccountsModal() {\n        this.is_compare_accounts_visible = !this.is_compare_accounts_visible;\n    }\n\n    getRealSyntheticAccountsExistingData(real_synthetic_accounts_existing_data) {\n        this.real_synthetic_accounts_existing_data = real_synthetic_accounts_existing_data;\n    }\n\n    getRealFinancialAccountsExistingData(real_financial_accounts_existing_data) {\n        this.real_financial_accounts_existing_data = real_financial_accounts_existing_data;\n    }\n\n    getRealSwapfreeAccountsExistingData(real_swapfree_accounts_existing_data) {\n        this.real_swapfree_accounts_existing_data = real_swapfree_accounts_existing_data;\n    }\n\n    toggleJurisdictionModal() {\n        this.is_jurisdiction_modal_visible = !this.is_jurisdiction_modal_visible;\n    }\n\n    toggleMT5TradeModal() {\n        this.is_mt5_trade_modal_visible = !this.is_mt5_trade_modal_visible;\n    }\n\n    disableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = false;\n    }\n\n    async topUpVirtual(platform) {\n        this.root_store.ui.setTopUpInProgress(true);\n        let response;\n\n        switch (platform) {\n            case CFD_PLATFORMS.DXTRADE: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.CTRADER: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.CTRADER,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.MT5: {\n                response = await WS.authorized.mt5Deposit({\n                    to_mt5: this.current_account.login,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.DERIVEZ: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.DERIVEZ,\n                    to_account: this.current_account.login,\n                });\n                break;\n            }\n            default: {\n                response.error = 'Invalid platform';\n                break;\n            }\n        }\n\n        if (!response.error) {\n            let new_balance;\n            switch (platform) {\n                case CFD_PLATFORMS.DXTRADE: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DXTRADE)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.dxtrade_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.CTRADER: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.CTRADER)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.ctrader_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.MT5: {\n                    await WS.authorized.mt5LoginList().then(this.root_store.client.responseMt5LoginList);\n\n                    new_balance = this.root_store.client.mt5_login_list.find(\n                        item => item.login === this.current_account.login\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.DERIVEZ: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DERIVEZ)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.derivez_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n            runInAction(() => {\n                // Get new current account\n                this.root_store.ui.is_top_up_virtual_open = false;\n                this.current_account.balance = new_balance;\n            });\n            setTimeout(() => {\n                runInAction(() => {\n                    this.root_store.ui.is_top_up_virtual_success = true;\n                });\n            }, 250);\n        } else {\n            // eslint-disable-next-line no-console\n            console.error(response);\n        }\n        this.root_store.ui.setTopUpInProgress(false);\n    }\n\n    sendVerifyEmail() {\n        return WS.verifyEmail(this.root_store.client.email, 'trading_platform_investor_password_reset');\n    }\n\n    setDxtradeToken(response, server) {\n        if (!response.error) {\n            const { dxtrade } = response.service_token;\n            this.dxtrade_tokens[server] = dxtrade.token;\n        }\n    }\n\n    setCTraderToken(response, server) {\n        if (!response.error) {\n            const { ctrader } = response.service_token;\n            this.ctrader_tokens[server] = ctrader.token;\n        }\n    }\n\n    setDerivezToken(response, server) {\n        if (!response.error) {\n            const { pandats } = response.service_token;\n            this.derivez_tokens[server] = pandats.token;\n        }\n    }\n\n    loadDxtradeTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.dxtrade_accounts_list.some(\n                account => account.account_type === account_type\n            );\n            if (!this.dxtrade_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DXTRADE, account_type).then(response =>\n                    this.setDxtradeToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    loadCTraderTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.ctrader_accounts_list.some(\n                account => account.account_type === account_type\n            );\n            if (!this.ctrader_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.CTRADER, account_type).then(response =>\n                    this.setCTraderToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    loadDerivezTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.derivez_accounts_list.some(\n                account => account.account_type === account_type\n            );\n\n            if (!this.derivez_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DERIVEZ, account_type).then(response =>\n                    this.setDerivezToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    static async changePassword({ login, old_password, new_password, password_type }) {\n        let response;\n\n        if (password_type === 'investor') {\n            response = await WS.authorized.tradingPlatformInvestorPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        } else {\n            response = await WS.authorized.tradingPlatformPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        }\n\n        return response?.error?.message;\n    }\n\n    setJurisdictionSelectedShortcode(shortcode) {\n        this.jurisdiction_selected_shortcode = shortcode;\n    }\n\n    toggleCFDVerificationModal() {\n        this.is_cfd_verification_modal_visible = !this.is_cfd_verification_modal_visible;\n    }\n}\n","/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach(attr => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash =\n        static_hash || (document.querySelector('script[src*=\"main\"]').getAttribute('src') || '').split('.')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n","import React from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { TMissingRealAccount } from './props.types';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\n\nconst MissingRealAccount = ({ onClickSignup, platform }: TMissingRealAccount) => (\n    <div className='cfd-dashboard__missing-real'>\n        <div className='cfd-dashboard__missing-real-wrapper'>\n            <Text className='cfd-dashboard__missing-real--heading' as='h1' weight='bold' line_height='l'>\n                {platform === CFD_PLATFORMS.MT5 ? (\n                    <Localize i18n_default_text='You need a real account (fiat currency or cryptocurrency) in Deriv to create a real Deriv MT5 account.' />\n                ) : (\n                    <Localize i18n_default_text='To create a Deriv X real account, create a Deriv real account first.' />\n                )}\n            </Text>\n        </div>\n        <div>\n            <Button className='cfd-dashboard__missing-real--button' onClick={onClickSignup} type='button' primary large>\n                <span className='btn__text'>\n                    <Localize i18n_default_text='Create a Deriv account' />\n                </span>\n            </Button>\n        </div>\n    </div>\n);\n\nexport default MissingRealAccount;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype LoadingProps = {\n    className?: string;\n    is_invisible?: boolean;\n    theme?: string;\n    id?: string;\n};\n\nconst Loading = ({ className, is_invisible, theme, id }: LoadingProps) => (\n    <div\n        id={id}\n        data-testid='dt_barspinner'\n        className={classNames('barspinner', `barspinner--${theme || 'dark'}`, { invisible: is_invisible }, className)}\n    >\n        {Array.from(new Array(5)).map((x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport Loading from '../templates/_common/components/loading';\n\nconst LoadingCFDRealAccountDisplay = () => (\n    <div className='cfd-real-accounts-display'>\n        <Loading />\n    </div>\n);\n\nexport default LoadingCFDRealAccountDisplay;\n","import { CFD_PLATFORMS } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nexport const general_messages = {\n    getWelcomeHeader: (is_logged_in, platform) => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (is_logged_in) return localize('Welcome to your Deriv X dashboard');\n            return localize('Welcome to Deriv X');\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            return localize('Welcome to Deriv MT5 dashboard');\n        }\n        return localize('');\n    },\n    getDownloadHeader: platform => {\n        if (platform === CFD_PLATFORMS.DXTRADE)\n            return localize('Run Deriv X on your browser or download the mobile app');\n        else if (platform === CFD_PLATFORMS.MT5)\n            return localize('Run MT5 from your browser or download the MT5 app for your devices');\n        return '';\n    },\n    getFinancialAccountDescriptor: (platform, show_eu_related_content) => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            return localize('Trade forex, basket indices, commodities, and cryptocurrencies with high leverage.');\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (show_eu_related_content) {\n                return localize(\n                    'Trade CFDs on forex, stocks, stock indices, synthetic indices, cryptocurrencies, and commodities with leverage.'\n                );\n            }\n            return localize('Trade CFDs on forex, stocks & stock indices, commodities, and crypto.');\n        }\n        return '';\n    },\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { QRCode } from 'react-qrcode';\nimport { Icon, Text, DesktopWrapper, MobileWrapper } from '@deriv/components';\nimport { CFD_PLATFORMS, isDesktop, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    getDXTradeWebTerminalLink,\n    getPlatformDXTradeDownloadLink,\n    getPlatformMt5DownloadLink,\n} from '../Helpers/constants';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport { TCFDDashboardContainer } from './props.types';\n\ntype TDxtradeDesktopDownloadProps = {\n    active_index: TCFDDashboardContainer['active_index'];\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n};\n\ntype TMobileDownloadProps = {\n    is_dark_mode_on: TCFDDashboardContainer['is_dark_mode_on'];\n    platform: TCFDDashboardContainer['platform'];\n};\n\nconst mobileDownloadLink = (platform: string, type: 'ios' | 'android' | 'huawei') => {\n    return platform === CFD_PLATFORMS.MT5 ? getPlatformMt5DownloadLink(type) : getPlatformDXTradeDownloadLink(type);\n};\n\nconst DxtradeDesktopDownload = ({ active_index, dxtrade_tokens }: TDxtradeDesktopDownloadProps) => (\n    <React.Fragment>\n        <h1 className='cfd-dashboard__download-container-heading'>{localize('Run Deriv X on your browser')}</h1>\n        <a\n            className='cfd-dashboard__download-container-dxtrade-button'\n            href={getDXTradeWebTerminalLink(\n                active_index === 0 ? 'real' : 'demo',\n                dxtrade_tokens && dxtrade_tokens[active_index === 0 ? 'real' : 'demo']\n            )}\n            target='_blank'\n            rel='noopener noreferrer'\n        >\n            <Icon\n                className='cfd-dashboard__download-container-dxtrade-button-icon'\n                icon='IcRebrandingDxtrade'\n                size={32}\n            />\n            <div className='cfd-dashboard__download-container-dxtrade-button-text'>\n                <Text color='colored-background' size='xxs' weight='bold'>\n                    <Localize i18n_default_text='Web terminal' />\n                </Text>\n            </div>\n        </a>\n    </React.Fragment>\n);\n\nconst MT5DesktopDownload = () => (\n    <React.Fragment>\n        <div className='cfd-dashboard__download-container-links-icons'>\n            <Icon icon='IcMt5DeviceDesktop' width={118} height={85} />\n            <Icon icon='IcMt5DeviceLaptop' width={75} height={51} />\n        </div>\n        <div className='cfd-dashboard__download-container-links-download-buttons'>\n            <a href={getPlatformMt5DownloadLink('windows')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationWindows' width={138} height={40} />\n            </a>\n            <a href={getPlatformMt5DownloadLink('macos')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationMacos' width={138} height={40} />\n            </a>\n            <a href={getPlatformMt5DownloadLink('linux')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationLinux' width={138} height={40} />\n            </a>\n        </div>\n        <Text as='p' align='center' size='xxxs' className='cfd-dashboard__download-center--hint'>\n            <Localize i18n_default_text='The MT5 desktop app is not supported by Windows XP, Windows 2003, and Windows Vista.' />\n        </Text>\n    </React.Fragment>\n);\n\nconst MobileDownload = ({ is_dark_mode_on, platform }: TMobileDownloadProps) => (\n    <React.Fragment>\n        {platform === CFD_PLATFORMS.DXTRADE && (\n            <h1 className='cfd-dashboard__download-container-heading'>{localize('Download the Deriv X mobile app')}</h1>\n        )}\n        <div\n            className={classnames({\n                'cfd-dashboard__download-container-links-icons': isMobile() || platform === CFD_PLATFORMS.MT5,\n            })}\n        >\n            {isMobile() && platform === CFD_PLATFORMS.DXTRADE && (\n                <React.Fragment>\n                    <Icon\n                        icon={is_dark_mode_on ? 'IcDxtradeDeviceTabletLight' : 'IcDxtradeDeviceTablet'}\n                        width={133}\n                        height={106}\n                    />\n                    <Icon\n                        icon={is_dark_mode_on ? 'IcDxtradeDevicePhoneLight' : 'IcDxtradeDevicePhone'}\n                        width={48}\n                        height={74}\n                    />\n                </React.Fragment>\n            )}\n            {platform === CFD_PLATFORMS.MT5 && (\n                <React.Fragment>\n                    <Icon icon='IcMt5DeviceTablet' width={133} height={106} />\n                    <Icon icon='IcMt5DevicePhone' width={48} height={74} />\n                </React.Fragment>\n            )}\n        </div>\n        <div\n            className={classnames('cfd-dashboard__download-container-links-download-buttons', {\n                'cfd-dashboard__download-container-links-download-buttons--column':\n                    isMobile() && platform === CFD_PLATFORMS.MT5,\n            })}\n        >\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'ios')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationApple' width={135} height={40} />\n            </a>\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'android')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationGoogle' width={135} height={40} />\n            </a>\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'huawei')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationHuawei' width={135} height={40} />\n            </a>\n        </div>\n    </React.Fragment>\n);\n\nconst QRCodeBox = ({ platform }: { platform: string }) => (\n    <DesktopWrapper>\n        <div className='cfd-dashboard__download-container-qrcode'>\n            <QRCode value={mobileDownloadLink(platform, 'android')} size={160} />\n            <span className='cfd-dashboard__download-container-qrcode__hint'>\n                {localize('Scan the QR code to download the Deriv X Mobile App')}\n            </span>\n        </div>\n    </DesktopWrapper>\n);\n\nconst CFDDownloadContainer = ({ platform, is_dark_mode_on, active_index, dxtrade_tokens }: TCFDDashboardContainer) => (\n    <React.Fragment>\n        <MobileWrapper>\n            <Text\n                className='cfd-dashboard__download-container-mobile-hint'\n                color='general'\n                size='xxs'\n                weight='400'\n                align='center'\n            >\n                <Localize i18n_default_text='If you have the app, launch it to start trading.' />\n            </Text>\n        </MobileWrapper>\n        <div\n            className={classnames('cfd-dashboard__download-container', {\n                'cfd-dashboard__download-container--is-mt5': platform === CFD_PLATFORMS.MT5,\n            })}\n            data-testid='dt_cfd_dashboard_download_center_container'\n        >\n            {platform === CFD_PLATFORMS.MT5 && (\n                <h1 className='cfd-dashboard__download-container-heading'>\n                    {isDesktop() ? general_messages.getDownloadHeader(platform) : localize('Download the MT5 app')}\n                </h1>\n            )}\n            <div\n                className={classnames('cfd-dashboard__download-container-links', {\n                    'cfd-dashboard__download-container-links--is-mt5': platform === CFD_PLATFORMS.MT5,\n                })}\n            >\n                <DesktopWrapper>\n                    <div className='cfd-dashboard__download-container-links--desktop'>\n                        {platform === CFD_PLATFORMS.DXTRADE && (\n                            <DxtradeDesktopDownload active_index={active_index} dxtrade_tokens={dxtrade_tokens} />\n                        )}\n                        {platform === CFD_PLATFORMS.MT5 && <MT5DesktopDownload />}\n                    </div>\n                </DesktopWrapper>\n\n                <div className='cfd-dashboard__download-container-links--mobile'>\n                    <MobileDownload is_dark_mode_on={is_dark_mode_on} platform={platform} />\n                </div>\n            </div>\n\n            {platform === CFD_PLATFORMS.DXTRADE && <QRCodeBox platform={platform} />}\n        </div>\n    </React.Fragment>\n);\n\nexport default CFDDownloadContainer;\n","import React from 'react';\nimport { Dialog, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nconst SwitchToRealAccountModal = observer(() => {\n    const { ui } = useStore();\n\n    const {\n        is_switch_to_deriv_account_modal_visible: is_open,\n        openSwitchToRealAccountModal: onClose,\n        disableApp,\n        enableApp,\n    } = ui;\n\n    return (\n        <Dialog\n            className='switch-to-real-account-modal'\n            confirm_button_text={localize('Ok')}\n            onConfirm={onClose}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_closed_on_confirm\n            is_visible={is_open}\n        >\n            <Icon icon={'IcPoaLock'} size={60} />\n            <Text\n                className='da-icon-with-message__text'\n                as='p'\n                size={isMobile() ? 'xxs' : 'xs'}\n                color='general'\n                line_height='m'\n                align='center'\n            >\n                {localize('Switch to your real account to create a Deriv MT5 account')}\n            </Text>\n        </Dialog>\n    );\n});\n\nexport default SwitchToRealAccountModal;\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport classNames from 'classnames';\nimport { FormikValues } from 'formik';\n\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { Button, DesktopWrapper, Icon, MobileWrapper, Money, Text } from '@deriv/components';\nimport { getCFDPlatformLabel, isMobile, mobileOSDetect } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\n\nimport {\n    getCTraderWebTerminalLink,\n    getDerivEzWebTerminalLink,\n    getDXTradeWebTerminalLink,\n    getPlatformDXTradeDownloadLink,\n} from '../Helpers/constants';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nimport {\n    TAccountIconValues,\n    TCFDAccountCard,\n    TCFDAccountCardActionProps,\n    TTradingPlatformAccounts,\n    TTradingPlatformAvailableAccount,\n} from './props.types';\nimport { CFD_PLATFORMS, CATEGORY, MARKET_TYPE } from '../Helpers/cfd-config';\nimport { TMarketTypeSynthetic, TAccountCategory } from '../types/market-type.types';\nimport SpecBox from './specbox';\nimport PasswordBox from './passwordbox';\n\nconst account_icons: { [key: string]: TAccountIconValues } = {\n    mt5: {\n        synthetic: 'IcMt5SyntheticPlatform',\n        financial: 'IcMt5FinancialPlatform',\n        financial_stp: 'IcMt5FinancialStpPlatform',\n        cfd: 'IcMt5CfdPlatform',\n        all: 'IcMt5SwapFreePlatform',\n    },\n    // TODO: Line 30, 31 and 32 should be removed after real released.\n    dxtrade: {\n        synthetic: 'IcDxtradeSyntheticPlatform',\n        financial: 'IcDxtradeFinancialPlatform',\n        cfd: 'IcMt5CfdPlatform',\n        all: 'IcDxtradeDerivxPlatform',\n    },\n};\n\nconst AddAccountButton = React.forwardRef<HTMLDivElement, { onSelectAccount: () => void; is_disabled?: boolean }>(\n    ({ onSelectAccount, is_disabled }, ref) => {\n        return (\n            <div\n                onClick={is_disabled ? () => undefined : onSelectAccount}\n                className={classNames('cfd-account-card__add-server', {\n                    'cfd-account-card__add-server--disabled': is_disabled,\n                })}\n                ref={ref}\n            >\n                <span className='cfd-account-card__add-server--icon'>+</span>\n                <Localize i18n_default_text='Add account' />\n            </div>\n        );\n    }\n);\n\nAddAccountButton.displayName = 'AddAccountButton';\n\nconst CFDAccountCardAction = ({\n    button_label,\n    handleClickSwitchAccount,\n    has_real_account,\n    is_accounts_switcher_on,\n    is_button_primary,\n    is_disabled,\n    is_virtual,\n    onSelectAccount,\n    type,\n    platform,\n    title,\n    real_account_creation_unlock_date,\n    setShouldShowCooldownModal,\n}: TCFDAccountCardActionProps) => {\n    if (\n        is_virtual &&\n        type.category === CATEGORY.REAL &&\n        typeof handleClickSwitchAccount === 'function' &&\n        (platform === CFD_PLATFORMS.MT5 ? has_real_account && type.type === 'financial_stp' : true)\n    ) {\n        return (\n            <div className='cfd-account-card__action-wrapper'>\n                <Localize\n                    i18n_default_text='<0>Switch to your real account</0><1> to create a {{platform}} {{account_title}} account.</1>'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                        account_title: title === 'Deriv X' ? '' : title,\n                    }}\n                    components={[\n                        <a\n                            className={classNames('cfd-account-card__action-wrapper__link link link--orange', {\n                                'cfd-account-card__action-wrapper__link--disabled': is_accounts_switcher_on,\n                            })}\n                            key={0}\n                            onClick={handleClickSwitchAccount}\n                        />,\n                        <Text key={1} line_height='s' size='xxs' />,\n                    ]}\n                />\n            </div>\n        );\n    }\n    const lbl_add_account =\n        type.category === CATEGORY.REAL ? (\n            <Localize i18n_default_text='Add real account' />\n        ) : (\n            <Localize i18n_default_text='Add demo account' />\n        );\n    const cta_label = button_label || lbl_add_account;\n    return (\n        <Button\n            className='cfd-account-card__account-selection'\n            onClick={() => {\n                if (real_account_creation_unlock_date) {\n                    setShouldShowCooldownModal(true);\n                } else {\n                    onSelectAccount();\n                }\n            }}\n            type='button'\n            is_disabled={is_disabled}\n            primary={is_button_primary}\n            secondary={!is_button_primary}\n            large\n        >\n            {cta_label}\n        </Button>\n    );\n};\n\nconst CFDAccountCardComponent = observer(\n    ({\n        button_label,\n        commission_message,\n        descriptor,\n        existing_accounts_data,\n        has_banner,\n        has_cfd_account_error,\n        has_real_account,\n        is_accounts_switcher_on,\n        is_button_primary,\n        is_disabled,\n        is_logged_in,\n        is_virtual,\n        onClickFund,\n        onPasswordManager,\n        onSelectAccount,\n        platform,\n        specs,\n        title,\n        toggleAccountsDialog,\n        toggleShouldShowRealAccountsList,\n        type,\n    }: TCFDAccountCard) => {\n        const { ui, common, traders_hub, client } = useStore();\n\n        const { setShouldShowCooldownModal } = ui;\n        const { setAppstorePlatform } = common;\n        const { show_eu_related_content } = traders_hub;\n        const {\n            updateAccountStatus,\n            isEligibleForMoreRealMt5,\n            isEligibleForMoreDemoMt5Svg,\n            real_account_creation_unlock_date,\n        } = client;\n\n        const {\n            dxtrade_tokens,\n            derivez_tokens,\n            ctrader_tokens,\n            setAccountType,\n            setJurisdictionSelectedShortcode,\n            setMT5TradeAccount,\n            toggleCFDVerificationModal,\n            toggleMT5TradeModal,\n        } = useCfdStore();\n\n        const existing_data = existing_accounts_data?.length ? existing_accounts_data?.[0] : existing_accounts_data;\n\n        const should_show_extra_add_account_button =\n            is_logged_in &&\n            !show_eu_related_content &&\n            platform === CFD_PLATFORMS.MT5 &&\n            (type.category === CATEGORY.DEMO\n                ? isEligibleForMoreDemoMt5Svg(\n                      type.type as TTradingPlatformAvailableAccount['market_type'] | TMarketTypeSynthetic\n                  ) && !!existing_data\n                : isEligibleForMoreRealMt5(\n                      type.type as TTradingPlatformAvailableAccount['market_type'] | TMarketTypeSynthetic\n                  ) && !!existing_data);\n\n        const platform_icon = show_eu_related_content && platform === CFD_PLATFORMS.MT5 ? CFD_PLATFORMS.CFD : type.type;\n\n        const icon: React.ReactNode | null = type.type ? (\n            <Icon icon={account_icons[type.platform][platform_icon]} size={64} />\n        ) : null;\n        const has_popular_banner: boolean = type.type === MARKET_TYPE.SYNTHETIC;\n        const has_demo_banner: boolean = type.category === CATEGORY.DEMO;\n        const has_server_banner =\n            is_logged_in &&\n            existing_data &&\n            type.category === CATEGORY.REAL &&\n            type.type === MARKET_TYPE.SYNTHETIC &&\n            (existing_data as DetailsOfEachMT5Loginid)?.server_info;\n\n        const ref = React.useRef<HTMLDivElement | null>(null);\n        const wrapper_ref = React.useRef<HTMLDivElement | null>(null);\n        const button_ref = React.useRef<HTMLDivElement | null>(null);\n\n        const handleClickSwitchAccount: () => void = () => {\n            toggleShouldShowRealAccountsList?.(true);\n            toggleAccountsDialog?.(true);\n        };\n\n        const getDxtradeDownloadLink: () => string = () => {\n            const os = mobileOSDetect();\n            if (os === 'iOS') {\n                return getPlatformDXTradeDownloadLink('ios');\n            }\n            return getPlatformDXTradeDownloadLink('android');\n        };\n\n        const checkMultipleSvgAcc = () => {\n            const all_svg_acc: DetailsOfEachMT5Loginid[] = [];\n            existing_accounts_data?.map(acc => {\n                if (acc.landing_company_short === 'svg') {\n                    if (all_svg_acc.length) {\n                        all_svg_acc.forEach(svg_acc => {\n                            if (svg_acc.server !== acc.server) all_svg_acc.push(acc);\n                            return all_svg_acc;\n                        });\n                    } else {\n                        all_svg_acc.push(acc);\n                    }\n                }\n            });\n            return all_svg_acc;\n        };\n\n        const getServerName: (value: DetailsOfEachMT5Loginid) => string = React.useCallback(server => {\n            if (server) {\n                const server_region = (server as DetailsOfEachMT5Loginid).server_info?.geolocation?.region;\n                if (server_region) {\n                    return `${server_region} ${\n                        (server as DetailsOfEachMT5Loginid)?.server_info?.geolocation?.sequence === 1\n                            ? ''\n                            : (server as DetailsOfEachMT5Loginid)?.server_info?.geolocation?.sequence\n                    }`;\n                }\n            }\n            return '';\n        }, []);\n\n        const getBannerStatus = (account: DetailsOfEachMT5Loginid) => {\n            const { landing_company_short, status } = account;\n            if (landing_company_short && status && ['proof_failed', 'verification_pending'].includes(status)) {\n                const should_show_pending_button = status === 'verification_pending';\n                return (\n                    <Button\n                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                        type='button'\n                        onClick={() => {\n                            setAccountType({\n                                category: type.category,\n                                type: type.type,\n                            });\n                            setJurisdictionSelectedShortcode(landing_company_short);\n                            updateAccountStatus();\n                            toggleCFDVerificationModal();\n                        }}\n                        primary\n                        large\n                        disabled={should_show_pending_button}\n                    >\n                        {should_show_pending_button ? (\n                            <Localize i18n_default_text='Pending verification' />\n                        ) : (\n                            <Localize i18n_default_text='Resubmit document' />\n                        )}\n                    </Button>\n                );\n            }\n            return null;\n        };\n\n        const is_web_terminal_unsupported = isMobile() && platform === CFD_PLATFORMS.DXTRADE;\n        const tbody_content = platform === CFD_PLATFORMS.DXTRADE && (\n            <React.Fragment>\n                <tr className='cfd-account-card__login-specs-table-row'>\n                    <td className='cfd-account-card__login-specs-table-attribute'>\n                        <div className='cfd-account-card--paragraph'>{localize('Username')}</div>\n                    </td>\n                    <td className='cfd-account-card__login-specs-table-data'>\n                        <div className='cfd-account-card--paragraph'>\n                            <SpecBox value={existing_data?.login} is_bold />\n                        </div>\n                    </td>\n                </tr>\n            </React.Fragment>\n        );\n\n        return (\n            <div ref={wrapper_ref} className='cfd-account-card__wrapper'>\n                <div\n                    className={classNames('cfd-account-card', { 'cfd-account-card__logged-out': !is_logged_in })}\n                    ref={ref}\n                >\n                    {has_popular_banner && (\n                        <div className='cfd-account-card__banner'>\n                            <Localize i18n_default_text='Most popular' />\n                        </div>\n                    )}\n                    {has_demo_banner && (\n                        <div className='cfd-account-card__banner cfd-account-card__banner--demo'>\n                            <Localize i18n_default_text='DEMO' />\n                        </div>\n                    )}\n                    <div\n                        className={classNames('cfd-account-card__type', {\n                            'cfd-account-card__type--has-banner': has_banner || has_popular_banner || has_server_banner,\n                        })}\n                        id={`${platform === CFD_PLATFORMS.DXTRADE ? CFD_PLATFORMS.DXTRADE : CFD_PLATFORMS.MT5}_${\n                            type.category\n                        }_${type.type}`}\n                    >\n                        {icon}\n                        <div className='cfd-account-card__type--description'>\n                            <Text size='xxl' className='cfd-account-card--heading'>\n                                {title}\n                            </Text>\n                            {platform === CFD_PLATFORMS.DXTRADE ? (\n                                (!existing_data || !is_logged_in) && (\n                                    <p className='cfd-account-card--paragraph'>{descriptor}</p>\n                                )\n                            ) : (\n                                <p className='cfd-account-card--paragraph'>{descriptor}</p>\n                            )}\n                            {existing_data?.display_balance && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                    <Money\n                                        amount={existing_data.display_balance}\n                                        currency={existing_data.currency}\n                                        has_sign={existing_data.balance ? existing_data.balance < 0 : false}\n                                        show_currency\n                                    />\n                                </Text>\n                            )}\n                            {(existing_data as TTradingPlatformAccounts)?.display_login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.DXTRADE && (\n                                    <Text color='less-prominent' size='xxxs' line_height='s'>\n                                        {(existing_data as TTradingPlatformAccounts)?.display_login}\n                                    </Text>\n                                )}\n                        </div>\n                    </div>\n                    {existing_data && <div className='cfd-account-card__divider' />}\n\n                    <div className='cfd-account-card__cta' style={!existing_data?.login ? { marginTop: 'auto' } : {}}>\n                        <div className='cfd-account-card__cta-wrapper'>\n                            {platform === CFD_PLATFORMS.DXTRADE && (!existing_data?.login || !is_logged_in) && (\n                                <div className='cfd-account-card__specs'>\n                                    <table className='cfd-account-card__specs-table'>\n                                        <tbody>\n                                            {typeof specs !== 'undefined' &&\n                                                Object.keys(specs).map((spec_attribute, idx) => (\n                                                    <tr key={idx} className='cfd-account-card__specs-table-row'>\n                                                        <td className='cfd-account-card__specs-table-attribute'>\n                                                            <p className='cfd-account-card--paragraph'>\n                                                                {specs[spec_attribute].key()}\n                                                            </p>\n                                                        </td>\n                                                        <td className='cfd-account-card__specs-table-data'>\n                                                            <p className='cfd-account-card--paragraph'>\n                                                                {specs[spec_attribute].value()}\n                                                            </p>\n                                                        </td>\n                                                    </tr>\n                                                ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            )}\n                            {existing_data?.login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.MT5 &&\n                                type.category === CATEGORY.DEMO &&\n                                existing_accounts_data?.length &&\n                                existing_accounts_data?.map((acc: FormikValues, index: number) => (\n                                    <div className='cfd-account-card__item' key={index}>\n                                        {acc?.display_balance &&\n                                            is_logged_in &&\n                                            acc.landing_company_short === 'labuan' && (\n                                                <div className='cfd-account-card__item--banner'>\n                                                    <Localize i18n_default_text={'Labuan'} />\n                                                </div>\n                                            )}\n                                        {(acc as TTradingPlatformAccounts)?.display_login && (\n                                            <div\n                                                className={`cfd-account-card--login-id${\n                                                    acc.landing_company_short === 'labuan' ? '' : '-demo'\n                                                }`}\n                                            >\n                                                <Text size='xxxs' weight='bold'>\n                                                    {(acc as TTradingPlatformAccounts)?.display_login}\n                                                </Text>\n                                            </div>\n                                        )}\n                                        {acc?.display_balance && is_logged_in && (\n                                            <div className='cfd-account-card__balance'>\n                                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                    <Money\n                                                        amount={acc.display_balance}\n                                                        currency={acc.currency}\n                                                        has_sign={!!acc.balance && acc.balance < 0}\n                                                        show_currency\n                                                    />\n                                                </Text>\n                                            </div>\n                                        )}\n                                        <div className='cfd-account-card__manage--mt5'>\n                                            {acc && is_logged_in && (\n                                                <Button onClick={() => onClickFund(acc)} type='button' secondary>\n                                                    <Localize i18n_default_text='Top up' />\n                                                </Button>\n                                            )}\n                                            {acc && is_logged_in && !is_web_terminal_unsupported && (\n                                                <Button\n                                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                    type='button'\n                                                    onClick={() => {\n                                                        setAppstorePlatform(platform);\n                                                        toggleMT5TradeModal();\n                                                        setMT5TradeAccount(acc);\n                                                    }}\n                                                    primary\n                                                    large\n                                                >\n                                                    <Localize i18n_default_text='Trade' />\n                                                </Button>\n                                            )}\n                                        </div>\n                                    </div>\n                                ))}\n                            {existing_data?.login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.MT5 &&\n                                !existing_accounts_data?.length &&\n                                type.category === CATEGORY.DEMO && (\n                                    <div className='cfd-account-card__item'>\n                                        {(existing_data as TTradingPlatformAccounts)?.display_login && (\n                                            <div className='cfd-account-card--login-id-demo'>\n                                                <Text size='xxxs' weight='bold'>\n                                                    {(existing_data as TTradingPlatformAccounts)?.display_login}\n                                                </Text>\n                                            </div>\n                                        )}\n                                        {existing_data?.display_balance && is_logged_in && (\n                                            <div className='cfd-account-card__balance'>\n                                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                    <Money\n                                                        amount={existing_data.display_balance}\n                                                        currency={existing_data.currency}\n                                                        has_sign={!!existing_data.balance && existing_data.balance < 0}\n                                                        show_currency\n                                                    />\n                                                </Text>\n                                            </div>\n                                        )}\n                                        <div className='cfd-account-card__manage--mt5'>\n                                            {existing_data && is_logged_in && (\n                                                <Button\n                                                    onClick={() => onClickFund(existing_data)}\n                                                    type='button'\n                                                    secondary\n                                                >\n                                                    <Localize i18n_default_text='Top up' />\n                                                </Button>\n                                            )}\n                                            {existing_data && is_logged_in && !is_web_terminal_unsupported && (\n                                                <Button\n                                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                    type='button'\n                                                    onClick={() => {\n                                                        setAppstorePlatform(platform);\n                                                        toggleMT5TradeModal();\n                                                        setMT5TradeAccount(existing_data);\n                                                    }}\n                                                    primary\n                                                    large\n                                                >\n                                                    <Localize i18n_default_text='Trade' />\n                                                </Button>\n                                            )}\n                                        </div>\n                                    </div>\n                                )}\n                            {existing_data?.login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.MT5 &&\n                                type.category === CATEGORY.REAL &&\n                                existing_accounts_data?.map((acc: FormikValues, index: number) => (\n                                    <div className='cfd-account-card__item' key={index}>\n                                        {existing_data?.display_balance && is_logged_in && !show_eu_related_content && (\n                                            <div className='cfd-account-card__item--banner'>\n                                                <Localize\n                                                    i18n_default_text={\n                                                        acc.landing_company_short &&\n                                                        !['svg', 'bvi'].includes(acc?.landing_company_short)\n                                                            ? acc.landing_company_short?.charAt(0).toUpperCase() +\n                                                              acc.landing_company_short.slice(1)\n                                                            : acc.landing_company_short?.toUpperCase()\n                                                    }\n                                                />\n                                            </div>\n                                        )}\n                                        {(acc as TTradingPlatformAccounts)?.display_login && (\n                                            <div className='cfd-account-card--login-id'>\n                                                <Text size='xxxs' weight='bold'>\n                                                    {(acc as TTradingPlatformAccounts)?.display_login}\n                                                </Text>\n                                            </div>\n                                        )}\n                                        {existing_data?.display_balance && is_logged_in && (\n                                            <div className='cfd-account-card__balance'>\n                                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                    <Money\n                                                        amount={acc.display_balance}\n                                                        currency={acc.currency}\n                                                        has_sign={!!acc.balance && acc.balance < 0}\n                                                        show_currency\n                                                    />\n                                                </Text>\n                                                {checkMultipleSvgAcc()?.length > 1 &&\n                                                    acc.landing_company_short === 'svg' && (\n                                                        <Text\n                                                            className='cfd-account-card__balance--region'\n                                                            color='colored-background'\n                                                            size='xxxs'\n                                                            weight='bold'\n                                                        >\n                                                            {getServerName(acc)}\n                                                        </Text>\n                                                    )}\n                                            </div>\n                                        )}\n                                        <div className='cfd-account-card__manage--mt5'>\n                                            {getBannerStatus(acc) ?? (\n                                                <React.Fragment>\n                                                    {existing_data && is_logged_in && (\n                                                        <Button\n                                                            onClick={() => {\n                                                                const selected_account_data =\n                                                                    existing_accounts_data?.find(\n                                                                        data =>\n                                                                            data.landing_company_short ===\n                                                                                acc.landing_company_short &&\n                                                                            data.login === acc.login\n                                                                    );\n\n                                                                onClickFund(\n                                                                    selected_account_data as DetailsOfEachMT5Loginid\n                                                                );\n                                                            }}\n                                                            type='button'\n                                                            secondary\n                                                        >\n                                                            <Localize i18n_default_text='Top up' />\n                                                        </Button>\n                                                    )}\n                                                    {existing_data && is_logged_in && !is_web_terminal_unsupported && (\n                                                        <Button\n                                                            className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                            type='button'\n                                                            onClick={() => {\n                                                                const selected_account_data =\n                                                                    existing_accounts_data?.find(\n                                                                        data =>\n                                                                            data.landing_company_short ===\n                                                                                acc.landing_company_short &&\n                                                                            data.login === acc.login\n                                                                    );\n                                                                setAppstorePlatform(platform);\n                                                                toggleMT5TradeModal();\n                                                                setMT5TradeAccount(selected_account_data);\n                                                            }}\n                                                            primary\n                                                            large\n                                                        >\n                                                            <Localize i18n_default_text='Trade' />\n                                                        </Button>\n                                                    )}\n                                                </React.Fragment>\n                                            )}\n                                        </div>\n                                    </div>\n                                ))}\n                            {existing_data?.login && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                                <React.Fragment>\n                                    <div className='cfd-account-card__login-specs'>\n                                        <table className='cfd-account-card__login-specs-table'>\n                                            <tbody>\n                                                {tbody_content}\n                                                <tr className='cfd-account-card__login-specs-table-row cfd-account-card__login-specs-table-row--account-id'>\n                                                    <td className='cfd-account-card__login-specs-table-attribute'>\n                                                        <div className='cfd-account-card--paragraph'>\n                                                            {localize('Password')}\n                                                        </div>\n                                                    </td>\n                                                    <td className='cfd-account-card__login-specs-table-data'>\n                                                        <div className='cfd-account-card--paragraph'>\n                                                            <PasswordBox\n                                                                platform={platform}\n                                                                onClick={() => {\n                                                                    onPasswordManager(\n                                                                        existing_data?.login,\n                                                                        title,\n                                                                        type.category,\n                                                                        type.type,\n                                                                        (existing_data as DetailsOfEachMT5Loginid)\n                                                                            ?.server\n                                                                    );\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </React.Fragment>\n                            )}\n                            {((!existing_data && commission_message) || !is_logged_in) &&\n                                platform === CFD_PLATFORMS.DXTRADE && (\n                                    <div className='cfd-account-card__commission'>\n                                        <Text as='p' color='general' size='xs' styles={{ margin: '1.6rem auto' }}>\n                                            {commission_message}\n                                        </Text>\n                                    </div>\n                                )}\n                            {existing_data && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                                <div className='cfd-account-card__manage'>\n                                    <Button onClick={() => onClickFund(existing_data)} type='button' secondary>\n                                        {type.category === CATEGORY.REAL && (\n                                            <Localize i18n_default_text='Fund transfer' />\n                                        )}\n                                        {type.category === CATEGORY.DEMO && <Localize i18n_default_text='Top up' />}\n                                    </Button>\n                                </div>\n                            )}\n                            {existing_data &&\n                                is_logged_in &&\n                                !is_web_terminal_unsupported &&\n                                platform === CFD_PLATFORMS.DXTRADE && (\n                                    <a\n                                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                        type='button'\n                                        href={getDXTradeWebTerminalLink(\n                                            type.category,\n                                            dxtrade_tokens[type.category as TAccountCategory]\n                                        )}\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                    >\n                                        <Localize i18n_default_text='Trade on web terminal' />\n                                    </a>\n                                )}\n                            {existing_data && is_logged_in && is_web_terminal_unsupported && (\n                                <a\n                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                    type='button'\n                                    href={getDxtradeDownloadLink()}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                >\n                                    <Localize i18n_default_text='Download the app' />\n                                </a>\n                            )}\n                            {existing_data &&\n                                is_logged_in &&\n                                !is_web_terminal_unsupported &&\n                                platform === CFD_PLATFORMS.CTRADER && (\n                                    <a\n                                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                        type='button'\n                                        href={getCTraderWebTerminalLink(\n                                            type.category,\n                                            ctrader_tokens[type.category as TAccountCategory]\n                                        )}\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                    >\n                                        <Localize i18n_default_text='Trade on web terminal' />\n                                    </a>\n                                )}\n                            {existing_data && is_logged_in && is_web_terminal_unsupported && (\n                                <a\n                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                    type='button'\n                                    href={getDxtradeDownloadLink()}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                >\n                                    <Localize i18n_default_text='Download the app' />\n                                </a>\n                            )}\n                            {!existing_data && is_logged_in && (\n                                <CFDAccountCardAction\n                                    button_label={button_label}\n                                    handleClickSwitchAccount={handleClickSwitchAccount}\n                                    has_real_account={has_real_account}\n                                    is_accounts_switcher_on={is_accounts_switcher_on}\n                                    is_button_primary={is_button_primary}\n                                    is_disabled={is_disabled}\n                                    is_virtual={is_virtual}\n                                    onSelectAccount={onSelectAccount}\n                                    type={type}\n                                    platform={platform}\n                                    title={title}\n                                    real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                    setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                />\n                            )}\n                            {existing_data &&\n                                is_logged_in &&\n                                !is_web_terminal_unsupported &&\n                                platform === CFD_PLATFORMS.DERIVEZ && (\n                                    <a\n                                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                        type='button'\n                                        href={getDerivEzWebTerminalLink(\n                                            type.category,\n                                            derivez_tokens[type.category as TAccountCategory]\n                                        )}\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                    >\n                                        <Localize i18n_default_text='Trade on web terminal' />\n                                    </a>\n                                )}\n                            {!existing_data && is_logged_in && (\n                                <CFDAccountCardAction\n                                    button_label={button_label}\n                                    handleClickSwitchAccount={handleClickSwitchAccount}\n                                    has_real_account={has_real_account}\n                                    is_accounts_switcher_on={is_accounts_switcher_on}\n                                    is_button_primary={is_button_primary}\n                                    is_disabled={is_disabled}\n                                    is_virtual={is_virtual}\n                                    onSelectAccount={onSelectAccount}\n                                    type={type}\n                                    platform={platform}\n                                    title={title}\n                                    real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                    setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                />\n                            )}\n                        </div>\n                    </div>\n                    <React.Fragment>\n                        {should_show_extra_add_account_button && (\n                            <MobileWrapper>\n                                <AddAccountButton\n                                    ref={button_ref}\n                                    onSelectAccount={onSelectAccount}\n                                    is_disabled={has_cfd_account_error}\n                                />\n                            </MobileWrapper>\n                        )}\n                    </React.Fragment>\n                </div>\n                <DesktopWrapper>\n                    <CSSTransition\n                        in={should_show_extra_add_account_button}\n                        timeout={0}\n                        classNames='cfd-account-card__add-server'\n                        unmountOnExit\n                    >\n                        <AddAccountButton\n                            ref={button_ref}\n                            onSelectAccount={onSelectAccount}\n                            is_disabled={has_cfd_account_error}\n                        />\n                    </CSSTransition>\n                </DesktopWrapper>\n            </div>\n        );\n    }\n);\n\nconst CFDAccountCard = CFDAccountCardComponent;\n\nexport { CFDAccountCard };\n","import { localize } from '@deriv/translations';\n\ntype TMT5 = {\n    real_synthetic_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    eu_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_stp_specs: Record<string, { key: () => string; value: () => string }>;\n    au_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    demo_financial_stp_specs: Record<string, { key: () => string; value: () => string }>;\n};\n\ntype TDXTrade = {\n    demo_all_specs: Record<string, { key: () => string; value: () => string }>;\n    real_all_specs: Record<string, { key: () => string; value: () => string }>;\n    real_synthetic_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    eu_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    au_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    demo_financial_stp_specs?: Record<string, { key: () => string; value: () => string }>;\n    real_financial_stp_specs?: Record<string, { key: () => string; value: () => string }>;\n};\n\nexport type TSpecifications = {\n    mt5: TMT5;\n    dxtrade: TDXTrade;\n};\n\nconst mt5 = {\n    real_synthetic_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('20+') },\n    },\n    real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('150+') },\n    },\n    real_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('40+') },\n    },\n    eu_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('50+') },\n    },\n    real_financial_stp_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:100') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('70+') },\n    },\n    au_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('100+') },\n    },\n    demo_financial_stp_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:100') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('70+') },\n    },\n};\n\n// TODO: Edit this after real accounts release\nconst dxtrade = {\n    demo_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('110+') },\n    },\n    real_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('110+') },\n    },\n    real_synthetic_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('20+') },\n    },\n    real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n    eu_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n    au_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n};\n\nconst specifications = {\n    mt5,\n    dxtrade,\n};\n\nexport default specifications;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { CFDAccountCard } from './cfd-account-card';\nimport specifications from '../Constants/cfd-specifications';\nimport Loading from '../templates/_common/components/loading';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\nimport { TCFDPasswordReset } from '../Containers/props.types';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCFDDemoAccountDisplayProps = {\n    has_cfd_account_error: boolean;\n    standpoint: TStandPoint;\n    is_loading: boolean;\n    is_logged_in: boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    current_list: Record<\n        string,\n        DetailsOfEachMT5Loginid & {\n            enabled: number;\n        }\n    >;\n    openPasswordManager: (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => void;\n    landing_companies?: LandingCompany;\n};\n\nconst CFDDxtradeDemoAccountDisplay = ({\n    has_cfd_account_error,\n    standpoint,\n    is_loading,\n    is_logged_in,\n    onSelectAccount,\n    openAccountTransfer,\n    platform,\n    current_list,\n    openPasswordManager,\n}: TCFDDemoAccountDisplayProps) => {\n    const existing_accounts_data = (acc_type: 'dxtrade') => {\n        const acc = Object.keys(current_list).some(\n            key => key.startsWith(`${platform}.demo.${acc_type}`) && current_list[key].enabled === 1\n        )\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(`${platform}.demo.${acc_type}`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    const current_list_index = Object.keys(current_list).find(key => key.startsWith(`${platform}.demo.dxtrade`)) || '';\n\n    return (\n        <div className='cfd-demo-accounts-display' data-testid='dt_cfd_demo_accounts_display'>\n            {is_loading ? (\n                <Loading />\n            ) : (\n                <CFDAccountCard\n                    key='cfd'\n                    title={localize('Deriv X')}\n                    type={{\n                        category: 'demo',\n                        platform: 'dxtrade',\n                        type: 'all',\n                    }}\n                    is_disabled={has_cfd_account_error || standpoint.malta}\n                    is_logged_in={is_logged_in}\n                    existing_accounts_data={existing_accounts_data('dxtrade')}\n                    commission_message={localize('No commission')}\n                    onSelectAccount={() =>\n                        onSelectAccount({\n                            category: 'demo',\n                            platform: 'dxtrade',\n                            type: 'all',\n                        })\n                    }\n                    onPasswordManager={openPasswordManager}\n                    onClickFund={() =>\n                        openAccountTransfer(current_list[current_list_index], {\n                            category: 'demo',\n                            type: 'all',\n                        })\n                    }\n                    platform={platform}\n                    descriptor={localize(\n                        'Trade CFDs on forex, derived indices, cryptocurrencies, and commodities with high leverage.'\n                    )}\n                    specs={specifications.dxtrade.demo_all_specs}\n                    has_banner\n                />\n            )}\n        </div>\n    );\n};\n\nexport default CFDDxtradeDemoAccountDisplay;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { CFDAccountCard } from './cfd-account-card';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport specifications, { TSpecifications } from '../Constants/cfd-specifications';\nimport Loading from '../templates/_common/components/loading';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\nimport { TCFDPasswordReset } from '../Containers/props.types';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCFDDemoAccountDisplayProps = {\n    is_eu: boolean;\n    is_eu_country: boolean;\n    has_maltainvest_account: boolean;\n    has_cfd_account_error: boolean;\n    openAccountNeededModal: (target: string, target_label: string, target_dmt5_label: string) => void;\n    standpoint: TStandPoint;\n    is_loading: boolean;\n    is_logged_in: boolean;\n    isSyntheticCardVisible: (account_category: string) => boolean;\n    isFinancialCardVisible: () => boolean;\n    isSwapFreeCardVisible: () => boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    current_list: Record<string, DetailsOfEachMT5Loginid & DetailsOfEachMT5Loginid[]>;\n    openPasswordManager: (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => void;\n    residence: string;\n    landing_companies?: LandingCompany;\n    toggleMT5TradeModal: () => void;\n    show_eu_related_content: boolean;\n};\n\nconst CFDMT5DemoAccountDisplay = ({\n    is_eu,\n    is_eu_country,\n    has_maltainvest_account,\n    has_cfd_account_error,\n    openAccountNeededModal,\n    standpoint,\n    is_loading,\n    is_logged_in,\n    isSyntheticCardVisible,\n    isFinancialCardVisible,\n    isSwapFreeCardVisible,\n    onSelectAccount,\n    openAccountTransfer,\n    platform,\n    current_list,\n    openPasswordManager,\n    residence,\n    show_eu_related_content,\n}: TCFDDemoAccountDisplayProps) => {\n    const openAccountTransferList = (type: DetailsOfEachMT5Loginid['market_type']) => {\n        return Object.keys(current_list).find((key: string) => key.startsWith(`${platform}.demo.${type}`)) || '';\n    };\n\n    const openCFDAccount = () => {\n        if (is_eu && !has_maltainvest_account && standpoint.iom) {\n            openAccountNeededModal('maltainvest', localize('Deriv Multipliers'), localize('demo CFDs'));\n        } else {\n            onSelectAccount({\n                category: 'demo',\n                type: 'financial',\n                platform,\n            });\n        }\n    };\n\n    const financial_accounts_data = () => {\n        const acc = Object.keys(current_list).some(key => key.startsWith(`${platform}.demo.financial`))\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(`${platform}.demo.financial`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    const financial_specs = React.useMemo(() => {\n        const should_show_eu = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n        if (residence === 'au') {\n            return specifications[platform as keyof TSpecifications].au_real_financial_specs;\n        }\n        if (should_show_eu) {\n            return specifications[platform as keyof TSpecifications].eu_real_financial_specs;\n        }\n        return specifications[platform as keyof TSpecifications].real_financial_specs;\n    }, [is_logged_in, is_eu, is_eu_country, residence, platform]);\n\n    return (\n        <React.Fragment>\n            {is_loading ? (\n                <Loading />\n            ) : (\n                <div className='cfd-demo-accounts-display' data-testid='dt_cfd_demo_accounts_display'>\n                    {isSyntheticCardVisible('demo') && (\n                        <CFDAccountCard\n                            title={localize('Derived')}\n                            type={{\n                                category: 'demo',\n                                type: 'synthetic',\n                                platform,\n                            }}\n                            is_disabled={has_cfd_account_error || standpoint.malta}\n                            is_logged_in={is_logged_in}\n                            existing_accounts_data={current_list[openAccountTransferList('synthetic')]}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={() =>\n                                onSelectAccount({\n                                    category: 'demo',\n                                    type: 'synthetic',\n                                    platform,\n                                })\n                            }\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('synthetic')], {\n                                    category: 'demo',\n                                    type: 'synthetic',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={localize('Trade CFDs on our synthetics, baskets, and derived FX.')}\n                            specs={specifications[platform as keyof TSpecifications].real_synthetic_specs}\n                            has_banner\n                        />\n                    )}\n\n                    {isFinancialCardVisible() && (\n                        <CFDAccountCard\n                            title={show_eu_related_content ? localize('CFDs') : localize('Financial')}\n                            is_disabled={has_cfd_account_error}\n                            is_logged_in={is_logged_in}\n                            type={{\n                                category: 'demo',\n                                type: 'financial',\n                                platform,\n                            }}\n                            existing_accounts_data={financial_accounts_data()}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={openCFDAccount}\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('financial')], {\n                                    category: 'demo',\n                                    type: 'financial',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={general_messages.getFinancialAccountDescriptor(\n                                platform,\n                                show_eu_related_content\n                            )}\n                            specs={financial_specs}\n                            has_banner\n                        />\n                    )}\n\n                    {isSwapFreeCardVisible() && (\n                        <CFDAccountCard\n                            title={localize('Swap-Free')}\n                            type={{\n                                category: 'demo',\n                                type: 'all',\n                                platform,\n                            }}\n                            is_disabled={has_cfd_account_error || standpoint.malta}\n                            is_logged_in={is_logged_in}\n                            existing_accounts_data={current_list[openAccountTransferList('all')]}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={() =>\n                                onSelectAccount({\n                                    category: 'demo',\n                                    type: 'all',\n                                    platform,\n                                })\n                            }\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('all')], {\n                                    category: 'demo',\n                                    type: 'all',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={localize(\n                                'Trade swap-free CFDs on MT5 with synthetics, forex, stocks, stock indices, cryptocurrencies, and ETFs.'\n                            )}\n                            specs={specifications[platform as keyof TSpecifications].real_all_specs}\n                            has_banner\n                        />\n                    )}\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default CFDMT5DemoAccountDisplay;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { localize } from '@deriv/translations';\nimport { DesktopWrapper, MobileWrapper, Carousel } from '@deriv/components';\nimport { getAccountTypeFields, getAccountListKey, getCFDAccountKey } from '@deriv/shared';\nimport specifications, { TSpecifications } from '../Constants/cfd-specifications';\nimport { CFDAccountCard } from './cfd-account-card';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\nimport { TCFDPasswordReset } from '../Containers/props.types';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCurrentList = DetailsOfEachMT5Loginid & {\n    enabled: number;\n};\n\ntype TCFDRealAccountDisplayProps = {\n    has_real_account: boolean;\n    is_accounts_switcher_on: boolean;\n    is_eu: boolean;\n    is_eu_country: boolean;\n    has_cfd_account_error: boolean;\n    standpoint: TStandPoint;\n    is_loading?: boolean;\n    is_logged_in: boolean;\n    isSyntheticCardVisible: (account_category: string) => boolean;\n    isDxtradeAllCardVisible: (account_category: string) => boolean;\n    is_virtual: boolean;\n    isFinancialCardVisible: () => boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    realSyntheticAccountsExistingData: (getRealExistingData: DetailsOfEachMT5Loginid[] | undefined) => void;\n    realFinancialAccountsExistingData: (getRealExistingData: DetailsOfEachMT5Loginid[] | undefined) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    isAccountOfTypeDisabled: (\n        account: Array<DetailsOfEachMT5Loginid> & { [key: string]: DetailsOfEachMT5Loginid }\n    ) => boolean;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    current_list: Record<string, TCurrentList>;\n    openPasswordManager: (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => void;\n    toggleAccountsDialog: (is_accounts_switcher_on?: boolean) => void;\n    toggleShouldShowRealAccountsList: (prop: boolean) => void;\n    residence: string;\n    account_status?: object;\n    openDerivRealAccountNeededModal: () => void;\n    should_enable_add_button?: boolean;\n    real_account_creation_unlock_date: string;\n    setShouldShowCooldownModal: (value: boolean) => void;\n    show_eu_related_content: boolean;\n};\n\nconst CFDRealAccountDisplay = ({\n    has_real_account,\n    is_accounts_switcher_on,\n    is_eu,\n    is_eu_country,\n    has_cfd_account_error,\n    is_virtual,\n    isSyntheticCardVisible,\n    isFinancialCardVisible,\n    isDxtradeAllCardVisible,\n    onSelectAccount,\n    realSyntheticAccountsExistingData,\n    realFinancialAccountsExistingData,\n    openAccountTransfer,\n    isAccountOfTypeDisabled,\n    current_list,\n    openPasswordManager,\n    platform,\n    standpoint,\n    is_logged_in,\n    toggleAccountsDialog,\n    toggleShouldShowRealAccountsList,\n    residence,\n    openDerivRealAccountNeededModal,\n    should_enable_add_button,\n    show_eu_related_content,\n}: TCFDRealAccountDisplayProps) => {\n    const financial_specs = React.useMemo(() => {\n        const should_show_eu = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n        const is_australian = residence === 'au';\n        if (is_australian) {\n            return specifications[platform as keyof TSpecifications].au_real_financial_specs;\n        }\n        if (should_show_eu) {\n            return specifications[platform as keyof TSpecifications].eu_real_financial_specs;\n        }\n        return specifications[platform as keyof TSpecifications].real_financial_specs;\n    }, [residence, is_logged_in, is_eu, is_eu_country, platform]);\n\n    const onSelectRealAccount = (type: string) => {\n        if (should_enable_add_button) {\n            openDerivRealAccountNeededModal();\n        } else {\n            onSelectAccount({ type, category: 'real', platform });\n        }\n    };\n\n    const onClickFundReal = (account: DetailsOfEachMT5Loginid) => {\n        if (platform === 'dxtrade') {\n            return openAccountTransfer(current_list[getAccountListKey(account, platform)], {\n                category: account.account_type as keyof TOpenAccountTransferMeta,\n                type: getCFDAccountKey({\n                    market_type: account.market_type,\n                    sub_account_type: (account as DetailsOfEachMT5Loginid).sub_account_type,\n                    platform,\n                }),\n            });\n        }\n        return openAccountTransfer(account, {\n            category: account.account_type as keyof TOpenAccountTransferMeta,\n            type: getCFDAccountKey({\n                market_type: account.market_type,\n                sub_account_type: (account as DetailsOfEachMT5Loginid).sub_account_type,\n                platform: 'mt5',\n            }),\n        });\n    };\n\n    const isMT5AccountCardDisabled = (sub_account_type: string) => {\n        if (has_cfd_account_error) return true;\n\n        if (sub_account_type === 'synthetic' && standpoint.malta) return true;\n\n        if (is_eu) {\n            const account = getAccountTypeFields({ category: 'real', type: sub_account_type });\n            return isAccountOfTypeDisabled(account?.account_type);\n        }\n\n        switch (sub_account_type) {\n            case 'synthetic':\n            case 'financial':\n                return should_enable_add_button ? false : !has_real_account;\n            default:\n                return false;\n        }\n    };\n\n    const existing_accounts_data = (acc_type: 'synthetic' | 'financial' | 'all') => {\n        // We need to check enabled property for DXTRADE accounts only.\n        const account_key =\n            acc_type === 'all' ? `${platform}.real.${platform}@${acc_type}` : `${platform}.real.${acc_type}`;\n        // TODO: This condition should be removed after separating the DXTRADE and MT5 component.\n        const should_be_enabled = (list_item: TCurrentList) =>\n            platform === 'dxtrade' ? list_item.enabled === 1 : true;\n        const acc = Object.keys(current_list).some(\n            key => key.startsWith(account_key) && should_be_enabled(current_list[key])\n        )\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(account_key))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    realSyntheticAccountsExistingData(existing_accounts_data('synthetic'));\n    realFinancialAccountsExistingData(existing_accounts_data('financial'));\n\n    const synthetic_account_items = isSyntheticCardVisible('real') && (\n        <CFDAccountCard\n            key='real.synthetic'\n            has_cfd_account_error={has_cfd_account_error}\n            title={platform === 'mt5' ? localize('Derived') : localize('Synthetic')}\n            has_real_account={has_real_account}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_disabled={isMT5AccountCardDisabled('synthetic')}\n            is_logged_in={is_logged_in}\n            type={{\n                category: 'real',\n                type: 'synthetic',\n                platform,\n            }}\n            existing_accounts_data={existing_accounts_data('synthetic')}\n            commission_message={localize('No commission')}\n            onSelectAccount={() => onSelectRealAccount('synthetic')}\n            onPasswordManager={openPasswordManager}\n            onClickFund={onClickFundReal}\n            platform={platform}\n            descriptor={\n                platform === 'mt5'\n                    ? localize('Trade CFDs on our synthetics, baskets, and derived FX.')\n                    : localize('Trade CFDs on our synthetic indices that simulate real-world market movements.')\n            }\n            specs={specifications[platform as keyof TSpecifications].real_synthetic_specs}\n            is_virtual={is_virtual}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            toggleAccountsDialog={toggleAccountsDialog}\n        />\n    );\n\n    const financial_account = isFinancialCardVisible() && (\n        <CFDAccountCard\n            key='real.financial'\n            has_real_account={has_real_account}\n            is_disabled={isMT5AccountCardDisabled('financial')}\n            title={show_eu_related_content ? localize('CFDs') : localize('Financial')}\n            type={{\n                category: 'real',\n                type: 'financial',\n                platform,\n            }}\n            existing_accounts_data={existing_accounts_data('financial')}\n            commission_message={localize('No commission')}\n            onSelectAccount={() => onSelectRealAccount('financial')}\n            onPasswordManager={openPasswordManager}\n            onClickFund={onClickFundReal}\n            platform={platform}\n            descriptor={general_messages.getFinancialAccountDescriptor(platform, show_eu_related_content)}\n            specs={financial_specs}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_logged_in={is_logged_in}\n            is_virtual={is_virtual}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            toggleAccountsDialog={toggleAccountsDialog}\n        />\n    );\n\n    const derivx_all_account = platform === 'dxtrade' && isDxtradeAllCardVisible('real') && (\n        <CFDAccountCard\n            commission_message={localize('No commission')}\n            descriptor={localize(\n                'Trade CFDs on forex, derived indices, cryptocurrencies, and commodities with high leverage.'\n            )}\n            existing_accounts_data={existing_accounts_data('all')}\n            has_real_account={has_real_account}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_disabled={has_cfd_account_error || standpoint.malta}\n            is_logged_in={is_logged_in}\n            is_virtual={is_virtual}\n            key='cfd'\n            onClickFund={onClickFundReal}\n            onPasswordManager={openPasswordManager}\n            onSelectAccount={() => onSelectRealAccount('all')}\n            platform={platform}\n            specs={specifications.dxtrade.real_all_specs}\n            title={localize('Deriv X')}\n            toggleAccountsDialog={toggleAccountsDialog}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            type={{\n                category: 'real',\n                type: 'all',\n                platform,\n            }}\n        />\n    );\n\n    const items = [synthetic_account_items, financial_account, derivx_all_account].filter(Boolean);\n\n    return (\n        <div data-testid='dt_cfd_real_accounts_display' className={classNames('cfd-real-accounts-display')}>\n            <DesktopWrapper>\n                <Carousel\n                    list={items}\n                    width={328}\n                    nav_position='middle'\n                    show_bullet={false}\n                    item_per_window={2}\n                    is_mt5={true}\n                />\n            </DesktopWrapper>\n            <MobileWrapper>{items}</MobileWrapper>\n        </div>\n    );\n};\n\nexport { CFDRealAccountDisplay };\n","import React from 'react';\nimport { RouteComponentProps, useLocation } from 'react-router';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { Icon, Tabs, PageError, Loading, Text } from '@deriv/components';\nimport {\n    isEmptyObject,\n    isMobile,\n    routes,\n    getCFDPlatformLabel,\n    getPlatformSettings,\n    CFD_PLATFORMS,\n    isLandingCompanyEnabled,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { ResetTradingPasswordModal } from '@deriv/account';\nimport MissingRealAccount from './missing-real-account';\nimport LoadingCFDRealAccountDisplay from './loading-cfd-real-account-display';\nimport CompareAccountsModal from './compare-accounts-modal';\nimport JurisdictionModal from './jurisdiction-modal/jurisdiction-modal';\nimport MT5TradeModal from './mt5-trade-modal';\nimport CFDDbviOnboarding from './cfd-dbvi-onboarding';\nimport CFDDownloadContainer from '../Components/cfd-download-container';\nimport CFDPasswordManagerModal from './cfd-password-manager-modal';\nimport CFDPasswordModal from './cfd-password-modal';\nimport CFDServerErrorDialog from './cfd-server-error-dialog';\nimport CFDTopUpDemoModal from './cfd-top-up-demo-modal';\nimport CFDResetPasswordModal from './cfd-reset-password-modal';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport SwitchToRealAccountModal from './switch-to-real-account';\nimport 'Sass/cfd-dashboard.scss';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\n// TODO: Change these imports after real released\nimport CFDDxtradeDemoAccountDisplay from '../Components/cfd-dxtrade-demo-account-display';\nimport CFDMT5DemoAccountDisplay from '../Components/cfd-mt5-demo-account-display';\nimport { CFDRealAccountDisplay } from '../Components/cfd-real-account-display';\nimport { observer, useStore } from '@deriv/stores';\nimport { TCFDPasswordReset } from './props.types';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { TTradingPlatformAccounts } from 'Components/props.types';\n\ndeclare module 'react' {\n    interface HTMLAttributes<T> extends React.AriaAttributes, React.DOMAttributes<T> {\n        label?: string;\n        hash?: string;\n    }\n}\n\ntype TLoadTab = {\n    children: React.ReactNode;\n    is_loading: boolean;\n    loading_component: () => JSX.Element;\n    active_index: number;\n    top: boolean;\n    center: boolean;\n    is_logged_in: boolean;\n    onTabItemClick: (index: number) => void;\n    should_update_hash: boolean;\n    landing_companies?: LandingCompany;\n};\n\nconst LoadTab = ({ children, is_loading, loading_component, ...props }: TLoadTab) => {\n    const LoadingComponent = loading_component;\n    if (is_loading) {\n        return <LoadingComponent />;\n    }\n\n    return <Tabs {...props}>{children}</Tabs>;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TMt5StatusServerType = {\n    all: number;\n    platform: number;\n    server_number: number;\n    deposits?: number;\n    withdrawals?: number;\n};\n\ntype TMt5StatusServer = Record<'demo' | 'real', TMt5StatusServerType[]>;\n\nexport type TObjectCFDAccount = { category: string; type: string; set_password?: number; platform?: string };\n\nexport type TCFDDashboardProps = RouteComponentProps & {\n    account_status: object;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    platform: 'mt5' | 'dxtrade';\n};\n\ntype TPasswordManager = {\n    is_visible: boolean;\n    selected_login: string;\n    selected_account: string;\n    selected_account_type: string;\n    selected_account_group: TCFDPasswordReset['account_group'];\n    selected_server: string;\n};\n\nconst CFDDashboard = observer((props: TCFDDashboardProps) => {\n    const { client, ui, traders_hub, notifications } = useStore();\n\n    const {\n        landing_companies,\n        isAccountOfTypeDisabled,\n        is_logged_in,\n        is_logging_in,\n        is_eu,\n        is_eu_country,\n        is_virtual,\n        is_mt5_allowed,\n        is_dxtrade_allowed,\n        mt5_disabled_signup_types,\n        dxtrade_disabled_signup_types,\n        has_maltainvest_account,\n        dxtrade_accounts_list_error,\n        residence,\n        is_populating_mt5_account_list: is_loading,\n        has_account_error_in_mt5_real_list: has_mt5_real_account_error,\n        has_account_error_in_mt5_demo_list: has_mt5_demo_account_error,\n        has_account_error_in_dxtrade_real_list: has_dxtrade_real_account_error,\n        has_account_error_in_dxtrade_demo_list: has_dxtrade_demo_account_error,\n        has_active_real_account: has_real_account,\n        standpoint,\n        verification_code: platform_verification_code,\n        website_status,\n        upgradeable_landing_companies,\n        real_account_creation_unlock_date,\n        account_settings,\n    } = client;\n\n    const {\n        trading_platform_mt5_password_reset: mt5_verification_code,\n        trading_platform_dxtrade_password_reset: dxtrade_verification_code,\n    } = platform_verification_code;\n    const { mt5_status: mt5_status_server, dx_trade_status: dxtrade_status_server } = website_status;\n    const { dxtrade_user_exception: is_user_exception, residence: country } = account_settings;\n\n    const {\n        setCFDPasswordResetModal,\n        openAccountNeededModal,\n        is_accounts_switcher_on,\n        openTopUpModal,\n        notification_messages_ui: NotificationMessages,\n        toggleAccountsDialog,\n        toggleShouldShowRealAccountsList,\n        is_dark_mode_on,\n        disableApp,\n        enableApp,\n        is_reset_trading_password_modal_visible,\n        setResetTradingPasswordModalOpen: toggleResetTradingPasswordModal,\n        openDerivRealAccountNeededModal,\n        setShouldShowCooldownModal,\n    } = ui;\n    const { show_eu_related_content } = traders_hub;\n    const { refreshNotifications } = notifications;\n\n    const {\n        onMount,\n        onUnmount,\n        setAccountType,\n        setCurrentAccount,\n        enableCFDPasswordModal,\n        getRealSyntheticAccountsExistingData,\n        getRealFinancialAccountsExistingData,\n        toggleMT5TradeModal,\n        beginRealSignupForMt5,\n        disableCFDPasswordModal,\n        checkShouldOpenAccount,\n        is_mt5_trade_modal_visible,\n        createCFDAccount,\n        current_list,\n        dxtrade_tokens,\n        ctrader_tokens,\n        derivez_tokens,\n    } = useCfdStore();\n\n    const [is_demo_enabled, setIsDemoEnabled] = React.useState<boolean>(false);\n    const [is_real_enabled, setIsRealEnabled] = React.useState<boolean>(false);\n    const [active_index, setActiveIndex] = React.useState<number>(0);\n    const [is_demo_tab, setIsDemoTab] = React.useState<boolean>(false);\n    const [is_notification_loaded, setIsNotificationLoaded] = React.useState<boolean>(false);\n    const [password_manager, setPasswordManager] = React.useState<TPasswordManager>({\n        is_visible: false,\n        selected_login: '',\n        selected_account: '',\n        selected_account_type: '',\n        selected_account_group: '',\n        selected_server: '',\n    });\n\n    const history = useHistory();\n    const location = useLocation();\n\n    React.useEffect(() => {\n        if (window.location.href.includes(routes.mt5) || window.location.href.includes(routes.dxtrade)) {\n            history.push(routes.traders_hub);\n        }\n    }, [history]);\n\n    React.useEffect(() => {\n        updateActiveIndex(getIndexToSet());\n        openResetPassword();\n        refreshNotifications();\n        onMount();\n        return () => {\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    React.useEffect(() => {\n        checkShouldOpenAccount();\n\n        if (is_logged_in) {\n            ['demo', 'real'].forEach(account_type => {\n                const should_enable_tab =\n                    isDxtradeAllCardVisible(account_type) ||\n                    isSyntheticCardVisible(account_type) ||\n                    isFinancialCardVisible();\n\n                if (account_type === 'real' && is_real_enabled !== should_enable_tab) {\n                    setIsRealEnabled(should_enable_tab);\n                }\n\n                if (account_type === 'demo' && is_demo_enabled !== should_enable_tab) {\n                    setIsDemoEnabled(should_enable_tab);\n                }\n            });\n        }\n\n        if (!is_logged_in && (!is_real_enabled || !is_demo_enabled)) {\n            setIsRealEnabled(true);\n            setIsDemoEnabled(true);\n        }\n        if (props.location.hash === '#demo') {\n            setIsDemoEnabled(true);\n            setActiveIndex(1);\n        }\n    });\n\n    React.useEffect(() => {\n        if (props.location.hash === '#real') {\n            setActiveIndex(0);\n        }\n        if (props.location.hash === '#demo-all' || props.location.hash === '#demo') {\n            setActiveIndex(1);\n        }\n    }, [props.location.hash]);\n\n    const openResetPassword = () => {\n        if (!/reset-password/.test(location.hash)) {\n            return;\n        }\n\n        setCFDPasswordResetModal(true);\n    };\n\n    const getIndexToSet = () => {\n        if (is_real_enabled) {\n            return 0;\n        }\n        if (is_demo_enabled) {\n            return 1;\n        }\n\n        const hash = location.hash;\n        if (hash) {\n            return /demo/.test(location.hash) ? 1 : 0;\n        }\n        return undefined;\n    };\n\n    const stopNotificationLoading = () => {\n        setIsNotificationLoaded(true);\n    };\n\n    const updateActiveIndex = (index?: number) => {\n        if (index === undefined) return;\n        const updated_state: { is_demo_tab?: boolean; active_index?: number } = {};\n        // updateActiveIndex is called in componentDidUpdate causing tab_index to always revert back to 0\n        if (index === 1) updated_state.is_demo_tab = true;\n        else if (index === 0) updated_state.is_demo_tab = false;\n\n        if (active_index !== index) {\n            updated_state.active_index = index;\n        }\n\n        if (!isEmptyObject(updated_state)) {\n            setActiveIndex(updated_state.active_index as number);\n            setIsDemoTab(updated_state.is_demo_tab as boolean);\n        }\n    };\n\n    const openAccountTransfer = (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => {\n        if (meta.category === 'real') {\n            if (data) {\n                if ('platform' in data && data.platform === CFD_PLATFORMS.DXTRADE)\n                    sessionStorage.setItem('cfd_transfer_to_login_id', data.account_id || '');\n                else sessionStorage.setItem('cfd_transfer_to_login_id', data.login || '');\n\n                disableCFDPasswordModal();\n                history.push(routes.cashier_acc_transfer);\n            }\n        } else {\n            if ('sub_account_type' in data) setCurrentAccount(data, meta);\n            openTopUpModal();\n        }\n    };\n\n    const togglePasswordManagerModal = (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => {\n        setPasswordManager(prev_state => ({\n            is_visible: !prev_state.is_visible,\n            selected_login: typeof login === 'string' ? login : '',\n            selected_account: typeof title === 'string' ? title : '',\n            selected_account_group: group || '',\n            selected_account_type: type || '',\n            selected_server: server || '',\n        }));\n    };\n\n    const openRealPasswordModal = (account_type: TOpenAccountTransferMeta) => {\n        setAccountType(account_type);\n        enableCFDPasswordModal();\n    };\n\n    const hasAccount = (category: string, type: string) => {\n        return Object.keys(current_list).some(key => key.startsWith(`${platform}.${category}.${type}`));\n    };\n\n    const isDxtradeAllCardVisible = (account_category: string) => {\n        const { platform } = props;\n\n        const has_synthetic_account = hasAccount(account_category, 'synthetic');\n        const has_financial_account = hasAccount(account_category, 'financial');\n\n        if (has_synthetic_account || has_financial_account) return false;\n\n        if (is_dxtrade_allowed && !is_logged_in) return true;\n\n        return isLandingCompanyEnabled({\n            landing_companies,\n            platform,\n            type: 'all',\n        });\n    };\n\n    const isSyntheticCardVisible = (account_category: string) => {\n        const { platform } = props;\n        const has_synthetic_account = hasAccount(account_category, 'synthetic');\n        const has_financial_account = hasAccount(account_category, 'financial');\n\n        // Hiding card for logged out EU users\n        if (!is_logged_in && is_eu_country) return false;\n\n        if (is_eu && !has_synthetic_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        if (!has_synthetic_account && !has_financial_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        return isLandingCompanyEnabled({ landing_companies, platform, type: 'gaming' }) || !is_logged_in;\n    };\n\n    const isFinancialCardVisible = () => {\n        const { platform } = props;\n\n        const has_synthetic_account = hasAccount('real', 'synthetic');\n        const has_financial_account = hasAccount('real', 'financial');\n\n        if (!has_synthetic_account && !has_financial_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        return (\n            !is_logged_in ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform,\n                type: 'financial',\n            })\n        );\n    };\n\n    const { account_status, platform } = props;\n\n    const isSwapFreeCardVisible = () => {\n        return (\n            !is_logged_in ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform,\n                type: 'all',\n            })\n        );\n    };\n\n    const should_show_missing_real_account =\n        is_logged_in && !has_real_account && upgradeable_landing_companies?.length > 0;\n    const should_enable_add_button = should_show_missing_real_account && CFD_PLATFORMS.MT5 && is_real_enabled;\n\n    if ((!country && is_logged_in) || is_logging_in) return <Loading />; // Wait for country name to be loaded before rendering\n\n    // all: 1 in mt5_status response means that server is suspended\n    const getIsSuspendedMt5Server = (type_server: TMt5StatusServer['demo' | 'real']) =>\n        type_server?.map((item: TMt5StatusServerType) => item.all).some((item: number) => item === 1);\n\n    const is_suspended_mt5_demo_server = getIsSuspendedMt5Server(mt5_status_server?.demo);\n    const is_suspended_mt5_real_server = getIsSuspendedMt5Server(mt5_status_server?.real);\n    const is_suspended_dxtrade_demo_server = !!dxtrade_status_server?.demo;\n    const is_suspended_dxtrade_real_server = !!dxtrade_status_server?.real;\n\n    const has_mt5_account_error = is_demo_tab\n        ? is_suspended_mt5_demo_server || has_mt5_demo_account_error || mt5_disabled_signup_types.demo\n        : is_suspended_mt5_real_server || has_mt5_real_account_error || mt5_disabled_signup_types.real;\n\n    const has_dxtrade_account_error = is_demo_tab\n        ? is_suspended_dxtrade_demo_server || has_dxtrade_demo_account_error || dxtrade_disabled_signup_types.demo\n        : is_suspended_dxtrade_real_server || has_dxtrade_real_account_error || dxtrade_disabled_signup_types.real;\n\n    // eslint-disable-next-line no-nested-ternary\n    const has_cfd_account_error = is_user_exception\n        ? !is_user_exception\n        : platform === CFD_PLATFORMS.MT5\n        ? has_mt5_account_error\n        : has_dxtrade_account_error || !!dxtrade_accounts_list_error;\n\n    const has_cfd_real_account_dxtrade_error =\n        is_suspended_dxtrade_real_server || dxtrade_disabled_signup_types.real || !!dxtrade_accounts_list_error;\n    const has_cfd_demo_account_dxtrade_error =\n        is_suspended_dxtrade_demo_server || dxtrade_disabled_signup_types.demo || !!dxtrade_accounts_list_error;\n    const has_cfd_real_account_mt5_error = is_suspended_mt5_real_server || mt5_disabled_signup_types.real;\n    const has_cfd_demo_account_mt5_error = is_suspended_mt5_demo_server || mt5_disabled_signup_types.demo;\n\n    const verification_code = platform === CFD_PLATFORMS.MT5 ? mt5_verification_code : dxtrade_verification_code;\n\n    if (platform === CFD_PLATFORMS.MT5 || platform === CFD_PLATFORMS.DXTRADE)\n        return <Redirect to={routes.traders_hub} />;\n    if (platform === CFD_PLATFORMS.DXTRADE && !is_dxtrade_allowed) return <Redirect to={routes.mt5} />;\n\n    if ((is_logged_in && !landing_companies) || is_loading) return <Loading />;\n\n    return (\n        <React.Fragment>\n            {is_mt5_allowed || platform === CFD_PLATFORMS.DXTRADE || !is_logged_in ? (\n                <div className='cfd-dashboard__container'>\n                    <NotificationMessages\n                        is_mt5\n                        is_notification_loaded={is_notification_loaded}\n                        stopNotificationLoading={stopNotificationLoading}\n                    />\n                    <div className='cfd-dashboard'>\n                        <div className='cfd-dashboard__welcome-message'>\n                            <h1 className='cfd-dashboard__welcome-message--heading'>\n                                {general_messages.getWelcomeHeader(is_logged_in, platform)}\n                            </h1>\n                        </div>\n                        {is_logged_in && has_cfd_account_error && (\n                            <div className='cfd-dashboard__accounts-error'>\n                                <Text\n                                    as='p'\n                                    className='cfd-dashboard__accounts-error-message'\n                                    line_height='l'\n                                    size='xxs'\n                                    color='prominent'\n                                    weight='normal'\n                                    align='center'\n                                >\n                                    <Localize\n                                        i18n_default_text='Due to an issue on our server, some of your {{platform}} accounts are unavailable at the moment. Please bear with us and thank you for your patience.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                        }}\n                                    />\n                                </Text>\n                            </div>\n                        )}\n                        <div className='cfd-dashboard__accounts-display'>\n                            <CFDPasswordManagerModal\n                                is_visible={password_manager.is_visible}\n                                platform={platform}\n                                selected_login={password_manager.selected_login}\n                                selected_account_group={password_manager.selected_account_group}\n                                selected_account_type={password_manager.selected_account_type}\n                                selected_server={password_manager.selected_server}\n                                toggleModal={togglePasswordManagerModal}\n                            />\n                            <LoadTab\n                                active_index={active_index}\n                                top\n                                center\n                                is_loading={is_loading}\n                                is_logged_in={is_logged_in}\n                                loading_component={LoadingCFDRealAccountDisplay}\n                                onTabItemClick={updateActiveIndex}\n                                should_update_hash\n                            >\n                                {is_real_enabled && (\n                                    <div label={localize('Real account')} data-hash='real'>\n                                        <React.Fragment>\n                                            {should_show_missing_real_account && (\n                                                <MissingRealAccount\n                                                    onClickSignup={() => {\n                                                        if (real_account_creation_unlock_date) {\n                                                            setShouldShowCooldownModal(true);\n                                                        } else {\n                                                            beginRealSignupForMt5();\n                                                        }\n                                                    }}\n                                                    platform={platform}\n                                                />\n                                            )}\n                                            <CFDRealAccountDisplay\n                                                is_accounts_switcher_on={is_accounts_switcher_on}\n                                                is_eu={is_eu}\n                                                is_eu_country={is_eu_country}\n                                                is_logged_in={is_logged_in}\n                                                has_cfd_account_error={\n                                                    // eslint-disable-next-line no-nested-ternary\n                                                    platform === CFD_PLATFORMS.MT5\n                                                        ? has_cfd_real_account_mt5_error\n                                                        : is_user_exception\n                                                        ? !is_user_exception\n                                                        : has_cfd_real_account_dxtrade_error\n                                                }\n                                                current_list={current_list}\n                                                account_status={account_status}\n                                                onSelectAccount={createCFDAccount}\n                                                realSyntheticAccountsExistingData={getRealSyntheticAccountsExistingData}\n                                                realFinancialAccountsExistingData={getRealFinancialAccountsExistingData}\n                                                is_virtual={is_virtual}\n                                                isSyntheticCardVisible={isSyntheticCardVisible}\n                                                isFinancialCardVisible={isFinancialCardVisible}\n                                                isDxtradeAllCardVisible={isDxtradeAllCardVisible}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                platform={platform}\n                                                isAccountOfTypeDisabled={isAccountOfTypeDisabled}\n                                                has_real_account={has_real_account}\n                                                standpoint={standpoint}\n                                                toggleAccountsDialog={toggleAccountsDialog}\n                                                toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n                                                residence={residence}\n                                                openDerivRealAccountNeededModal={openDerivRealAccountNeededModal}\n                                                should_enable_add_button={should_enable_add_button}\n                                                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                                show_eu_related_content={show_eu_related_content}\n                                            />\n                                        </React.Fragment>\n                                    </div>\n                                )}\n                                {is_demo_enabled && (\n                                    <div label={localize('Demo account')} data-hash='demo'>\n                                        {platform === CFD_PLATFORMS.DXTRADE && (\n                                            <CFDDxtradeDemoAccountDisplay\n                                                is_logged_in={is_logged_in}\n                                                has_cfd_account_error={\n                                                    is_user_exception\n                                                        ? !is_user_exception\n                                                        : has_cfd_demo_account_dxtrade_error\n                                                }\n                                                standpoint={standpoint}\n                                                is_loading={is_loading}\n                                                current_list={current_list}\n                                                onSelectAccount={createCFDAccount}\n                                                landing_companies={landing_companies}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                platform={platform}\n                                            />\n                                        )}\n                                        {platform === CFD_PLATFORMS.MT5 && (\n                                            <CFDMT5DemoAccountDisplay\n                                                is_eu={is_eu}\n                                                is_eu_country={is_eu_country}\n                                                is_logged_in={is_logged_in}\n                                                has_maltainvest_account={has_maltainvest_account}\n                                                has_cfd_account_error={has_cfd_demo_account_mt5_error}\n                                                openAccountNeededModal={openAccountNeededModal}\n                                                standpoint={standpoint}\n                                                is_loading={is_loading}\n                                                isSyntheticCardVisible={isSyntheticCardVisible}\n                                                isFinancialCardVisible={isFinancialCardVisible}\n                                                isSwapFreeCardVisible={isSwapFreeCardVisible}\n                                                current_list={current_list}\n                                                onSelectAccount={createCFDAccount}\n                                                landing_companies={landing_companies}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                toggleMT5TradeModal={toggleMT5TradeModal}\n                                                platform={platform}\n                                                residence={residence}\n                                                show_eu_related_content={show_eu_related_content}\n                                            />\n                                        )}\n                                    </div>\n                                )}\n                            </LoadTab>\n                            <CompareAccountsModal\n                                platform={platform}\n                                is_demo_tab={is_demo_tab}\n                                openPasswordModal={openRealPasswordModal}\n                                is_real_enabled={is_real_enabled}\n                                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                has_unmerged_account={\n                                    hasAccount('real', 'synthetic') || hasAccount('real', 'financial')\n                                }\n                            />\n                            <SwitchToRealAccountModal />\n                            <JurisdictionModal openPasswordModal={openRealPasswordModal} />\n                            <MT5TradeModal\n                                is_demo=''\n                                is_open={is_mt5_trade_modal_visible}\n                                onPasswordManager={togglePasswordManagerModal}\n                                toggleModal={toggleMT5TradeModal}\n                                is_eu_user={(is_logged_in && is_eu) || (!is_logged_in && is_eu_country)}\n                            />\n                            <div className='cfd-dashboard__maintenance'>\n                                <Icon\n                                    icon='IcAlertWarning'\n                                    size={isMobile() ? 28 : 16}\n                                    className='cfd-dashboard__maintenance-icon'\n                                />\n                                <div className='cfd-dashboard__maintenance-text'>\n                                    {platform === CFD_PLATFORMS.DXTRADE && (\n                                        <Localize i18n_default_text='Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                                    )}\n                                    {platform === CFD_PLATFORMS.MT5 && (\n                                        <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                        <CFDDownloadContainer\n                            platform={platform}\n                            active_index={active_index}\n                            is_dark_mode_on={is_dark_mode_on}\n                            dxtrade_tokens={dxtrade_tokens}\n                            ctrader_tokens={ctrader_tokens}\n                            derivez_tokens={derivez_tokens}\n                        />\n                        <CFDTopUpDemoModal platform={platform} />\n                        <CFDPasswordModal platform={platform} />\n                        <CFDServerErrorDialog />\n                        {platform === CFD_PLATFORMS.MT5 && is_logged_in && <CFDDbviOnboarding />}\n                        <CFDResetPasswordModal platform={platform} />\n                        <ResetTradingPasswordModal\n                            platform={platform}\n                            enableApp={enableApp}\n                            disableApp={disableApp}\n                            toggleResetTradingPasswordModal={toggleResetTradingPasswordModal}\n                            is_visible={is_reset_trading_password_modal_visible}\n                            is_loading={is_loading}\n                            verification_code={verification_code}\n                        />\n                    </div>\n                </div>\n            ) : (\n                <PageError\n                    buttonSize={'medium'}\n                    header={\n                        <Localize\n                            i18n_default_text='{{platform_name_mt5}} is not available in {{country}}'\n                            values={{\n                                country,\n                                platform_name_mt5: getPlatformSettings('mt5').name,\n                            }}\n                            components={[<br key={0} />]}\n                        />\n                    }\n                    messages={[<Localize key={0} i18n_default_text='Please explore our other platforms.' />]}\n                    redirect_urls={[routes.trade, routes.bot]}\n                    redirect_labels={[\n                        <Localize\n                            key={0}\n                            i18n_default_text='Explore {{platform_name_trader}}'\n                            values={{ platform_name_trader: getPlatformSettings('trader').name }}\n                        />,\n                        <Localize\n                            key={1}\n                            i18n_default_text='Explore {{platform_name_dbot}}'\n                            values={{ platform_name_dbot: getPlatformSettings('dbot').name }}\n                        />,\n                    ]}\n                />\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default CFDDashboard;\n","import CFDDashboard from './cfd-dashboard';\nimport CFDPasswordModal from './cfd-password-modal';\nimport CFDServerErrorDialog from './cfd-server-error-dialog';\n\nexport { CFDPasswordModal };\nexport { CFDServerErrorDialog };\nexport default CFDDashboard;\n","import React from 'react';\nimport DerivedFX from './ic-instrument-derived-fx.svg';\nimport Synthetics from './ic-instrument-synthetics.svg';\nimport Baskets from './ic-instrument-baskets.svg';\nimport Stocks from './ic-instrument-stocks.svg';\nimport StockIndices from './ic-instrument-stock-indices.svg';\nimport Commodities from './ic-instrument-commodities.svg';\nimport Forex from './ic-instrument-forex.svg';\nimport Cryptocurrencies from './ic-instrument-cryptocurrencies.svg';\nimport ETF from './ic-instrument-etf.svg';\n\nexport type IconProps<T> = {\n    icon: T;\n    className?: string;\n    size?: number;\n    onClick?: () => void;\n};\n\nexport const InstrumentsIcons = {\n    DerivedFX,\n    Synthetics,\n    Baskets,\n    Stocks,\n    StockIndices,\n    Commodities,\n    Forex,\n    Cryptocurrencies,\n    ETF,\n};\n\nconst TradingInstrumentsIcon = ({ icon, className, size, onClick }: IconProps<keyof typeof InstrumentsIcons>) => {\n    const InstrumentIcon = InstrumentsIcons[icon] as React.ElementType;\n\n    return InstrumentIcon ? (\n        <InstrumentIcon className={className} style={{ width: size, height: size }} onClick={onClick} />\n    ) : null;\n};\n\nexport default TradingInstrumentsIcon;\n","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 4.5A4.5 4.5 0 014.5 0h15A4.5 4.5 0 0124 4.5v15a4.5 4.5 0 01-4.5 4.5h-15A4.5 4.5 0 010 19.5v-15z\" fill=\"#33658A\" /><path d=\"M3.75 6v12h3v-4.5h3.75v-2.25H6.75V9h4.8l1.57 2.63L9.75 18h3L15 14.25 17.25 18h3l-3.38-6.38L20.25 6h-3.38L15 9l-1.88-3H3.76z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 4.5A4.5 4.5 0 014.5 0h15A4.5 4.5 0 0124 4.5v15a4.5 4.5 0 01-4.5 4.5h-15A4.5 4.5 0 010 19.5v-15z\" fill=\"#33658A\" /><path d=\"M9.75 7.5l.75-.38-.75-2.25h6.75L12 11.25l-.75-1.88-.75.38.75 1.88H4.5L9 5.25l.75 2.25zm-5.63 4.88h7.13l-1.5 1.87.75.38 1.5-1.88 3 6.38H7.87l1.5-2.25-.74-.38-1.5 2.25-3-6.38zm16.13-.76l-3-6.74-4.62 6.75H15v.74h-2.44l3.19 6.38 4.5-6.38h-3v-.74h3z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 4.5A4.5 4.5 0 014.5 0h15A4.5 4.5 0 0124 4.5v15a4.5 4.5 0 01-4.5 4.5h-15A4.5 4.5 0 010 19.5v-15z\" fill=\"#33658A\" /><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M11.5 12.5a1 1 0 01-1-1v-6a1 1 0 011-1h1a1 1 0 011 1v6a1 1 0 01-1 1h-1zm0-1v-6h1v6h-1z\" fill=\"#fff\" /><path d=\"M14.5 10h5.75a.75.75 0 00.75-.75v-.5a.75.75 0 00-.75-.75H14.5v2zm-5-2H3.75a.75.75 0 00-.75.75v.5c0 .41.34.75.75.75H9.5V8z\" fill=\"#fff\" /><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M11.5 13.45a2.5 2.5 0 01-2-2.45H4l2.34 7.47a.75.75 0 00.71.53h9.9a.75.75 0 00.71-.53L20 11h-5.5a2.5 2.5 0 01-2 2.45.5.5 0 010 .05v3a.5.5 0 01-1 0v-3-.05zm-3 .05a.5.5 0 011 0v3a.5.5 0 01-1 0v-3zm6 0a.5.5 0 011 0v3a.5.5 0 01-1 0v-3z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 4.5A4.5 4.5 0 014.5 0h15A4.5 4.5 0 0124 4.5v15a4.5 4.5 0 01-4.5 4.5h-15A4.5 4.5 0 010 19.5v-15z\" fill=\"#33658A\" /><path d=\"M11.95 18.95c-.86 0-1.61-1.4-2.01-3.48h4.01c-.4 2.08-1.15 3.48-2 3.48zm-1.37-.3a5.59 5.59 0 01-2.65-3.18h1.45c.27 1.35.69 2.46 1.2 3.17zm2.73 0c.51-.72.93-1.83 1.2-3.18h1.45a5.58 5.58 0 01-2.65 3.17zm-4.14-.28a6.98 6.98 0 01-3.24-2.9h1.4a7.21 7.21 0 001.84 2.9zm5.55 0a7.2 7.2 0 001.85-2.9h1.4a6.97 6.97 0 01-3.25 2.9zm-8.85-6.95c.28 0 .57.01.88.04l-.01.54c0 1.03.14 2 .4 2.9H5.63A6.92 6.92 0 015 11.5c.26-.06.54-.09.86-.09zm1.45.11c.54.08 1.12.2 1.73.36V12c0 1.03.08 2 .22 2.9H7.73a9.93 9.93 0 01-.42-2.9v-.26l.01-.2zm2.31.51l.31.1c.46.13.92.27 1.46.46l.28.1 1.77.6.75.26a17.85 17.85 0 01-.15 1.34H9.84a19.27 19.27 0 01-.21-2.86zm5.13 1.7c.61.2 1.13.35 1.58.46a9.19 9.19 0 01-.18.7h-1.54c.06-.36.1-.73.14-1.11v-.05zm2.14.6c.62.12 1.1.16 1.54.12-.05.15-.11.3-.18.43h-1.5a9.83 9.83 0 00.13-.5l.01-.06zm2-2.34c0 .22-.02.44-.04.65-.49.12-1 .12-1.72-.02l.02-.63a10.46 10.46 0 00-.4-2.9h1.5c.4.89.63 1.87.63 2.9zm-2.32 0l-.01.5a26.64 26.64 0 01-1.73-.5c0-1.03-.08-2-.22-2.9h1.54c.27.89.42 1.87.42 2.9zm-2.32-.2a72.67 72.67 0 01-.56-.18l-.3-.1-1.32-.46a49.05 49.05 0 00-1.75-.57l-.22-.07-.3-.09-.11-.03c.03-.41.08-.81.14-1.2h4.21c.13.83.2 1.74.21 2.7zm-5.12-1.65a17.23 17.23 0 00-1.6-.33 9.21 9.21 0 01.2-.72h1.53c-.05.34-.1.7-.13 1.05zm-2.17-.4c-.38-.05-.75-.07-1.1-.07a4.81 4.81 0 00-.48.03l.24-.6h1.5l-.16.63zm2.2-4.12a7.21 7.21 0 00-1.85 2.9h-1.4a6.97 6.97 0 013.25-2.9zm1.41-.27a8.42 8.42 0 00-1.2 3.17H7.93a5.59 5.59 0 012.65-3.17zm1.36-.3c.86 0 1.61 1.4 2.01 3.47H9.94c.4-2.08 1.15-3.48 2-3.48zm1.37.3a5.58 5.58 0 012.65 3.17H14.5a8.61 8.61 0 00-1.16-3.1l-.04-.07zm1.4.27a6.97 6.97 0 013.25 2.9h-1.39a7.28 7.28 0 00-1.79-2.84l-.06-.06z\" fill=\"#fff\" /><path d=\"M18.56 10.27c1-.16 2 .38 2.33 1.2.37.93-.22 1.83-1.63 2.25l-.15.05c-1.21.32-2.34.08-5.66-1.05l-1.77-.6c-.67-.24-1.2-.4-1.74-.56-1.6-.48-2.9-.72-4.07-.72-1.53 0-2.33.72-2.29 1.66.04.9.86 1.61 1.97 1.53a.29.29 0 11.05.57c-1.44.11-2.54-.84-2.6-2.07-.06-1.3 1.03-2.27 2.87-2.27 1.15 0 2.42.22 3.93.65l.3.1c.6.17 1.2.36 1.97.63l1.33.46c3.49 1.19 4.56 1.41 5.7 1.07 1.1-.33 1.48-.9 1.25-1.48-.22-.57-.96-.97-1.7-.85a.29.29 0 01-.1-.57z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 4.5A4.5 4.5 0 014.5 0h15A4.5 4.5 0 0124 4.5v15a4.5 4.5 0 01-4.5 4.5h-15A4.5 4.5 0 010 19.5v-15z\" fill=\"#33658A\" /><path d=\"M11.95 18.95c-.86 0-1.61-1.4-2.01-3.48h4.01c-.4 2.08-1.15 3.48-2 3.48zm-1.37-.3a5.59 5.59 0 01-2.65-3.18h1.45c.27 1.35.69 2.46 1.2 3.17zm2.73 0c.51-.72.93-1.83 1.2-3.18h1.45a5.58 5.58 0 01-2.65 3.17zm-4.14-.28a6.98 6.98 0 01-3.24-2.9h1.4a7.21 7.21 0 001.84 2.9zm5.55 0a7.2 7.2 0 001.85-2.9h1.4a6.97 6.97 0 01-3.25 2.9zm-8.85-6.95c.28 0 .57.01.88.04l-.01.54c0 1.03.14 2 .4 2.9H5.63A6.92 6.92 0 015 11.5c.26-.06.54-.09.86-.09zm1.45.11c.54.08 1.12.2 1.73.36V12c0 1.03.08 2 .22 2.9H7.73a9.93 9.93 0 01-.42-2.9v-.26l.01-.2zm2.31.51l.31.1c.46.13.92.27 1.46.46l.28.1 1.77.6.75.26a17.85 17.85 0 01-.15 1.34H9.84a19.27 19.27 0 01-.21-2.86zm5.13 1.7c.61.2 1.13.35 1.58.46a9.19 9.19 0 01-.18.7h-1.54c.06-.36.1-.73.14-1.11v-.05zm2.14.6c.62.12 1.1.16 1.54.12-.05.15-.11.3-.18.43h-1.5a9.83 9.83 0 00.13-.5l.01-.06zm2-2.34c0 .22-.02.44-.04.65-.49.12-1 .12-1.72-.02l.02-.63a10.46 10.46 0 00-.4-2.9h1.5c.4.89.63 1.87.63 2.9zm-2.32 0l-.01.5a26.64 26.64 0 01-1.73-.5c0-1.03-.08-2-.22-2.9h1.54c.27.89.42 1.87.42 2.9zm-2.32-.2a72.67 72.67 0 01-.56-.18l-.3-.1-1.32-.46a49.05 49.05 0 00-1.75-.57l-.22-.07-.3-.09-.11-.03c.03-.41.08-.81.14-1.2h4.21c.13.83.2 1.74.21 2.7zm-5.12-1.65a17.23 17.23 0 00-1.6-.33 9.21 9.21 0 01.2-.72h1.53c-.05.34-.1.7-.13 1.05zm-2.17-.4c-.38-.05-.75-.07-1.1-.07a4.81 4.81 0 00-.48.03l.24-.6h1.5l-.16.63zm2.2-4.12a7.21 7.21 0 00-1.85 2.9h-1.4a6.97 6.97 0 013.25-2.9zm1.41-.27a8.42 8.42 0 00-1.2 3.17H7.93a5.59 5.59 0 012.65-3.17zm1.36-.3c.86 0 1.61 1.4 2.01 3.47H9.94c.4-2.08 1.15-3.48 2-3.48zm1.37.3a5.58 5.58 0 012.65 3.17H14.5a8.61 8.61 0 00-1.16-3.1l-.04-.07zm1.4.27a6.97 6.97 0 013.25 2.9h-1.39a7.28 7.28 0 00-1.79-2.84l-.06-.06z\" fill=\"#fff\" /><path d=\"M18.56 10.27c1-.16 2 .38 2.33 1.2.37.93-.22 1.83-1.63 2.25l-.15.05c-1.21.32-2.34.08-5.66-1.05l-1.77-.6c-.67-.24-1.2-.4-1.74-.56-1.6-.48-2.9-.72-4.07-.72-1.53 0-2.33.72-2.29 1.66.04.9.86 1.61 1.97 1.53a.29.29 0 11.05.57c-1.44.11-2.54-.84-2.6-2.07-.06-1.3 1.03-2.27 2.87-2.27 1.15 0 2.42.22 3.93.65l.3.1c.6.17 1.2.36 1.97.63l1.33.46c3.49 1.19 4.56 1.41 5.7 1.07 1.1-.33 1.48-.9 1.25-1.48-.22-.57-.96-.97-1.7-.85a.29.29 0 01-.1-.57z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 4.5A4.5 4.5 0 014.5 0h15A4.5 4.5 0 0124 4.5v15a4.5 4.5 0 01-4.5 4.5h-15A4.5 4.5 0 010 19.5v-15z\" fill=\"#33658A\" /><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M9.3 6.98a.38.38 0 01.35-.23h4.7c.15 0 .29.09.35.23l1.95 4.5a.38.38 0 01-.35.52h2.18c.15 0 .28.09.34.23l1.95 4.5a.38.38 0 01-.34.52H3.57a.38.38 0 01-.34-.52l1.95-4.5a.38.38 0 01.34-.23h2.17a.38.38 0 01-.34-.52l1.95-4.5zm.93 5.02c.15 0 .28.09.34.23L12 15.52l1.43-3.3a.38.38 0 01.34-.22h-3.54z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 4.5A4.5 4.5 0 014.5 0h15A4.5 4.5 0 0124 4.5v15a4.5 4.5 0 01-4.5 4.5h-15A4.5 4.5 0 010 19.5v-15z\" fill=\"#33658A\" /><path d=\"M9.75 7.5l.75-.38-.75-2.25h6.75L12 11.25l-.75-1.88-.75.38.75 1.88H4.5L9 5.25l.75 2.25zm-5.63 4.88h7.13l-1.5 1.87.75.38 1.5-1.88 3 6.38H7.87l1.5-2.25-.74-.38-1.5 2.25-3-6.38zm16.13-.76l-3-6.74-4.62 6.75H15v.74h-2.44l3.19 6.38 4.5-6.38h-3v-.74h3z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 4.5A4.5 4.5 0 014.5 0h15A4.5 4.5 0 0124 4.5v15a4.5 4.5 0 01-4.5 4.5h-15A4.5 4.5 0 010 19.5v-15z\" fill=\"#33658A\" /><path d=\"M11.98 15.56a3.47 3.47 0 110-6.93c1.02 0 1.98.43 2.64 1.19L16.5 8.2a5.54 5.54 0 00-2.48-1.69V4.5h-1.15v1.68a8.1 8.1 0 00-.9-.06c-.32 0-.62.03-.95.06V4.5H9.86v2.01A6 6 0 006 12.1a6 6 0 003.86 5.58v2.02h1.16v-1.72c.3.04.63.07.96.07.3 0 .6-.03.89-.07v1.72h1.15V17.7a6.03 6.03 0 002.48-1.69l-1.92-1.65a3.46 3.46 0 01-2.6 1.2z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 4.5A4.5 4.5 0 014.5 0h15A4.5 4.5 0 0124 4.5v15a4.5 4.5 0 01-4.5 4.5h-15A4.5 4.5 0 010 19.5v-15z\" fill=\"#33658A\" /><g clipPath=\"url(#prefix__clip0_35149_208071)\" fill=\"#fff\"><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M17.75 17h-2.17V8H21v2.25h-3.25v1.13H21v2.24h-3.25V17zm-8.9-9h6.5v2.25H13.2V17h-2.17v-6.75H8.85V8z\" /><path d=\"M5.16 13.62h2.7v-1.68h-2.7v-1.69h3.46V8.01H3v8.98h5.62v-2.24H5.17v-1.13z\" /></g><defs><clipPath id=\"prefix__clip0_35149_208071\"><path fill=\"#fff\" transform=\"translate(3 8)\" d=\"M0 0h18v9H0z\" /></clipPath></defs></svg>);","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { TInstrumentsIcon } from 'Components/props.types';\nimport TradingInstrumentsIcon from '../../Assets/svgs/trading-instruments';\n\nconst InstrumentsIconWithLabel = ({ icon, text, highlighted, className, is_asterisk }: TInstrumentsIcon) => {\n    return (\n        <div\n            style={{\n                opacity: highlighted ? '' : '0.2',\n            }}\n            data-testid='dt_instruments_icon_container'\n            className={className}\n        >\n            <TradingInstrumentsIcon icon={icon} size={24} className='trading-instruments__icon' />\n            <Text as='p' weight='bolder' line_height='xs' size='xxs' align='left' className='trading-instruments__text'>\n                {text}\n            </Text>\n            {is_asterisk && (\n                <span className='trading-instruments__span' style={{ display: is_asterisk ? 'block' : 'none' }}>\n                    *\n                </span>\n            )}\n        </div>\n    );\n};\n\nexport default InstrumentsIconWithLabel;\n","import { localize } from '@deriv/translations';\nimport {\n    TInstrumentsIcon,\n    TModifiedTradingPlatformAvailableAccount,\n    TDetailsOfEachMT5Loginid,\n} from '../Components/props.types';\nimport { CFD_PLATFORMS, MARKET_TYPE, CATEGORY, JURISDICTION, REGION, MARKET_TYPE_SHORTCODE } from './cfd-config';\n\n// Map the accounts according to the market type\nconst getHighlightedIconLabel = (\n    trading_platforms: TModifiedTradingPlatformAvailableAccount,\n    selected_region?: string,\n    is_demo?: boolean\n): TInstrumentsIcon[] => {\n    const market_type = getMarketType(trading_platforms);\n    const market_type_shortcode = market_type.concat('_', trading_platforms.shortcode);\n    // Forex for these: MT5 Financial Vanuatu, MT5 Financial Labuan\n    const forex_label =\n        market_type_shortcode === MARKET_TYPE_SHORTCODE.FINANCIAL_LABUAN ||\n        market_type_shortcode === MARKET_TYPE_SHORTCODE.FINANCIAL_VANUATU ||\n        is_demo ||\n        trading_platforms.platform === CFD_PLATFORMS.DXTRADE ||\n        trading_platforms.platform === CFD_PLATFORMS.CTRADER ||\n        selected_region === REGION.EU ||\n        (trading_platforms.platform === CFD_PLATFORMS.MT5 && market_type_shortcode === 'all_svg')\n            ? localize('Forex')\n            : localize('Forex: standard/micro');\n\n    switch (trading_platforms.market_type) {\n        case MARKET_TYPE.GAMING:\n            return [\n                { icon: 'Synthetics', text: localize('Synthetics'), highlighted: true },\n                { icon: 'Baskets', text: localize('Baskets'), highlighted: true },\n                { icon: 'DerivedFX', text: localize('Derived FX'), highlighted: true },\n                { icon: 'Stocks', text: localize('Stocks'), highlighted: false },\n                { icon: 'StockIndices', text: localize('Stock indices'), highlighted: false },\n                { icon: 'Commodities', text: localize('Commodities'), highlighted: false },\n                { icon: 'Forex', text: forex_label, highlighted: false },\n                { icon: 'Cryptocurrencies', text: localize('Cryptocurrencies'), highlighted: false },\n                { icon: 'ETF', text: localize('ETF'), highlighted: false },\n            ];\n        case MARKET_TYPE.FINANCIAL:\n            switch (trading_platforms.shortcode) {\n                case JURISDICTION.MALTA_INVEST:\n                    return [\n                        { icon: 'Synthetics', text: localize('Synthetics'), highlighted: true, is_asterisk: true },\n                        { icon: 'Forex', text: forex_label, highlighted: true },\n                        { icon: 'Stocks', text: localize('Stocks'), highlighted: true },\n                        { icon: 'StockIndices', text: localize('Stock indices'), highlighted: true },\n                        { icon: 'Commodities', text: localize('Commodities'), highlighted: true },\n                        { icon: 'Cryptocurrencies', text: localize('Cryptocurrencies'), highlighted: true },\n                    ];\n                case JURISDICTION.LABUAN:\n                    return [\n                        { icon: 'Synthetics', text: localize('Synthetics'), highlighted: false },\n                        { icon: 'Baskets', text: localize('Baskets'), highlighted: false },\n                        { icon: 'DerivedFX', text: localize('Derived FX'), highlighted: false },\n                        { icon: 'Stocks', text: localize('Stocks'), highlighted: false },\n                        { icon: 'StockIndices', text: localize('Stock indices'), highlighted: false },\n                        { icon: 'Commodities', text: localize('Commodities'), highlighted: false },\n                        { icon: 'Forex', text: forex_label, highlighted: true },\n                        { icon: 'Cryptocurrencies', text: localize('Cryptocurrencies'), highlighted: true },\n                        { icon: 'ETF', text: localize('ETF'), highlighted: true },\n                    ];\n                default:\n                    return [\n                        { icon: 'Synthetics', text: localize('Synthetics'), highlighted: false },\n                        { icon: 'Baskets', text: localize('Baskets'), highlighted: false },\n                        { icon: 'DerivedFX', text: localize('Derived FX'), highlighted: false },\n                        { icon: 'Stocks', text: localize('Stocks'), highlighted: true },\n                        { icon: 'StockIndices', text: localize('Stock indices'), highlighted: true },\n                        { icon: 'Commodities', text: localize('Commodities'), highlighted: true },\n                        { icon: 'Forex', text: forex_label, highlighted: true },\n                        { icon: 'Cryptocurrencies', text: localize('Cryptocurrencies'), highlighted: true },\n                        { icon: 'ETF', text: localize('ETF'), highlighted: true },\n                    ];\n            }\n        case MARKET_TYPE.ALL:\n        default:\n            if (trading_platforms.platform === CFD_PLATFORMS.MT5) {\n                return [\n                    { icon: 'Synthetics', text: localize('Synthetics'), highlighted: true },\n                    { icon: 'Baskets', text: localize('Baskets'), highlighted: false },\n                    { icon: 'DerivedFX', text: localize('Derived FX'), highlighted: false },\n                    { icon: 'Stocks', text: localize('Stocks'), highlighted: true },\n                    { icon: 'StockIndices', text: localize('Stock indices'), highlighted: true },\n                    { icon: 'Commodities', text: localize('Commodities'), highlighted: false },\n                    { icon: 'Forex', text: forex_label, highlighted: true },\n                    { icon: 'Cryptocurrencies', text: localize('Cryptocurrencies'), highlighted: true },\n                    { icon: 'ETF', text: localize('ETF'), highlighted: true },\n                ];\n            }\n            return [\n                { icon: 'Synthetics', text: localize('Synthetics'), highlighted: true },\n                { icon: 'Baskets', text: localize('Baskets'), highlighted: true },\n                { icon: 'DerivedFX', text: localize('Derived FX'), highlighted: true },\n                { icon: 'Stocks', text: localize('Stocks'), highlighted: true },\n                { icon: 'StockIndices', text: localize('Stock indices'), highlighted: true },\n                { icon: 'Commodities', text: localize('Commodities'), highlighted: true },\n                { icon: 'Forex', text: forex_label, highlighted: true },\n                { icon: 'Cryptocurrencies', text: localize('Cryptocurrencies'), highlighted: true },\n                { icon: 'ETF', text: localize('ETF'), highlighted: true },\n            ];\n    }\n};\n\n// Get the Account Title according to the market type and jurisdiction\nconst getAccountCardTitle = (shortcode: string, is_demo?: boolean) => {\n    switch (shortcode) {\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC_SVG:\n            return is_demo ? localize('Derived Demo') : localize('Derived - SVG');\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC_BVI:\n            return localize('Derived - BVI');\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC_VANUATU:\n            return localize('Derived - Vanuatu');\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_SVG:\n            return is_demo ? localize('Financial Demo') : localize('Financial - SVG');\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_BVI:\n            return localize('Financial - BVI');\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_VANUATU:\n            return localize('Financial - Vanuatu');\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_LABUAN:\n            return localize('Financial - Labuan');\n        case MARKET_TYPE_SHORTCODE.ALL_SVG:\n            return is_demo ? localize('Swap-Free Demo') : localize('Swap-Free - SVG');\n        case CFD_PLATFORMS.DXTRADE:\n            return is_demo ? localize('Deriv X Demo') : localize('Deriv X');\n        case CFD_PLATFORMS.CTRADER:\n            return is_demo ? localize('cTrader Demo') : localize('cTrader');\n        default:\n            return is_demo ? localize('CFDs Demo') : localize('CFDs');\n    }\n};\n\n// Get the Platform label\nconst getPlatformLabel = (shortcode?: string) => {\n    switch (shortcode) {\n        case CFD_PLATFORMS.DXTRADE:\n        case CFD_PLATFORMS.CTRADER:\n        case CFD_PLATFORMS.CFDS:\n            return localize('Other CFDs Platform');\n        case CFD_PLATFORMS.MT5:\n        default:\n            return localize('MT5 Platform');\n    }\n};\n\n// Object to map the platform label\nconst platfromsHeaderLabel = {\n    mt5: localize('MT5 Platform'),\n    other_cfds: localize('Other CFDs Platform'),\n};\n\n// Get the Account Icons based on the market type\nconst getAccountIcon = (shortcode: string) => {\n    switch (shortcode) {\n        case MARKET_TYPE.SYNTHETIC:\n            return 'Derived';\n        case MARKET_TYPE.FINANCIAL:\n            return 'Financial';\n        case MARKET_TYPE.ALL:\n            return 'SwapFree';\n        case CFD_PLATFORMS.DXTRADE:\n            return 'DerivX';\n        case CFD_PLATFORMS.CTRADER:\n            return 'CTrader';\n        default:\n            return 'CFDs';\n    }\n};\n\n// Convert the market type from gaming to synthethics\nconst getMarketType = (trading_platforms: TModifiedTradingPlatformAvailableAccount) => {\n    return trading_platforms.market_type === MARKET_TYPE.GAMING ? MARKET_TYPE.SYNTHETIC : trading_platforms.market_type;\n};\n\n// Get the color of Header based on the platform\nconst getHeaderColor = (shortcode: string) => {\n    switch (shortcode) {\n        case platfromsHeaderLabel.other_cfds:\n            return 'green';\n        case platfromsHeaderLabel.mt5:\n        default:\n            return 'blue';\n    }\n};\n\n// Config for different Jurisdictions\nconst cfd_config = () => ({\n    leverage: '1:1000',\n    leverage_description: localize('Maximum leverage'),\n    spread: '0.5 pips',\n    spread_description: localize('Spreads from'),\n    counterparty_company: 'Deriv (SVG) LLC',\n    counterparty_company_description: localize('Counterparty company'),\n    jurisdiction: 'St. Vincent & Grenadines',\n    jurisdiction_description: localize('Jurisdiction'),\n    regulator: localize('Financial Commission'),\n    regulator_description: localize('Regulator/External dispute resolution'),\n    regulator_license: '',\n});\n\n// Map the Jurisdictions with the config\nconst getJuridisctionDescription = (shortcode: string) => {\n    const createDescription = (\n        counterparty_company: string,\n        jurisdiction: string,\n        regulator: string,\n        regulator_license: string | undefined,\n        regulator_description: string,\n        leverage: string = cfd_config().leverage\n    ) => ({\n        ...cfd_config(),\n        counterparty_company,\n        jurisdiction,\n        regulator,\n        regulator_license,\n        regulator_description,\n        leverage,\n    });\n\n    switch (shortcode) {\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC_BVI:\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_BVI:\n            return createDescription(\n                'Deriv (BVI) Ltd',\n                'British Virgin Islands',\n                localize('British Virgin Islands Financial Services Commission'),\n                localize('(License no. SIBA/L/18/1114)'),\n                localize('Regulator/External dispute resolution')\n            );\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC_VANUATU:\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_VANUATU:\n            return createDescription(\n                'Deriv (V) Ltd',\n                'Vanuatu',\n                localize('Vanuatu Financial Services Commission'),\n                '',\n                localize('Regulator/External dispute resolution')\n            );\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_LABUAN:\n            return createDescription(\n                'Deriv (FX) Ltd',\n                'Labuan',\n                localize('Labuan Financial Services Authority'),\n                localize('(licence no. MB/18/0024)'),\n                localize('Regulator/External dispute resolution'),\n                '1:100'\n            );\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_MALTA_INVEST:\n            return createDescription(\n                'Deriv Investments (Europe) Limited',\n                'Malta',\n                localize('Financial Commission'),\n                localize('Regulated by the Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n                '',\n                'Up to 1:30'\n            );\n        // Dxtrade\n        case MARKET_TYPE_SHORTCODE.ALL_DXTRADE:\n        case MARKET_TYPE_SHORTCODE.ALL_SVG:\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC_SVG:\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_SVG:\n        default:\n            return cfd_config();\n    }\n};\n\n// Sort the MT5 accounts in the order of derived, financial and swap-free\nconst getSortedCFDAvailableAccounts = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    const swap_free_accounts = available_accounts\n        .filter(item => item.market_type === MARKET_TYPE.ALL)\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 } as const));\n    const financial_accounts = available_accounts\n        .filter(item => item.market_type === MARKET_TYPE.FINANCIAL && item.shortcode !== JURISDICTION.MALTA_INVEST)\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 } as const));\n    const gaming_accounts = available_accounts\n        .filter(item => item.market_type === MARKET_TYPE.GAMING)\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 } as const));\n    return [...gaming_accounts, ...financial_accounts, ...swap_free_accounts];\n};\n\n// Get the maltainvest accounts for EU and DIEL clients\nconst getEUAvailableAccounts = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    const financial_accounts = available_accounts\n        .filter(item => item.market_type === MARKET_TYPE.FINANCIAL && item.shortcode === JURISDICTION.MALTA_INVEST)\n        .map(item => ({ ...item, platform: CFD_PLATFORMS.MT5 } as const));\n    return [...financial_accounts];\n};\n\n// Make the Deriv X data same as trading_platform_available_accounts\nconst dxtrade_data: TModifiedTradingPlatformAvailableAccount = {\n    market_type: MARKET_TYPE.ALL,\n    name: 'Deriv X',\n    requirements: {\n        after_first_deposit: {\n            financial_assessment: [''],\n        },\n        compliance: {\n            mt5: [''],\n            tax_information: [''],\n        },\n        signup: [''],\n    },\n    shortcode: JURISDICTION.SVG,\n    sub_account_type: '',\n    platform: CFD_PLATFORMS.DXTRADE,\n};\n\nconst ctrader_data: TModifiedTradingPlatformAvailableAccount = {\n    market_type: MARKET_TYPE.ALL,\n    name: 'cTrader',\n    requirements: {\n        after_first_deposit: {\n            financial_assessment: [''],\n        },\n        compliance: {\n            mt5: [''],\n            tax_information: [''],\n        },\n        signup: [''],\n    },\n    shortcode: JURISDICTION.SVG,\n    sub_account_type: '',\n    platform: CFD_PLATFORMS.CTRADER,\n};\n\n// Check whether the POA POI status are completed for different jurisdictions\nconst getAccountVerficationStatus = (\n    market_type_shortcode: string,\n    poi_or_poa_not_submitted: boolean,\n    poi_acknowledged_for_vanuatu_maltainvest: boolean,\n    poi_acknowledged_for_bvi_labuan: boolean,\n    poa_acknowledged: boolean,\n    poa_pending: boolean,\n    should_restrict_bvi_account_creation: boolean,\n    should_restrict_vanuatu_account_creation: boolean,\n    has_submitted_personal_details: boolean,\n    is_demo?: boolean\n) => {\n    switch (market_type_shortcode) {\n        case MARKET_TYPE_SHORTCODE.ALL_SVG:\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC_SVG:\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_SVG:\n            return true;\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC_BVI:\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_BVI:\n            if (\n                poi_acknowledged_for_bvi_labuan &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_bvi_account_creation &&\n                has_submitted_personal_details &&\n                poa_acknowledged\n            ) {\n                return true;\n            }\n            return false;\n        case MARKET_TYPE_SHORTCODE.SYNTHETIC_VANUATU:\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_VANUATU:\n            if (\n                poi_acknowledged_for_vanuatu_maltainvest &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_vanuatu_account_creation &&\n                has_submitted_personal_details &&\n                poa_acknowledged\n            ) {\n                return true;\n            }\n            return false;\n\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_LABUAN:\n            if (poi_acknowledged_for_bvi_labuan && poa_acknowledged && has_submitted_personal_details) {\n                return true;\n            }\n            return false;\n\n        case MARKET_TYPE_SHORTCODE.FINANCIAL_MALTA_INVEST:\n            if ((poi_acknowledged_for_vanuatu_maltainvest && poa_acknowledged) || is_demo) {\n                return true;\n            }\n            return false;\n        default:\n            return false;\n    }\n};\n\n// Check what MT5 accounts are added based on jurisdisction\nconst isMt5AccountAdded = (current_list: Record<string, TDetailsOfEachMT5Loginid>, item: string, is_demo?: boolean) =>\n    Object.entries(current_list).some(([key, value]) => {\n        const [market, type] = item.split('_');\n        const current_account_type = is_demo ? CATEGORY.DEMO : CATEGORY.REAL;\n        return (\n            value.market_type === market &&\n            value.landing_company_short === type &&\n            value.account_type === current_account_type &&\n            key.includes(CFD_PLATFORMS.MT5)\n        );\n    });\n\nconst isDxtradeAccountAdded = (current_list: Record<string, TDetailsOfEachMT5Loginid>, is_demo?: boolean) =>\n    Object.entries(current_list).some(([key, value]) => {\n        const current_account_type = is_demo ? CATEGORY.DEMO : CATEGORY.REAL;\n        return value.account_type === current_account_type && key.includes(CFD_PLATFORMS.DXTRADE);\n    });\n\nconst isCTraderAccountAdded = (current_list: Record<string, TDetailsOfEachMT5Loginid>, is_demo?: boolean) =>\n    Object.entries(current_list).some(([key, value]) => {\n        const current_account_type = is_demo ? CATEGORY.DEMO : CATEGORY.REAL;\n        return value.account_type === current_account_type && key.includes(CFD_PLATFORMS.CTRADER);\n    });\n\n// Get the MT5 demo accounts of the user\nconst getMT5DemoData = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    const swap_free_demo_accounts = available_accounts.filter(\n        item =>\n            item.market_type === MARKET_TYPE.ALL &&\n            item.shortcode === JURISDICTION.SVG &&\n            item.platform === CFD_PLATFORMS.MT5\n    );\n    const financial_demo_accounts = available_accounts.filter(\n        item => item.market_type === MARKET_TYPE.FINANCIAL && item.shortcode === JURISDICTION.SVG\n    );\n    const gaming_demo_accounts = available_accounts.filter(\n        item => item.market_type === MARKET_TYPE.GAMING && item.shortcode === JURISDICTION.SVG\n    );\n    return [...gaming_demo_accounts, ...financial_demo_accounts, ...swap_free_demo_accounts];\n};\nconst getDxtradeDemoData = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    return available_accounts.filter(item => item.platform === CFD_PLATFORMS.DXTRADE);\n};\n\nconst getCtraderDemoData = (available_accounts: TModifiedTradingPlatformAvailableAccount[]) => {\n    return available_accounts.filter(item => item.platform === CFD_PLATFORMS.CTRADER);\n};\n\nexport {\n    getHighlightedIconLabel,\n    getJuridisctionDescription,\n    getAccountCardTitle,\n    getMarketType,\n    getAccountIcon,\n    getPlatformLabel,\n    getSortedCFDAvailableAccounts,\n    getEUAvailableAccounts,\n    dxtrade_data,\n    ctrader_data,\n    getHeaderColor,\n    platfromsHeaderLabel,\n    getAccountVerficationStatus,\n    isMt5AccountAdded,\n    isDxtradeAccountAdded,\n    isCTraderAccountAdded,\n    getMT5DemoData,\n    getDxtradeDemoData,\n    getCtraderDemoData,\n};\n","import React from 'react';\nimport InstrumentsIconWithLabel from './instruments-icon-with-label';\nimport { TInstrumentsIcon, TCompareAccountsCard } from 'Components/props.types';\nimport { getHighlightedIconLabel } from '../../Helpers/compare-accounts-config';\nimport { useStore } from '@deriv/stores';\n\nconst CFDInstrumentsLabelHighlighted = ({ trading_platforms, is_demo }: TCompareAccountsCard) => {\n    const { traders_hub } = useStore();\n    const selected_region = traders_hub.selected_region;\n\n    const iconData: TInstrumentsIcon[] = [...getHighlightedIconLabel(trading_platforms, selected_region, is_demo)];\n\n    return (\n        <div className={'compare-cfd-account-outline'} data-testid='dt_compare_cfd_account_outline__container'>\n            {iconData.map(item => (\n                <InstrumentsIconWithLabel key={item.text} {...item} className='compare-cfd-account-instrument-icon' />\n            ))}\n        </div>\n    );\n};\n\nexport default CFDInstrumentsLabelHighlighted;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Text } from '@deriv/components';\nimport { TCompareAccountsCard } from 'Components/props.types';\nimport { useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\nimport { getJuridisctionDescription, getMarketType } from '../../Helpers/compare-accounts-config';\nimport { REGION } from '../../Helpers/cfd-config';\n\nconst CFDCompareAccountsDescription = ({ trading_platforms, is_demo }: TCompareAccountsCard) => {\n    const market_type = getMarketType(trading_platforms);\n    const market_type_shortcode = market_type.concat('_', trading_platforms.shortcode);\n    const juridisction_data = getJuridisctionDescription(market_type_shortcode);\n    const { traders_hub } = useStore();\n    const { selected_region } = traders_hub;\n    return (\n        <div\n            className={classNames('compare-cfd-account-text-container', {\n                'compare-cfd-account-text-container--demo': is_demo,\n            })}\n        >\n            <div className='compare-cfd-account-text-container__separator'>\n                <Text as='h1' weight='bold' size='m' align='center'>\n                    {juridisction_data.leverage}\n                </Text>\n                <Text as='p' size='xxxs' align='center'>\n                    {selected_region === REGION.NON_EU ? juridisction_data.leverage_description : localize('Leverage')}\n                </Text>\n            </div>\n            {selected_region === REGION.NON_EU && (\n                <div className='compare-cfd-account-text-container__separator'>\n                    <Text as='h1' weight='bold' size='m' align='center'>\n                        {juridisction_data.spread}\n                    </Text>\n                    <Text as='p' size='xxxs' align='center'>\n                        {juridisction_data.spread_description}\n                    </Text>\n                </div>\n            )}\n            {!is_demo && (\n                <React.Fragment>\n                    <div className='compare-cfd-account-text-container__separator'>\n                        <Text as='h1' weight='bold' size='xs' align='center'>\n                            {juridisction_data.counterparty_company}\n                        </Text>\n                        <Text as='p' size='xxxs' align='center'>\n                            {juridisction_data.counterparty_company_description}\n                        </Text>\n                    </div>\n                    <div className='compare-cfd-account-text-container__separator'>\n                        <Text as='h1' weight='bold' size='xs' align='center'>\n                            {juridisction_data.jurisdiction}\n                        </Text>\n                        <Text as='p' size='xxxs' align='center'>\n                            {juridisction_data.jurisdiction_description}\n                        </Text>\n                    </div>\n                    <div className='compare-cfd-account-text-container__separator'>\n                        <Text as='h1' weight='bold' size='xs' align='center'>\n                            {juridisction_data.regulator}\n                        </Text>\n                        {juridisction_data.regulator_license && (\n                            <Text as='p' size='xxxs' align='center'>\n                                {juridisction_data.regulator_license}\n                            </Text>\n                        )}\n                        <Text as='p' size='xxxs' align='center'>\n                            {juridisction_data.regulator_description}\n                        </Text>\n                    </div>\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default CFDCompareAccountsDescription;\n","import React from 'react';\nimport { Text, Popover } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport TradigPlatformIconProps from '../../Assets/svgs/trading-platform';\nimport { TCompareAccountsCard } from 'Components/props.types';\nimport { getAccountCardTitle, getMarketType, getAccountIcon } from '../../Helpers/compare-accounts-config';\nimport { CFD_PLATFORMS, MARKET_TYPE_SHORTCODE } from '../../Helpers/cfd-config';\n\nconst CFDCompareAccountsTitleIcon = ({ trading_platforms, is_eu_user, is_demo }: TCompareAccountsCard) => {\n    const market_type = !is_eu_user ? getMarketType(trading_platforms) : 'CFDs';\n    const market_type_shortcode = market_type.concat('_', trading_platforms.shortcode);\n    const jurisdiction_card_icon =\n        trading_platforms.platform === CFD_PLATFORMS.DXTRADE || trading_platforms.platform === CFD_PLATFORMS.CTRADER\n            ? getAccountIcon(trading_platforms.platform)\n            : getAccountIcon(market_type);\n    const jurisdiction_card_title =\n        trading_platforms.platform === CFD_PLATFORMS.DXTRADE || trading_platforms.platform === CFD_PLATFORMS.CTRADER\n            ? getAccountCardTitle(trading_platforms.platform, is_demo)\n            : getAccountCardTitle(market_type_shortcode, is_demo);\n    const labuan_jurisdiction_message = localize(\n        'Choosing this jurisdiction will give you a Financial STP account. Your trades will go directly to the market and have tighter spreads.'\n    );\n\n    return (\n        <React.Fragment>\n            <div className={'compare-cfd-account-icon-title'}>\n                <TradigPlatformIconProps icon={jurisdiction_card_icon} size={48} />\n                <div className='compare-cfd-account-icon-title__separator'>\n                    <Text as='h1' weight='bold' size='xs' align='center'>\n                        {jurisdiction_card_title}\n                    </Text>\n                    {market_type_shortcode === MARKET_TYPE_SHORTCODE.FINANCIAL_LABUAN && (\n                        <Popover\n                            alignment='bottom'\n                            className='compare-cfd-account-labuan-tooltip'\n                            classNameBubble='compare-cfd-account-labuan-tooltip--msg'\n                            icon='info'\n                            disable_message_icon\n                            is_bubble_hover_enabled\n                            message={labuan_jurisdiction_message}\n                            zIndex={9999}\n                        />\n                    )}\n                </div>\n            </div>\n            <hr className='compare-cfd-account-underline' />\n        </React.Fragment>\n    );\n};\n\nexport default CFDCompareAccountsTitleIcon;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Text } from '@deriv/components';\nimport { TCompareAccountsCard } from 'Components/props.types';\nimport { getPlatformLabel, getHeaderColor, platfromsHeaderLabel } from '../../Helpers/compare-accounts-config';\n\nconst CFDCompareAccountsPlatformLabel = ({ trading_platforms }: TCompareAccountsCard) => {\n    const platform_label = getPlatformLabel(trading_platforms.platform);\n    const header_color = getHeaderColor(platform_label);\n\n    return (\n        <div\n            className={classNames('compare-cfd-account-platform-label', {\n                'compare-cfd-account-platform-label--other-cfds': platform_label === platfromsHeaderLabel.other_cfds,\n            })}\n        >\n            <Text as='p' weight='bold' size='xxxs' align='center' color={header_color}>\n                {platform_label}\n            </Text>\n        </div>\n    );\n};\n\nexport default CFDCompareAccountsPlatformLabel;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { routes, getAuthenticationStatusInfo, WS } from '@deriv/shared';\nimport { Button } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { GetSettings, GetAccountSettingsResponse } from '@deriv/api-types';\nimport { TCompareAccountsCard } from 'Components/props.types';\nimport {\n    getMarketType,\n    getAccountVerficationStatus,\n    isMt5AccountAdded,\n    isDxtradeAccountAdded,\n    isCTraderAccountAdded,\n} from '../../Helpers/compare-accounts-config';\nimport { CATEGORY, CFD_PLATFORMS } from '../../Helpers/cfd-config';\n\nconst CFDCompareAccountsButton = observer(({ trading_platforms, is_demo }: TCompareAccountsCard) => {\n    const history = useHistory();\n\n    const market_type = getMarketType(trading_platforms);\n    const market_type_shortcode = market_type.concat('_', trading_platforms.shortcode);\n    const {\n        modules: { cfd },\n        common,\n        client,\n        traders_hub,\n    } = useStore();\n\n    const {\n        setAccountType,\n        setJurisdictionSelectedShortcode,\n        enableCFDPasswordModal,\n        toggleCFDVerificationModal,\n        current_list,\n    } = cfd;\n    const { getAccount } = traders_hub;\n    const { setAppstorePlatform } = common;\n\n    const {\n        account_status,\n        account_settings,\n        should_restrict_bvi_account_creation,\n        should_restrict_vanuatu_account_creation,\n        is_logged_in,\n        is_virtual,\n        setAccountSettings,\n        updateMT5Status,\n    } = client;\n\n    const {\n        poi_or_poa_not_submitted,\n        poi_acknowledged_for_vanuatu_maltainvest,\n        poi_acknowledged_for_bvi_labuan,\n        poa_acknowledged,\n        poa_pending,\n    } = getAuthenticationStatusInfo(account_status);\n\n    const type_of_account = {\n        category: is_demo ? CATEGORY.DEMO : CATEGORY.REAL,\n        type: market_type,\n    };\n\n    const [has_submitted_personal_details, setHasSubmittedPersonalDetails] = React.useState(false);\n    let is_account_added = false;\n\n    if (trading_platforms.platform === CFD_PLATFORMS.MT5) {\n        is_account_added = isMt5AccountAdded(current_list, market_type_shortcode, is_demo);\n    } else if (trading_platforms.platform === CFD_PLATFORMS.DXTRADE) {\n        is_account_added = isDxtradeAccountAdded(current_list, is_demo);\n    } else if (trading_platforms.platform === CFD_PLATFORMS.CTRADER) {\n        is_account_added = isCTraderAccountAdded(current_list, is_demo);\n    }\n\n    React.useEffect(() => {\n        if (is_logged_in && !is_virtual) {\n            updateMT5Status();\n        }\n        if (!has_submitted_personal_details) {\n            let get_settings_response: GetSettings = {};\n            if (!account_settings) {\n                WS.authorized.storage.getSettings().then((response: GetAccountSettingsResponse) => {\n                    get_settings_response = response.get_settings as GetSettings;\n                    setAccountSettings(response.get_settings as GetSettings);\n                });\n            } else {\n                get_settings_response = account_settings;\n            }\n            const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n                get_settings_response;\n            if (citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason) {\n                setHasSubmittedPersonalDetails(true);\n            }\n        }\n    }, [\n        account_settings,\n        has_submitted_personal_details,\n        is_logged_in,\n        is_virtual,\n        setAccountSettings,\n        updateMT5Status,\n    ]);\n\n    const is_account_status_verified = getAccountVerficationStatus(\n        market_type_shortcode,\n        poi_or_poa_not_submitted,\n        poi_acknowledged_for_vanuatu_maltainvest,\n        poi_acknowledged_for_bvi_labuan,\n        poa_acknowledged,\n        poa_pending,\n        should_restrict_bvi_account_creation,\n        should_restrict_vanuatu_account_creation,\n        has_submitted_personal_details,\n        is_demo\n    );\n\n    const onClickAdd = () => {\n        setAppstorePlatform(trading_platforms.platform as string);\n        if (trading_platforms.platform === CFD_PLATFORMS.MT5) {\n            setJurisdictionSelectedShortcode(trading_platforms.shortcode);\n            if (is_account_status_verified) {\n                setAccountType(type_of_account);\n                enableCFDPasswordModal();\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else {\n            setAccountType(type_of_account);\n            getAccount();\n        }\n        history.push(routes.traders_hub);\n    };\n    return (\n        <Button\n            className='compare-cfd-account__button'\n            primary_light\n            onClick={onClickAdd}\n            disabled={is_account_added}\n            data-testid='dt_compare_cfd_account_button'\n        >\n            {is_account_added ? localize('Added') : localize('Add')}\n        </Button>\n    );\n});\n\nexport default CFDCompareAccountsButton;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { CFD_PLATFORMS } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { TCompareAccountsCard } from 'Components/props.types';\nimport CFDInstrumentsLabelHighlighted from './cfd-instruments-label-highlighted';\nimport CFDCompareAccountsDescription from './cfd-compare-accounts-description';\nimport CFDCompareAccountsTitleIcon from './cfd-compare-accounts-title-icon';\nimport CFDCompareAccountsPlatformLabel from './cfd-compare-accounts-platform-label';\nimport CFDCompareAccountsButton from './cfd-compare-accounts-button';\n\nconst CFDCompareAccountsCard = ({ trading_platforms, is_eu_user, is_demo }: TCompareAccountsCard) => {\n    return (\n        <div className='compare-cfd-account-main-container'>\n            <div className='compare-cfd-account-card-container'>\n                <CFDCompareAccountsPlatformLabel trading_platforms={trading_platforms} />\n                {(trading_platforms.platform === CFD_PLATFORMS.DERIVEZ ||\n                    trading_platforms.platform === CFD_PLATFORMS.CTRADER) && (\n                    <Text className='compare-cfd-account-card-container__banner' weight='bold' size='xs'>\n                        <Localize i18n_default_text='New!' />\n                    </Text>\n                )}\n                <CFDCompareAccountsTitleIcon\n                    trading_platforms={trading_platforms}\n                    is_eu_user={is_eu_user}\n                    is_demo={is_demo}\n                />\n                <CFDCompareAccountsDescription trading_platforms={trading_platforms} is_demo={is_demo} />\n                <CFDInstrumentsLabelHighlighted trading_platforms={trading_platforms} is_demo={is_demo} />\n                {is_eu_user && (\n                    <div className='compare-cfd-account-card-container__eu-clients'>\n                        <Text color='red' size='xxs' weight='bold'>\n                            {localize('*Boom 300 and Crash 300 Index')}\n                        </Text>\n                    </div>\n                )}\n                <CFDCompareAccountsButton trading_platforms={trading_platforms} is_demo={is_demo} />\n            </div>\n        </div>\n    );\n};\n\nexport default CFDCompareAccountsCard;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Text, Icon, PageOverlay, DesktopWrapper, MobileWrapper, CFDCompareAccountsCarousel } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport CFDCompareAccountsCard from './cfd-compare-accounts-card';\nimport {\n    getSortedCFDAvailableAccounts,\n    getEUAvailableAccounts,\n    getMT5DemoData,\n    getDxtradeDemoData,\n    getCtraderDemoData,\n    dxtrade_data,\n    ctrader_data,\n} from '../../Helpers/compare-accounts-config';\nimport { REGION } from '../../Helpers/cfd-config';\n\nconst CompareCFDs = observer(() => {\n    const history = useHistory();\n    const store = useStore();\n    const { client, traders_hub } = store;\n    const { trading_platform_available_accounts } = client;\n    const { is_demo, is_eu_user, available_dxtrade_accounts, selected_region, available_ctrader_accounts } =\n        traders_hub;\n\n    const sorted_available_accounts = !is_eu_user\n        ? getSortedCFDAvailableAccounts(trading_platform_available_accounts)\n        : getEUAvailableAccounts(trading_platform_available_accounts);\n\n    // Check if dxtrade data is available\n    const has_dxtrade_account_available = available_dxtrade_accounts.length > 0;\n\n    const has_ctrader_account_available = available_ctrader_accounts.length > 0;\n\n    const sorted_cfd_available_eu_accounts =\n        is_eu_user && sorted_available_accounts.length ? [...sorted_available_accounts] : [];\n\n    // Getting real accounts data\n    const all_real_sorted_cfd_available_accounts = !is_eu_user\n        ? [...sorted_available_accounts]\n        : [...sorted_cfd_available_eu_accounts];\n\n    // Getting demo accounts data\n    const demo_cfd_available_accounts = [\n        ...getMT5DemoData(all_real_sorted_cfd_available_accounts),\n        ...getDxtradeDemoData(all_real_sorted_cfd_available_accounts),\n        ...getCtraderDemoData(all_real_sorted_cfd_available_accounts),\n    ];\n\n    const all_cfd_available_accounts =\n        is_demo && demo_cfd_available_accounts.length > 0\n            ? demo_cfd_available_accounts\n            : all_real_sorted_cfd_available_accounts;\n\n    // Calculate the card count for alignment of card in center\n    const card_count =\n        has_dxtrade_account_available || has_ctrader_account_available\n            ? all_cfd_available_accounts.length + 1\n            : all_cfd_available_accounts.length;\n\n    const DesktopHeader = (\n        <div className='compare-cfd-header'>\n            <div\n                className='compare-cfd-header-navigation'\n                onClick={() => {\n                    history.push(routes.traders_hub);\n                }}\n            >\n                <Icon icon='IcArrowLeftBold' />\n                <Text size='xs' weight='bold' color='prominent'>\n                    <Localize i18n_default_text=\"Trader's hub\" />\n                </Text>\n            </div>\n            <h1 className='compare-cfd-header-title'>\n                <Text size='m' weight='bold' color='prominent'>\n                    <Localize\n                        i18n_default_text={\n                            selected_region === REGION.EU\n                                ? 'Deriv MT5 CFDs {{real_title}} account'\n                                : 'Compare CFDs {{demo_title}} accounts'\n                        }\n                        values={{\n                            demo_title: is_demo ? localize('demo') : '',\n                            real_title: is_demo ? localize('Demo') : localize('real'),\n                        }}\n                    />\n                </Text>\n            </h1>\n        </div>\n    );\n\n    return (\n        <React.Fragment>\n            <DesktopWrapper>\n                <div className='compare-cfd-account'>\n                    <PageOverlay header={DesktopHeader} is_from_app={routes.traders_hub} />\n                    <div\n                        className={classNames('compare-cfd-account-container', {\n                            'compare-cfd-account-container__card-count': card_count < 4,\n                        })}\n                    >\n                        <div className='card-list'>\n                            <CFDCompareAccountsCarousel>\n                                {all_cfd_available_accounts.map(item => (\n                                    <CFDCompareAccountsCard\n                                        trading_platforms={item}\n                                        key={item.market_type + item.shortcode}\n                                        is_eu_user={is_eu_user}\n                                        is_demo={is_demo}\n                                    />\n                                ))}\n                                {/* Renders Deriv X data */}\n                                {all_cfd_available_accounts.length > 0 && has_dxtrade_account_available && (\n                                    <CFDCompareAccountsCard\n                                        trading_platforms={dxtrade_data}\n                                        is_eu_user={is_eu_user}\n                                        is_demo={is_demo}\n                                    />\n                                )}\n                                {/* Renders cTrader data */}\n                                {all_cfd_available_accounts.length === -2 && has_ctrader_account_available && (\n                                    <CFDCompareAccountsCard\n                                        trading_platforms={ctrader_data}\n                                        is_eu_user={is_eu_user}\n                                        is_demo={is_demo}\n                                    />\n                                )}\n                            </CFDCompareAccountsCarousel>\n                        </div>\n                    </div>\n                </div>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <PageOverlay\n                    header={\n                        <Localize\n                            i18n_default_text='Compare CFDs {{demo_title}} accounts'\n                            values={{\n                                demo_title: is_demo ? localize('demo') : '',\n                            }}\n                        />\n                    }\n                    header_classname='compare-cfd-header-title'\n                    is_from_app={!routes.traders_hub}\n                    onClickClose={() => history.push(routes.traders_hub)}\n                >\n                    <div\n                        className={classNames('compare-cfd-account-container', {\n                            'compare-cfd-account-container__card-count--mobile': card_count < 2,\n                        })}\n                    >\n                        <CFDCompareAccountsCarousel>\n                            {all_cfd_available_accounts.map(item => (\n                                <CFDCompareAccountsCard\n                                    trading_platforms={item}\n                                    key={item.market_type + item.shortcode}\n                                    is_eu_user={is_eu_user}\n                                    is_demo={is_demo}\n                                />\n                            ))}\n                            {/* Renders Deriv X data */}\n                            {all_cfd_available_accounts.length > 0 && has_dxtrade_account_available && (\n                                <CFDCompareAccountsCard\n                                    trading_platforms={dxtrade_data}\n                                    is_eu_user={is_eu_user}\n                                    is_demo={is_demo}\n                                />\n                            )}\n                            {/* Renders cTrader data */}\n                            {all_cfd_available_accounts.length > 0 && has_ctrader_account_available && (\n                                <CFDCompareAccountsCard\n                                    trading_platforms={ctrader_data}\n                                    is_eu_user={is_eu_user}\n                                    is_demo={is_demo}\n                                />\n                            )}\n                        </CFDCompareAccountsCarousel>\n                    </div>\n                </PageOverlay>\n            </MobileWrapper>\n        </React.Fragment>\n    );\n});\n\nexport default CompareCFDs;\n","import CFDCompareAccounts from './cfd-compare-accounts';\nimport './cfd-compare-accounts.scss';\n\nexport default CFDCompareAccounts;\n","import React from 'react';\nimport CFD from '../Containers';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport CFDCompareAccounts from 'Containers/cfd-compare-accounts';\n// Error Routes\nconst Page404 = React.lazy(() => import(/* webpackChunkName: \"404\" */ '../Modules/Page404'));\n\n// Order matters\nconst initRoutesConfig = () => {\n    return [\n        {\n            path: routes.dxtrade,\n            // eslint-disable-next-line react/display-name\n            component: props => <CFD {...props} platform='dxtrade' />,\n            getTitle: () => localize('Deriv X'),\n            is_authenticated: false,\n        },\n        {\n            path: routes.mt5,\n            // eslint-disable-next-line react/display-name\n            component: props => <CFD {...props} platform='mt5' />,\n            getTitle: () => localize('MT5'),\n            is_authenticated: false,\n        },\n        // This is placed here to avoid conflict with other routes\n        // TODO: [refactoring] - Remove this route once we do refactoring\n        {\n            path: routes.compare_cfds,\n            component: props => <CFDCompareAccounts {...props} />,\n            getTitle: () => localize('Compare CFD accounts'),\n            is_authenticated: false,\n        },\n    ];\n};\n\nlet routesConfig;\n\n// For default page route if page/path is not found, must be kept at the end of routes_config array\nconst route_default = { path: routes.error404, component: Page404, getTitle: () => localize('Error 404') };\n\nconst getRoutesConfig = () => {\n    if (!routesConfig) {\n        routesConfig = initRoutesConfig();\n        routesConfig.push(route_default);\n    }\n    return routesConfig;\n};\n\nexport default getRoutesConfig;\n","import { matchPath } from 'react-router';\nimport { routes } from '@deriv/shared';\n\nexport const normalizePath = path => (/^\\//.test(path) ? path : `/${path || ''}`); // Default to '/'\n\nexport const findRouteByPath = (path, routes_config) => {\n    let result;\n\n    routes_config.some(route_info => {\n        let match_path;\n        try {\n            match_path = matchPath(path, route_info);\n        } catch (e) {\n            if (/undefined/.test(e.message)) {\n                return undefined;\n            }\n        }\n\n        if (match_path) {\n            result = route_info;\n            return true;\n        } else if (route_info.routes) {\n            result = findRouteByPath(path, route_info.routes);\n            return result;\n        }\n        return false;\n    });\n\n    return result;\n};\n\nexport const isRouteVisible = (route, is_logged_in) => !(route && route.is_authenticated && !is_logged_in);\n\nexport const getPath = (route_path, params = {}) =>\n    Object.keys(params).reduce((p, name) => p.replace(`:${name}`, params[name]), route_path);\n\nexport const getContractPath = contract_id => getPath(routes.contract, { contract_id });\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { PlatformContext } from '@deriv/shared';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport { findRouteByPath, normalizePath } from './helpers';\n\nconst BinaryLink = ({ active_class, to, children, ...props }) => {\n    const { is_dashboard } = React.useContext(PlatformContext);\n    const path = normalizePath(to);\n    const route = findRouteByPath(path, getRoutesConfig({ is_dashboard }));\n\n    if (!route) {\n        throw new Error(`Route not found: ${to}`);\n    }\n\n    return to ? (\n        <NavLink to={path} activeClassName={active_class || 'active'} exact={route.exact} {...props}>\n            {children}\n        </NavLink>\n    ) : (\n        <a {...props}>{children}</a>\n    );\n};\n\nBinaryLink.propTypes = {\n    active_class: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),\n    to: PropTypes.string,\n};\n\nexport default BinaryLink;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { redirectToLogin, isEmptyObject, routes, removeBranchName, default_title } from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\n\nconst RouteWithSubRoutes = route => {\n    const renderFactory = props => {\n        let result = null;\n\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                const { location } = props;\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (route.is_authenticated && !route.is_logged_in && !route.is_logging_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute = (route.routes ?? []).reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    ...cur.subroutes.find(subroute => subroute.default),\n                }),\n                {}\n            );\n            const has_default_subroute = !isEmptyObject(default_subroute);\n            const pathname = removeBranchName(location.pathname);\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute.path} />}\n                    <route.component {...props} routes={route.routes} />\n                </React.Fragment>\n            );\n        }\n\n        const title = route.getTitle?.() || '';\n        document.title = `${title} | ${default_title}`;\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport default RouteWithSubRoutes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport { PlatformContext } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\n\nconst BinaryRoutes = props => {\n    const { is_dashboard } = React.useContext(PlatformContext);\n\n    return (\n        <React.Suspense\n            fallback={() => {\n                return (\n                    <div>\n                        <Localize i18n_default_text='Loading...' />\n                    </div>\n                );\n            }}\n        >\n            <Switch>\n                {getRoutesConfig({ is_dashboard }).map(route => (\n                    <RouteWithSubRoutes key={route.path} {...route} {...props} />\n                ))}\n            </Switch>\n        </React.Suspense>\n    );\n};\n\nexport default BinaryRoutes;\n","import BinaryLink from './binary-link.jsx';\nimport BinaryRoutes from './binary-routes.jsx';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\n\nexport { BinaryLink };\nexport default BinaryRoutes;\nexport * from './helpers';\nexport { RouteWithSubRoutes };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}) => {\n    const refresh_message = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? [message, refresh_message] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nErrorComponent.propTypes = {\n    header: PropTypes.string,\n    is_dialog: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    redirect_label: PropTypes.string,\n    redirectOnClick: PropTypes.func,\n    should_show_refresh: PropTypes.bool,\n    type: PropTypes.string,\n};\n\nexport default ErrorComponent;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport BinaryRoutes from '../Components/Routes';\nimport ErrorComponent from '../Components/Errors/error-component.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst Routes = observer(({ passthrough }) => {\n    const { client, common } = useStore();\n\n    const { is_logged_in, is_logging_in } = client;\n    const { error, has_error } = common;\n\n    if (has_error) {\n        return <ErrorComponent {...error} />;\n    }\n\n    return <BinaryRoutes is_logged_in={is_logged_in} is_logging_in={is_logging_in} passthrough={passthrough} />;\n});\n\nRoutes.propTypes = {\n    passthrough: PropTypes.object,\n};\n\n// need to wrap withRouter around connect\n// to prevent updates on <BinaryRoutes /> from being blocked\nexport default withRouter(Routes);\n","import CFDStore from './CFD/cfd-store';\n\nexport default class ModulesStore {\n    constructor(root_store) {\n        this.cfd = new CFDStore({ root_store });\n    }\n}\n","import ModulesStore from './Modules';\n\nexport default class RootStore {\n    constructor(core_store) {\n        this.client = core_store.client;\n        this.common = core_store.common;\n        this.modules = new ModulesStore(this, core_store);\n        this.ui = core_store.ui;\n        this.gtm = core_store.gtm;\n        this.notifications = core_store.notifications;\n        this.traders_hub = core_store.traders_hub;\n    }\n}\n","import { PromiseClass } from '../utility';\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let common_store;\n\n    const init = store => {\n        if (!clock_started) {\n            common_store = store;\n            pending.resolve(common_store.server_time);\n            clock_started = true;\n        }\n    };\n\n    const get = () => (clock_started && common_store.server_time ? common_store.server_time.clone() : undefined);\n\n    return {\n        init,\n        get,\n        timePromise: () => (clock_started ? Promise.resolve(common_store.server_time) : pending.promise),\n    };\n})();\n\nexport default ServerTime;\n","import { configure } from 'mobx';\nimport RootStore from './Stores';\nimport { setWebsocket } from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\n\nconfigure({ enforceActions: 'observed' });\n\nlet root_store;\n\nconst initStore = (core_store, websocket) => {\n    if (root_store) return root_store;\n\n    ServerTime.init(core_store.common);\n    setWebsocket(websocket);\n    root_store = new RootStore(core_store);\n\n    return root_store;\n};\n\nexport default initStore;\n","import React from 'react';\nimport { StoreProvider } from '@deriv/stores';\nimport { CFDStoreProvider } from './Stores/Modules/CFD/Helpers/useCfdStores';\nimport type { TCoreStores } from '@deriv/stores/types';\n\nconst CFDProviders = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    return (\n        <StoreProvider store={store}>\n            <CFDStoreProvider>{children}</CFDStoreProvider>\n        </StoreProvider>\n    );\n};\n\nexport default CFDProviders;\n","import React from 'react';\nimport Routes from './Containers/routes.jsx';\nimport initStore from './init-store';\nimport CFDProviders from './cfd-providers';\nimport type { TCoreStores } from '@deriv/stores/types';\n\ntype TAppProps = {\n    passthrough: {\n        root_store: TCoreStores;\n        WS: unknown;\n    };\n};\n\nconst App = ({ passthrough }: TAppProps) => {\n    initStore(passthrough.root_store, passthrough.WS);\n\n    return (\n        <CFDProviders store={passthrough.root_store}>\n            <Routes />\n        </CFDProviders>\n    );\n};\n\nexport default App;\n","import { createContext } from 'react';\nimport type { TStores } from '../types';\n\nconst StoreContext = createContext<TStores | null>(null);\n\nexport default StoreContext;\n","import { useContext } from 'react';\nimport StoreContext from './storeContext';\n\nconst useStore = () => {\n    const store = useContext(StoreContext);\n\n    if (!store) {\n        throw new Error('useStore must be used within StoreProvider');\n    }\n\n    return store;\n};\n\nexport default useStore;\n","import React, { useEffect } from 'react';\nimport { useSubscription } from '@deriv/api';\nimport merge from 'lodash.merge';\nimport { observer } from 'mobx-react-lite';\nimport useStore from '../useStore';\n\nconst ExchangeRatesProvider = observer(({ children }: React.PropsWithChildren<unknown>) => {\n    const { data, subscribe } = useSubscription('exchange_rates');\n    const {\n        exchange_rates: { update },\n    } = useStore();\n\n    useEffect(() => {\n        subscribe({ payload: { base_currency: 'USD' } });\n    }, [subscribe]);\n\n    useEffect(() => {\n        if (data) {\n            const { exchange_rates } = data;\n\n            if (exchange_rates) update(prev => merge(prev, exchange_rates));\n        }\n    }, [update, data]);\n\n    return <>{children}</>;\n});\n\nexport default ExchangeRatesProvider;\n","import { action, makeObservable, observable } from 'mobx';\nimport { makePersistable, stopPersisting } from 'mobx-persist-store';\n\nexport default class BaseStore<T> {\n    data: T | undefined = undefined;\n\n    constructor(name: string, onHydrationDone?: VoidFunction) {\n        makeObservable(this, {\n            data: observable,\n            update: action.bound,\n            unmount: action.bound,\n        });\n\n        makePersistable(this, { name, properties: ['data'], storage: window.localStorage }).then(() =>\n            onHydrationDone?.()\n        );\n    }\n\n    update(data: NonNullable<T> | ((previous?: T) => NonNullable<T>)) {\n        this.data = data instanceof Function ? data(this.data) : data;\n    }\n\n    unmount() {\n        stopPersisting(this);\n    }\n}\n","import BaseStore from './BaseStore';\nimport type { ExchangeRatesResponse } from '@deriv/api-types';\n\nexport default class ExchangeRatesStore extends BaseStore<ExchangeRatesResponse['exchange_rates']> {\n    constructor() {\n        super('ExchangeRatesStore');\n    }\n}\n","import BaseStore from './BaseStore';\n\nconst FLAGS = {\n    wallet: false,\n    next_wallet: false,\n    sharkfin: false,\n} satisfies Record<string, boolean>;\n\nexport default class FeatureFlagsStore extends BaseStore<{ [k in keyof typeof FLAGS]: boolean }> {\n    constructor() {\n        super('FeatureFlagsStore', () => {\n            // Set the default values for the first time.\n            if (!this.data) this.update(FLAGS);\n\n            // Update the store data if a new flag was added or removed.\n            if (this.data && Object.keys(this.data).length !== Object.keys(FLAGS).length) {\n                this.update(old => {\n                    const data = FLAGS;\n\n                    Object.keys(FLAGS).forEach(flag => {\n                        // @ts-expect-error flag key is always present in the object, Hence can ignore the TS error.\n                        if (old[flag] !== undefined) data[flag] = old[flag];\n                    });\n\n                    return data;\n                });\n            }\n        });\n\n        this.data = FLAGS;\n    }\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { APIProvider } from '@deriv/api';\nimport { ExchangeRatesProvider } from './providers';\nimport StoreContext from './storeContext';\nimport { ExchangeRatesStore, FeatureFlagsStore } from './stores';\nimport type { TCoreStores, TStores } from '../types';\n\nconst StoreProvider = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    const memoizedValue: TStores = useMemo(() => {\n        // If the store is mocked for testing purposes, then return the mocked value.\n        if ('is_mock' in store && store.is_mock) return store as unknown as TStores;\n\n        // Otherwise, instantiate store and return it.\n        return {\n            ...store,\n            exchange_rates: new ExchangeRatesStore(),\n            feature_flags: new FeatureFlagsStore(),\n        };\n    }, [store]);\n\n    useEffect(() => {\n        return () => {\n            Object.values(memoizedValue).forEach(value => {\n                if (typeof value === 'object' && 'unmount' in value) value.unmount();\n            });\n        };\n    }, [memoizedValue]);\n\n    return (\n        <APIProvider>\n            <StoreContext.Provider value={memoizedValue}>\n                <ExchangeRatesProvider>{children}</ExchangeRatesProvider>\n            </StoreContext.Provider>\n        </APIProvider>\n    );\n};\n\nexport default StoreProvider;\n"],"names":["createContext","api","useContext","APIContext","send","useCallback","name","payload","response","error","subscribe","queryClient","window","ReactQueryClient","QueryClient","endpoint","app_id","wss","children","standalone","WS","useWS","active_connection","getSocketURL","getAppId","DerivAPI","DerivAPIBasic","connection","WebSocket","value","QueryClientProvider","client","useState","isLoading","setIsLoading","isSubscribed","setSubscribed","setError","data","setData","subscriber","useRef","_subscribe","useAPI","props","prop","undefined","current","e","unsubscribe","useEffect","PlatformIcons","Derived","styles","viewBox","fill","xmlns","d","Financial","CFDs","CTrader","DerivEz","SwapFree","DerivX","icon","className","size","onClick","PlatformIcon","style","width","height","platform","Popover","alignment","message","localize","getCFDPlatformLabel","classNameBubble","zIndex","Text","relative_render","Button","transparent","Icon","custom_color","CFDAccountCopy","text","Clipboard","text_copy","info_message","isMobile","success_message","popoverAlignment","is_bold","is_broker","weight","classNames","Checkmark","SuccessDialog","classNameMessage","has_cancel","has_submit","onCancel","onSubmit","heading","icon_size","text_submit","text_cancel","is_open","toggleModal","title","has_close_icon","is_medium_button","Modal","small","as","Localize","i18n_default_text","React","has_effect","secondary","medium","large","primary","defaultProps","propTypes","PropTypes","icon_type","confirm_label","onConfirm","context","initialValues","password","isSubmitting","handleSubmit","CFD_PLATFORMS","align","values","color","FormSubmitButton","is_center","label","cancel_label","is_loading","CFDDbviOnboarding","account_status","fetchAccountSettings","is_virtual","updateAccountStatus","updateMT5Status","disableApp","enableApp","useCfdStore","has_created_account_for_selected_jurisdiction","has_submitted_cfd_personal_details","is_cfd_verification_modal_visible","jurisdiction_selected_shortcode","enableCFDPasswordModal","toggleCFDVerificationModal","showSubmittedModal","setShowSubmittedModal","getAccountStatusFromAPI","get_account_status","getAuthenticationStatusInfo","poi_acknowledged_for_maltainvest","poi_acknowledged_for_bvi_labuan_vanuatu","poa_acknowledged","poa_resubmit_for_labuan","need_poa_submission","JURISDICTION","getModalTitle","getModalContent","status","useStore","status_list","includes","index","onSave","step_index","is_for_cfd_modal","onSubmitForCFDModal","observer","account_settings","residence_list","poi_state","setPOIState","citizen","country_code","citizen_data","find","item","onStateChange","InputField","maxLength","optional","field","form","errors","touched","Input","type","required","autoComplete","validatePersonalDetails","account_opening_reason","tin_regex","res","tax_residence","tin_format","validations","v","map","i","tax_identification_number","some","regex","match","place_of_birth","mappedKey","Object","entries","forEach","field_name","key","error_index","findIndex","changeable_fields","initial_values","form_error","isFieldDisabled","length","Loading","is_fullscreen","validateOnChange","validateOnBlur","validate","actions","idx","is_dirty","citizen_text","tax_residence_text","place_of_birth_text","findDefaultValuesInResidenceList","setSubmitting","submitForm","isDeepEqual","validateOnMount","handleChange","handleBlur","setFieldValue","isValid","citizenship_error","place_of_birth_error","tax_residence_error","handleItemSelection","_field","item_value","AutoHeightWrapper","default_height","height_offset","isDesktop","setRef","ref","noValidate","Div100vhContainer","max_autoheight_offset","is_disabled","ThemedScrollbars","is_bypassed","DesktopWrapper","Autocomplete","id","disabled","list_items","onItemSelection","list_portal_id","MobileWrapper","SelectNative","placeholder","use_text","onChange","target","should_hide_disabled_options","onBlur","meta","Dropdown","is_align_text_left","list","data_testid","has_separator","FormSubmitErrorMessage","keys","is_absolute","getChangeableFields","setAccountSettings","setFormError","form_values","setFormValues","initiatePersonalDetails","get_settings_response","get_settings","transform","then","result","filter","getPropertyValue","saveFormData","_index","updateValue","onFinish","notifications","refreshNotifications","removeNotificationMessage","removeNotificationByKey","addNotificationMessageByKey","authentication_status","email","is_fully_authenticated","landing_company","states_list","fetchStatesList","passthroughProps","step","setStep","state_index","is_mounted","need_poi_for_maltainvest","need_poi_for_bvi_labuan_vanuatu","is_authenticated_with_idv_photoid","useIsAccountStatusPresent","poi_config","body","CFDPOI","form_value","forwarded_props","poa_config","CFDPOA","personal_details_config","CFDPersonalDetailsContainer","shouldShowPOA","document_status","should_show_personal_details","verification_configs","items","setItems","unmount","cloned_items","getCurrent","BodyComponent","passthrough","reduce","forwarded_prop","assign","ChangePassword","PasswordReset","account_group","onClickSendEmail","redirect_to","CATEGORY","Number","password_reset_code","url_parameters","SendEmailTemplate","subtitle","lbl_no_receive","txt_resend","txt_resend_in","multi_step_ref","steps","component","goNextStep","goPrevStep","MultiStep","CFDPasswordSuccessMessage","is_investor","InvestorPasswordManager","error_message_investor","is_submit_success_investor","setPasswordType","validatePassword","old_password","new_password","password_type","setFieldTouched","PasswordInput","PasswordMeter","input","has_error","custom_feedback_messages","getErrorMessages","password_warnings","has_warning","hint","tertiary","CountdownComponent","count_from","onTimeout","count","setCount","interval","setTimeout","clearTimeout","CFDPasswordReset","sendVerifyEmail","account_type","server","is_resend_verification_requested","setResendVerification","is_resend_verification_sent","setResendVerificationSent","localStorage","setItem","join","components","CFDPasswordManagerTabContentWrapper","lbl_previous","CFDPasswordManagerTabContent","selected_login","onChangeActiveTabIndex","active_tab_index","setActiveTabIndex","setErrorMessageInvestor","setSubmitSuccessInvestor","container_height","validLength","min","max","validPassword","toLowerCase","min_number","max_number","CFDStore","login","trading_password_manager","autohide","Tabs","active_index","onTabItemClick","top","is_visible","selected_account_type","selected_account_group","selected_server","ui","setIndex","fallback","UILoader","should_header_stick_body","PageOverlay","portal_id","header","onClickClose","element","should_set_trading_password","is_password_reset_error","ReviewMessageForMT5","manual_status","is_selected_mt5_verified","show_eu_related_content","traders_hub","error_type","CreatePassword","error_message","is_real_financial_stp","validateForm","handlePasswordInputChange","submitPassword","CFDPasswordForm","closeModal","has_mt5_account","onForgotPassword","useMemo","cancel_button_label","handleCancel","has_cancel_button","button_label","accountTitle","showJuristiction","getCFDPlatformNames","account","jurisdiction_shortcode","getFormattedJurisdictionCode","legal_entity_name","getLegalEntityName","landing_companies","is_logged_in","is_dxtrade_allowed","mt5_login_list","account_title","disableCFDPasswordModal","getAccountStatus","has_cfd_error","is_cfd_success_dialog_enabled","is_cfd_password_modal_enabled","setCFDSuccessDialog","submitMt5Password","submitCFDPassword","new_account_response","useHistory","is_password_modal_exited","setPasswordModalExited","isArray","is_password_error","is_password_reset","is_sent_email_modal_open","setIsSentEmailModalOpen","poi_verified_for_bvi_labuan_vanuatu","poi_verified_for_maltainvest","poa_verified","getVerificationStatus","setIsSelectedMT5Verified","closeDialogs","should_show_password_modal","should_show_password","category","handleForgotPassword","password_modal","cfd_password_form","should_show_password_dialog","should_show_success","getSubmitText","category_label","type_label","MT5","getMtCompanies","getDxCompanies","short_title","getDerivezCompanies","jurisdiction_label","platformName","accountTypes","success_modal_submit_label","should_show_sent_email_modal","CFDPasswordModal","ResetPasswordIntent","group","current_list","is_eu","reset_password_intent","getItem","reset_password_type","test","split","pop","CFDResetPasswordModal","is_cfd_reset_password_modal_enabled","setCFDPasswordResetModal","error_code","is_finished","changed_password_type","state","setState","clearAddressBar","removeItem","resetPassword","request","account_id","verification_code","code","getIsListFetched","is_invalid_investor_token","onMount","redirectToLogin","getLanguage","line_height","clearCFDError","should_show_error","Dialog","confirm_button_text","UnhandledErrorModal","is_top_up_virtual_open","is_top_up_virtual_in_progress","is_top_up_virtual_success","closeTopUpModal","closeSuccessTopUpModal","current_account","dxtrade_companies","derivez_companies","mt5_companies","topUpVirtual","ctrader_companies","getCTraderCompanies","getAccountTitle","has_sub_title","platform_title","getTopUpConfig","minimum_amount","additional_amount","Money","amount","currency","show_currency","display_balance","has_sign","balance","getAccounts","is_uk","account_types_count","mt_gaming_company","financial","mt_financial_company","financial_stp","dxtrade_gaming_company","dxtrade_financial_company","Boolean","financial_eu_trading_instruments","account_currencies_config","synthetic","synthetic_eu","financial_au","footnote","maximum_leverages_config","financial_eu","order_execution_config","spread_config","commission_config","minimum_deposit_config","margin_call_config","stop_out_level_config","cryptocurrency_trading_config","attribute","mt5","dxtrade","CFDAttributeDescriber","counter","setIsVisible","compareAccountsData","is_eu_client","residence","is_australian","table","getFinancialObject","footnote_number","row","synthetic_object","financial_object","footnote_counter","filterAvailableAccounts","CFDCompareAccountHint","show_risk_message","cols","setCols","template_columns","updateColumnsStyle","financial_account_table_head_text","Table","fixed","isLandingCompanyEnabled","col","j","getEuFooterButtons","action","Row","pre_appstore_class","available_accounts_count","classname_for_demo_and_eu","is_pre_appstore_setting","content_flag","is_high_risk_for_mt5","CFDs_restricted_countries","financial_restricted_countries","is_preappstore_restricted_cr_demo_account","is_leverage_row","is_platform_row","is_instruments_row","is_other_countries","getContentSize","synthetic_bvi","derivx","financial_svg","financial_labuan","ContentFlag","rowKey","tooltip_msg","Array","options","should_show_asterick_at_end","disable_message_icon","is_bubble_hover_enabled","is_demo_tab","is_preappstore_cr_demo_account","is_real_enabled","openDerivRealAccountNeededModal","openPasswordModal","real_account_creation_unlock_date","setShouldShowCooldownModal","should_show_derivx","toggleCompareAccounts","common","has_real_account","has_active_real_account","should_restrict_bvi_account_creation","should_restrict_vanuatu_account_creation","trading_platform_available_accounts","upgradeable_landing_companies","openSwitchToRealAccountModal","setAppstorePlatform","no_CR_account","is_eu_user","no_MF_account","setAccountType","setJurisdictionSelectedShortcode","has_submitted_personal_details","setHasSubmittedPersonalDetails","mt5_platforms","market_type","shortcode","has_synthetic","available_accounts_keys","logged_out_available_accounts_count","synthetic_accounts_count","startsWith","financial_accounts_count","poi_or_poa_not_submitted","poa_pending","footer_button_data","modal_content","isMt5AccountAdded","market","current_account_type","landing_company_short","onButtonClick","should_show_missing_real_account","type_of_account","Jurisdiction","onSelectRealAccount","synthetic_svg","financial_maltainvest","paddingTop","padding","synthetic_vanuatu","financial_bvi","financial_vanuatu","row_data","available_accounts_values","acc","content_data","col_num","sorted_values","el","rest","shouldShowPendingStatus","primary_light","getLoggedInTypesCount","dxtrade_all_company","prev","DxtradeCompareAccountContent","has_unmerged_account","is_populating_mt5_account_list","is_compare_accounts_visible","toggleCompareAccountsModal","location","pathname","has_derivx","is_dxtrade","cfd_account_button_label","getCFDModalTitle","getModalStyle","marginTop","exit_classname","MobileDialog","portal_element_id","wrapper_classname","visible","onClose","header_classname","has_full_height","DynamicLeverageContext","is_dynamic_leverage_visible","toggleDynamicLeverage","useDynamicLeverage","dynamic_leverages","description","leverage","from","to","DynamicLeverageTableColumnHeader","DynamicLeverageMarketCard","columns","column_key","getJurisdictionBviContents","is_over_header_available","synthetic_contents","title_indicators","display_text","display_text_skin_color","clickable_description","financial_contents","synthetic_verification_docs","financial_verification_docs","getJurisdictionVanuatuContents","jurisdictionVerificationContents","short_description","required_verification_docs","document_number","selfie","identity_document","name_and_address","not_applicable","status_references","card_classname","is_card_selected","toggleCardFlip","verification_docs","verification_item","status_item","description_part","type_of_card","poi_pending_for_bvi_labuan_vanuatu","poi_resubmit_for_bvi_labuan_vanuatu","poi_pending_for_maltainvest","poi_resubmit_for_maltainvest","need_poa_resubmission","getVerificationIconVariant","verification_document","icon_variant","concat","card_section_item","card_data","card_values","over_header","is_non_idv_design","is_synthetic","is_swapfree","params","svg","swapfree_contents","bvi","vanuatu","labuan","maltainvest","getJurisdictionContents","non_synthetic_card_data","is_card_flipped","setIsCardFlipped","event","stopPropagation","cardType","synthetic_available_accounts","financial_available_accounts","real_synthetic_accounts_existing_data","real_financial_accounts_existing_data","real_swapfree_accounts_existing_data","swapfree_available_accounts","disableCard","MARKET_TYPE","jurisdiction_cards_array","card","cardsToBeShown","class_name","is_checked","onCheck","dbvi_company_names","tnc_url","Checkbox","company","StaticUrl","href","defaultChecked","FooterNote","account_type_name","getMT5Title","is_jurisdiction_modal_visible","toggleJurisdictionModal","checked","setChecked","available_account","all_market_type_available_accounts","is_svg_selected","is_bvi_selected","is_vanuatu_selected","is_labuan_selected","is_maltainvest_selected","is_idv_country","elem","identity","services","idv","is_country_supported","has_idv_attempts","authentication","submissions_left","setIsDynamicLeverageVisible","onJurisdictionModalToggle","Provider","mt5_trade_account","onPasswordManager","getCompanyShortcode","getCFDAccountDisplay","sub_account_type","is_mt5_trade_modal","display_login","server_info","environment","getCFDAccountKey","getTitle","webtrader_url","rel","getPlatformMt5DownloadLink","src","getUrlBase","getPlatformSettings","is_demo","is_mobile","dxtrade_tokens","derivez_tokens","ctrader_tokens","CFDTradeModal","mobileDownloadLink","getPlatformDXTradeDownloadLink","getPlatformCTraderDownloadLink","getPlatformDerivEZDownloadLink","PlatformsDesktopDownload","getCTraderWebTerminalLink","getDerivEzWebTerminalLink","getDXTradeWebTerminalLink","PlatformsDesktopDownloadLinks","platformsIcons","acc_type","qr_code_mobile","CTraderAndDerivEZDescription","platform_name","charAt","toUpperCase","slice","platformsText","PlatformIconsAndDescriptions","platform_type","app_title","downloadCenterAppOption","CTRADER_DESKTOP_DOWNLOAD","mobileOSDetect","downloadCenterDescription","QRCodeLinks","maxWidth","DXTRADE","DERIVEZ","CTRADER","CFD","CFDS","DEMO","REAL","SYNTHETIC","GAMING","FINANCIAL","ALL","MOBILE_PLATFORMS","IOS","HAUWEI","ANDROID","DESKTOP_PLATFORMS","WINDOWS","LINUX","MACOS","REGION","EU","NON_EU","SVG","BVI","VANUATU","LABUAN","MALTA_INVEST","MARKET_TYPE_SHORTCODE","SYNTHETIC_SVG","SYNTHETIC_BVI","SYNTHETIC_VANUATU","FINANCIAL_SVG","FINANCIAL_BVI","FINANCIAL_VANUATU","FINANCIAL_LABUAN","FINANCIAL_MALTA_INVEST","ALL_SVG","ALL_DXTRADE","getPlatformFromUrl","is_staging","is_test_link","CTRADER_ANDROID_APP_URL","CTRADER_URL","OSDetect","token","url","all_config","synthetic_config","financial_config","demo","all","dxtrade_account_type","real","mt5_account_type","ctrader_account_type","financial_stp_config","all_svg","derivez","ctrader","financial_demo","synthetic_v","financial_fx","financial_v","derivez_account_type","jurisdiction_code","formatted_label","CFDStoreContext","CFDStoreProvider","modules","cfd","store","Error","BaseStore","validation_errors","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","partial_fetch_time","makeObservable","this","observable","retrieveFromStorage","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","defineProperty","enumerable","writable","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","isEmptyObject","p","reaction","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","storage","JSON","stringify","getSnapshot","sessionStorage","local_storage_snapshot","parse","session_storage_snapshot","k","propertyName","messages","x","rules","property","intercept","change","newValue","trigger","inputs","hasOwnProperty","call","validator","Validator","isPassed","get","listener","when","switch_broadcast","switchEndSignal","isProduction","console","pre_switch_broadcast","setPreSwitchAccount","has_logged_out","setLogout","initialized_broadcast","setInitialized","is_network_online","is_online","is_dark_mode_on","has_real_account_signup_ended","setRealAccountSignupEnd","loginid","reactions","act","freeze","Symbol","is_cfd_personal_details_modal_visible","is_mt5_trade_modal_visible","map_type","is_account_being_created","is_mt5_financial_stp_modal_open","computed","override","checkShouldOpenAccount","realAccountSignupEndListener","resetFormErrors","createCFDAccount","getName","openMT5Account","openCFDAccount","beginRealSignupForMt5","enableMt5FinancialStpModal","setCurrentAccount","setMT5TradeAccount","setIsAccountBeingCreated","setCFDNewAccount","creatMT5Password","createCFDPassword","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","toggleMT5TradeModal","disableMt5FinancialStpModal","setDxtradeToken","setCTraderToken","loadDxtradeTokens","loadCTraderTokens","setDerivezToken","loadDerivezTokens","derivez_accounts_list","ctrader_accounts_list","getAccountListKey","dxtrade_accounts_list","is_cfd_page","set_password","post_signup","Promise","resolve","realCFDSignup","demoCFDSignup","account_creation_values","trading_platform_accounts_list_response","responseTradingPlatformAccountsList","trading_platform_new_account","first_name","type_request","getAccountTypeFields","address_line_1","address_line_2","address_postcode","address_city","address_state","phone","mainPassword","email_address","address","city","country","zipCode","sub_account_category","openRealAccountSignup","fetchResidenceList","obj","cfd_new_account","is_mt5_password_not_set","is_dxtrade_password_not_set","resetForm","setStatus","success","mt5_login_list_response","responseMt5LoginList","responseMT5TradingServers","mt5_new_account","setTopUpInProgress","trading_platform_deposit","to_account","to_mt5","new_balance","runInAction","service_token","pandats","has_existing_account","static_hash","PromiseClass","promise","reject","module","exports","createElement","tag_name","attributes","document","attr","textContent","html","setAttribute","getStaticHash","querySelector","getAttribute","onClickSignup","is_invisible","theme","invisible","inx","general_messages","DxtradeDesktopDownload","MT5DesktopDownload","MobileDownload","classnames","QRCodeBox","is_switch_to_deriv_account_modal_visible","is_closed_on_confirm","account_icons","AddAccountButton","onSelectAccount","displayName","CFDAccountCardAction","handleClickSwitchAccount","is_accounts_switcher_on","is_button_primary","lbl_add_account","cta_label","CFDAccountCard","commission_message","descriptor","existing_accounts_data","has_banner","has_cfd_account_error","onClickFund","specs","toggleAccountsDialog","toggleShouldShowRealAccountsList","isEligibleForMoreRealMt5","isEligibleForMoreDemoMt5Svg","existing_data","should_show_extra_add_account_button","platform_icon","has_popular_banner","has_demo_banner","has_server_banner","wrapper_ref","button_ref","getDxtradeDownloadLink","getServerName","server_region","geolocation","region","sequence","is_web_terminal_unsupported","tbody_content","spec_attribute","all_svg_acc","svg_acc","push","should_show_pending_button","getBannerStatus","selected_account_data","margin","CSSTransition","in","timeout","unmountOnExit","real_synthetic_specs","real_financial_specs","real_all_specs","eu_real_financial_specs","real_financial_stp_specs","au_real_financial_specs","demo_financial_stp_specs","demo_all_specs","standpoint","openAccountTransfer","openPasswordManager","current_list_index","malta","enabled","_acc","cur","specifications","is_eu_country","has_maltainvest_account","openAccountNeededModal","isSyntheticCardVisible","isFinancialCardVisible","isSwapFreeCardVisible","openAccountTransferList","financial_specs","should_show_eu","iom","CFDRealAccountDisplay","isDxtradeAllCardVisible","realSyntheticAccountsExistingData","realFinancialAccountsExistingData","isAccountOfTypeDisabled","should_enable_add_button","onClickFundReal","isMT5AccountCardDisabled","account_key","list_item","Carousel","nav_position","show_bullet","item_per_window","is_mt5","loading_component","LoadingComponent","is_logging_in","is_mt5_allowed","mt5_disabled_signup_types","dxtrade_disabled_signup_types","dxtrade_accounts_list_error","has_mt5_real_account_error","has_account_error_in_mt5_real_list","has_mt5_demo_account_error","has_dxtrade_real_account_error","has_dxtrade_demo_account_error","platform_verification_code","website_status","dxtrade_verification_code","dxtrade_status_server","dx_trade_status","dxtrade_user_exception","openTopUpModal","NotificationMessages","notification_messages_ui","is_reset_trading_password_modal_visible","toggleResetTradingPasswordModal","is_demo_enabled","is_notification_loaded","setIsNotificationLoaded","password_manager","useLocation","history","openResetPassword","setIsRealEnabled","should_enable_tab","setIsDemoEnabled","hash","setActiveIndex","updated_state","togglePasswordManagerModal","selected_account","account_category","hasAccount","has_synthetic_account","getIsSuspendedMt5Server","type_server","is_suspended_mt5_demo_server","is_suspended_dxtrade_real_server","has_mt5_account_error","is_suspended_mt5_real_server","has_dxtrade_account_error","is_user_exception","has_cfd_real_account_mt5_error","has_cfd_demo_account_mt5_error","mt5_verification_code","routes","stopNotificationLoading","openRealPasswordModal","platform_name_trader","platform_name_dbot","InstrumentsIcons","DerivedFX","Synthetics","Baskets","fillRule","clipRule","Stocks","StockIndices","Commodities","Forex","Cryptocurrencies","ETF","clipPath","InstrumentIcon","highlighted","is_asterisk","opacity","display","getAccountCardTitle","platfromsHeaderLabel","getAccountIcon","getMarketType","trading_platforms","cfd_config","leverage_description","spread","spread_description","counterparty_company","counterparty_company_description","jurisdiction","jurisdiction_description","regulator","regulator_description","regulator_license","dxtrade_data","requirements","after_first_deposit","financial_assessment","compliance","tax_information","signup","ctrader_data","iconData","selected_region","market_type_shortcode","forex_label","getHighlightedIconLabel","juridisction_data","createDescription","getJuridisctionDescription","jurisdiction_card_icon","jurisdiction_card_title","labuan_jurisdiction_message","platform_label","getPlatformLabel","header_color","getAccount","poi_acknowledged_for_vanuatu_maltainvest","poi_acknowledged_for_bvi_labuan","is_account_added","isDxtradeAccountAdded","isCTraderAccountAdded","is_account_status_verified","getAccountVerficationStatus","available_accounts","swap_free_accounts","financial_accounts","gaming_accounts","available_dxtrade_accounts","available_ctrader_accounts","sorted_available_accounts","getEUAvailableAccounts","has_dxtrade_account_available","has_ctrader_account_available","sorted_cfd_available_eu_accounts","all_real_sorted_cfd_available_accounts","demo_cfd_available_accounts","swap_free_demo_accounts","financial_demo_accounts","gaming_demo_accounts","getMT5DemoData","getDxtradeDemoData","getCtraderDemoData","all_cfd_available_accounts","card_count","DesktopHeader","demo_title","real_title","is_from_app","CFDCompareAccountsCarousel","routesConfig","Page404","route_default","path","is_authenticated","findRouteByPath","routes_config","route_info","match_path","matchPath","BinaryLink","active_class","is_dashboard","PlatformContext","normalizePath","route","getRoutesConfig","NavLink","activeClassName","exact","Route","render","Redirect","replace","default_subroute","subroutes","subroute","has_default_subroute","removeBranchName","default_title","Switch","ErrorComponent","is_dialog","redirect_label","redirectOnClick","should_show_refresh","refresh_message","reload","PageErrorContainer","error_header","error_messages","redirect_urls","redirect_labels","buttonOnClick","Routes","withRouter","ModulesStore","common_store","clock_started","pending","RootStore","core_store","gtm","init","server_time","clone","timePromise","configure","enforceActions","websocket","ServerTime","setWebsocket","initStore","StoreContext","useSubscription","update","exchange_rates","base_currency","merge","onHydrationDone","makePersistable","Function","stopPersisting","ExchangeRatesStore","FLAGS","wallet","next_wallet","sharkfin","FeatureFlagsStore","old","flag","memoizedValue","is_mock","feature_flags"],"sourceRoot":""}