{"version":3,"file":"trader/js/trader.screen-large.5ab90dba44333fa0280b.js","mappings":"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","sources":["webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/allow-equals.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Multiplier/multiplier.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/amount.tsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/tick-steps.jsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/range-slider.jsx","webpack://@deriv/trader/./src/App/Components/Form/RangeSlider/index.js","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration-toggle.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/DatePicker/trading-date-picker.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/DatePicker/index.ts","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/dialog.tsx","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/time-picker.tsx","webpack://@deriv/trader/./src/App/Components/Form/TimePicker/index.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/end-time.ts","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TimePicker/trading-time-picker.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TimePicker/index.ts","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/advanced-duration.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/simple-duration.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/duration-wrapper.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Duration/index.js","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Multiplier/cancel-deal.jsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/TradeParams/Accumulator/accumulator.tsx","webpack://@deriv/trader/./src/Modules/Trading/Containers/trade-params.tsx","webpack://@deriv/trader/./src/Modules/Trading/Components/Form/screen-large.tsx"],"sourcesContent":["import React from 'react';\nimport { Popover, Checkbox } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport {\n    hasCallPutEqual,\n    hasDurationForCallPutEqual,\n    isRiseFallEqual,\n} from 'Stores/Modules/Trading/Helpers/allow-equals';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\ntype TTradeStore = Pick<\n    ReturnType<typeof useTraderStore>,\n    | 'contract_start_type'\n    | 'contract_type'\n    | 'contract_types_list'\n    | 'duration_unit'\n    | 'expiry_type'\n    | 'has_equals_only'\n>;\n\ntype TAllowEquals = TTradeStore & {\n    onChange: (e: { target: { name: string; value: number } }) => Promise<void>;\n    value: number;\n};\n\nconst AllowEquals = ({\n    contract_start_type,\n    contract_type,\n    contract_types_list,\n    duration_unit,\n    expiry_type,\n    onChange,\n    value,\n    has_equals_only,\n}: TAllowEquals) => {\n    const has_callputequal_duration = hasDurationForCallPutEqual(\n        contract_types_list,\n        duration_unit,\n        contract_start_type\n    );\n    const has_callputequal = hasCallPutEqual(contract_types_list);\n\n    const has_allow_equals =\n        isRiseFallEqual(contract_type) && (has_callputequal_duration || expiry_type === 'endtime') && has_callputequal;\n\n    const changeValue: React.ComponentProps<typeof Checkbox>['onChange'] = e => {\n        e.persist();\n        if ('checked' in e.target) {\n            const { name, checked } = e.target;\n            onChange({ target: { name, value: Number(checked) } });\n        }\n    };\n\n    return (\n        has_allow_equals && (\n            <div className='allow-equals'>\n                <Checkbox\n                    className='allow-equals__input-field'\n                    id='dt_allow_equals_input'\n                    onChange={changeValue}\n                    defaultChecked={!!value}\n                    name='is_equal'\n                    label={localize('Allow equals')}\n                    classNameLabel='allow-equals__label'\n                    disabled={has_equals_only}\n                />\n                <Popover\n                    alignment='left'\n                    classNameTarget='allow-equals__tooltip'\n                    icon='info'\n                    id='dt_allow_equals_info'\n                    message={localize('Win payout if exit spot is also equal to entry spot.')}\n                    margin={130}\n                    relative_render\n                />\n            </div>\n        )\n    );\n};\n\nexport default AllowEquals;\n","import React from 'react';\nimport { Dropdown } from '@deriv/components';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer } from '@deriv/stores';\nimport { showLabelForMultipliers } from '../../../../Helpers/contract-type';\n\nconst Multiplier = observer(() => {\n    const { multiplier, multiplier_range_list, onChange, symbol } = useTraderStore();\n    return (\n        <Dropdown\n            id='multiplier'\n            className='trade-container__multiplier-dropdown'\n            is_alignment_left\n            is_nativepicker={false}\n            list={multiplier_range_list}\n            name='multiplier'\n            no_border={true}\n            value={multiplier}\n            onChange={onChange}\n            should_show_new_label={showLabelForMultipliers(symbol)}\n        />\n    );\n});\n\nexport default Multiplier;\n","import { AMOUNT_MAX_LENGTH, addComma, getDecimalPlaces } from '@deriv/shared';\nimport { ButtonToggle, Dropdown, InputField } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport AllowEquals from './allow-equals';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport Multiplier from './Multiplier/multiplier.jsx';\nimport MultipliersInfo from './Multiplier/info';\nimport MinMaxStakeInfo from './min-max-stake-info';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TInput = {\n    amount: string | number;\n    currency: string;\n    current_focus: string | null;\n    error_messages?: string[];\n    is_disabled?: boolean;\n    is_single_currency?: boolean;\n    onChange: (e: { target: { name: string; value: number | string } }) => void;\n    setCurrentFocus: (name: string | null) => void;\n};\n\nexport const Input = ({\n    amount,\n    currency,\n    current_focus,\n    error_messages,\n    is_single_currency,\n    is_disabled,\n    onChange,\n    setCurrentFocus,\n}: TInput) => (\n    <InputField\n        className='trade-container__amount'\n        classNameInlinePrefix='trade-container__currency'\n        classNameInput='trade-container__input'\n        currency={currency}\n        current_focus={current_focus}\n        error_messages={error_messages}\n        fractional_digits={getDecimalPlaces(currency)}\n        id='dt_amount_input'\n        inline_prefix={is_single_currency ? currency : undefined}\n        is_autocomplete_disabled\n        is_float\n        is_hj_whitelisted\n        is_incrementable\n        is_negative_disabled\n        is_disabled={is_disabled}\n        max_length={AMOUNT_MAX_LENGTH}\n        name='amount'\n        onChange={onChange}\n        type='tel'\n        value={amount}\n        ariaLabel={localize('Amount')}\n        setCurrentFocus={setCurrentFocus}\n    />\n);\n\nconst Amount = observer(({ is_minimized = false }: { is_minimized?: boolean }) => {\n    const { ui, client } = useStore();\n    const { currencies_list, is_single_currency } = client;\n    const { setCurrentFocus, current_focus } = ui;\n    const {\n        amount,\n        basis,\n        basis_list,\n        contract_start_type,\n        contract_type,\n        contract_types_list,\n        currency,\n        duration_unit,\n        expiry_type,\n        is_accumulator,\n        is_equal,\n        is_multiplier,\n        is_turbos,\n        is_vanilla,\n        has_equals_only,\n        has_open_accu_contract,\n        stake_boundary,\n        onChange,\n        validation_errors,\n    } = useTraderStore();\n\n    const { min_stake, max_stake } = stake_boundary[contract_type.toUpperCase()] || {};\n\n    if (is_minimized) {\n        return (\n            <div className='fieldset-minimized fieldset-minimized__amount'>\n                <span className='fieldset-minimized__basis'>{basis_list.find(o => o.value === basis)?.text}</span>\n                &nbsp;\n                <i>\n                    <span\n                        className={classNames('fieldset-minimized__currency', 'symbols', {\n                            [`symbols--${(currency || '').toLowerCase()}`]: currency,\n                        })}\n                    />\n                </i>\n                {addComma(amount, 2)}\n            </div>\n        );\n    }\n\n    const error_messages = validation_errors?.amount;\n\n    const getBasisList = () => basis_list.map(item => ({ text: item.text, value: item.value }));\n\n    return (\n        <Fieldset\n            className='trade-container__fieldset center-text'\n            header={\n                contract_type === 'high_low' || is_multiplier || is_accumulator || is_vanilla || is_turbos\n                    ? localize('Stake')\n                    : undefined\n            }\n        >\n            {basis_list.length > 1 && (\n                <ButtonToggle\n                    id='dt_amount_toggle'\n                    buttons_arr={getBasisList()}\n                    className='dropdown--no-margin'\n                    is_animated\n                    name='basis'\n                    onChange={onChange}\n                    value={basis}\n                />\n            )}\n            {!is_single_currency ? (\n                <div className='trade-container__currency-options'>\n                    <Input\n                        amount={amount}\n                        currency={currency}\n                        current_focus={current_focus}\n                        error_messages={error_messages}\n                        is_single_currency={is_single_currency}\n                        onChange={onChange}\n                        setCurrentFocus={setCurrentFocus}\n                    />\n                    <Dropdown\n                        className={classNames({ 'dc-dropdown-container__currency': !is_single_currency })}\n                        is_alignment_left\n                        is_nativepicker={false}\n                        list={currencies_list}\n                        name='currency'\n                        initial_offset={256}\n                        no_border={true}\n                        value={currency}\n                        onChange={onChange}\n                    />\n                </div>\n            ) : (\n                <Input\n                    amount={amount}\n                    currency={currency}\n                    current_focus={current_focus}\n                    error_messages={error_messages}\n                    is_single_currency={is_single_currency}\n                    is_disabled={has_open_accu_contract}\n                    onChange={onChange}\n                    setCurrentFocus={setCurrentFocus}\n                />\n            )}\n            <AllowEquals\n                contract_start_type={contract_start_type}\n                contract_type={contract_type}\n                contract_types_list={contract_types_list}\n                duration_unit={duration_unit}\n                expiry_type={expiry_type}\n                onChange={onChange}\n                value={Number(is_equal)}\n                has_equals_only={has_equals_only}\n            />\n            {is_multiplier && (\n                <React.Fragment>\n                    <Multiplier />\n                    <MultipliersInfo\n                        className='trade-container__multipliers-trade-info'\n                        should_show_tooltip\n                        is_tooltip_relative\n                    />\n                </React.Fragment>\n            )}\n            {(is_turbos || is_vanilla) && (\n                <MinMaxStakeInfo currency={currency} max_stake={max_stake} min_stake={min_stake} />\n            )}\n        </Fieldset>\n    );\n});\n\nexport default Amount;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst TickSteps = ({ hover_value, max_value, min_value, onClick, onMouseEnter, onMouseLeave, value }) => {\n    if (!max_value || !min_value) return null;\n\n    const arr_ticks = [...Array(max_value - min_value + 1).keys()];\n\n    const isActive = idx => idx + min_value === value;\n    const isMarked = idx => idx + min_value < value;\n    const isMarkedOnHover = idx => (isMarked(idx) ? false : idx + min_value <= hover_value);\n\n    return (\n        <React.Fragment>\n            {arr_ticks.map(idx => (\n                <span\n                    data-testid={`tick_step_${idx + min_value}`}\n                    key={idx}\n                    data-value={idx + min_value}\n                    className={classNames('range-slider__ticks-step', {\n                        'range-slider__ticks-step--active': isActive(idx),\n                        'range-slider__ticks-step--marked': isMarked(idx),\n                        'range-slider__ticks-step--marked-hover': isMarkedOnHover(idx),\n                    })}\n                    onClick={() => onClick(idx + min_value)}\n                    onMouseEnter={() => onMouseEnter(idx + min_value)}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </React.Fragment>\n    );\n};\n\nTickSteps.propTypes = {\n    hover_value: PropTypes.number,\n    max_value: PropTypes.number,\n    min_value: PropTypes.number,\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    value: PropTypes.number,\n};\n\nexport default TickSteps;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport { Text } from '@deriv/components';\nimport TickSteps from './tick-steps.jsx';\n\nconst RangeSlider = ({ className, name, value, min_value, max_value, onChange }) => {\n    const [hover_value, setHoverValue] = React.useState(0);\n    const range_slider_ref = React.useRef();\n\n    const handleChange = e => {\n        const target_value = +e.target.value;\n        if (target_value !== value) {\n            resetOnHover();\n            onChange({ target: { name, value: target_value } });\n        }\n    };\n\n    const handleClick = index => {\n        if (index !== value) {\n            resetOnHover();\n            onChange({ target: { name, value: index } });\n        }\n    };\n\n    const onMouseEnter = index => {\n        if (index) {\n            setHoverValue(index);\n            range_slider_ref.current.style.width = getRangeSliderTrackWidth(index, true);\n        }\n    };\n\n    const onMouseLeave = e => {\n        const { offsetX, offsetY } = e.nativeEvent;\n        if (offsetY <= -3 || offsetY >= 3 || offsetX < -3 || offsetX > 3) {\n            resetOnHover();\n        }\n    };\n\n    const getRangeSliderTrackWidth = (slider_value, is_hover) => {\n        const width = (slider_value - min_value) * (10 / (max_value - min_value));\n        return `${width * 2 + (is_hover ? 0.8 : 1.4)}em`;\n    };\n\n    const resetOnHover = () => {\n        if (hover_value) {\n            setHoverValue(0);\n            range_slider_ref.current.style.width = 0;\n        }\n    };\n\n    const display_value = hover_value || value;\n    return (\n        <div\n            className={classNames('range-slider', className, {\n                'range-slider__error': value < min_value || value > max_value,\n            })}\n        >\n            <label className='range-slider__label' htmlFor='range'>\n                <input\n                    className='input trade-container__input range-slider__track'\n                    id='dt_duration_range_input'\n                    max={max_value}\n                    min={min_value}\n                    name={name}\n                    onChange={handleChange}\n                    tabIndex='0'\n                    type='range'\n                    value={value}\n                    aria-label='range-input'\n                />\n                {/* this element to be placed before <TickSteps /> to prevent overlapping colors */}\n                <span\n                    ref={range_slider_ref}\n                    className='range-slider__line range-slider__line--fill'\n                    onMouseLeave={onMouseLeave}\n                />\n                <div className='range-slider__ticks'>\n                    <TickSteps\n                        hover_value={hover_value}\n                        max_value={max_value}\n                        min_value={min_value}\n                        onClick={handleClick}\n                        onMouseLeave={onMouseLeave}\n                        onMouseEnter={onMouseEnter}\n                        value={value}\n                    />\n                </div>\n                {/* Calculate line width based on active value and size of range thumb */}\n                <div className='range-slider__line' style={{ width: `${getRangeSliderTrackWidth(value)}` }} />\n            </label>\n            <div className='range-slider__caption'>\n                {!!display_value && (\n                    <Text align='center' weight='bold' size='xs' color='prominent' id='dt_range_slider_label'>\n                        {display_value === 1 && localize('{{display_value}} Tick', { display_value })}\n                        {display_value > 1 && localize('{{display_value}} Ticks', { display_value })}\n                    </Text>\n                )}\n            </div>\n        </div>\n    );\n};\n// Keypress events do not trigger on Safari due to the way it handles input type='range' elements, using focus on the input element also doesn't work for Safari.\n\nRangeSlider.propTypes = {\n    className: PropTypes.string,\n    max_value: PropTypes.number,\n    min_value: PropTypes.number,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.number,\n};\n\nexport default RangeSlider;\n","import RangeSlider from './range-slider.jsx';\n\nexport default RangeSlider;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst DurationToggle = ({ name, onChange, value }) => {\n    const toggle = () => {\n        onChange({ target: { value: !value, name } });\n    };\n    const icon_className = classNames('advanced-simple-toggle__icon', 'select-arrow', {\n        'advanced-simple-toggle__icon--active': value,\n    });\n    return (\n        <>\n            <button\n                id={value ? 'dt_advanced_toggle' : 'dt_simple_toggle'}\n                className='advanced-simple-toggle'\n                onClick={toggle}\n                aria-label={localize('Toggle between advanced and simple duration settings')}\n            >\n                <Icon\n                    icon='IcChevronDown'\n                    className={icon_className}\n                    classNamePath={'advanced-simple-toggle__icon-path'}\n                />\n            </button>\n        </>\n    );\n};\n\nDurationToggle.propTypes = {\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.bool,\n};\n\nexport default DurationToggle;\n","import classNames from 'classnames';\nimport moment from 'moment';\nimport React from 'react';\nimport { DatePicker, Tooltip } from '@deriv/components';\nimport { isTimeValid, setTime, toMoment, useIsMounted, hasIntradayDurationUnit } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\ntype TDatePickerOnChange = React.ComponentProps<typeof DatePicker>['onChange'];\ntype TMarketEvent = {\n    dates: string[];\n    descrip: string;\n};\ntype TTradingDatePickerProps = {\n    id: string;\n    is_24_hours_contract?: boolean;\n    mode?: string;\n    name: string;\n};\n\nconst TradingDatePicker = observer(({ id, is_24_hours_contract, mode, name }: TTradingDatePickerProps) => {\n    const { common } = useStore();\n    const { server_time } = common;\n    const {\n        duration: current_duration,\n        duration_min_max,\n        duration_units_list,\n        expiry_type,\n        onChange,\n        start_date,\n        start_time,\n        symbol,\n        validation_errors,\n    } = useTraderStore();\n\n    const isMounted = useIsMounted();\n\n    const [disabled_days, setDisabledDays] = React.useState<number[]>([]);\n    const [market_events, setMarketEvents] = React.useState<TMarketEvent[]>([]);\n    const [duration, setDuration] = React.useState(current_duration);\n    const [selected_date, setSelectedDate] = React.useState<moment.Moment>();\n\n    React.useEffect(() => {\n        onChangeCalendarMonth();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        if (duration !== current_duration) {\n            setDuration(current_duration);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [current_duration]);\n\n    const getMinDuration = () => {\n        return hasIntradayDurationUnit(duration_units_list)\n            ? toMoment(server_time).clone()\n            : toMoment(server_time).clone().add(duration_min_max?.daily?.min, 'second');\n    };\n\n    const getMomentContractStartDateTime = () => {\n        return setTime(\n            toMoment(getMinDuration()),\n            isTimeValid(start_time ?? '') ? start_time : server_time?.format('HH:mm:ss') ?? ''\n        );\n    };\n\n    const getMaxDailyDuration = () => {\n        return duration_min_max.daily ? duration_min_max.daily.max : 365 * 24 * 3600;\n    };\n\n    const getMinDateExpiry = () => {\n        const is_duration_contract = expiry_type === 'duration';\n        const min_date = getMomentContractStartDateTime().clone().startOf('day');\n\n        return is_duration_contract && hasIntradayDurationUnit(duration_units_list) ? min_date.add(1, 'day') : min_date;\n    };\n\n    const getMaxDateDuration = () => {\n        const max_daily_duration = start_date ? 24 * 3600 : getMaxDailyDuration();\n        return is_24_hours_contract\n            ? getMomentContractStartDateTime().clone().add(max_daily_duration, 'second')\n            : getMomentContractStartDateTime().clone().add(getMaxDailyDuration(), 'second');\n    };\n\n    const hasRangeSelection = () => mode === 'duration';\n\n    const getFooter = () => {\n        if (!hasRangeSelection()) return '';\n\n        if (!duration) return localize('Minimum duration is 1 day');\n        if (+duration === 1) return localize('Duration: {{duration}} day', { duration });\n        return localize('Duration: {{duration}} days', { duration });\n    };\n\n    const getDatepickerValue = () => {\n        return hasRangeSelection()\n            ? toMoment().add(duration, 'days').format('YYYY-MM-DD')\n            : selected_date || getMinDateExpiry();\n    };\n\n    const onChangeDate: TDatePickerOnChange = e => {\n        if (isMounted()) {\n            if (hasRangeSelection()) {\n                setDuration(Number(e.duration));\n            } else if (e.target?.value) {\n                setSelectedDate(toMoment(e.target?.value));\n            }\n        }\n\n        if (typeof onChange === 'function' && e.target) {\n            onChange({\n                target: {\n                    name: e.target.name || '',\n                    value: hasRangeSelection() ? e.target.value : toMoment(e.target.value).format('YYYY-MM-DD'),\n                },\n            });\n        }\n    };\n\n    const onChangeCalendarMonth = React.useCallback(\n        // Do not move this callback up. It will cause infinite loop.\n        async (e = toMoment().format('YYYY-MM-DD')) => {\n            const new_market_events: TMarketEvent[] = [];\n            let new_disabled_days: number[] = [];\n            const events = await ContractType.getTradingEvents(e, symbol);\n            // @ts-expect-error TODO: check if TS error is gone after contract-type is converted to TS\n            events.forEach(evt => {\n                const dates = evt.dates.split(', '); // convert dates str into array\n                const idx = dates.indexOf('Fridays');\n                if (idx !== -1) {\n                    new_disabled_days = [6, 0]; // Sat, Sun\n                }\n                new_market_events.push({\n                    dates,\n                    descrip: evt.descrip,\n                });\n            });\n\n            if (isMounted()) {\n                setDisabledDays(new_disabled_days);\n                setMarketEvents(new_market_events);\n            }\n        },\n        [isMounted, symbol]\n    );\n\n    const has_error = !!validation_errors?.[name]?.length;\n\n    return (\n        <div\n            className={classNames('dc-input-field', {\n                'dc-input-field--has-error': has_error,\n            })}\n        >\n            <Tooltip\n                className='trade-container__tooltip'\n                alignment='left'\n                message={has_error ? validation_errors[name][0] : undefined}\n                has_error={has_error}\n            >\n                <DatePicker\n                    id={id}\n                    alignment='left'\n                    display_format='DD MMM YYYY'\n                    show_leading_icon\n                    error={validation_errors?.[name]?.length ? '' : undefined}\n                    mode={mode}\n                    max_date={getMaxDateDuration()}\n                    min_date={getMinDateExpiry()}\n                    name={name}\n                    onChange={onChangeDate}\n                    onChangeCalendarMonth={onChangeCalendarMonth}\n                    has_range_selection={hasRangeSelection()}\n                    has_today_btn={!hasRangeSelection()}\n                    footer={getFooter()}\n                    events={market_events}\n                    disabled_days={disabled_days}\n                    keep_open\n                    readOnly={!hasRangeSelection()}\n                    value={getDatepickerValue() as string}\n                />\n            </Tooltip>\n        </div>\n    );\n});\n\nexport default TradingDatePicker;\n","import TradingDatePicker from './trading-date-picker';\n\nexport default TradingDatePicker;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport { toMoment } from '@deriv/shared';\n\ntype TDialogProps = {\n    className: string;\n    end_times: moment.Moment[];\n    onChange: (arg: string | React.ChangeEvent<HTMLInputElement>) => void;\n    preClass: string;\n    selected_time: string;\n    start_times: moment.Moment[];\n};\n\nfunction isBetween(\n    to_compare_moment: moment.Moment,\n    start_times_moment: moment.Moment[],\n    end_times_moment: moment.Moment[],\n    duration?: string\n) {\n    for (let i = 0; i < start_times_moment.length; i++) {\n        if (\n            to_compare_moment.isBetween(\n                start_times_moment[i],\n                end_times_moment[i],\n                duration as moment.unitOfTime.StartOf\n            )\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst Dialog = ({ preClass, selected_time, end_times, start_times, onChange, className }: TDialogProps) => {\n    const start_times_moment = start_times ? start_times.map(start_time => toMoment(start_time)) : [toMoment()];\n    const end_times_moment = end_times\n        ? end_times.map(end_time => toMoment(end_time))\n        : [toMoment().hour(23).minute(59).seconds(59).milliseconds(999)];\n    const to_compare_moment = toMoment();\n    const [hour, minute] = selected_time.split(':');\n    const hours = [...Array(24).keys()].map(a => `0${a}`.slice(-2));\n    const minutes = [...Array(12).keys()].map(a => `0${a * 5}`.slice(-2));\n\n    const selectOption = (type: string, current_value: string, prev_value: string, is_enabled = true) => {\n        if (is_enabled && prev_value) {\n            const [prev_hour, prev_minute] = prev_value.split(':');\n            if ((type === 'h' && current_value !== prev_hour) || (type === 'm' && current_value !== prev_minute)) {\n                const selected_hour = type === 'h' ? current_value : prev_hour;\n                const selected_minute = type === 'm' ? current_value : prev_minute;\n                onChange(`${selected_hour}:${selected_minute}`);\n            }\n        }\n    };\n\n    return (\n        <div className={classNames(`${preClass}__dialog`, `${className}`)}>\n            <div className={`${preClass}__selector`}>\n                <div className={`${preClass}__selector--hours`}>\n                    <div className={classNames(`${preClass}__selector-list-title`, 'center-text')}>\n                        <strong>{localize('Hour')}</strong>\n                    </div>\n                    <div>\n                        {hours.map(h => {\n                            to_compare_moment.hour(Number(h));\n                            const start_times_reset_minute = start_times_moment.map(start_time =>\n                                start_time.clone().minute(0)\n                            );\n                            const is_hour_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_reset_minute,\n                                end_times_moment\n                            );\n                            const is_minute_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_moment,\n                                end_times_moment,\n                                'minute'\n                            );\n                            // The minute number after which the last block/interval of `Minutes` selection will be disabled\n                            const last_interval_of_hour = 52;\n                            const is_enabled =\n                                to_compare_moment.minutes() > last_interval_of_hour\n                                    ? is_hour_enabled && is_minute_enabled\n                                    : is_hour_enabled;\n                            return (\n                                <div\n                                    className={classNames(\n                                        `${preClass}__selector-list-item`,\n                                        { [`${preClass}__selector-list-item--selected`]: hour === h },\n                                        { [`${preClass}__selector-list-item--disabled`]: !is_enabled }\n                                    )}\n                                    key={h}\n                                    onClick={() => {\n                                        selectOption('h', h, selected_time, is_enabled);\n                                    }}\n                                >\n                                    {h}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n                <div className={`${preClass}__selector--minutes`}>\n                    <div className={classNames(`${preClass}__selector-list-title`, 'center-text')}>\n                        <strong>{localize('Minute')}</strong>\n                    </div>\n                    <div>\n                        {minutes.map(mm => {\n                            to_compare_moment.hour(Number(hour)).minute(Number(mm));\n                            const is_enabled = isBetween(\n                                to_compare_moment,\n                                start_times_moment,\n                                end_times_moment,\n                                'minute'\n                            );\n                            return (\n                                <div\n                                    className={classNames(\n                                        `${preClass}__selector-list-item`,\n                                        { [`${preClass}__selector-list-item--selected`]: minute === mm },\n                                        { [`${preClass}__selector-list-item--disabled`]: !is_enabled }\n                                    )}\n                                    key={mm}\n                                    onClick={() => {\n                                        selectOption('m', mm, selected_time, is_enabled);\n                                    }}\n                                >\n                                    {mm}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Dialog;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, InputField } from '@deriv/components';\nimport Dialog from './dialog';\nimport { observer, useStore } from '@deriv/stores';\nimport moment from 'moment';\n\ntype TTimePickerProps = {\n    end_times: moment.Moment[];\n    is_nativepicker?: boolean;\n    name: string;\n    onChange: (e: { target: { name: string; value: string } }) => Promise<void>;\n    padding?: string;\n    placeholder: string;\n    selected_time: string;\n    start_times: moment.Moment[];\n    validation_errors?: string[];\n};\n\nconst class_prefix = 'time-picker';\n\nconst TimePicker = observer(\n    ({\n        end_times,\n        is_nativepicker,\n        name,\n        onChange,\n        padding,\n        placeholder,\n        selected_time,\n        start_times,\n        validation_errors,\n    }: TTimePickerProps) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus } = ui;\n        const [is_open, setIsOpen] = React.useState(false);\n        const [wrapper_ref, setWrapperRef] = React.useState<HTMLDivElement | null>(null);\n\n        React.useEffect(() => {\n            document.addEventListener('mousedown', handleClickOutside);\n            return () => document.removeEventListener('mousedown', handleClickOutside);\n        });\n\n        const toggleDropDown = () => {\n            setIsOpen(!is_open);\n        };\n\n        const handleChange = (arg: string | React.ChangeEvent<HTMLInputElement>) => {\n            // To handle nativepicker;\n            const value = typeof arg === 'object' ? arg.target.value : arg;\n\n            if (value !== selected_time) {\n                onChange({ target: { name, value } });\n            }\n        };\n\n        const saveRef: React.RefCallback<HTMLDivElement> = node => {\n            if (!node) return;\n            setWrapperRef(node);\n        };\n\n        const handleClickOutside = (event: Event) => {\n            if (!wrapper_ref?.contains(event.target as Node) && is_open) {\n                setIsOpen(false);\n            }\n        };\n\n        return (\n            <div ref={saveRef} className={classNames(class_prefix, { [`${class_prefix}--padding`]: padding })}>\n                {is_nativepicker ? (\n                    <input\n                        type='time'\n                        id={`dt_${name}_input`}\n                        value={selected_time}\n                        onChange={handleChange}\n                        name={name}\n                        min={start_times[0]?.format('HH:mm')}\n                        max={end_times[end_times.length - 1]?.format('HH:mm')}\n                    />\n                ) : (\n                    <React.Fragment>\n                        <InputField\n                            error_messages={validation_errors}\n                            type='text'\n                            is_hj_whitelisted\n                            is_read_only\n                            id={`dt_${name}_input`}\n                            className={classNames(`${class_prefix}-input`)}\n                            current_focus={current_focus}\n                            value={`${selected_time} GMT`}\n                            onClick={toggleDropDown}\n                            name={name}\n                            placeholder={placeholder}\n                            setCurrentFocus={setCurrentFocus}\n                        />\n                        <Icon icon='IcClockOutline' className={`${class_prefix}__icon`} />\n                        <CSSTransition\n                            in={is_open}\n                            classNames={{\n                                enter: 'time-picker__dialog--enter',\n                                enterDone: 'time-picker__dialog--enter-done',\n                                exit: 'time-picker__dialog--exit',\n                            }}\n                            timeout={100}\n                            unmountOnExit\n                        >\n                            <Dialog\n                                end_times={end_times}\n                                start_times={start_times}\n                                className={'from-left'}\n                                onChange={handleChange}\n                                preClass={class_prefix}\n                                selected_time={selected_time}\n                            />\n                        </CSSTransition>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default TimePicker;\n","import TimePicker from './time-picker';\n\nexport default TimePicker;\n","import { useStore } from '@deriv/stores';\nimport { TTradeStore } from 'Types';\nimport moment from 'moment';\n\ntype TTime = {\n    server_time: NonNullable<ReturnType<typeof useStore>['common']['server_time']>;\n    selected_time: moment.Moment;\n    market_open_times: TTradeStore['market_open_times'];\n    market_close_times: TTradeStore['market_close_times'];\n};\n\nconst getClosestTime = (time: moment.Moment | string, interval: number): moment.Moment => {\n    const moment_time = moment(time); // Convert time to a moment object if it's a string\n    return moment_time.minute(Math.ceil(moment_time.minute() / interval) * interval);\n};\n\nexport const getSelectedTime = (\n    server_time: TTime['server_time'],\n    selected_time: TTime['selected_time'],\n    market_open_times: moment.Moment[],\n    market_close_times: moment.Moment[]\n) => {\n    for (let i = 0; i < market_open_times.length; i++) {\n        if (selected_time.isAfter(market_open_times[i]) && selected_time.isBefore(market_close_times[i])) {\n            return getClosestTime(selected_time, 5).format('HH:mm');\n        }\n    }\n\n    for (let i = 0; i < market_open_times.length; i++) {\n        const moment_market_open_time = moment(market_open_times[i]); // Convert market open time to a moment object\n        if (moment_market_open_time.isAfter(server_time)) {\n            return getClosestTime(moment_market_open_time, 5).format('HH:mm');\n        }\n    }\n\n    return getClosestTime(server_time, 5).format('HH:mm');\n};\n\nexport const getBoundaries = (\n    server_time: TTime['server_time'],\n    market_open_times: moment.Moment[],\n    market_close_times: moment.Moment[]\n) => {\n    const boundaries = {\n        start: market_open_times.map(open_time =>\n            server_time.isBefore(open_time) ? moment(open_time).clone() : server_time\n        ),\n        end: market_close_times,\n    };\n\n    if (boundaries.start.length > 0) {\n        boundaries.start[0] = getClosestTime(boundaries.start[0], 5);\n    }\n\n    return boundaries;\n};\n","import React from 'react';\nimport { setTime, toMoment } from '@deriv/shared';\nimport TimePicker from 'App/Components/Form/TimePicker';\nimport { getSelectedTime, getBoundaries } from 'Stores/Modules/Trading/Helpers/end-time';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst TradingTimePicker = observer(() => {\n    const { common } = useStore();\n    const { server_time } = common;\n    const { expiry_date, expiry_time, market_open_times, market_close_times, onChange, is_market_closed } =\n        useTraderStore();\n    const moment_expiry_date = toMoment(expiry_date);\n    const market_open_datetimes = market_open_times.map(open_time => setTime(moment_expiry_date.clone(), open_time));\n    const market_close_datetimes = market_close_times.map(close_time =>\n        setTime(moment_expiry_date.clone(), close_time)\n    );\n    const expiry_datetime = setTime(moment_expiry_date.clone(), expiry_time);\n    const server_datetime = toMoment(server_time);\n\n    const boundaries = getBoundaries(server_datetime.clone(), market_open_datetimes, market_close_datetimes);\n    const selected_time = getSelectedTime(\n        server_datetime.clone(),\n        expiry_datetime,\n        market_open_datetimes,\n        market_close_datetimes\n    );\n\n    React.useEffect(() => {\n        if (expiry_time !== selected_time && !is_market_closed) {\n            onChange({\n                target: { name: 'expiry_time', value: selected_time },\n            });\n        }\n    }, [expiry_time, selected_time, onChange, is_market_closed]);\n\n    return (\n        <TimePicker\n            end_times={boundaries.end}\n            onChange={onChange}\n            name='expiry_time'\n            placeholder='12:00'\n            start_times={boundaries.start}\n            selected_time={selected_time}\n        />\n    );\n});\n\nexport default TradingTimePicker;\n","import TradingTimePicker from './trading-time-picker';\n\nexport default TradingTimePicker;\n","import classNames from 'classnames';\nimport { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dropdown, ButtonToggle, InputField } from '@deriv/components';\nimport { getDurationMinMaxValues, getUnitMap, hasIntradayDurationUnit, toMoment } from '@deriv/shared';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport TradingDatePicker from '../../DatePicker';\nimport TradingTimePicker from '../../TimePicker';\nimport ExpiryText from './expiry-text.jsx';\nimport DurationRangeText from './duration-range-text';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst AdvancedDuration = observer(\n    ({\n        advanced_duration_unit,\n        advanced_expiry_type,\n        changeDurationUnit,\n        duration_t,\n        duration_units_list,\n        expiry_date,\n        expiry_epoch,\n        expiry_list,\n        expiry_type,\n        getDurationFromUnit,\n        number_input_props,\n        onChange,\n        onChangeUiStore,\n        server_time,\n        shared_input_props,\n        start_date,\n    }) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus } = ui;\n        const { contract_expiry_type, duration_min_max, is_vanilla, validation_errors } = useTraderStore();\n\n        const [min, max] = getDurationMinMaxValues(duration_min_max, contract_expiry_type, advanced_duration_unit);\n        let is_24_hours_contract = false;\n\n        if (expiry_type === 'endtime') {\n            const has_intraday_duration_unit = hasIntradayDurationUnit(duration_units_list);\n            is_24_hours_contract =\n                (!!start_date || toMoment(expiry_date || server_time).isSame(toMoment(server_time), 'day')) &&\n                has_intraday_duration_unit;\n        }\n\n        const endtime_container_class = classNames('endtime-container', {\n            'has-time': is_24_hours_contract,\n        });\n\n        const changeExpiry = ({ target }) => {\n            const { name, value } = target;\n\n            onChange({ target: { name: 'expiry_type', value } });\n            onChangeUiStore({ name, value });\n        };\n\n        const has_error = !!validation_errors?.duration?.length;\n\n        const { name_plural, name } = getUnitMap()[advanced_duration_unit];\n        const duration_unit_text = name_plural ?? name;\n\n        return (\n            <>\n                {expiry_list.length > 1 && (\n                    <ButtonToggle\n                        id='dt_advanced_duration_toggle'\n                        buttons_arr={expiry_list}\n                        name='advanced_expiry_type'\n                        is_animated={true}\n                        onChange={changeExpiry}\n                        value={advanced_expiry_type}\n                    />\n                )}\n                {expiry_type === 'duration' ? (\n                    <>\n                        <div className='duration-container'>\n                            {duration_units_list.length >= 1 && (\n                                <Dropdown\n                                    classNameDisplay='dc-dropdown__display--duration'\n                                    disabled={false}\n                                    id='duration'\n                                    is_alignment_left\n                                    is_nativepicker={false}\n                                    list={duration_units_list}\n                                    name='advanced_duration_unit'\n                                    no_border={true}\n                                    onChange={changeDurationUnit}\n                                    value={advanced_duration_unit}\n                                />\n                            )}\n                            {advanced_duration_unit === 't' && contract_expiry_type === 'tick' && (\n                                <RangeSlider name='duration' ticks={10} value={duration_t} {...shared_input_props} />\n                            )}\n                            {advanced_duration_unit === 'd' && (\n                                <TradingDatePicker\n                                    id='dt_advanced_duration_datepicker'\n                                    mode='duration'\n                                    name='duration'\n                                    is_24_hours_contract={is_24_hours_contract}\n                                />\n                            )}\n                            {advanced_duration_unit !== 't' && advanced_duration_unit !== 'd' && (\n                                <InputField\n                                    id='dt_advanced_duration_input'\n                                    classNameInput='trade-container__input'\n                                    current_focus={current_focus}\n                                    error_messages={validation_errors.duration}\n                                    label={duration_units_list.length === 1 ? duration_units_list[0].text : null}\n                                    name='duration'\n                                    setCurrentFocus={setCurrentFocus}\n                                    value={getDurationFromUnit(advanced_duration_unit)}\n                                    {...number_input_props}\n                                    {...shared_input_props}\n                                />\n                            )}\n                            {is_vanilla && (\n                                <DurationRangeText min={min} max={max} duration_unit_text={duration_unit_text} />\n                            )}\n                            {advanced_duration_unit === 'd' && (\n                                <ExpiryText expiry_epoch={expiry_epoch} has_error={has_error} />\n                            )}\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <div className={endtime_container_class}>\n                            <TradingDatePicker\n                                id='dt_advanced_duration_datepicker'\n                                name='expiry_date'\n                                is_24_hours_contract={is_24_hours_contract}\n                            />\n                            {\n                                is_24_hours_contract && <TradingTimePicker />\n                                // validation_errors={validation_errors.end_time} TODO: add validation_errors for end time\n                            }\n                            {!is_24_hours_contract && <ExpiryText expiry_epoch={expiry_epoch} />}\n                        </div>\n                    </>\n                )}\n            </>\n        );\n    }\n);\n\nAdvancedDuration.propTypes = {\n    advanced_duration_unit: PropTypes.string,\n    advanced_expiry_type: PropTypes.string,\n    changeDurationUnit: PropTypes.func,\n    duration_t: PropTypes.number,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    expiry_date: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    expiry_list: PropTypes.array,\n    expiry_type: PropTypes.string,\n    getDurationFromUnit: PropTypes.func,\n    number_input_props: PropTypes.object,\n    onChange: PropTypes.func,\n    onChangeUiStore: PropTypes.func,\n    server_time: PropTypes.object,\n    shared_input_props: PropTypes.object,\n    start_date: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nexport default AdvancedDuration;\n","import { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { ButtonToggle, InputField } from '@deriv/components';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport TradingDatePicker from '../../DatePicker';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst SimpleDuration = observer(\n    ({\n        changeDurationUnit,\n        duration_t,\n        duration_units_list,\n        getDurationFromUnit,\n        number_input_props,\n        shared_input_props,\n    }) => {\n        const { ui } = useStore();\n        const { current_focus, setCurrentFocus, simple_duration_unit } = ui;\n        const { contract_expiry_type, validation_errors } = useTraderStore();\n\n        const filterMinutesAndTicks = arr => {\n            const filtered_arr = arr.filter(du => du.value === 't' || du.value === 'm');\n            if (filtered_arr.length <= 1) return [];\n\n            return filtered_arr;\n        };\n        const has_label = !duration_units_list.some(du => du.value === 't');\n\n        return (\n            <>\n                {duration_units_list.length > 1 && (\n                    <ButtonToggle\n                        id='dt_simple_duration_toggle'\n                        buttons_arr={filterMinutesAndTicks(duration_units_list)}\n                        is_animated={true}\n                        name='simple_duration_unit'\n                        onChange={changeDurationUnit}\n                        value={simple_duration_unit}\n                    />\n                )}\n                {simple_duration_unit === 't' && contract_expiry_type === 'tick' && (\n                    <RangeSlider name='duration' value={duration_t} ticks={10} {...shared_input_props} />\n                )}\n                {simple_duration_unit === 'd' && (\n                    <TradingDatePicker id='dt_simple_duration_datepicker' mode='duration' name='duration' />\n                )}\n                {simple_duration_unit !== 't' && simple_duration_unit !== 'd' && (\n                    <InputField\n                        id='dt_simple_duration_input'\n                        classNameInput='trade-container__input'\n                        current_focus={current_focus}\n                        error_messages={validation_errors.duration}\n                        name='duration'\n                        label={has_label ? duration_units_list[0]?.text : null}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getDurationFromUnit(simple_duration_unit)}\n                        {...number_input_props}\n                        {...shared_input_props}\n                    />\n                )}\n            </>\n        );\n    }\n);\n\nSimpleDuration.propTypes = {\n    changeDurationUnit: PropTypes.func,\n    duration_t: PropTypes.number,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    getDurationFromUnit: PropTypes.func,\n    number_input_props: PropTypes.object,\n    shared_input_props: PropTypes.object,\n};\n\nexport default SimpleDuration;\n","import classNames from 'classnames';\nimport { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport RangeSlider from 'App/Components/Form/RangeSlider';\nimport { Dropdown } from '@deriv/components';\nimport { toMoment, isVanillaContract } from '@deriv/shared';\nimport DurationToggle from './duration-toggle.jsx';\nimport AdvancedDuration from './advanced-duration.jsx';\nimport SimpleDuration from './simple-duration.jsx';\n\nconst Duration = ({\n    advanced_duration_unit,\n    advanced_expiry_type,\n    contract_type,\n    duration_t,\n    duration_unit,\n    duration_units_list,\n    duration,\n    expiry_date,\n    expiry_epoch,\n    expiry_time,\n    expiry_type,\n    getDurationFromUnit,\n    hasDurationUnit,\n    is_advanced_duration,\n    is_minimized,\n    market_open_times,\n    max_value,\n    min_value,\n    onChange,\n    onChangeMultiple,\n    onChangeUiStore,\n    server_time,\n    simple_duration_unit,\n    start_date,\n}) => {\n    React.useEffect(() => {\n        if (isVanillaContract(contract_type)) {\n            onToggleDurationType({ target: { value: true, name: 'is_advanced_duration' } });\n        }\n    }, [contract_type]);\n\n    const expiry_list = [{ text: localize('Duration'), value: 'duration' }];\n\n    const has_end_time = expiry_list.find(expiry => expiry.value === 'endtime');\n    if (duration_units_list.length === 1 && duration_unit === 't') {\n        if (has_end_time) {\n            expiry_list.pop(); // remove end time for contracts with only tick duration\n        }\n    } else if (!has_end_time) {\n        expiry_list.push({ text: localize('End time'), value: 'endtime' });\n    }\n\n    if (is_minimized) {\n        const moment_expiry = toMoment(expiry_date);\n        const duration_unit_text = (duration_units_list.find(o => o.value === duration_unit) || {}).text;\n        return (\n            <div className='fieldset-minimized fieldset-minimized__duration'>\n                {expiry_type === 'duration'\n                    ? `${duration} ${duration_unit_text}`\n                    : `${moment_expiry.format('ddd - DD MMM, YYYY')}\\n${expiry_time}`}\n            </div>\n        );\n    }\n\n    const changeDurationUnit = ({ target }) => {\n        const { name, value } = target;\n        const duration_value = getDurationFromUnit(value);\n\n        onChangeUiStore({ name, value });\n        onChangeMultiple({\n            duration_unit: value,\n            duration: duration_value,\n        });\n    };\n\n    const changeDurationValue = ({ target }) => {\n        const { name, value } = target;\n        const duration_name = `duration_${is_advanced_duration ? advanced_duration_unit : simple_duration_unit}`;\n\n        // e.target.value returns string, we need to convert them to number\n        onChangeUiStore({ name: duration_name, value: +value });\n        onChange({ target: { name, value: +value } });\n    };\n\n    const onToggleDurationType = ({ target }) => {\n        const { name, value: is_advanced } = target;\n        onChangeUiStore({ name, value: is_advanced });\n\n        // replace selected duration unit and duration if the contract doesn't have that duration unit\n        let current_duration_unit = is_advanced ? advanced_duration_unit : simple_duration_unit;\n        const duration_value = getDurationFromUnit(current_duration_unit);\n        if (!hasDurationUnit(current_duration_unit, is_advanced)) {\n            current_duration_unit = duration_units_list[0].value;\n            onChangeUiStore({\n                name: `${is_advanced ? 'advanced' : 'simple'}_duration_unit`,\n                value: current_duration_unit,\n            });\n        }\n\n        const new_trade_store_values = {};\n\n        // simple only has expiry type of duration\n        if (!is_advanced && expiry_type !== 'duration') {\n            new_trade_store_values.expiry_type = 'duration';\n        }\n        if (is_advanced && expiry_type !== advanced_expiry_type) {\n            new_trade_store_values.expiry_type = advanced_expiry_type;\n        }\n\n        const has_same_duration = current_duration_unit === duration_unit && duration_value === duration;\n        if (!has_same_duration) {\n            new_trade_store_values.duration_unit = current_duration_unit;\n            new_trade_store_values.duration = duration_value;\n        }\n\n        const should_update_trade_store = Object.keys(new_trade_store_values).length;\n        if (should_update_trade_store) {\n            onChangeMultiple({ ...new_trade_store_values });\n        }\n    };\n\n    const props = {\n        shared_input: {\n            is_hj_whitelisted: true,\n            onChange: changeDurationValue,\n            max_value,\n            min_value,\n        },\n        number_input: {\n            type: 'number',\n            is_incrementable: true,\n        },\n    };\n\n    // e.g. digit contracts only has range slider - does not have toggle between advanced / simple\n    const has_toggle = expiry_list.length > 1 || duration_units_list.length > 1;\n\n    return (\n        <Fieldset\n            className={classNames('trade-container__fieldset', {\n                'trade-container__fieldset--advanced': is_advanced_duration,\n            })}\n        >\n            {duration_units_list.length === 1 && !is_advanced_duration && (\n                <Dropdown\n                    classNameDisplay='dc-dropdown__display--duration'\n                    disabled={false}\n                    id='duration'\n                    is_alignment_left\n                    is_nativepicker={false}\n                    list={duration_units_list}\n                    name='simple_duration_unit'\n                    no_border={true}\n                    onChange={changeDurationUnit}\n                    value={simple_duration_unit}\n                />\n            )}\n            {!has_toggle && <RangeSlider name='duration' value={duration_t} {...props.shared_input} />}\n            {has_toggle && (\n                <>\n                    {is_advanced_duration && (\n                        <AdvancedDuration\n                            advanced_duration_unit={advanced_duration_unit}\n                            advanced_expiry_type={advanced_expiry_type}\n                            changeDurationUnit={changeDurationUnit}\n                            duration_t={duration_t}\n                            duration_units_list={duration_units_list}\n                            expiry_date={expiry_date}\n                            expiry_epoch={expiry_epoch}\n                            expiry_list={expiry_list}\n                            expiry_type={expiry_type}\n                            getDurationFromUnit={getDurationFromUnit}\n                            market_open_times={market_open_times}\n                            number_input_props={props.number_input}\n                            onChange={onChange}\n                            onChangeUiStore={onChangeUiStore}\n                            server_time={server_time}\n                            shared_input_props={props.shared_input}\n                            start_date={start_date}\n                        />\n                    )}\n                    {!is_advanced_duration && (\n                        <SimpleDuration\n                            getDurationFromUnit={getDurationFromUnit}\n                            changeDurationUnit={changeDurationUnit}\n                            duration_t={duration_t}\n                            duration_units_list={duration_units_list}\n                            number_input_props={props.number_input}\n                            shared_input_props={props.shared_input}\n                            simple_duration_unit={simple_duration_unit}\n                        />\n                    )}\n                    {!isVanillaContract(contract_type) && (\n                        <DurationToggle\n                            name={'is_advanced_duration'}\n                            onChange={onToggleDurationType}\n                            value={is_advanced_duration}\n                        />\n                    )}\n                </>\n            )}\n        </Fieldset>\n    );\n};\n\nDuration.propTypes = {\n    advanced_duration_unit: PropTypes.string,\n    advanced_expiry_type: PropTypes.string,\n    contract_type: PropTypes.string,\n    duration: PropTypes.number,\n    duration_t: PropTypes.number,\n    duration_unit: PropTypes.string,\n    duration_units_list: MobxPropTypes.arrayOrObservableArray,\n    expiry_date: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    expiry_time: PropTypes.string,\n    expiry_type: PropTypes.string,\n    getDurationFromUnit: PropTypes.func,\n    hasDurationUnit: PropTypes.func,\n    is_advanced_duration: PropTypes.bool,\n    is_minimized: PropTypes.bool,\n    market_open_times: PropTypes.array,\n    max_value: PropTypes.number,\n    min_value: PropTypes.number,\n    number_input: PropTypes.object,\n    onChange: PropTypes.func,\n    onChangeMultiple: PropTypes.func,\n    onChangeUiStore: PropTypes.func,\n    server_time: PropTypes.object,\n    shared_input: PropTypes.object,\n    simple_duration_unit: PropTypes.string,\n    start_date: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    validation_errors: PropTypes.object,\n};\n\nexport default Duration;\n","import React from 'react';\nimport { getDurationMinMaxValues } from '@deriv/shared';\nimport Duration from './duration.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst DurationWrapper = observer(() => {\n    const { ui } = useStore();\n    const {\n        advanced_expiry_type,\n        advanced_duration_unit,\n        getDurationFromUnit,\n        is_advanced_duration,\n        onChangeUiStore,\n        simple_duration_unit,\n        duration_t,\n    } = ui;\n    const {\n        contract_expiry_type,\n        contract_type,\n        duration,\n        duration_unit,\n        duration_units_list,\n        duration_min_max,\n        expiry_type,\n        expiry_date,\n        expiry_epoch,\n        expiry_time,\n        start_date,\n        market_open_times,\n        onChange,\n        onChangeMultiple,\n    } = useTraderStore();\n\n    const duration_props = {\n        advanced_duration_unit,\n        advanced_expiry_type,\n        contract_expiry_type,\n        contract_type,\n        duration_min_max,\n        duration_t,\n        duration_unit,\n        duration_units_list,\n        duration,\n        expiry_date,\n        expiry_epoch,\n        expiry_time,\n        expiry_type,\n        getDurationFromUnit,\n        is_advanced_duration,\n        market_open_times,\n        onChange,\n        onChangeMultiple,\n        onChangeUiStore,\n        simple_duration_unit,\n        start_date,\n    };\n\n    const hasDurationUnit = (duration_type, is_advanced) => {\n        let duration_list = [...duration_units_list];\n\n        if (duration_list.length > 1 && !is_advanced) {\n            duration_list = duration_list.filter(du => du.value === 'm' || du.value === 't');\n        }\n\n        return duration_list.some(du => du.value === duration_type);\n    };\n\n    const setDurationUnit = () => {\n        if (duration_units_list?.length > 0) {\n            const new_duration_unit = duration_units_list[0].value;\n            const new_duration_value = getDurationFromUnit(new_duration_unit);\n\n            onChangeUiStore({\n                name: `${is_advanced_duration ? 'advanced' : 'simple'}_duration_unit`,\n                value: new_duration_unit,\n            });\n            onChangeMultiple({\n                duration_unit: new_duration_unit,\n                duration: +new_duration_value,\n            });\n        }\n    };\n\n    const handleEndTime = () => {\n        const symbol_has_endtime = duration_units_list.length > 1 || is_advanced_duration;\n\n        if (symbol_has_endtime) {\n            // simple duration does not have endtime\n            if (!is_advanced_duration) onChangeUiStore({ name: 'is_advanced_duration', value: true });\n\n            onChangeUiStore({ name: 'advanced_expiry_type', value: 'endtime' });\n        } else {\n            // If query string contains endtime but contract type does not e.g. digits (only ticks contracts)\n            onChange({ target: { name: 'expiry_type', value: 'duration' } });\n        }\n    };\n\n    const assertDurationIsWithinBoundary = React.useCallback(\n        current_duration => {\n            const [min_value, max_value] = getDurationMinMaxValues(\n                duration_min_max,\n                contract_expiry_type,\n                duration_unit\n            );\n            if (contract_expiry_type === 'tick' && current_duration < min_value) {\n                onChangeUiStore({ name: `duration_${duration_unit}`, value: min_value });\n                onChange({ target: { name: 'duration', value: min_value } });\n            }\n\n            if (!(current_duration < min_value) && current_duration > max_value && duration_unit !== 'd') {\n                onChangeUiStore({ name: `duration_${duration_unit}`, value: max_value });\n                onChange({ target: { name: 'duration', value: max_value } });\n            }\n        },\n        [contract_expiry_type, duration_unit, duration_min_max, onChange, onChangeUiStore]\n    );\n\n    React.useEffect(() => {\n        if (duration_unit === 'd') {\n            onChangeUiStore({\n                name: 'is_advanced_duration',\n                value: true,\n            });\n        }\n    }, [duration_unit, onChangeUiStore]);\n\n    React.useEffect(() => {\n        const current_unit = is_advanced_duration ? advanced_duration_unit : simple_duration_unit;\n        const current_duration = getDurationFromUnit(current_unit);\n\n        if (duration_unit !== current_unit) {\n            onChangeUiStore({\n                name: `${is_advanced_duration ? 'advanced' : 'simple'}_duration_unit`,\n                value: duration_unit,\n            });\n        }\n\n        if (+duration !== +current_duration) {\n            onChangeUiStore({ name: `duration_${duration_unit}`, value: duration });\n        }\n\n        if (expiry_type === 'endtime') handleEndTime();\n\n        assertDurationIsWithinBoundary(current_duration);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        if (is_advanced_duration && expiry_type !== advanced_expiry_type) {\n            onChange({ target: { name: 'expiry_type', value: advanced_expiry_type } });\n        }\n    }, [is_advanced_duration, expiry_type, advanced_expiry_type, onChange]);\n\n    // intercept changes to contract duration and check that trade_store and ui_store are aligned.\n    React.useEffect(() => {\n        const current_duration = getDurationFromUnit(duration_unit);\n        const simple_is_not_type_duration = !is_advanced_duration && expiry_type !== 'duration';\n\n        // simple only has expiry type duration\n        if (simple_is_not_type_duration) {\n            onChange({ target: { name: 'expiry_type', value: 'duration' } });\n        }\n\n        if (duration !== current_duration) {\n            onChangeUiStore({ name: `duration_${duration_unit}`, value: duration });\n        }\n\n        assertDurationIsWithinBoundary(current_duration);\n    }, [\n        duration_unit,\n        is_advanced_duration,\n        expiry_type,\n        duration,\n        assertDurationIsWithinBoundary,\n        onChange,\n        onChangeUiStore,\n        getDurationFromUnit,\n    ]);\n\n    const current_duration_unit = is_advanced_duration ? advanced_duration_unit : simple_duration_unit;\n    const has_missing_duration_unit = !hasDurationUnit(current_duration_unit, is_advanced_duration);\n    const simple_is_missing_duration_unit =\n        !is_advanced_duration && simple_duration_unit === 'd' && duration_units_list.length === 4;\n    const [min_value, max_value] = getDurationMinMaxValues(duration_min_max, contract_expiry_type, duration_unit);\n\n    if (has_missing_duration_unit || simple_is_missing_duration_unit) {\n        setDurationUnit();\n    }\n\n    return (\n        <Duration hasDurationUnit={hasDurationUnit} max_value={max_value} min_value={min_value} {...duration_props} />\n    );\n});\n\nexport default DurationWrapper;\n","import DurationWrapper from './duration-wrapper.jsx';\n\nexport default DurationWrapper;\n","import React from 'react';\n\nimport { Checkbox, Dropdown, Popover, PopoverMessageCheckbox } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\n\nimport Fieldset from 'App/Components/Form/fieldset';\nimport { onChangeCancellationDuration, onToggleCancellation } from 'Stores/Modules/Trading/Helpers/multiplier';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst CancelDeal = observer(() => {\n    const { ui } = useStore();\n    const {\n        cancellation_range_list,\n        cancellation_duration,\n        has_cancellation,\n        has_stop_loss,\n        has_take_profit,\n        onChangeMultiple,\n    } = useTraderStore();\n\n    const { should_show_cancellation_warning, toggleCancellationWarning } = ui;\n\n    const should_show_popover = (has_take_profit || has_stop_loss) && should_show_cancellation_warning;\n    const [is_do_not_show_selected, setDoNotShowSelected] = React.useState(!should_show_cancellation_warning);\n\n    const onPopoverClose = () => {\n        if (is_do_not_show_selected) {\n            toggleCancellationWarning();\n        }\n    };\n\n    const onPopoverCheckboxChange = React.useCallback(() => {\n        setDoNotShowSelected(prev_state => !prev_state);\n    }, []);\n\n    const input = (\n        <Checkbox\n            id='dt_cancellation-checkbox_input'\n            onChange={() => onToggleCancellation({ has_cancellation, onChangeMultiple })}\n            name='has_cancellation'\n            label={localize('Deal cancellation')}\n            defaultChecked={has_cancellation}\n        />\n    );\n\n    return (\n        <React.Fragment>\n            {!!cancellation_range_list.length && (\n                <Fieldset className='trade-container__fieldset'>\n                    <div className='dc-input-wrapper--inline'>\n                        {should_show_popover ? (\n                            <Popover\n                                alignment='left'\n                                classNameBubble='trade-container__popover'\n                                is_bubble_hover_enabled\n                                margin={2}\n                                message={\n                                    <PopoverMessageCheckbox\n                                        defaultChecked={is_do_not_show_selected}\n                                        checkboxLabel={localize(\"Don't show this again\")}\n                                        message={localize(\n                                            'Take profit and/or stop loss are not available while deal cancellation is active.'\n                                        )}\n                                        name='should_show_cancellation_warning'\n                                        onChange={onPopoverCheckboxChange}\n                                    />\n                                }\n                                onBubbleClose={onPopoverClose}\n                                relative_render\n                            >\n                                {input}\n                            </Popover>\n                        ) : (\n                            <React.Fragment>{input}</React.Fragment>\n                        )}\n                        <Popover\n                            alignment='left'\n                            icon='info'\n                            id='dt_cancellation-checkbox__tooltip'\n                            is_bubble_hover_enabled\n                            message={localize(\n                                'When this is active, you can cancel your trade within the chosen time frame. Your stake will be returned without loss.'\n                            )}\n                            classNameBubble='trade-container__deal-cancellation-popover'\n                            margin={216}\n                            relative_render\n                        />\n                    </div>\n                    {has_cancellation && (\n                        <Dropdown\n                            id='dt_cancellation_range'\n                            className='trade-container__multiplier-dropdown'\n                            is_alignment_left\n                            is_nativepicker={false}\n                            list={cancellation_range_list}\n                            name='cancellation_duration'\n                            no_border={true}\n                            value={cancellation_duration}\n                            onChange={event => onChangeCancellationDuration({ event, onChangeMultiple })}\n                        />\n                    )}\n                </Fieldset>\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default CancelDeal;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport NumberSelector from 'App/Components/Form/number-selector';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport { getGrowthRatePercentage, getTickSizeBarrierPercentage, isEmptyObject } from '@deriv/shared';\nimport classNames from 'classnames';\nimport { observer } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst Accumulator = observer(() => {\n    const {\n        accumulator_range_list,\n        growth_rate,\n        is_accumulator,\n        onChange,\n        tick_size_barrier,\n        proposal_info,\n        has_open_accu_contract,\n    } = useTraderStore();\n\n    // splitting accumulator_range_list into rows containing 5 values each:\n    const arr_arr_numbers: number[][] | undefined = accumulator_range_list?.reduce((acc: number[][], _el, index) => {\n        if (index % 5 === 0) {\n            acc.push(accumulator_range_list.slice(index, index + 5));\n        }\n        return acc;\n    }, []);\n    const has_error_or_not_loaded =\n        proposal_info?.ACCU?.has_error || !proposal_info?.ACCU?.id || isEmptyObject(proposal_info);\n    if (!accumulator_range_list?.length) return null;\n    return (\n        <Fieldset\n            className={classNames('trade-container__fieldset', 'accumulator')}\n            header={localize('Growth rate')}\n            is_center\n            is_tooltip_disabled={has_error_or_not_loaded && is_accumulator}\n            header_tooltip={localize(\n                'Your stake will grow at {{growth_rate}}% per tick as long as the current spot price remains within ±{{tick_size_barrier}} from the previous spot price.',\n                {\n                    growth_rate: getGrowthRatePercentage(growth_rate),\n                    tick_size_barrier: getTickSizeBarrierPercentage(tick_size_barrier),\n                }\n            )}\n        >\n            <NumberSelector\n                arr_arr_numbers={arr_arr_numbers}\n                name='growth_rate'\n                onChange={onChange}\n                selected_number={growth_rate}\n                should_show_in_percents\n                is_disabled={has_open_accu_contract}\n            />\n        </Fieldset>\n    );\n});\n\nexport default Accumulator;\n","import React from 'react';\nimport classNames from 'classnames';\nimport Amount from 'Modules/Trading/Components/Form/TradeParams/amount';\nimport Barrier from 'Modules/Trading/Components/Form/TradeParams/barrier';\nimport BarrierSelector from 'Modules/Trading/Components/Form/TradeParams/Turbos/barrier-selector';\nimport Duration from 'Modules/Trading/Components/Form/TradeParams/Duration';\nimport LastDigit from 'Modules/Trading/Components/Form/TradeParams/last-digit';\nimport CancelDeal from 'Modules/Trading/Components/Form/TradeParams/Multiplier/cancel-deal';\nimport Accumulator from 'Modules/Trading/Components/Form/TradeParams/Accumulator/accumulator';\nimport StopLoss from 'Modules/Trading/Components/Form/TradeParams/Multiplier/stop-loss.jsx';\nimport TakeProfit from 'Modules/Trading/Components/Form/TradeParams/Multiplier/take-profit.jsx';\nimport Expiration from 'Modules/Trading/Components/Form/TradeParams/Multiplier/expiration.jsx';\nimport AccumulatorsInfoDisplay from 'Modules/Trading/Components/Form/TradeParams/Accumulator/accumulators-info-display';\nimport Strike from 'Modules/Trading/Components/Form/TradeParams/strike.jsx';\nimport TradeTypeTabs from 'Modules/Trading/Components/Form/TradeParams/trade-type-tabs';\nimport { observer } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport Fieldset from 'App/Components/Form/fieldset';\n\ntype TTradeParams = {\n    is_minimized?: boolean;\n};\n\nconst TradeParams = observer(({ is_minimized = false }: TTradeParams) => {\n    const { form_components } = useTraderStore();\n    const isVisible = (component_key: string) => {\n        return form_components.includes(component_key);\n    };\n\n    return (\n        <React.Fragment>\n            {isVisible('duration') && (\n                // @ts-expect-error: TODO: check if TS error is gone after <Duration /> is migrated to TS\n                <Duration key={'duration'} is_minimized={is_minimized} />\n            )}\n            {isVisible('barrier') && <Barrier key={'barrier'} is_minimized={is_minimized} />}\n            {isVisible('last_digit') && <LastDigit key={'last_digit'} is_minimized={is_minimized} />}\n            {isVisible('accumulator') && <Accumulator key={'accumulator'} />}\n            {(isVisible('trade_type_tabs') || isVisible('strike') || isVisible('barrier_selector')) && (\n                <Fieldset className={classNames('trade-container__fieldset', 'trade-container__fieldset--no-padding')}>\n                    {isVisible('trade_type_tabs') && <TradeTypeTabs key={'trade_type_tabs'} />}\n                    {isVisible('strike') && <Strike key={'strike'} />}\n                    {isVisible('barrier_selector') && <BarrierSelector key={'barrier_selector'} />}\n                </Fieldset>\n            )}\n            {isVisible('amount') && <Amount key={'amount'} is_minimized={is_minimized} />}\n            {isVisible('take_profit') && <TakeProfit key={'take_profit'} />}\n            {isVisible('stop_loss') && <StopLoss key={'stop_loss'} />}\n            {isVisible('cancellation') && <CancelDeal key={'cancellation'} />}\n            {isVisible('expiration') && <Expiration key={'expiration'} />}\n            {isVisible('accu_info_display') && <AccumulatorsInfoDisplay key={'accu_info_display'} />}\n        </React.Fragment>\n    );\n});\n\nexport default TradeParams;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { TradeParamsLoader } from 'App/Components/Elements/ContentLoader';\nimport Fieldset from 'App/Components/Form/fieldset';\nimport ContractType from '../../Containers/contract-type';\nimport Purchase from '../../Containers/purchase';\nimport TradeParams from '../../Containers/trade-params';\n\ntype TScreenLarge = {\n    is_market_closed?: boolean;\n    is_trade_enabled: boolean;\n};\nconst ScreenLarge = ({ is_market_closed = false, is_trade_enabled }: TScreenLarge) => (\n    <div\n        className={classNames('sidebar__items', {\n            'sidebar__items--market-closed': is_market_closed,\n        })}\n    >\n        {!is_trade_enabled ? (\n            <TradeParamsLoader speed={2} />\n        ) : (\n            <React.Fragment>\n                <Fieldset className='trade-container__fieldset trade-types'>\n                    <ContractType />\n                </Fieldset>\n                <TradeParams />\n                <div className='purchase-container'>\n                    <Purchase is_market_closed={is_market_closed} />\n                </div>\n            </React.Fragment>\n        )}\n    </div>\n);\n\nexport default ScreenLarge;\n"],"names":["contract_start_type","contract_type","contract_types_list","duration_unit","expiry_type","onChange","value","has_equals_only","has_callputequal_duration","hasDurationForCallPutEqual","has_callputequal","hasCallPutEqual","isRiseFallEqual","className","Checkbox","id","e","persist","target","name","checked","Number","defaultChecked","label","localize","classNameLabel","disabled","Popover","alignment","classNameTarget","icon","message","margin","relative_render","Multiplier","observer","useTraderStore","multiplier","multiplier_range_list","symbol","Dropdown","is_alignment_left","is_nativepicker","list","no_border","should_show_new_label","showLabelForMultipliers","Input","amount","currency","current_focus","error_messages","is_single_currency","is_disabled","setCurrentFocus","InputField","classNameInlinePrefix","classNameInput","fractional_digits","getDecimalPlaces","inline_prefix","undefined","is_autocomplete_disabled","is_float","is_hj_whitelisted","is_incrementable","is_negative_disabled","max_length","AMOUNT_MAX_LENGTH","type","ariaLabel","Amount","is_minimized","useStore","ui","client","currencies_list","basis","basis_list","is_accumulator","is_equal","is_multiplier","is_turbos","is_vanilla","has_open_accu_contract","stake_boundary","validation_errors","toUpperCase","min_stake","max_stake","find","o","text","classNames","toLowerCase","addComma","header","length","ButtonToggle","buttons_arr","map","item","is_animated","initial_offset","should_show_tooltip","is_tooltip_relative","TickSteps","hover_value","max_value","min_value","onClick","onMouseEnter","onMouseLeave","arr_ticks","Array","keys","isActive","idx","isMarked","isMarkedOnHover","key","propTypes","PropTypes","RangeSlider","React","setHoverValue","range_slider_ref","nativeEvent","offsetX","offsetY","resetOnHover","getRangeSliderTrackWidth","slider_value","is_hover","current","style","width","display_value","htmlFor","max","min","target_value","tabIndex","ref","index","Text","align","weight","size","color","DurationToggle","icon_className","Icon","classNamePath","i","is_24_hours_contract","mode","server_time","common","current_duration","duration","duration_min_max","duration_units_list","start_date","start_time","isMounted","useIsMounted","disabled_days","setDisabledDays","market_events","setMarketEvents","setDuration","selected_date","setSelectedDate","onChangeCalendarMonth","max_daily_duration","getMomentContractStartDateTime","setTime","toMoment","hasIntradayDurationUnit","clone","add","daily","isTimeValid","format","getMaxDailyDuration","getMinDateExpiry","is_duration_contract","min_date","startOf","hasRangeSelection","new_market_events","new_disabled_days","ContractType","forEach","evt","dates","split","indexOf","push","descrip","has_error","Tooltip","DatePicker","display_format","show_leading_icon","error","max_date","has_range_selection","has_today_btn","footer","events","keep_open","readOnly","isBetween","to_compare_moment","start_times_moment","end_times_moment","preClass","selected_time","end_times","start_times","end_time","hour","minute","seconds","milliseconds","hours","a","slice","minutes","selectOption","current_value","prev_value","prev_hour","prev_minute","selected_minute","h","start_times_reset_minute","is_hour_enabled","is_minute_enabled","is_enabled","mm","class_prefix","padding","placeholder","is_open","setIsOpen","wrapper_ref","setWrapperRef","document","addEventListener","handleClickOutside","removeEventListener","handleChange","arg","event","contains","node","is_read_only","CSSTransition","in","enter","enterDone","exit","timeout","unmountOnExit","getClosestTime","time","interval","moment_time","moment","Math","ceil","expiry_date","expiry_time","market_open_times","market_close_times","is_market_closed","moment_expiry_date","market_open_datetimes","open_time","market_close_datetimes","close_time","expiry_datetime","server_datetime","boundaries","start","isBefore","end","getBoundaries","isAfter","moment_market_open_time","getSelectedTime","AdvancedDuration","advanced_duration_unit","advanced_expiry_type","changeDurationUnit","duration_t","expiry_epoch","expiry_list","getDurationFromUnit","number_input_props","onChangeUiStore","shared_input_props","contract_expiry_type","getDurationMinMaxValues","has_intraday_duration_unit","isSame","endtime_container_class","getUnitMap","name_plural","duration_unit_text","classNameDisplay","ticks","MobxPropTypes","SimpleDuration","arr","filtered_arr","simple_duration_unit","has_label","some","du","filter","Duration","hasDurationUnit","is_advanced_duration","onChangeMultiple","isVanillaContract","onToggleDurationType","has_end_time","expiry","pop","moment_expiry","duration_value","is_advanced","current_duration_unit","new_trade_store_values","Object","props","shared_input","duration_name","number_input","has_toggle","DurationWrapper","duration_props","duration_type","duration_list","assertDurationIsWithinBoundary","current_unit","has_missing_duration_unit","simple_is_missing_duration_unit","new_duration_unit","new_duration_value","setDurationUnit","cancellation_range_list","cancellation_duration","has_cancellation","has_stop_loss","has_take_profit","should_show_cancellation_warning","toggleCancellationWarning","should_show_popover","is_do_not_show_selected","setDoNotShowSelected","onPopoverCheckboxChange","prev_state","input","onToggleCancellation","classNameBubble","is_bubble_hover_enabled","PopoverMessageCheckbox","checkboxLabel","onBubbleClose","onChangeCancellationDuration","accumulator_range_list","growth_rate","tick_size_barrier","proposal_info","arr_arr_numbers","reduce","acc","_el","has_error_or_not_loaded","ACCU","isEmptyObject","is_center","is_tooltip_disabled","header_tooltip","getGrowthRatePercentage","getTickSizeBarrierPercentage","selected_number","should_show_in_percents","form_components","isVisible","component_key","includes","is_trade_enabled","speed"],"sourceRoot":""}