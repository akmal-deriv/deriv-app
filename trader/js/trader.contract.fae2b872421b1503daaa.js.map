{"version":3,"file":"trader/js/trader.contract.fae2b872421b1503daaa.js","mappings":"kTA+CA,MC7CA,EDY2D,SAAH,GAOlD,IANFA,EAAM,EAANA,OACAC,EAAO,EAAPA,QACAC,EAAS,EAATA,UACAC,EAAc,EAAdA,eACAC,EAAe,EAAfA,gBAAe,IACfC,oBAEMC,OAFa,IAAG,GAAI,GAE4BC,EAAAA,EAAAA,UAAS,yCAA2C,GAE1G,OAAIL,EAEI,kBAAC,EAAAM,OAAM,CACHC,MAAOT,IAAUO,EAAAA,EAAAA,UAAS,sBAC1BG,YAAY,EACZC,oBAAqBR,IAAkBI,EAAAA,EAAAA,UAAS,MAChDK,UAAWR,GAAoB,kBAAMS,SAASC,QAAQ,GAErDb,IAAWM,EAAAA,EAAAA,UAAS,2DAK7B,kBAAC,EAAAQ,mBAAkB,CACfC,aAAchB,QAAAA,EAAU,GACxBiB,eAAgBhB,EAAU,CAACA,EAASK,GAAmB,GACvDY,cAAe,CAACC,EAAAA,OAAAA,OAChBC,gBAAiB,CAACjB,IAAkBI,EAAAA,EAAAA,UAAS,YAC7Cc,cAAejB,GAAoB,kBAAMS,SAASC,QAAQ,GAGtE,C,uOEPA,MCpCA,GDWiCQ,EAAAA,EAAAA,KAC7B,YAAsG,IAAnGC,EAAU,EAAVA,WAAwBC,EAAgB,EAA5Bd,WAA8BE,EAAS,EAATA,UAAWa,EAAO,EAAPA,QAC5CC,GAAOC,EAAAA,EAAAA,MAAPD,GACAE,EAAiEF,EAAjEE,WAAYC,EAAqDH,EAArDG,UACdnB,KADmEgB,EAA1CI,wCACgCN,GAE/D,OACI,kBAAC,EAAAhB,OAAM,CACHC,OAAOF,EAAAA,EAAAA,UAAS,uBAChBI,qBAAqBJ,EAAAA,EAAAA,UAAS,6BAA8B,CAAEwB,eAAgBC,EAAAA,eAC9EC,oBAAoB1B,EAAAA,EAAAA,UAAS,oBAC7BK,UAAWA,EACXsB,SAAUT,EACVG,WAAYA,EACZC,UAAWA,EACXN,WAAYA,EACZY,qBAAmB,EACnBzB,WAAYA,GAEZ,kBAAC,EAAA0B,SAAQ,CAACC,kBAAkB,yFAGxC,G,guDEZJ,QApBwB,WACpB,IAAQC,GAAkBX,EAAAA,EAAAA,MAAlBW,cAiBR,OAfeC,EAAAA,EAAAA,UAAQ,WAGnB,IAAMC,EAAQF,EAAcG,KAE5B,OAAOC,OAAOC,KAAKH,GAAOI,QACtB,SAACC,EAAUC,GAAO,cACXD,GAAQ,qBAEJC,EAAO,YAAaC,QAAQP,EAAMM,KAAS,GAEtD,CAAC,EAET,GAAG,CAACR,EAAcG,MAGtB,E,oSCsBA,QA/B0B,SAAH,OAAMO,EAAI,EAAJA,KAAMC,EAAE,EAAFA,GAAIC,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAM,OAClE,yBAAKJ,GAAIA,EAAIK,UAAU,uBAAuB,cAAaL,GACtDD,GAAQ,yBAAKM,UAAU,wBAAwBN,GAChD,yBAAKM,UAAU,wBACX,kBAAC,EAAAC,KAAI,CAACC,KAAK,OAAOC,OAAQ,CAAEC,WAAY,SAAWJ,UAAU,yBACxDJ,GAEL,yBAAKI,UAAU,iCACX,kBAAC,EAAAC,KAAI,CAACI,OAAO,OAAOH,KAAK,MAAMI,YAAY,IAAIC,MAAM,YAAYP,UAAU,yBACtEF,GAEJC,GACG,kBAAC,EAAAE,KAAI,CAACI,OAAO,OAAOH,KAAK,MAAMI,YAAY,IAAIC,MAAM,YAAYP,UAAU,0BACtED,KAKhBF,GACG,yBAAKG,UAAU,6BACX,kBAAC,EAAAC,KAAI,CAACC,KAAK,OAAOM,MAAM,QAAQF,YAAY,KAAKN,UAAU,oCACtDS,EAAAA,EAAAA,YAAWZ,IAEhB,kBAAC,EAAAI,KAAI,CAACC,KAAK,OAAOM,MAAM,QAAQF,YAAY,KAAKN,UAAU,oCACtDU,EAAAA,EAAAA,YAAWb,KAItB,E,sDCwLV,QAxLwB,SAAH,GAOG,IANpBc,EAAiB,EAAjBA,kBACAC,EAAa,EAAbA,cACAC,EAAQ,EAARA,SACAC,EAAa,EAAbA,cACAC,EAAS,EAATA,UACAC,EAAU,EAAVA,WAGIC,EAeAL,EAfAK,WACAC,EAcAN,EAdAM,cACAC,EAaAP,EAbAO,SACAC,EAYAR,EAZAQ,WACAC,EAWAT,EAXAS,4BACAC,EAUAV,EAVAU,yBACAC,EASAX,EATAW,gBACAC,EAQAZ,EARAY,eACAC,EAOAb,EAPAa,aACAC,EAMAd,EANAc,YACAC,EAKAf,EALAe,OACAC,EAIAhB,EAJAgB,WACAC,EAGAjB,EAHAiB,YAAW,EAGXjB,EAFAkB,gBAAmBC,GAdvB,aAcqC,CAAC,EAAC,GAAhBA,IAAKC,EAAI,EAAJA,KACxBC,EACArB,EADAqB,WAGEC,EAAYC,OAAOR,IAAW,EAC9BS,GAAqBC,EAAAA,EAAAA,sBAAqBzB,GAC1C0B,GAAgBtB,KAAeuB,EAAAA,EAAAA,uBAAsBrB,MAAmBsB,EAAAA,EAAAA,uBAAsBtB,GAC9FuB,IAAiBF,EAAAA,EAAAA,uBAAsBrB,KAAmBwB,MAAMP,OAAOxB,IACvEgC,GAAwBC,EAAAA,EAAAA,kBAAiB1B,IAAkBF,EAC3D6B,EAAcV,OAAOP,GAAc,GAAI3E,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,SACnE6F,EAAsB9B,IAAc+B,EAAAA,EAAAA,kBAAiB7B,GACrD8B,GAAsBT,EAAAA,EAAAA,uBAAsBrB,GAAc,UACvDW,EAAW,YAAID,EAAU,aAAI3E,EAAAA,EAAAA,UAAS,UAAQ,UAC9C2E,EAAU,YAAIiB,GAEjBI,GAAsBC,EAAAA,EAAAA,qBAAoBhC,EAAee,IACzDkB,EAAAA,EAAAA,qBAAoBC,gBACpBD,EAAAA,EAAAA,qBAAoBE,iBAkB1B,OARAC,IAAAA,WAAgB,WACZC,EAAAA,EAAAA,WAAqB,kBAAmB,CACpCC,OAAQ,wBACRC,UAAW,UACXC,YAAa,gBAErB,GAAG,IAGC,kBAAC,EAAAC,iBAAgB,CAACC,aAAaC,EAAAA,EAAAA,aAC3B,yBAAK7D,UAAU,gCACX,kBAAC,EAAiB,CACdL,GAAG,cACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,eAAeQ,KAAM,KACtCN,OAAO3C,EAAAA,EAAAA,UAAS,gBAChB6C,OAAO7C,EAAAA,EAAAA,UAAS,sBAAuB,CAAE8G,UAAWhC,IACpDhC,OAAQiC,GAAO/E,EAAAA,EAAAA,UAAS,wBAAyB,CAAE+G,WAAYhC,SAAUiC,KAE5EC,EAAAA,EAAAA,sBAAqBhD,GAClB,kBAAC,aAAc,KACX,kBAAC,EAAiB,CACdvB,GAAG,sBACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,uBAAuBQ,KAAM,KAC9CN,OAAO3C,EAAAA,EAAAA,UAAS,cAChB6C,MAAO,kBAAC,EAAAqE,MAAK,CAACC,OAAQnD,QAAAA,EAAc,GAAIE,SAAUA,EAAUkD,eAAa,QAE1EjC,GACC,kBAAC,EAAiB,CACdzC,GAAG,wBACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,sBAAsBQ,KAAM,KAC7CN,OArCpB0E,EAAAA,EAAAA,YAAW1D,KAAkB2D,EAAAA,EAAAA,kCAAiC3D,IACvD3D,EAAAA,EAAAA,UAAS,sBAChBuH,EAAAA,EAAAA,iBAAgB5D,IAAuB3D,EAAAA,EAAAA,UAAS,gCClFvB,SAAC2D,GAA4B,cAClC,QAA3B,EAACA,EAAc6D,oBAAY,QAA1B,EAA4BC,cAAe9D,EAAc6D,aAAaC,YAAcC,IAAAA,MAAiBC,MAAM,CDkFrGC,CAAsBjE,IAAuB3D,EAAAA,EAAAA,UAAS,gCACnDA,EAAAA,EAAAA,UAAS,8BAkCQ6C,MAAO,kBAAC,EAAAqE,MAAK,CAACC,OAAQhC,EAAoBjB,SAAUA,OAKhE,kBAAC,aAAc,KACVsB,GACG,kBAAC,EAAiB,CACd9C,GAAG,oBACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,qBAAqBQ,KAAM,KAC5CN,OAAO3C,EAAAA,EAAAA,UAAS,YAChB6C,MAAOqC,OAAOP,GAAc,EAAIoB,EAAsB,GAAH,OAAMnC,EAAQ,YAAIC,KAG5EgC,GACG,kBAAC,EAAiB,CACdnD,GAAG,cACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,mBAAmBQ,KAAM,KAC1CN,OAAOkF,EAAAA,EAAAA,IAAgBlE,GACvBd,OAAOiF,EAAAA,EAAAA,IAAgBnE,IAAkB,QAGhD0B,GACG,kBAAC,EAAiB,CACd3C,GAAG,cACHD,MACIsF,EAAAA,EAAAA,IAAY9D,GACR,kBAAC,EAAA4C,KAAI,CAACpE,KAAK,mBAAmBQ,KAAM,KAEpC,kBAAC,EAAA4D,KAAI,CAACpE,KAAK,oBAAoBQ,KAAM,KAG7CN,OAAOkF,EAAAA,EAAAA,IAAgBlE,GACvBd,OAAOiF,EAAAA,EAAAA,IAAgBnE,IAAkB,SAGhDqE,EAAAA,EAAAA,gBAAe/D,IACZ,kBAAC,aAAc,KACV,CAACO,EAAcC,GAAawD,KAAI,SAACC,EAASC,GAAK,OAC5C,kBAAC,EAAiB,CACdzF,GAAE,sBAAiByF,EAAQ,GAC3B1F,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,mBAAmBQ,KAAM,KAC1CmF,IAAKF,EACLvF,MACI6B,IAAiB0D,GACXlI,EAAAA,EAAAA,UAAS,iBACTA,EAAAA,EAAAA,UAAS,eAEnB6C,MAAOqF,GACT,KAIbxC,GACG,kBAAC,EAAiB,CACdhD,GAAG,cACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,mBAAmBQ,KAAM,KAC1CN,MAAOqD,EACPnD,MACIuB,EAA2B,UAClBA,EAA2B,aAAIiE,EAAAA,EAAAA,wBAAuBnE,IACzD,SAM1B,kBAAC,EAAiB,CACdxB,GAAG,sBACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,sBAAsBQ,KAAM,KAC7CN,OAAO3C,EAAAA,EAAAA,UAAS,cAChB6C,OAAOyF,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,eAAcrD,OAAOf,MAAiB,UAE3D4D,EAAAA,EAAAA,IAAY9D,IACV,kBAAC,EAAiB,CACdvB,GAAG,sBACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,sBAAsBQ,KAAM,KAC7CN,OAAO3C,EAAAA,EAAAA,UAAS,cAChB6C,OAAO2F,EAAAA,EAAAA,IAAiBtD,OAAOb,KAA8B,MAC7DvB,QAAQwF,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,eAAcrD,OAAOZ,MAAsB,SAGrEmB,MAAMP,OAAOpB,KACX,kBAAC,EAAiB,CACdpB,GAAG,qBACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,qBAAqBQ,KAAM,KAC5CN,OAAO3C,EAAAA,EAAAA,UAAS,aAChB6C,OAAO2F,EAAAA,EAAAA,IAAiBtD,OAAOpB,KAAe,MAC9ChB,QAAQwF,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,eAAcrD,OAAOX,MAAqB,SAGpEkB,MAAMP,OAAOxB,KACX,kBAAC,EAAiB,CACdhB,GAAG,qBACHD,KAAM,kBAAC,EAAAoE,KAAI,CAACpE,KAAK,qBAAqBa,MAAO2B,EAAY,QAAU,MAAOhC,KAAM,KAChFN,OAAO3C,EAAAA,EAAAA,UAAS,aAChB6C,OAAOyF,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,eAAcrD,OAAOxB,MAAwB,SAMxF,EEzKA,QA5CwB,SAAH,GAAqD,IAA/CQ,EAAQ,EAARA,SAAQ,IAAEuE,QAAAA,OAAO,IAAG,KAAE,EAC7C,OAAKA,EAAQC,OAYT,kBAAC,EAAAhC,iBAAgB,CAACC,aAAaC,EAAAA,EAAAA,aAC3B,yBAAK7D,UAAU,gCACV0F,EAAQR,KAAI,SAACU,EAAMP,GAAG,OACnB,kBAAC,EAAiB,CACdA,IAAKO,EAAKC,WACVlG,GAAE,2BAAsB0F,GACxBzF,MAAOgG,EAAKE,aACZjG,UAAWsC,OAAOyD,aAAI,EAAJA,EAAMC,YACxB/F,MAC4C,IAAxCiG,KAAKC,IAAI7D,OAAOyD,EAAKK,eACjB,kBAAC,aAAc,KACV9D,OAAOyD,EAAKK,cAAgB,GAAK,qCAClC,kBAAC,EAAA9B,MAAK,CAACC,OAAQwB,EAAKK,aAAc9E,SAAUA,IAC3CyE,EAAK9F,OACF,kBAAC,aAAc,KACX,6BACA,kCAAQ8F,EAAK9F,MAAK,QAK9B7C,EAAAA,EAAAA,UAAS,cAGnB,MAlCV,yBAAK+C,UAAU,yBACX,kBAAC,EAAA8D,KAAI,CAACpE,KAAK,QAAQQ,KAAM,GAAIK,MAAM,cACnC,wBAAIP,UAAU,iCAAgC/C,EAAAA,EAAAA,UAAS,eACvD,kBAAC,EAAAgD,KAAI,CAACO,MAAM,SAASF,YAAY,IAAIC,MAAM,iBAAiBL,KAAK,QAC5DjD,EAAAA,EAAAA,UAAS,2DAmC9B,E,kgDC6BA,MC/EA,ED2BsB,SAAH,GAQG,IAPlBiJ,EAAuB,EAAvBA,wBACAC,EAAU,EAAVA,WACAC,EAAc,EAAdA,eACAC,EAAa,EAAbA,cACAC,EAAS,EAATA,UACAC,EAAgB,EAAhBA,iBACGC,EAAK,OAER,EAAkCA,EAAM5F,cAAhC6F,EAAW,EAAXA,YAAatF,EAAQ,EAARA,SACgE,IAA1CmC,IAAAA,SAAuC,IAAG,GAA9EoD,EAAc,KAAEC,EAAgB,KAEjCC,EAAyB,SAAClB,GAA+B,OAC3DA,EAAQmB,MAAK,SAACC,EAAGC,GAAC,OAAK5E,OAAO4E,aAAC,EAADA,EAAGlB,YAAc1D,OAAO2E,aAAC,EAADA,EAAGjB,WAAW,GAAC,EAEzEvC,IAAAA,WAAgB,WACN4C,EAAwBP,QAAUO,EAAwBP,OAASe,EAAef,QACpFgB,EAAiBC,EAAuBV,GAChD,GAAG,CAACA,EAAyBQ,IAW7B,OAAKP,EAEAE,GAAkBD,GAAmBE,EAQtC,yBAAKtG,UAAU,2BACX,kBAAC,EAAAgH,KAAI,CAACC,KAAG,EAACjH,UAAU,uBAAuBkH,eApB5B,SAACC,GACpBZ,IAAmBY,GACfA,GACAC,EAAAA,GAAAA,sBAAyBX,GAAaY,MAAK,SAACC,GACxCX,EAAiBC,EAAuBU,EAASpB,yBACrD,GAER,GAcY,yBAAKtG,OAAO3C,EAAAA,EAAAA,UAAS,YACjB,kBAAC,EAAoBuJ,IAEzB,yBAAK5G,OAAO3C,EAAAA,EAAAA,UAAS,YACjB,kBAAC,EAAe,CAACkE,SAAUA,EAAUuE,QAASgB,OAZtD,yBAAK1G,UAAU,2BACX,kBAAC,EAAoBwG,IALT,IAqB5B,E,8WE9DO,IAAMe,EAAyB,SAAH,GAAgF,IAA1ElB,EAAa,EAAbA,cAAemB,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aACxDC,EAAiBC,EAAAA,iBAAAA,aAA8B,CACjDF,aAAAA,IAGEG,EAAYC,SAASC,eAAe,4BAE1C,OAAKF,EAEEG,IAAAA,aACH,yBAAK/H,UAAU,uBACX,6BACQ0H,EAAc,CAClB1H,UAAWgI,IAAW,iCAAkC,CACpD,gDAAiD3B,MAGpDmB,IAGTI,GAbmB,IAe3B,EAEaK,EAA0B,SAAH,GAA8E,IAAxET,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcS,EAAU,EAAVA,WACxDR,EAAiBC,EAAAA,iBAAAA,aAA8B,CACjDF,aAAAA,EACAS,WAAAA,IAGJ,OAAO,wBAASR,EAAiBF,EACrC,ECrCA,QARoC,SAAH,OAAMW,EAAgB,EAAhBA,iBAAgB,OACnD,yBAAKnI,UAAU,gCACX,kBAAC,EAAAC,KAAI,CAACO,MAAM,SAAS4H,GAAG,IAAIpI,UAAU,sCAAsCK,OAAO,QAC9E8H,GAEH,E,2kCCoCV,IAAME,GAAqBrK,EAAAA,EAAAA,KACvB,YAqBgC,IApB5B4C,EAAa,EAAbA,cACA0H,EAAe,EAAfA,gBAAe,IACfnH,SAAAA,OAAQ,IAAG,KAAE,EACbiF,EAAc,EAAdA,eACAmC,EAAY,EAAZA,aACAC,EAAgB,EAAhBA,iBACAC,EAAS,EAATA,UACApC,EAAa,EAAbA,cACArF,EAAU,EAAVA,WACA0H,EAAuB,EAAvBA,wBACAC,EAAiB,EAAjBA,kBACArC,EAAS,EAATA,UACAsC,EAAa,EAAbA,cACAC,EAAW,EAAXA,YACAX,EAAU,EAAVA,WACAT,EAAY,EAAZA,aACAqB,EAAM,EAANA,OAAM,IACNC,YAAAA,OAAW,IAAG,GAAAC,EAAAA,EAAAA,YAAU,EACxBC,EAAM,EAANA,OACAC,EAAyB,EAAzBA,0BAEA,GAA+B7K,EAAAA,EAAAA,MAAvBD,EAAE,EAAFA,GAAI+K,EAAc,EAAdA,eACJC,GAAmBC,EAAAA,EAAAA,KAAnBD,eAEJE,EAMAlL,EANAkL,SACAC,EAKAnL,EALAmL,cACAC,EAIApL,EAJAoL,YACAC,EAGArL,EAHAqL,iCACAC,EAEAtL,EAFAsL,gBACAC,EACAvL,EADAuL,0BAEIC,EAAoBT,EAApBS,gBACkE,KAA1BC,EAAAA,EAAAA,YAA0B,GAAnEC,EAAS,KAAEC,EAA0B,KAEpCpI,EAA6Bf,EAA7Be,OAAQwG,EAAqBvH,EAArBuH,iBACV6B,KAAYC,EAAAA,EAAAA,YAAWrJ,GACvBkF,GAAeoE,EAAAA,EAAAA,sBACjBd,GACAe,EAAAA,EAAAA,IAAqBvJ,EAAcwJ,WAAa,IAAInI,YAGlDoI,GAAYC,EAAAA,EAAAA,kBAAiB1J,EAAcqB,YAC3CsI,GAAuBlE,GAAkBgE,GAAahE,EAEtDmE,EACF,kBAAC,EAAAC,aAAA,OAAmB,CAChB7J,cAAeA,EACfkF,aAAcA,EACd4E,cAAeA,EAAAA,cACfC,uBAAwBA,EAAAA,uBACxBJ,qBAAqBK,EAAAA,EAAAA,cAAeL,EACpC9B,UAAWA,EACXE,kBAAmBA,EACnBqB,QAASA,EACTnB,YAAaA,EACbE,YAAaA,IAIf8B,GACF,kBAAC,EAAAJ,aAAA,KAAiB,CACdnB,SAAUA,EACV1I,cAAeA,EACf0H,gBAAiBA,EACjBnH,SAAUA,EACVoI,cAAeA,QAAAA,EAAiB,GAChCmB,cAAeA,EAAAA,cACfd,gBAAiBA,EACjBxD,eAAgBA,EAChBqC,UAAWA,EACXpC,cAAeA,EACf2D,QAASA,EACT1D,UAAWA,EACXtF,WAAYA,EACZuJ,oBAAqBA,EACrBf,YAAaA,EACbT,YAAaA,EACbW,gBAAiBA,EACjBD,iCAAkCA,EAClCR,OAAQA,QAAAA,EAAU,GAClBU,0BAA2BA,IAI7BmB,GACF,kBAAC,EAAAL,aAAA,OAAmB,CAChB7J,cAAeA,EACf8J,cAAeA,EAAAA,cACfrE,cAAeA,EACfsC,kBAAmBA,EACnBC,cAAeA,EACfC,YAAaA,EACbE,YAAaA,IAIfgC,GACF,kBAAC,aAAc,KACVP,EACAK,IAIHG,GACF,kBAAC,EAAAP,aAAY,CACT7J,cAAeA,EACf8J,cAAeA,EAAAA,cACfrE,cAAeA,EACf4E,YAAa9I,OAAOR,GACpBuJ,4BAA4B,GAE5B,yBACIlL,UAAWgI,IAAW,mBAAoB,CACtC,0BAA2B7F,OAAOR,GAAU,IAAMmH,EAClD,wBAAyB3G,OAAOR,GAAU,IAAMmH,EAChD,yCAA0CN,GAAoBuB,IAElEoB,IAAKrB,GAEJtB,KAAqByB,EAAAA,EAAAA,YAAWrJ,IAC7B,yBACIZ,UAAWgI,IAAW,CAClB,wCAAwC4C,EAAAA,EAAAA,cAAeb,KAG3D,kBAAC,EAA2B,CAAC5B,iBAAkBA,KAGtD4C,GACAD,KAKPM,GACFpB,GAAW3D,GAAiBD,GAAkBpF,GAAcsF,GAAaoC,EAE7E,OACI,kBAAC,aAAc,KACX,kBAAC,EAAA2C,eAAc,KAAEL,IACjB,kBAAC,EAAAM,cAAa,KACV,kBAACrD,EAAuB,CACpBC,WAAYkD,GAAuBlD,OAAajE,EAChDwD,aAAc2D,GAAuB3D,OAAexD,GAEnDmH,IACG,kBAAC,EAAAG,YAAA,YAAuB,CAACC,QAAStC,EAA2BX,aAAcA,IAE9EyC,KAKrB,IAGJ,U,+hCCjKA,IAAMS,GAAiBzN,EAAAA,EAAAA,KACnB,YAgB4B,MAfxB4C,EAAa,EAAbA,cACA0H,EAAe,EAAfA,gBACApC,EAAuB,EAAvBA,wBACAE,EAAc,EAAdA,eACAuC,EAAiB,EAAjBA,kBACA+C,EAAa,EAAbA,cACAlD,EAAgB,EAAhBA,iBACAnC,EAAa,EAAbA,cACAC,EAAS,EAATA,UACAtF,EAAU,EAAVA,WACA0H,EAAuB,EAAvBA,wBACAE,EAAa,EAAbA,cACAC,EAAW,EAAXA,YACAI,EAAM,EAANA,OACA1C,EAAgB,EAAhBA,iBAEA,GAAuBlI,EAAAA,EAAAA,MAAfsN,EAAM,EAANA,OAAQvN,EAAE,EAAFA,GACR2K,EAAgB4C,EAAhB5C,YACAN,EAAcrK,EAAdqK,UACAtH,EAA+CP,EAA/CO,SAAUyK,EAAqChL,EAArCgL,wBAAyB5B,EAAYpJ,EAAZoJ,QACrC6B,EAAsBvI,IAAAA,OAA6B,MACnDwI,EAA2BxI,IAAAA,OAA6B,MACwB,IAArBA,IAAAA,UAAe,GAAM,GAA/EyI,EAA0B,KAAEC,EAA0B,KACvDjL,IACFuD,EAAAA,EAAAA,YAAW1D,IAAmBwF,GAAmBC,GAAkBC,EAE7DsF,EADA,IAGJK,EACF,kBAAC,EAAa,CACVtL,mBAAmBsJ,EAAAA,EAAAA,YAAWrJ,GAC9BA,cAAeA,EACfsF,wBAAyBA,EACzBpF,eAAeoL,EAAAA,EAAAA,sBAAoBC,EAAAA,EAAAA,mBAAkBvL,IACrDC,UAAUuL,EAAAA,EAAAA,iBAAgBxL,GAC1BG,UAAWA,EACXoF,aACM6D,GAAW3D,GAAiBrF,GAAcsF,GAAaF,GAAkBsC,EAE/EtC,eAAgBA,EAChBsF,cAAeA,EACfrF,cAAeA,EACfgG,SAAO,EACP/F,UAAWA,EACXtF,WAAYA,EACZuF,iBAAkBA,IAI1B,IAAK3F,EAAe,OAAO,KAG3B,IAEM0L,EAFkB1L,EAAcqI,QAAUrI,EAAc2L,WAG1D,kBAAC,aAAc,KACX,kBAAC,EAAkB,CACf3L,cAAeA,EACf0H,gBAAiBA,EACjBnH,SAAUA,EACViF,eAAgBA,EAChBqC,UAAWA,EACXD,iBAAkBA,EAClBnC,cAAeA,EACfC,UAAWA,EACXtF,WAAYA,EACZ2H,kBAAmBA,EACnBD,wBAAyBA,EACzBH,aAAcwD,EACdnD,cAAeA,EACfC,YAAaA,EACbX,WAAY,kBAAM8D,GAA2B,EAAK,EAClDvE,aAAc,kBAAMuE,GAA2B,EAAM,EACrDjD,YAAaA,EACbE,OAAQA,EACRC,0BAA2B,kBAAM8C,GAA4BD,EAA2B,IAE5F,kBAAC,EAAAV,eAAc,KAAEY,IAGrB,yBAAKjM,UAAU,iBACX,kBAAC,IAAmB,CAACwM,MAAO,KAI9BC,EACF,kBAACC,EAAA,EAAa,CAACC,GAAIZ,EAA4Ba,QAAS,IAAK5E,WAAW,+BACpE,yBACIrI,GAAG,qBACHK,UAAWgI,IAAW,kBAAmB,CACrC,2CACMiC,EAAAA,EAAAA,YAAWrJ,KACXyF,GAAiBrF,GAAcsF,GAAaF,GAAkBsC,KAC5D7E,EAAAA,EAAAA,YACR,iCAAkCwC,IAAiBxC,EAAAA,EAAAA,YACnD,sCAAuCwC,IAAiBxC,EAAAA,EAAAA,cAAcoG,EAAAA,EAAAA,YAAWrJ,KAErFiM,MAAO,CACHC,UAAYf,GACRF,EAAoBrM,SACpBsM,EAAyBtM,SAAO,0BACbsM,EAAyBtM,QAAQuN,aAAY,gBAAQlB,EAAoBrM,QAAQuN,aAAY,SAExH5B,IAAKU,GAEL,yBAAK7L,UAAU,wBAAwBmL,IAAKW,GACvCQ,GAEJP,GACG,kBAAC,EAAAT,cAAa,KACV,yBAAK3L,GAAG,4BACJ,kBAAC4H,EAAsB,CAAClB,cAAeA,GAClC4F,OAS7B,OACI,kBAAC,aAAc,KACX,kBAAC,EAAAZ,eAAc,KAAEoB,GACjB,kBAAC,EAAAnB,cAAa,KACV,yBACIuB,MAAO,CACHG,OAAwC,QAAlC,EAAElB,EAAyBtM,eAAO,aAAhC,EAAkCuN,eAG9C,kBAAC,EAAAE,kBAAiB,CAACC,cAAc,OAAOtJ,aAAckI,EAAyBtM,SAC1EiN,KAMzB,IAGJ,MCrLA,GDqLeU,EAAAA,EAAAA,YAAW1B,G,iyCE/I1B,SAhCwB,SAAH,GAA4C,IAAtC7K,EAAa,EAAbA,cACjBwM,GAAsBvJ,EAAAA,EAAAA,YAAa,GAAK,IACa,KAApBP,IAAAA,UAAe,GAAK,GAApDiF,EAAY,KAAE8E,EAAc,KAOnC,OACI,yBAAKrN,UAAU,qBACX,kBAAC,EAAA8D,KAAI,CAACpE,KAAK,iBAAiBM,UAAU,yBAAyBE,KAAM,KACrE,yBAAKF,UAAU,6BACX,kBAAC,EAAAC,KAAI,CACDC,KAAK,KACLF,UAAWgI,IAAW,yBAA0B,CAC5C,oCAAqCO,KAGxC3H,EAAc0M,UACZ,KAEN1M,aAAa,EAAbA,EAAe0M,WAAY1M,EAAc0M,SAAS3H,OAASyH,GACxD,kBAAC,EAAAnN,KAAI,CAACmI,GAAG,IAAImF,KAAK,IAAIrN,KAAK,KAAKsL,QAnB3B,SAACgC,GAClBA,EAAGC,iBACHJ,GAAgB9E,EACpB,EAgBuEvI,UAAU,0BAC5DuI,GAAetL,EAAAA,EAAAA,UAAS,cAAeA,EAAAA,EAAAA,UAAS,eAMzE,ECNA,SAtBsB,SAAH,WAAMN,QAAAA,OAAO,IAAG,KAAE,EAAE+Q,EAAY,EAAZA,aAAY,OAC9C/Q,EACG,yBAAKqD,UAAU,WACX,yBAAKA,UAAU,gBACX,yBAAK2N,MAAM,KAAKX,OAAO,KAAKY,QAAQ,aAChC,uBAAGC,KAAK,OAAOC,SAAS,WACpB,4BAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIJ,KAAK,YACjC,0BACIA,KAAK,OACLC,SAAS,UACTI,EAAE,oLAKlB,yBAAKlO,UAAU,gBAAgBrD,GAC/B,yBAAKqD,UAAU,gBAAgBwL,QAASkC,GACpC,kBAAC,EAAA5J,KAAI,CAACpE,KAAK,cAhBZ,IAmBV,ECJL,MCxBA,GDUgB,SAAH,GAAgE,IAA1DkB,EAAa,EAAbA,cAAeuN,EAAa,EAAbA,cAAeC,EAAW,EAAXA,YACvCC,IAAazN,EAAc0M,SACjC,OACI,kBAAC,KAAO,CAAClQ,WAAYiR,EAAUrO,UAAU,qBAAqBsO,QAAQ,wBAC/D1N,EAAcM,eACb,yBAAKlB,UAAU,YACX,kBAAC,GAAe,CAACY,cAAeA,KAGxC,kBAAC,GAAa,CAACjE,QAASwR,EAAeT,aAAcU,IAGjE,E,+HEhBaG,IAAevQ,EAAAA,EAAAA,KAAS,WACjC,IACQwQ,GADoBnQ,EAAAA,EAAAA,MAApBoQ,gBACAD,eACA5N,EAA4E4N,EAA5E5N,cAAe8N,EAA6DF,EAA7DE,YAAaC,EAAgDH,EAAhDG,eAAgBC,EAAgCJ,EAAhCI,kBAAmBC,EAAaL,EAAbK,SAEvE,OACI,kBAACC,GAAA,EAAM,CACHF,kBAAmBA,EACnBC,SAAUA,EACVjO,cAAeA,EACf8N,YAAaA,EACbC,eAAgBA,GAG5B,IAEaI,IAAgB/Q,EAAAA,EAAAA,KAAS,WAClC,IAAQyQ,GAAoBpQ,EAAAA,EAAAA,MAApBoQ,gBACAzN,GAAeqI,EAAAA,EAAAA,KAAfrI,WACAwN,EAAmEC,EAAnED,eAAoCJ,EAA+BK,EAAnDO,mBAAiCb,EAAkBM,EAAlBN,cACjDvN,EAAkB4N,EAAlB5N,cAER,OACI,kBAAC,GAAO,CACJA,cAAeA,EACfuN,cAAeA,EACfC,YAAaA,EACbpN,WAAYA,GAGxB,IAGaiO,GAAkB,WAC3B,IAAQC,GAAW7Q,EAAAA,EAAAA,MAAX6Q,OACR,OAAO,kBAAC,KAAU,CAACC,QAAS,kBAACJ,GAAa,MAAKK,kBAAkB,EAAOC,cAAeH,EAAOG,eAClG,EACaC,GAAqB,WAAH,OAAS,kBAAC,KAAa,CAACC,OAAQ,kBAAChB,GAAY,OAAO,E,gsDC5BnF,IAAMiB,GAA4BlM,IAAAA,MAC9B,gBAAqBmM,EAAe,EAAjCC,iBAAsClJ,EAAK,gBAC1C,kBAACiJ,EAAe,SAAUjJ,GAAK,IAAEmJ,wBAAoB1L,IAAe,IAExE,SAAC2L,EAAWC,GAAS,OAAKD,EAAUD,qBAAuBE,EAAUF,kBAAkB,IAE3FH,GAA0BM,YAAc,4BAExC,Y,64CCmBA,IAAMC,IAAiB/R,EAAAA,EAAAA,KAAS,YAAqB,IAAlByI,EAAW,EAAXA,YAC/B,GAAwCpI,EAAAA,EAAAA,MAAhCsN,EAAM,EAANA,OAAQ8C,EAAe,EAAfA,gBAAiBrQ,EAAE,EAAFA,GACqB,KAAjBkF,IAAAA,SAAe,GAAE,GAA/C0M,EAAW,KAAEC,EAAa,KACzBzB,EAAmBC,EAAnBD,eAEJhG,EAUAiG,EAVAjG,iBACAG,EASA8F,EATA9F,kBACAuH,EAQAzB,EARAyB,mBACAtH,EAOA6F,EAPA7F,cACAC,EAMA4F,EANA5F,YACAsH,EAKA1B,EALA0B,QACAC,EAIA3B,EAJA2B,UACAC,EAGA5B,EAHA4B,kBACAC,EAEA7B,EAFA6B,iBACAC,EACA9B,EADA8B,oBAEI3P,EAA+E4N,EAA/E5N,cAAe0H,EAAgEkG,EAAhElG,gBAAiBpC,EAA+CsI,EAA/CtI,wBAAyB0I,EAAsBJ,EAAtBI,kBACzD4B,EAAmB7E,EAAnB6E,eACiB9E,EAAoFtN,EAArGqS,gBAA0DC,EAA2CtS,EAArEuS,yBAAgDpK,EAAqBnI,EAArBmI,iBAClFqK,EACFhQ,EAAcwJ,YAAayG,EAAAA,EAAAA,4BAA2BjQ,EAAcM,eAAe4P,EAAAA,EAAAA,WAAUlQ,IAC3FmQ,GAAwF,IAA/DC,IAAkB,MAAD,OAAOJ,EAAuB,aACtB,KAArBtN,IAAAA,UAAe,GAAM,GAAjDlG,EAAU,KAAE6T,EAAY,KACzBvL,GAAUwL,EAAAA,EAAAA,cAEhB5N,IAAAA,WAAgB,WACZ,IAAM6N,GAAmB,SAASC,KAAK7T,SAAS8T,UAAU,GAI1D,OAHAlB,EAAQ1J,GAAe0K,GACvBF,GAAa,GAEN,WACHA,GAAa,GACbb,GACJ,CAEJ,GAAG,CAAC3J,EAAalJ,SAAU4S,EAASC,IAEpC,IAAM1C,EAAepK,IAAAA,aAAkB,WAGnC,OAFA2N,GAAa,KACcK,EAAAA,EAAAA,eAAc/T,SAASgU,QAAShU,SAASgU,MAAMC,eAC/C9L,EAAQ+L,SAAWjB,EAAe9K,EACjE,GAAG,CAACA,EAAS8K,IAEblN,IAAAA,WAAgB,WAERyN,GAA0B3T,GAC1BsQ,GAER,GAAG,CAACqD,EAAwB3T,EAAYsQ,IAMxC,IAAK9M,EAAcqB,WAAY,OAAO,KAEtC,IAAMmE,GAAiB7D,EAAAA,EAAAA,uBAAsB3B,EAAcM,eACrDmF,GAAgBnC,EAAAA,EAAAA,sBAAqBtD,EAAcM,eACnDoF,GAAY1D,EAAAA,EAAAA,kBAAiBhC,EAAcM,eAC3CF,GAAa0Q,EAAAA,EAAAA,mBAAkB9Q,EAAcM,eAC7CwH,GAA0BlG,EAAAA,EAAAA,uBAAsB5B,EAAcM,eAE9DyQ,EACF,kBAAC,EAAc,CACX/Q,cAAeA,EACf0H,gBAAiBA,EACjBpC,wBAAyBA,EACzBE,eAAgBA,EAChBkK,iBAAkBA,EAClB5E,cAAeA,EACflD,iBAAkBA,EAClBnC,cAAeA,EACfC,UAAWA,EACXqC,kBAAmBA,EACnBuH,mBAAoBA,EACpBlP,WAAYA,EACZ0H,wBAAyBA,EACzBE,cAAeA,EACfC,YAAaA,EACbI,OAAQoH,EACR9J,iBAAkBA,IAa1B,OACI,kBAAC,EAAAqL,YAAW,CAACxU,WAAYA,EAAY4C,UAAU,2BAA2BsO,QAAQ,4BAC9E,kBAAC,EAAAhD,cAAa,KACV,kBAACoF,EAAoB,OAEzB,kBAACmB,EAAA,EAAwB,CACrBvU,UAfyB,WACjCoI,EAAQ+L,QACZ,EAcYtT,QAZuB,WAC/B,IAAM2T,GAAkBC,EAAAA,EAAAA,QAAO,mBAAoB,CAAEC,QAAQ,IAC7DC,OAAOC,KAAKJ,EAAiB,SACjC,EAUY1U,WAAYmT,IAEhB,kBAAC,EAAA4B,YAAW,CACRxS,GAAG,+BACHjD,QAAQO,EAAAA,EAAAA,UAAS,oBACjByQ,aAAcA,GAEd,kBAAC,EAAAT,kBAAiB,CACdjN,UAAU,0BACVoS,aAAaxH,EAAAA,EAAAA,aACbsC,cAAc,QAEd,kBAAC,EAAA7B,eAAc,KAAEsG,GACjB,kBAAC,EAAArG,cAAa,KACV,yBACItL,UAAWgI,IAAW,kCAAmC,CACrD,kDAAkDnE,EAAAA,EAAAA,aAAcwC,KAGnEsL,IAGT,kBAAC,aAAc,CAACU,SAAU,+BACtB,yBACIrS,UAAWgI,IAAW,0BAA2B,CAC7C,0CAA0CnE,EAAAA,EAAAA,aAAcwC,EACxD,sBAAuBrF,KAG3B,kBAAC,EAAAqK,eAAc,KACX,kBAACqF,EAAoB,OAEzB,kBAAC,IAAW,CAAC4B,QAAS5G,EAAetO,WAAYkT,IACjD,kBAAC,EAAAjF,eAAc,KACX,kBAACkH,GAAW,CAAC7G,cAAeA,EAAe8G,wBAAyBpM,KAExE,kBAAC,EAAAkF,cAAa,KACTsD,EACG,kBAAC,aAAc,KACX,kBAACG,GAAa,MACd,kBAAC,EAAApH,iBAAgB,CACb3H,UAAU,4CACVyS,kBAAmC,IAAhBzC,EACnB0C,SA9FT,SAAAtN,GAC3B6K,EAAc7K,EAClB,GA8FwC,kBAACmJ,GAAY,MACb,kBAACgE,GAAW,QAIpB,kBAACA,GAAW,CACR7G,cAAeA,EACf8G,wBAAyBpM,SAUjE,IAEA2J,GAAe4C,UAAY,CACvBlM,YAAamM,IAAAA,QAGjB,YAIA,IAAML,IAAcvU,EAAAA,EAAAA,KAAS,YAAiC,IA+ChD6U,EA/CkBL,EAAuB,EAAvBA,wBACtBM,GAAQzJ,EAAAA,EAAAA,KACd,GAAgDhL,EAAAA,EAAAA,MAAxCoQ,EAAe,EAAfA,gBAAiBS,EAAM,EAANA,OAAQvD,EAAM,EAANA,OAAQvN,EAAE,EAAFA,GACjCoQ,EAA0DC,EAA1DD,eAAgBuE,EAA0CtE,EAA1CsE,YAAaC,EAA6BvE,EAA7BuE,iBAAkBC,EAAWxE,EAAXwE,OAEnDC,EAQA1E,EARA0E,+BACAC,EAOA3E,EAPA2E,gBACQC,EAMR5E,EANA6E,OACAzE,EAKAJ,EALAI,kBACA0E,EAIA9E,EAJA8E,eACAC,EAGA/E,EAHA+E,kBACAC,EAEAhF,EAFAgF,cACA5S,EACA4N,EADA5N,cAEgB6S,EAA0B7S,EAAtCqB,WAAoByR,EAAkB9S,EAAlB8S,cACtBC,EAAwC,UAAhBZ,GAA2C,mBAAhBA,EACjDa,EAA4DjI,EAA5DiI,oBAAqBC,EAAuClI,EAAvCkI,iBAAkBC,EAAqBnI,EAArBmI,iBACtBpI,EAAuEtN,EAAxFqS,gBAAgCsD,EAAwD3V,EAAxD2V,wBAAyBC,EAA+B5V,EAA/B4V,2BACzDC,EAAoDd,EAApDc,UAAWC,EAAyCf,EAAzCe,WAAYC,EAA6BhB,EAA7BgB,YAAaC,EAAgBjB,EAAhBiB,YAQtCC,EAAkD,UADlCC,EAAAA,EAAAA,qBAAoBV,GACKW,KACzCC,EAAW,CACbC,SAAUZ,EAAiBa,cAC3BC,MAAOjJ,IAAkB2I,EAA2B,OAAS,QAC7DO,SAAUb,EAA0B,SAAW,OAC/Cc,UAAWb,EACXc,kBAAkB,EAClBC,8BAA8B,GAE5BC,EAAkBrB,EAAwBR,EAAgB6B,qBAAkB/Q,EAC5EgR,EAAYvB,EAAgBA,EAAcuB,UAAY,GACpDC,EAAyDpC,EAAzDoC,SAAUC,EAA+CrC,EAA/CqC,YAAaC,EAAkCtC,EAAlCsC,cAAeC,EAAmBvC,EAAnBuC,eACtChG,EAAkBH,EAAlBG,cAEFiG,EAAkCjG,OAAiEpL,EAAjDsR,GAAAA,EAAWnC,aAA4B,EAA5BA,EAA8BoC,MAE3FC,EAAwB,WAC1B,OAAO7K,EAAAA,EAAAA,cAAegE,CAC1B,EAiBM8G,GAAmBC,EAAAA,EAAAA,aAAYxB,GAE/ByB,KAAc3L,EAAAA,EAAAA,YAAWrJ,GAE/B,OACI,kBAAC,IAAkB,CACfjB,GAAI,SACJkW,QAASxG,EACTyG,SAAUxC,EACVyC,cAAeN,IAA0BnG,GAAqB,KAC9D0G,qBAAsB,KACtBC,UAAW/B,EACXgC,SAAUjC,EACVhB,OAAQA,GAAU,KAClBpP,UAAUA,EAAAA,EAAAA,YACVsS,yBAAyBvL,EAAAA,EAAAA,aACzBwL,oBAAoB,EACpBhC,YAAaA,EACbiC,WAAYjB,EACZkB,cAAepB,EACfqB,oBAAqBlB,EACrBmB,WAAW3S,EAAAA,EAAAA,YAAa,OAAII,EAC5BwS,SAAS5S,EAAAA,EAAAA,YAAa,OAAII,EAC1ByS,iBAAkBvB,EAClBX,SAAUA,EACVmC,WAAYxC,EACZyC,cAAe5B,EACf6B,oBAAqB7D,EACrBS,OAAQA,EACRqD,SAAU7B,EACV8B,WAAY9H,GACZ+H,mBAAoBlD,EACpBmD,cAEIzE,GAA2ByB,GAAaE,EAAcuB,EAE1DwB,yBAAyB,EACzBC,yBAA0B3E,EAC1B4E,aApDEvE,EAAe,CACjB5L,KAAKpD,EAAAA,EAAAA,YAAa,GAAK,IACvBwT,OAAQ5B,IAA0B,IAAM,MAGxC5R,EAAAA,EAAAA,cACIwL,IACAwD,EAAa5L,IAAM,IAEvB4L,EAAawE,OAAS,IAGnBxE,GAyCHyE,mBAAmBzT,EAAAA,EAAAA,YACnB0T,uBAC8D,aAA1DrL,EAAAA,EAAAA,sBAAoBC,EAAAA,EAAAA,mBAAkBvL,KAA0D,SAAzBA,EAAcqI,OAEzFuO,gCAAiChF,EACjCiF,aAAc7W,EACd8W,gBAAiBnE,IACjBoE,QAAS/B,EACTgC,sBAAsB,GAErBvI,GACGmE,EAActO,KAAI,gBAAG2S,EAAc,EAAdA,eAAgBC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAAS,OACzD,kBAAC,KAAe,CACZ1S,IAAK0S,EACLD,cAAeA,EACfE,qBAAsBH,EACtBI,yBAA0BxC,KAC5B,KAERpG,GACEmE,EAActO,KAAI,gBAAG2S,EAAc,EAAdA,eAAgBC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAAS,OACzD,kBAAC,KAAW,CACR1S,IAAK0S,EACLD,cAAeA,EACfE,qBAAsBH,EACtBI,yBAA0BxC,KAC5B,KAERpG,GAAiBmD,KAA6BgB,GAC5C,kBAAC,GAAyB,IACtB9D,iBAAkB4F,EAClBjQ,IAAK+N,EAA6B/N,IAClCqG,cAAeA,EACf0I,YAAaA,EACb8D,wBAAsB,EACtBvI,mBAAoBuD,GAChBE,IAKxB,IAEAb,GAAYI,UAAY,CACpBH,wBAAyBI,IAAAA,MC/V7B,IAAMuF,GAAgB,CAAC,qBAAsB,2BAEvCC,IAAWpa,EAAAA,EAAAA,KAAS,YAAwB,IAArBqa,EAAK,EAALA,MAAO3S,EAAO,EAAPA,QACxB+I,GAAoBpQ,EAAAA,EAAAA,MAApBoQ,gBAEJO,EAMAP,EANAO,mBACAb,EAKAM,EALAN,cACAmK,EAIA7J,EAJA6J,WACAC,EAGA9J,EAHA8J,UAC+BnI,EAE/B3B,EAFA+J,8BAC4BrI,EAC5B1B,EADAgK,2BAWJ,OATAnV,IAAAA,WAAgB,WAGZ,OAFA6M,GAASkI,EAAMK,OAAOjS,YAAaf,GAE5B,WACHsJ,IACAoB,GACJ,CACJ,GAAG,CAACD,EAASC,EAAWpB,EAAoBtJ,EAAS2S,EAAMK,OAAOjS,cAE9D/D,MAAM2V,EAAMK,OAAOjS,aACZ,kBAAC,EAAAkS,SAAQ,CAACC,GAAG,SAIpB,kBAAC,aAAc,KACVL,EACG,kBAAC,UAAc,CACX5b,QAASwR,EACTvR,UAAWub,GAAcU,SAASP,GAClCzb,eACIsb,GAAcU,SAASP,IAAcrb,EAAAA,EAAAA,UAAS,OAAQA,EAAAA,EAAAA,UAAS,sBAEnEH,gBAAiB,kBAAM4I,EAAQoT,KAAKjb,EAAAA,OAAAA,MAAa,EACjDd,qBAAqB,IAGzB,kBAAC2P,EAAA,EAAa,CACVC,IAAK4L,EACL3L,QAAS,IACT5E,WAAY,CACR+Q,MAAO,kBACPC,UAAW,uBACXC,KAAM,kBAEVC,eAAa,GAEb,kBAAC,GAAc,CAACzS,aAAc4R,EAAMK,OAAOjS,YAAapB,KAAMgT,EAAMK,OAAOjS,eAK/F,IAEA2R,GAASzF,UAAY,CACjBjN,QAASkN,IAAAA,OACTyF,MAAOzF,IAAAA,QAGX,MCpEA,IDoEezF,EAAAA,EAAAA,YAAWiL,G","sources":["webpack://@deriv/trader/./src/App/Components/Elements/Errors/error-component.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Errors/index.ts","webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/unsupported-contract-modal.tsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/index.ts","webpack://@deriv/trader/../hooks/src/useFeatureFlags.ts","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-audit-item.tsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-details.tsx","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/logic.ts","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-history.tsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-audit.tsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/index.ts","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/swipeable-components.tsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/market-closed-contract-overlay.tsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/contract-drawer-card.tsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/contract-drawer.tsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/index.ts","webpack://@deriv/trader/./src/Modules/Contract/Components/InfoBox/info-box-longcode.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/contract-error.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/InfoBox/info-box.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/InfoBox/index.ts","webpack://@deriv/trader/./src/Modules/Contract/Containers/contract-replay-widget.jsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/delayed-accu-barriers-marker.tsx","webpack://@deriv/trader/./src/Modules/Contract/Containers/contract-replay.jsx","webpack://@deriv/trader/./src/Modules/Contract/Containers/contract.jsx","webpack://@deriv/trader/./src/Modules/Contract/index.js"],"sourcesContent":["import React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\ntype TErrorComponent = {\n    header: string;\n    message: React.ReactNode;\n    is_dialog: boolean;\n    redirect_label: string;\n    redirectOnClick: () => void;\n    should_show_refresh: boolean;\n};\n\nconst ErrorComponent: React.FC<Partial<TErrorComponent>> = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}) => {\n    const refresh_message: string = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible={true}\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? [message, refresh_message] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component';\n\nexport default ErrorComponent;\n","import React from 'react';\nimport { Dialog } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { website_name } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TUnsupportedContractModalProps = {\n    is_loading?: boolean;\n    is_visible?: boolean;\n    onClose: () => void;\n    onConfirm: () => void;\n};\n\nconst UnsupportedContractModal = observer(\n    ({ is_loading, is_visible: is_modal_visible, onConfirm, onClose }: TUnsupportedContractModalProps) => {\n        const { ui } = useStore();\n        const { disableApp, enableApp, is_unsupported_contract_modal_visible } = ui;\n        const is_visible = !!(is_unsupported_contract_modal_visible || is_modal_visible);\n\n        return (\n            <Dialog\n                title={localize('We’re working on it')}\n                confirm_button_text={localize('Stay on {{website_domain}}', { website_domain: website_name })}\n                cancel_button_text={localize('Go to Binary.com')}\n                onConfirm={onConfirm}\n                onCancel={onClose}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_loading={is_loading}\n                is_closed_on_cancel\n                is_visible={is_visible}\n            >\n                <Localize i18n_default_text='You’ve selected a trade type that is currently unsupported, but we’re working on it.' />\n            </Dialog>\n        );\n    }\n);\n\nexport default UnsupportedContractModal;\n","import UnsupportedContractModal from './unsupported-contract-modal';\n\nexport default UnsupportedContractModal;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst useFeatureFlags = () => {\n    const { feature_flags } = useStore();\n\n    const result = useMemo(() => {\n        // Safe to do null assertions here as we are setting default values in the store.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const flags = feature_flags.data!;\n\n        return Object.keys(flags).reduce(\n            (previous, current) => ({\n                ...previous,\n                // @ts-expect-error current key is always present in the object, Hence can ignore the TS error.\n                [`is_${current}_enabled`]: Boolean(flags[current]),\n            }),\n            {} as Record<`is_${keyof typeof flags}_enabled`, boolean>\n        );\n    }, [feature_flags.data]);\n\n    return result;\n};\nexport default useFeatureFlags;\n","import React from 'react';\nimport { formatDate, formatTime } from '@deriv/shared';\nimport { Text } from '@deriv/components';\n\ntype TContractAuditItem = {\n    icon?: React.ReactNode;\n    id: string;\n    label?: string;\n    timestamp?: number;\n    value: React.ReactNode;\n    value2?: React.ReactNode;\n};\n\nconst ContractAuditItem = ({ icon, id, label, timestamp, value, value2 }: TContractAuditItem) => (\n    <div id={id} className='contract-audit__grid' data-testid={id}>\n        {icon && <div className='contract-audit__icon'>{icon}</div>}\n        <div className='contract-audit__item'>\n            <Text size='xxxs' styles={{ lineHeight: 'unset' }} className='contract-audit__label'>\n                {label}\n            </Text>\n            <div className='contract-audit__value-wrapper'>\n                <Text weight='bold' size='xxs' line_height='m' color='prominent' className='contract-audit__value'>\n                    {value}\n                </Text>\n                {value2 && (\n                    <Text weight='bold' size='xxs' line_height='m' color='prominent' className='contract-audit__value2'>\n                        {value2}\n                    </Text>\n                )}\n            </div>\n        </div>\n        {timestamp && (\n            <div className='contract-audit__timestamp'>\n                <Text size='xxxs' align='right' line_height='xs' className='contract-audit__timestamp-value'>\n                    {formatDate(timestamp)}\n                </Text>\n                <Text size='xxxs' align='right' line_height='xs' className='contract-audit__timestamp-value'>\n                    {formatTime(timestamp)}\n                </Text>\n            </div>\n        )}\n    </div>\n);\n\nexport default ContractAuditItem;\n","import React from 'react';\nimport { Money, Icon, ThemedScrollbars } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport {\n    epochToMoment,\n    getCancellationPrice,\n    getCurrencyDisplayCode,\n    getLocalizedBasis,\n    hasTwoBarriers,\n    isAccumulatorContract,\n    isEndedBeforeCancellationExpired,\n    isMobile,\n    isMultiplierContract,\n    isSmartTraderContract,\n    isAsiansContract,\n    isTurbosContract,\n    isUserCancelled,\n    isUserSold,\n    isVanillaFxContract,\n    toGMTFormat,\n    TContractInfo,\n} from '@deriv/shared';\nimport { Analytics } from '@deriv/analytics';\nimport {\n    addCommaToNumber,\n    getBarrierLabel,\n    getBarrierValue,\n    isDigitType,\n} from 'App/Components/Elements/PositionsDrawer/helpers';\nimport ContractAuditItem from './contract-audit-item';\nimport { isCancellationExpired } from 'Stores/Modules/Trading/Helpers/logic';\n\ntype TContractDetails = {\n    contract_end_time?: number;\n    contract_info: TContractInfo;\n    duration: number | string;\n    duration_unit: string;\n    exit_spot?: string;\n    is_vanilla?: boolean;\n};\n\nconst ContractDetails = ({\n    contract_end_time,\n    contract_info,\n    duration,\n    duration_unit,\n    exit_spot,\n    is_vanilla,\n}: TContractDetails) => {\n    const {\n        commission,\n        contract_type,\n        currency,\n        date_start,\n        display_number_of_contracts,\n        entry_spot_display_value,\n        entry_tick_time,\n        exit_tick_time,\n        high_barrier,\n        low_barrier,\n        profit,\n        tick_count,\n        tick_passed,\n        transaction_ids: { buy, sell } = {},\n        underlying,\n    } = contract_info;\n\n    const is_profit = Number(profit) >= 0;\n    const cancellation_price = getCancellationPrice(contract_info);\n    const show_barrier = !is_vanilla && !isAccumulatorContract(contract_type) && !isSmartTraderContract(contract_type);\n    const show_duration = !isAccumulatorContract(contract_type) || !isNaN(Number(contract_end_time));\n    const show_payout_per_point = isTurbosContract(contract_type) || is_vanilla;\n    const ticks_label = Number(tick_count) < 2 ? localize('tick') : localize('ticks');\n    const show_strike_barrier = is_vanilla || isAsiansContract(contract_type);\n    const ticks_duration_text = isAccumulatorContract(contract_type)\n        ? `${tick_passed}/${tick_count} ${localize('ticks')}`\n        : `${tick_count} ${ticks_label}`;\n\n    const vanilla_payout_text = isVanillaFxContract(contract_type, underlying)\n        ? getLocalizedBasis().payout_per_pip\n        : getLocalizedBasis().payout_per_point;\n\n    const getLabel = () => {\n        if (isUserSold(contract_info) && isEndedBeforeCancellationExpired(contract_info))\n            return localize('Deal cancellation');\n        if (isUserCancelled(contract_info)) return localize('Deal cancellation (executed)');\n        if (isCancellationExpired(contract_info)) return localize('Deal cancellation (expired)');\n        return localize('Deal cancellation (active)');\n    };\n\n    React.useEffect(() => {\n        Analytics.trackEvent('ce_reports_form', {\n            action: 'open_contract_details',\n            form_name: 'default',\n            form_source: 'deriv_trader',\n        });\n    }, []);\n\n    return (\n        <ThemedScrollbars is_bypassed={isMobile()}>\n            <div className='contract-audit__tabs-content'>\n                <ContractAuditItem\n                    id='dt_id_label'\n                    icon={<Icon icon='IcContractId' size={24} />}\n                    label={localize('Reference ID')}\n                    value={localize('{{buy_value}} (Buy)', { buy_value: buy })}\n                    value2={sell ? localize('{{sell_value}} (Sell)', { sell_value: sell }) : undefined}\n                />\n                {isMultiplierContract(contract_type) ? (\n                    <React.Fragment>\n                        <ContractAuditItem\n                            id='dt_commission_label'\n                            icon={<Icon icon='IcContractCommission' size={24} />}\n                            label={localize('Commission')}\n                            value={<Money amount={commission ?? ''} currency={currency} show_currency />}\n                        />\n                        {!!cancellation_price && (\n                            <ContractAuditItem\n                                id='dt_cancellation_label'\n                                icon={<Icon icon='IcContractSafeguard' size={24} />}\n                                label={getLabel()}\n                                value={<Money amount={cancellation_price} currency={currency} />}\n                            />\n                        )}\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        {show_duration && (\n                            <ContractAuditItem\n                                id='dt_duration_label'\n                                icon={<Icon icon='IcContractDuration' size={24} />}\n                                label={localize('Duration')}\n                                value={Number(tick_count) > 0 ? ticks_duration_text : `${duration} ${duration_unit}`}\n                            />\n                        )}\n                        {show_strike_barrier && (\n                            <ContractAuditItem\n                                id='dt_bt_label'\n                                icon={<Icon icon='IcContractStrike' size={24} />}\n                                label={getBarrierLabel(contract_info)}\n                                value={getBarrierValue(contract_info) || ' - '}\n                            />\n                        )}\n                        {show_barrier && (\n                            <ContractAuditItem\n                                id='dt_bt_label'\n                                icon={\n                                    isDigitType(contract_type) ? (\n                                        <Icon icon='IcContractTarget' size={24} />\n                                    ) : (\n                                        <Icon icon='IcContractBarrier' size={24} />\n                                    )\n                                }\n                                label={getBarrierLabel(contract_info)}\n                                value={getBarrierValue(contract_info) || ' - '}\n                            />\n                        )}\n                        {hasTwoBarriers(contract_type) && (\n                            <React.Fragment>\n                                {[high_barrier, low_barrier].map((barrier, index) => (\n                                    <ContractAuditItem\n                                        id={`dt_bt_label_${index + 1}`}\n                                        icon={<Icon icon='IcContractStrike' size={24} />}\n                                        key={barrier}\n                                        label={\n                                            high_barrier === barrier\n                                                ? localize('High barrier')\n                                                : localize('Low barrier')\n                                        }\n                                        value={barrier}\n                                    />\n                                ))}\n                            </React.Fragment>\n                        )}\n                        {show_payout_per_point && (\n                            <ContractAuditItem\n                                id='dt_bt_label'\n                                icon={<Icon icon='IcContractPayout' size={24} />}\n                                label={vanilla_payout_text}\n                                value={\n                                    display_number_of_contracts\n                                        ? `${display_number_of_contracts} ${getCurrencyDisplayCode(currency)}`\n                                        : ' - '\n                                }\n                            />\n                        )}\n                    </React.Fragment>\n                )}\n                <ContractAuditItem\n                    id='dt_start_time_label'\n                    icon={<Icon icon='IcContractStartTime' size={24} />}\n                    label={localize('Start time')}\n                    value={toGMTFormat(epochToMoment(Number(date_start))) || ' - '}\n                />\n                {!isDigitType(contract_type) && (\n                    <ContractAuditItem\n                        id='dt_entry_spot_label'\n                        icon={<Icon icon='IcContractEntrySpot' size={24} />}\n                        label={localize('Entry spot')}\n                        value={addCommaToNumber(Number(entry_spot_display_value)) || ' - '}\n                        value2={toGMTFormat(epochToMoment(Number(entry_tick_time))) || ' - '}\n                    />\n                )}\n                {!isNaN(Number(exit_spot)) && (\n                    <ContractAuditItem\n                        id='dt_exit_spot_label'\n                        icon={<Icon icon='IcContractExitSpot' size={24} />}\n                        label={localize('Exit spot')}\n                        value={addCommaToNumber(Number(exit_spot)) || ' - '}\n                        value2={toGMTFormat(epochToMoment(Number(exit_tick_time))) || ' - '}\n                    />\n                )}\n                {!isNaN(Number(contract_end_time)) && (\n                    <ContractAuditItem\n                        id='dt_exit_time_label'\n                        icon={<Icon icon='IcContractExitTime' color={is_profit ? 'green' : 'red'} size={24} />}\n                        label={localize('Exit time')}\n                        value={toGMTFormat(epochToMoment(Number(contract_end_time))) || ' - '}\n                    />\n                )}\n            </div>\n        </ThemedScrollbars>\n    );\n};\n\nexport default ContractDetails;\n","import { TContractInfo } from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\n\nexport const isCancellationExpired = (contract_info: TContractInfo) =>\n    !!contract_info.cancellation?.date_expiry && contract_info.cancellation.date_expiry < ServerTime.get().unix();\n","import React from 'react';\nimport { Icon, Money, ThemedScrollbars, Text } from '@deriv/components';\nimport { isMobile, TContractStore } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport ContractAuditItem from './contract-audit-item';\n\ntype TContractHistory = {\n    currency?: string;\n    history?: [] | TContractStore['contract_update_history'];\n};\nconst ContractHistory = ({ currency, history = [] }: TContractHistory) => {\n    if (!history.length) {\n        return (\n            <div className='contract-audit__empty'>\n                <Icon icon='IcBox' size={48} color='secondary' />\n                <h4 className='contract-audit__empty-header'>{localize('No history')}</h4>\n                <Text align='center' line_height='s' color='less-prominent' size='xxs'>\n                    {localize('You have yet to update either take profit or stop loss')}\n                </Text>\n            </div>\n        );\n    }\n    return (\n        <ThemedScrollbars is_bypassed={isMobile()}>\n            <div className='contract-audit__tabs-content'>\n                {history.map((item, key) => (\n                    <ContractAuditItem\n                        key={item.order_date}\n                        id={`dt_history_label_${key}`}\n                        label={item.display_name}\n                        timestamp={Number(item?.order_date)}\n                        value={\n                            Math.abs(Number(item.order_amount)) !== 0 ? (\n                                <React.Fragment>\n                                    {Number(item.order_amount) < 0 && <strong>-</strong>}\n                                    <Money amount={item.order_amount} currency={currency} />\n                                    {item.value && (\n                                        <React.Fragment>\n                                            <br />\n                                            <span>({item.value})</span>\n                                        </React.Fragment>\n                                    )}\n                                </React.Fragment>\n                            ) : (\n                                localize('Cancelled')\n                            )\n                        }\n                    />\n                ))}\n            </div>\n        </ThemedScrollbars>\n    );\n};\n\nexport default ContractHistory;\n","import React from 'react';\nimport { Tabs } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { WS, TContractStore, TContractInfo } from '@deriv/shared';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport ContractDetails from './contract-details';\nimport ContractHistory from './contract-history';\n\ntype TContractUpdateHistory = TContractStore['contract_update_history'];\n\ntype TContractAudit = Partial<\n    Pick<ReturnType<typeof useTraderStore>, 'is_accumulator' | 'is_turbos' | 'is_multiplier' | 'is_vanilla'>\n> & {\n    contract_update_history: TContractUpdateHistory;\n    contract_end_time: number | undefined;\n    contract_info: TContractInfo;\n    duration: string | number;\n    duration_unit: string;\n    exit_spot: string | undefined;\n    has_result: boolean;\n    is_dark_theme: boolean;\n    is_open: boolean;\n    toggleHistoryTab: (state_change?: boolean) => void;\n};\n\ntype TResponse = {\n    contract_update_history: TContractUpdateHistory;\n};\n\nconst ContractAudit = ({\n    contract_update_history,\n    has_result,\n    is_accumulator,\n    is_multiplier,\n    is_turbos,\n    toggleHistoryTab,\n    ...props\n}: TContractAudit) => {\n    const { contract_id, currency } = props.contract_info;\n    const [update_history, setUpdateHistory] = React.useState<TContractUpdateHistory>([]);\n\n    const getSortedUpdateHistory = (history: TContractUpdateHistory) =>\n        history.sort((a, b) => Number(b?.order_date) - Number(a?.order_date));\n\n    React.useEffect(() => {\n        if (!!contract_update_history.length && contract_update_history.length > update_history.length)\n            setUpdateHistory(getSortedUpdateHistory(contract_update_history));\n    }, [contract_update_history, update_history]);\n\n    const onTabItemClick = (tab_index: number) => {\n        toggleHistoryTab(!!tab_index);\n        if (tab_index) {\n            WS.contractUpdateHistory(contract_id).then((response: TResponse) => {\n                setUpdateHistory(getSortedUpdateHistory(response.contract_update_history));\n            });\n        }\n    };\n\n    if (!has_result) return null;\n\n    if (!is_multiplier && !is_accumulator && !is_turbos) {\n        return (\n            <div className='contract-audit__wrapper'>\n                <ContractDetails {...props} />\n            </div>\n        );\n    }\n    return (\n        <div className='contract-audit__wrapper'>\n            <Tabs top className='contract-audit__tabs' onTabItemClick={onTabItemClick}>\n                <div label={localize('Details')}>\n                    <ContractDetails {...props} />\n                </div>\n                <div label={localize('History')}>\n                    <ContractHistory currency={currency} history={update_history} />\n                </div>\n            </Tabs>\n        </div>\n    );\n};\n\nexport default ContractAudit;\n","import ContractAudit from './contract-audit';\n\nexport default ContractAudit;\n","import classNames from 'classnames';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SwipeableWrapper } from '@deriv/components';\n\ntype TSwipeableContractAuditProps = React.PropsWithChildren<{\n    is_multiplier?: boolean;\n    onSwipedDown?: () => void;\n}>;\ntype TSwipeableContractDrawerProps = React.PropsWithChildren<{\n    onSwipedDown?: () => void;\n    onSwipedUp?: () => void;\n}>;\n\n/**\n * Swipeable components\n */\nexport const SwipeableContractAudit = ({ is_multiplier, children, onSwipedDown }: TSwipeableContractAuditProps) => {\n    const swipe_handlers = SwipeableWrapper.useSwipeable({\n        onSwipedDown,\n    });\n\n    const target_el = document.getElementById('dt_contract_drawer_audit');\n\n    if (!target_el) return null;\n\n    return ReactDOM.createPortal(\n        <div className='contract-audit-card'>\n            <div\n                {...swipe_handlers}\n                className={classNames('contract-audit-card__container', {\n                    'contract-audit-card__container--is-multiplier': is_multiplier,\n                })}\n            >\n                {children}\n            </div>\n        </div>,\n        target_el\n    );\n};\n\nexport const SwipeableContractDrawer = ({ children, onSwipedDown, onSwipedUp }: TSwipeableContractDrawerProps) => {\n    const swipe_handlers = SwipeableWrapper.useSwipeable({\n        onSwipedDown,\n        onSwipedUp,\n    });\n\n    return <div {...swipe_handlers}>{children}</div>;\n};\n","import React from 'react';\nimport { Text } from '@deriv/components';\n\nconst MarketClosedContractOverlay = ({ validation_error }: { validation_error?: string }) => (\n    <div className='contract-card__market-closed'>\n        <Text align='center' as='p' className='contract-card__market-closed__title' weight='bold'>\n            {validation_error}\n        </Text>\n    </div>\n);\n\nexport default MarketClosedContractOverlay;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { DesktopWrapper, MobileWrapper, Collapsible, ContractCard, useHover } from '@deriv/components';\nimport {\n    getEndTime,\n    getSymbolDisplayName,\n    getCardLabels,\n    getContractTypeDisplay,\n    isCryptoContract,\n    isDesktop,\n    toMoment,\n} from '@deriv/shared';\nimport { getMarketInformation } from 'Utils/Helpers/market-underlying';\nimport { SwipeableContractDrawer } from './swipeable-components';\nimport MarketClosedContractOverlay from './market-closed-contract-overlay';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TContractCardBodyProps = React.ComponentProps<typeof ContractCard.Body>;\ntype TContractCardFooterProps = React.ComponentProps<typeof ContractCard.Footer>;\ntype TSwipeableContractDrawerProps = React.ComponentProps<typeof SwipeableContractDrawer>;\n\ntype TContractDrawerCardProps = {\n    currency?: string;\n    is_collapsed: boolean;\n    is_market_closed: boolean;\n    is_smarttrader_contract: boolean;\n    result?: string;\n    server_time?: moment.Moment;\n    toggleContractAuditDrawer: () => void;\n} & Pick<\n    TContractCardBodyProps,\n    | 'contract_info'\n    | 'contract_update'\n    | 'is_accumulator'\n    | 'is_mobile'\n    | 'is_multiplier'\n    | 'is_turbos'\n    | 'is_vanilla'\n    | 'status'\n> &\n    Pick<TContractCardFooterProps, 'is_sell_requested' | 'onClickCancel' | 'onClickSell'> &\n    Pick<TSwipeableContractDrawerProps, 'onSwipedDown' | 'onSwipedUp'>;\n\nconst ContractDrawerCard = observer(\n    ({\n        contract_info,\n        contract_update,\n        currency = '',\n        is_accumulator,\n        is_collapsed,\n        is_market_closed,\n        is_mobile,\n        is_multiplier,\n        is_vanilla,\n        is_smarttrader_contract,\n        is_sell_requested,\n        is_turbos,\n        onClickCancel,\n        onClickSell,\n        onSwipedUp,\n        onSwipedDown,\n        result,\n        server_time = toMoment(),\n        status,\n        toggleContractAuditDrawer,\n    }: TContractDrawerCardProps) => {\n        const { ui, contract_trade } = useStore();\n        const { active_symbols } = useTraderStore();\n        const {\n            addToast,\n            current_focus,\n            removeToast,\n            should_show_cancellation_warning,\n            setCurrentFocus,\n            toggleCancellationWarning,\n        } = ui;\n        const { getContractById } = contract_trade;\n        const [hover_ref, should_hide_closed_overlay] = useHover<HTMLDivElement>();\n\n        const { profit, validation_error } = contract_info;\n        const is_sold = !!getEndTime(contract_info);\n        const display_name = getSymbolDisplayName(\n            active_symbols,\n            getMarketInformation(contract_info.shortcode || '').underlying\n        );\n\n        const is_crypto = isCryptoContract(contract_info.underlying);\n        const has_progress_slider = !is_multiplier || (is_crypto && is_multiplier);\n\n        const card_header = (\n            <ContractCard.Header\n                contract_info={contract_info}\n                display_name={display_name}\n                getCardLabels={getCardLabels}\n                getContractTypeDisplay={getContractTypeDisplay}\n                has_progress_slider={isDesktop() && has_progress_slider}\n                is_mobile={is_mobile}\n                is_sell_requested={is_sell_requested}\n                is_sold={is_sold}\n                onClickSell={onClickSell}\n                server_time={server_time}\n            />\n        );\n\n        const card_body = (\n            <ContractCard.Body\n                addToast={addToast}\n                contract_info={contract_info}\n                contract_update={contract_update}\n                currency={currency}\n                current_focus={current_focus ?? ''}\n                getCardLabels={getCardLabels}\n                getContractById={getContractById}\n                is_accumulator={is_accumulator}\n                is_mobile={is_mobile}\n                is_multiplier={is_multiplier}\n                is_sold={is_sold}\n                is_turbos={is_turbos}\n                is_vanilla={is_vanilla}\n                has_progress_slider={has_progress_slider}\n                removeToast={removeToast}\n                server_time={server_time}\n                setCurrentFocus={setCurrentFocus}\n                should_show_cancellation_warning={should_show_cancellation_warning}\n                status={status ?? ''}\n                toggleCancellationWarning={toggleCancellationWarning}\n            />\n        );\n\n        const card_footer = (\n            <ContractCard.Footer\n                contract_info={contract_info}\n                getCardLabels={getCardLabels}\n                is_multiplier={is_multiplier}\n                is_sell_requested={is_sell_requested}\n                onClickCancel={onClickCancel}\n                onClickSell={onClickSell}\n                server_time={server_time}\n            />\n        );\n\n        const contract_el = (\n            <React.Fragment>\n                {card_header}\n                {card_body}\n            </React.Fragment>\n        );\n\n        const contract_card = (\n            <ContractCard\n                contract_info={contract_info}\n                getCardLabels={getCardLabels}\n                is_multiplier={is_multiplier}\n                profit_loss={Number(profit)}\n                should_show_result_overlay={false}\n            >\n                <div\n                    className={classNames('dc-contract-card', {\n                        'dc-contract-card--green': Number(profit) > 0 && !result,\n                        'dc-contract-card--red': Number(profit) < 0 && !result,\n                        'contract-card__market-closed--disabled': is_market_closed && should_hide_closed_overlay,\n                    })}\n                    ref={hover_ref}\n                >\n                    {is_market_closed && !getEndTime(contract_info) && (\n                        <div\n                            className={classNames({\n                                'contract-card__market-closed--hidden': isDesktop() && should_hide_closed_overlay,\n                            })}\n                        >\n                            <MarketClosedContractOverlay validation_error={validation_error} />\n                        </div>\n                    )}\n                    {contract_el}\n                    {card_footer}\n                </div>\n            </ContractCard>\n        );\n\n        const has_swipeable_drawer =\n            is_sold || is_multiplier || is_accumulator || is_vanilla || is_turbos || is_smarttrader_contract;\n\n        return (\n            <React.Fragment>\n                <DesktopWrapper>{contract_card}</DesktopWrapper>\n                <MobileWrapper>\n                    <SwipeableContractDrawer\n                        onSwipedUp={has_swipeable_drawer ? onSwipedUp : undefined}\n                        onSwipedDown={has_swipeable_drawer ? onSwipedDown : undefined}\n                    >\n                        {has_swipeable_drawer && (\n                            <Collapsible.ArrowButton onClick={toggleContractAuditDrawer} is_collapsed={is_collapsed} />\n                        )}\n                        {contract_card}\n                    </SwipeableContractDrawer>\n                </MobileWrapper>\n            </React.Fragment>\n        );\n    }\n);\n\nexport default ContractDrawerCard;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, MobileWrapper, Div100vhContainer } from '@deriv/components';\nimport {\n    isUserSold,\n    isMobile,\n    getDurationPeriod,\n    getDurationTime,\n    getDurationUnitText,\n    getEndTime,\n    TContractStore,\n} from '@deriv/shared';\nimport ContractAudit from 'App/Components/Elements/ContractAudit';\nimport { PositionsCardLoader } from 'App/Components/Elements/ContentLoader';\nimport ContractDrawerCard from './contract-drawer-card';\nimport { SwipeableContractAudit } from './swipeable-components';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TContractDrawerCardProps = React.ComponentProps<typeof ContractDrawerCard>;\ntype TContractDrawerProps = RouteComponentProps & {\n    contract_update_history: TContractStore['contract_update_history'];\n    is_dark_theme: boolean;\n    toggleHistoryTab: (state_change?: boolean) => void;\n} & Pick<\n        TContractDrawerCardProps,\n        | 'contract_info'\n        | 'contract_update'\n        | 'is_accumulator'\n        | 'is_market_closed'\n        | 'is_multiplier'\n        | 'is_sell_requested'\n        | 'is_smarttrader_contract'\n        | 'is_turbos'\n        | 'is_vanilla'\n        | 'onClickCancel'\n        | 'onClickSell'\n        | 'status'\n    >;\n\nconst ContractDrawer = observer(\n    ({\n        contract_info,\n        contract_update,\n        contract_update_history,\n        is_accumulator,\n        is_sell_requested,\n        is_dark_theme,\n        is_market_closed,\n        is_multiplier,\n        is_turbos,\n        is_vanilla,\n        is_smarttrader_contract,\n        onClickCancel,\n        onClickSell,\n        status,\n        toggleHistoryTab,\n    }: TContractDrawerProps) => {\n        const { common, ui } = useStore();\n        const { server_time } = common;\n        const { is_mobile } = ui;\n        const { currency, exit_tick_display_value, is_sold } = contract_info;\n        const contract_drawer_ref = React.useRef<HTMLDivElement>(null);\n        const contract_drawer_card_ref = React.useRef<HTMLDivElement>(null);\n        const [should_show_contract_audit, setShouldShowContractAudit] = React.useState(false);\n        const exit_spot =\n            isUserSold(contract_info) && !is_accumulator && !is_multiplier && !is_turbos\n                ? '-'\n                : exit_tick_display_value;\n\n        const contract_audit = (\n            <ContractAudit\n                contract_end_time={getEndTime(contract_info)}\n                contract_info={contract_info}\n                contract_update_history={contract_update_history}\n                duration_unit={getDurationUnitText(getDurationPeriod(contract_info))}\n                duration={getDurationTime(contract_info)}\n                exit_spot={exit_spot}\n                has_result={\n                    !!is_sold || is_multiplier || is_vanilla || is_turbos || is_accumulator || is_smarttrader_contract\n                }\n                is_accumulator={is_accumulator}\n                is_dark_theme={is_dark_theme}\n                is_multiplier={is_multiplier}\n                is_open\n                is_turbos={is_turbos}\n                is_vanilla={is_vanilla}\n                toggleHistoryTab={toggleHistoryTab}\n            />\n        );\n\n        if (!contract_info) return null;\n\n        // For non-binary contract, the status is always null, so we check for is_expired in contract_info\n        const fallback_result = contract_info.status || contract_info.is_expired;\n\n        const body_content = fallback_result ? (\n            <React.Fragment>\n                <ContractDrawerCard\n                    contract_info={contract_info}\n                    contract_update={contract_update}\n                    currency={currency}\n                    is_accumulator={is_accumulator}\n                    is_mobile={is_mobile}\n                    is_market_closed={is_market_closed}\n                    is_multiplier={is_multiplier}\n                    is_turbos={is_turbos}\n                    is_vanilla={is_vanilla}\n                    is_sell_requested={is_sell_requested}\n                    is_smarttrader_contract={is_smarttrader_contract}\n                    is_collapsed={should_show_contract_audit}\n                    onClickCancel={onClickCancel}\n                    onClickSell={onClickSell}\n                    onSwipedUp={() => setShouldShowContractAudit(true)}\n                    onSwipedDown={() => setShouldShowContractAudit(false)}\n                    server_time={server_time}\n                    status={status}\n                    toggleContractAuditDrawer={() => setShouldShowContractAudit(!should_show_contract_audit)}\n                />\n                <DesktopWrapper>{contract_audit}</DesktopWrapper>\n            </React.Fragment>\n        ) : (\n            <div className='contract-card'>\n                <PositionsCardLoader speed={2} />\n            </div>\n        );\n\n        const contract_drawer = (\n            <CSSTransition in={should_show_contract_audit} timeout={250} classNames='contract-drawer__transition'>\n                <div\n                    id='dt_contract_drawer'\n                    className={classNames('contract-drawer', {\n                        'contract-drawer--with-collapsible-btn':\n                            !!getEndTime(contract_info) ||\n                            ((is_multiplier || is_vanilla || is_turbos || is_accumulator || is_smarttrader_contract) &&\n                                isMobile()),\n                        'contract-drawer--is-multiplier': is_multiplier && isMobile(),\n                        'contract-drawer--is-multiplier-sold': is_multiplier && isMobile() && getEndTime(contract_info),\n                    })}\n                    style={{\n                        transform: (should_show_contract_audit &&\n                            contract_drawer_ref.current &&\n                            contract_drawer_card_ref.current &&\n                            `translateY(calc(${contract_drawer_card_ref.current.clientHeight}px - ${contract_drawer_ref.current.clientHeight}px))`) as React.CSSProperties['transform'],\n                    }}\n                    ref={contract_drawer_ref}\n                >\n                    <div className='contract-drawer__body' ref={contract_drawer_card_ref}>\n                        {body_content}\n                    </div>\n                    {should_show_contract_audit && (\n                        <MobileWrapper>\n                            <div id='dt_contract_drawer_audit'>\n                                <SwipeableContractAudit is_multiplier={is_multiplier}>\n                                    {contract_audit}\n                                </SwipeableContractAudit>\n                            </div>\n                        </MobileWrapper>\n                    )}\n                </div>\n            </CSSTransition>\n        );\n\n        return (\n            <React.Fragment>\n                <DesktopWrapper>{contract_drawer}</DesktopWrapper>\n                <MobileWrapper>\n                    <div\n                        style={{\n                            height: contract_drawer_card_ref.current?.clientHeight,\n                        }}\n                    >\n                        <Div100vhContainer height_offset='40px' is_bypassed={!contract_drawer_card_ref.current}>\n                            {contract_drawer}\n                        </Div100vhContainer>\n                    </div>\n                </MobileWrapper>\n            </React.Fragment>\n        );\n    }\n);\n\nexport default withRouter(ContractDrawer);\n","import ContractDrawer from './contract-drawer';\n\nexport default ContractDrawer;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile, TContractInfo } from '@deriv/shared';\n\ntype TInfoBoxLongcode = { contract_info: TContractInfo };\n\nconst InfoBoxLongcode = ({ contract_info }: TInfoBoxLongcode) => {\n    const max_longcode_length = isMobile() ? 47 : 150;\n    const [is_collapsed, setIsCollapsed] = React.useState(true);\n\n    const handleToggle = (ev: React.MouseEvent<HTMLElement>) => {\n        ev.preventDefault();\n        setIsCollapsed(!is_collapsed);\n    };\n\n    return (\n        <div className='info-box-longcode'>\n            <Icon icon='IcContractFlag' className='info-box-longcode-icon' size={24} />\n            <div className='info-box-longcode-wrapper'>\n                <Text\n                    size='xs'\n                    className={classNames('info-box-longcode-text', {\n                        'info-box-longcode-text--collapsed': is_collapsed,\n                    })}\n                >\n                    {contract_info.longcode}\n                </Text>\n                {` `}\n                {contract_info?.longcode && contract_info.longcode.length > max_longcode_length && (\n                    <Text as='a' href='#' size='xs' onClick={handleToggle} className='info-box-longcode-text'>\n                        {is_collapsed ? localize('View more') : localize('View less')}\n                    </Text>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default InfoBoxLongcode;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\n\ntype TContractError = {\n    message?: string;\n    onClickClose: () => void;\n};\n\n// TODO: move to App/Components, Refactor svg, consider other types, more features;\n// when a general design and more icons for all messages is ready\nconst ContractError = ({ message = '', onClickClose }: TContractError) =>\n    !message ? null : (\n        <div className='message'>\n            <div className='message-icon'>\n                <svg width='16' height='16' viewBox='0 0 16 16'>\n                    <g fill='none' fillRule='evenodd'>\n                        <circle cx='8' cy='8' r='8' fill='#F44336' />\n                        <path\n                            fill='#FFF'\n                            fillRule='nonzero'\n                            d='M8 7.293l3.146-3.147a.5.5 0 0 1 .708.708L8.707 8l3.147 3.146a.5.5 0 0 1-.708.708L8 8.707l-3.146 3.147a.5.5 0 0 1-.708-.708L7.293 8 4.146 4.854a.5.5 0 1 1 .708-.708L8 7.293z'\n                        />\n                    </g>\n                </svg>\n            </div>\n            <div className='message-text'>{message}</div>\n            <div className='message-close' onClick={onClickClose}>\n                <Icon icon='IcCross' />\n            </div>\n        </div>\n    );\n\nexport default ContractError;\n","import React from 'react';\nimport { SlideIn } from 'App/Components/Animations';\nimport InfoBoxLongcode from './info-box-longcode';\nimport ContractError from '../contract-error';\nimport { TContractInfo } from '@deriv/shared';\n\ntype TInfoBox = {\n    contract_info: TContractInfo;\n    error_message?: string;\n    removeError: () => void;\n};\n\nconst InfoBox = ({ contract_info, error_message, removeError }: TInfoBox) => {\n    const is_ready = !!contract_info.longcode;\n    return (\n        <SlideIn is_visible={is_ready} className='info-box-container' keyname='info-box-container'>\n            {!!contract_info.contract_type && (\n                <div className='info-box'>\n                    <InfoBoxLongcode contract_info={contract_info} />\n                </div>\n            )}\n            <ContractError message={error_message} onClickClose={removeError} />\n        </SlideIn>\n    );\n};\n\nexport default InfoBox;\n","import InfoBox from './info-box';\n\nexport default InfoBox;\n","import React from 'react';\nimport Digits from 'Modules/Contract/Components/Digits';\nimport InfoBox from 'Modules/Contract/Components/InfoBox';\nimport BottomWidgets from '../../SmartChart/Components/bottom-widgets.jsx';\nimport TopWidgets from '../../SmartChart/Components/top-widgets.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nexport const DigitsWidget = observer(() => {\n    const { contract_replay } = useStore();\n    const { contract_store } = contract_replay;\n    const { contract_info, digits_info, display_status, is_digit_contract, is_ended } = contract_store;\n\n    return (\n        <Digits\n            is_digit_contract={is_digit_contract}\n            is_ended={is_ended}\n            contract_info={contract_info}\n            digits_info={digits_info}\n            display_status={display_status}\n        />\n    );\n});\n\nexport const InfoBoxWidget = observer(() => {\n    const { contract_replay } = useStore();\n    const { is_vanilla } = useTraderStore();\n    const { contract_store, removeErrorMessage: removeError, error_message } = contract_replay;\n    const { contract_info } = contract_store;\n\n    return (\n        <InfoBox\n            contract_info={contract_info}\n            error_message={error_message}\n            removeError={removeError}\n            is_vanilla={is_vanilla}\n        />\n    );\n});\n\n// Chart widgets passed into SmartCharts\nexport const ChartTopWidgets = () => {\n    const { client } = useStore();\n    return <TopWidgets InfoBox={<InfoBoxWidget />} is_title_enabled={false} is_beta_chart={client.is_beta_chart} />;\n};\nexport const ChartBottomWidgets = () => <BottomWidgets Widget={<DigitsWidget />} />;\n","import { TContractInfo } from '@deriv/shared';\nimport React from 'react';\n\ntype TDelayedAccuBarriersMarkerProps = {\n    epoch_array: number[];\n    contract_info: TContractInfo;\n    granularity?: number;\n    is_dark_theme?: boolean;\n    is_in_contract_details?: boolean;\n    marker_component: React.ComponentType<\n        Omit<TDelayedAccuBarriersMarkerProps, 'previous_spot_time' | 'marker_component'>\n    >;\n    previous_spot_time: number | null;\n    price_array: number[];\n    type: string;\n};\n\nconst DelayedAccuBarriersMarker = React.memo(\n    ({ marker_component: MarkerComponent, ...props }: TDelayedAccuBarriersMarkerProps) => (\n        <MarkerComponent {...{ ...props, previous_spot_time: undefined }} />\n    ), // barrier range will get updated only when previous_spot_time changes:\n    (prevProps, nextProps) => prevProps.previous_spot_time === nextProps.previous_spot_time\n);\nDelayedAccuBarriersMarker.displayName = 'DelayedAccuBarriersMarker';\n\nexport default DelayedAccuBarriersMarker;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n    DesktopWrapper,\n    Div100vhContainer,\n    MobileWrapper,\n    PageOverlay,\n    SwipeableWrapper,\n    FadeWrapper,\n    usePrevious,\n} from '@deriv/components';\nimport {\n    getContractTypeFeatureFlag,\n    getDurationPeriod,\n    getDurationUnitText,\n    getEndTime,\n    getPlatformRedirect,\n    isAccumulatorContract,\n    isDesktop,\n    isEmptyObject,\n    isHighLow,\n    isMobile,\n    isMultiplierContract,\n    isTurbosContract,\n    isVanillaContract,\n    isSmartTraderContract,\n    urlFor,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { useFeatureFlags } from '@deriv/hooks';\nimport ChartLoader from 'App/Components/Elements/chart-loader';\nimport ContractDrawer from 'App/Components/Elements/ContractDrawer';\nimport UnsupportedContractModal from 'App/Components/Elements/Modals/UnsupportedContractModal';\nimport SmartChartSwitcher from '../../Trading/Containers/smart-chart-switcher.jsx';\nimport { ChartBottomWidgets, ChartTopWidgets, DigitsWidget, InfoBoxWidget } from './contract-replay-widget.jsx';\nimport ChartMarker from 'Modules/SmartChart/Components/Markers/marker.jsx';\nimport DelayedAccuBarriersMarker from 'Modules/SmartChart/Components/Markers/delayed-accu-barriers-marker';\nimport allMarkers from 'Modules/SmartChart/Components/all-markers.jsx';\nimport ChartMarkerBeta from 'Modules/SmartChartBeta/Components/Markers/marker.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst ContractReplay = observer(({ contract_id }) => {\n    const { common, contract_replay, ui } = useStore();\n    const [swipe_index, setSwipeIndex] = React.useState(0);\n    const { contract_store } = contract_replay;\n    const {\n        is_market_closed,\n        is_sell_requested,\n        is_valid_to_cancel,\n        onClickCancel,\n        onClickSell,\n        onMount,\n        onUnmount,\n        indicative_status,\n        is_chart_loading,\n        is_forward_starting,\n    } = contract_replay;\n    const { contract_info, contract_update, contract_update_history, is_digit_contract } = contract_store;\n    const { routeBackInApp } = common;\n    const { is_dark_mode_on: is_dark_theme, notification_messages_ui: NotificationMessages, toggleHistoryTab } = ui;\n    const trade_type_feature_flag =\n        contract_info.shortcode && getContractTypeFeatureFlag(contract_info.contract_type, isHighLow(contract_info));\n    const is_trade_type_disabled = useFeatureFlags()[`is_${trade_type_feature_flag}_enabled`] === false;\n    const [is_visible, setIsVisible] = React.useState(false);\n    const history = useHistory();\n\n    React.useEffect(() => {\n        const url_contract_id = +/[^/]*$/.exec(location.pathname)[0];\n        onMount(contract_id || url_contract_id);\n        setIsVisible(true);\n\n        return () => {\n            setIsVisible(false);\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contract_id, location, onMount, onUnmount]);\n\n    const onClickClose = React.useCallback(() => {\n        setIsVisible(false);\n        const is_from_table_row = !isEmptyObject(location.state) ? location.state.from_table_row : false;\n        return is_from_table_row ? history.goBack() : routeBackInApp(history);\n    }, [history, routeBackInApp]);\n\n    React.useEffect(() => {\n        // don't open Contract details page for trade types with disabled feature flag:\n        if (is_trade_type_disabled && is_visible) {\n            onClickClose();\n        }\n    }, [is_trade_type_disabled, is_visible, onClickClose]);\n\n    const onChangeSwipeableIndex = index => {\n        setSwipeIndex(index);\n    };\n\n    if (!contract_info.underlying) return null;\n\n    const is_accumulator = isAccumulatorContract(contract_info.contract_type);\n    const is_multiplier = isMultiplierContract(contract_info.contract_type);\n    const is_turbos = isTurbosContract(contract_info.contract_type);\n    const is_vanilla = isVanillaContract(contract_info.contract_type);\n    const is_smarttrader_contract = isSmartTraderContract(contract_info.contract_type);\n\n    const contract_drawer_el = (\n        <ContractDrawer\n            contract_info={contract_info}\n            contract_update={contract_update}\n            contract_update_history={contract_update_history}\n            is_accumulator={is_accumulator}\n            is_chart_loading={is_chart_loading}\n            is_dark_theme={is_dark_theme}\n            is_market_closed={is_market_closed}\n            is_multiplier={is_multiplier}\n            is_turbos={is_turbos}\n            is_sell_requested={is_sell_requested}\n            is_valid_to_cancel={is_valid_to_cancel}\n            is_vanilla={is_vanilla}\n            is_smarttrader_contract={is_smarttrader_contract}\n            onClickCancel={onClickCancel}\n            onClickSell={onClickSell}\n            status={indicative_status}\n            toggleHistoryTab={toggleHistoryTab}\n        />\n    );\n\n    const unsupportedContractOnConfirm = () => {\n        history.goBack();\n    };\n\n    const unsupportedContractOnClose = () => {\n        const statementws_url = urlFor('user/statementws', { legacy: true });\n        window.open(statementws_url, '_blank');\n    };\n\n    return (\n        <FadeWrapper is_visible={is_visible} className='contract-details-wrapper' keyname='contract-details-wrapper'>\n            <MobileWrapper>\n                <NotificationMessages />\n            </MobileWrapper>\n            <UnsupportedContractModal\n                onConfirm={unsupportedContractOnConfirm}\n                onClose={unsupportedContractOnClose}\n                is_visible={is_forward_starting}\n            />\n            <PageOverlay\n                id='dt_contract_replay_container'\n                header={localize('Contract details')}\n                onClickClose={onClickClose}\n            >\n                <Div100vhContainer\n                    className='trade-container__replay'\n                    is_disabled={isDesktop()}\n                    height_offset='80px' // * 80px = header + contract details header heights in mobile\n                >\n                    <DesktopWrapper>{contract_drawer_el}</DesktopWrapper>\n                    <MobileWrapper>\n                        <div\n                            className={classNames('contract-drawer__mobile-wrapper', {\n                                'contract-drawer__mobile-wrapper--is-multiplier': isMobile() && is_multiplier,\n                            })}\n                        >\n                            {contract_drawer_el}\n                        </div>\n                    </MobileWrapper>\n                    <React.Suspense fallback={<div />}>\n                        <div\n                            className={classNames('replay-chart__container', {\n                                'replay-chart__container--is-multiplier': isMobile() && is_multiplier,\n                                'vanilla-trade-chart': is_vanilla,\n                            })}\n                        >\n                            <DesktopWrapper>\n                                <NotificationMessages />\n                            </DesktopWrapper>\n                            <ChartLoader is_dark={is_dark_theme} is_visible={is_chart_loading} />\n                            <DesktopWrapper>\n                                <ReplayChart is_dark_theme={is_dark_theme} is_accumulator_contract={is_accumulator} />\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                {is_digit_contract ? (\n                                    <React.Fragment>\n                                        <InfoBoxWidget />\n                                        <SwipeableWrapper\n                                            className='replay-chart__container-swipeable-wrapper'\n                                            is_swipe_disabled={swipe_index === 1}\n                                            onChange={onChangeSwipeableIndex}\n                                        >\n                                            <DigitsWidget />\n                                            <ReplayChart />\n                                        </SwipeableWrapper>\n                                    </React.Fragment>\n                                ) : (\n                                    <ReplayChart\n                                        is_dark_theme={is_dark_theme}\n                                        is_accumulator_contract={is_accumulator}\n                                    />\n                                )}\n                            </MobileWrapper>\n                        </div>\n                    </React.Suspense>\n                </Div100vhContainer>\n            </PageOverlay>\n        </FadeWrapper>\n    );\n});\n\nContractReplay.propTypes = {\n    contract_id: PropTypes.number,\n};\n\nexport default ContractReplay;\n\n// CHART -----------------------------------------\n\nconst ReplayChart = observer(({ is_accumulator_contract }) => {\n    const trade = useTraderStore();\n    const { contract_replay, client, common, ui } = useStore();\n    const { contract_store, chart_state, chartStateChange, margin } = contract_replay;\n    const {\n        accumulator_previous_spot_time,\n        contract_config,\n        marker: accumulators_barriers_marker,\n        is_digit_contract,\n        barriers_array,\n        getContractsArray,\n        markers_array,\n        contract_info,\n    } = contract_store;\n    const { underlying: symbol, audit_details } = contract_info;\n    const allow_scroll_to_epoch = chart_state === 'READY' || chart_state === 'SCROLL_TO_LEFT';\n    const { app_routing_history, current_language, is_socket_opened } = common;\n    const { is_dark_mode_on: is_dark_theme, is_chart_layout_default, is_chart_countdown_visible } = ui;\n    const { end_epoch, chart_type, start_epoch, granularity } = contract_config;\n    /**\n     * TODO: remove forcing light theme once DBot supports dark theme\n     * DBot does not support for dark theme since till now,\n     * as a result, if any user come to report detail pages\n     * from DBot, we should force it to have light theme\n     */\n    const from_platform = getPlatformRedirect(app_routing_history);\n    const should_force_light_theme = from_platform.name === 'DBot';\n    const settings = {\n        language: current_language.toLowerCase(),\n        theme: is_dark_theme && !should_force_light_theme ? 'dark' : 'light',\n        position: is_chart_layout_default ? 'bottom' : 'left',\n        countdown: is_chart_countdown_visible,\n        assetInformation: false, // ui.is_chart_asset_info_visible,\n        isHighestLowestMarkerEnabled: false, // TODO: Pending UI\n    };\n    const scroll_to_epoch = allow_scroll_to_epoch ? contract_config.scroll_to_epoch : undefined;\n    const all_ticks = audit_details ? audit_details.all_ticks : [];\n    const { wsForget, wsSubscribe, wsSendRequest, wsForgetStream } = trade;\n    const { is_beta_chart } = client;\n\n    const accu_barriers_marker_component = !is_beta_chart ? allMarkers[accumulators_barriers_marker?.type] : undefined;\n\n    const isBottomWidgetVisible = () => {\n        return isDesktop() && is_digit_contract;\n    };\n\n    const getChartYAxisMargin = () => {\n        const chart_margin = {\n            top: isMobile() ? 96 : 148,\n            bottom: isBottomWidgetVisible() ? 128 : 112,\n        };\n\n        if (isMobile()) {\n            if (is_beta_chart) {\n                chart_margin.top = 48;\n            }\n            chart_margin.bottom = 48;\n        }\n\n        return chart_margin;\n    };\n    const prev_start_epoch = usePrevious(start_epoch);\n\n    const has_ended = !!getEndTime(contract_info);\n\n    return (\n        <SmartChartSwitcher\n            id={'replay'}\n            is_beta={is_beta_chart}\n            barriers={barriers_array}\n            bottomWidgets={isBottomWidgetVisible() ? ChartBottomWidgets : null}\n            chartControlsWidgets={null}\n            chartType={chart_type}\n            endEpoch={end_epoch}\n            margin={margin || null}\n            isMobile={isMobile()}\n            enabledNavigationWidget={isDesktop()}\n            enabledChartFooter={false}\n            granularity={granularity}\n            requestAPI={wsSendRequest}\n            requestForget={wsForget}\n            requestForgetStream={wsForgetStream}\n            crosshair={isMobile() ? 0 : undefined}\n            maxTick={isMobile() ? 8 : undefined}\n            requestSubscribe={wsSubscribe}\n            settings={settings}\n            startEpoch={start_epoch}\n            scrollToEpoch={scroll_to_epoch}\n            stateChangeListener={chartStateChange}\n            symbol={symbol}\n            allTicks={all_ticks}\n            topWidgets={ChartTopWidgets}\n            isConnectionOpened={is_socket_opened}\n            isStaticChart={\n                // forcing chart reload when start_epoch changes to an earlier epoch for ACCU closed contract:\n                is_accumulator_contract && end_epoch && start_epoch < prev_start_epoch\n            }\n            shouldFetchTradingTimes={false}\n            should_zoom_out_on_yaxis={is_accumulator_contract}\n            yAxisMargin={getChartYAxisMargin()}\n            anchorChartToLeft={isMobile()}\n            shouldFetchTickHistory={\n                getDurationUnitText(getDurationPeriod(contract_info)) !== 'seconds' || contract_info.status === 'open'\n            }\n            shouldDrawTicksFromContractInfo={is_accumulator_contract}\n            contractInfo={contract_info}\n            contracts_array={getContractsArray()}\n            isLive={!has_ended}\n            startWithDataFitMode={true}\n        >\n            {is_beta_chart &&\n                markers_array.map(({ content_config, marker_config, react_key }) => (\n                    <ChartMarkerBeta\n                        key={react_key}\n                        marker_config={marker_config}\n                        marker_content_props={content_config}\n                        is_bottom_widget_visible={isBottomWidgetVisible()}\n                    />\n                ))}\n            {!is_beta_chart &&\n                markers_array.map(({ content_config, marker_config, react_key }) => (\n                    <ChartMarker\n                        key={react_key}\n                        marker_config={marker_config}\n                        marker_content_props={content_config}\n                        is_bottom_widget_visible={isBottomWidgetVisible()}\n                    />\n                ))}\n            {!is_beta_chart && is_accumulator_contract && !!markers_array && (\n                <DelayedAccuBarriersMarker\n                    marker_component={accu_barriers_marker_component}\n                    key={accumulators_barriers_marker.key}\n                    is_dark_theme={is_dark_theme}\n                    granularity={granularity}\n                    is_in_contract_details\n                    previous_spot_time={accumulator_previous_spot_time}\n                    {...accumulators_barriers_marker}\n                />\n            )}\n        </SmartChartSwitcher>\n    );\n});\n\nReplayChart.propTypes = {\n    is_accumulator_contract: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Redirect, withRouter } from 'react-router';\nimport { CSSTransition } from 'react-transition-group';\nimport { routes } from '@deriv/shared';\nimport ErrorComponent from 'App/Components/Elements/Errors';\nimport { localize } from '@deriv/translations';\nimport ContractReplay from './contract-replay.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst dialog_errors = ['GetProposalFailure', 'ContractValidationError'];\n\nconst Contract = observer(({ match, history }) => {\n    const { contract_replay } = useStore();\n    const {\n        removeErrorMessage,\n        error_message,\n        error_code,\n        has_error,\n        removeAccountSwitcherListener: onUnmount,\n        setAccountSwitcherListener: onMount,\n    } = contract_replay;\n    React.useEffect(() => {\n        onMount(+match.params.contract_id, history);\n\n        return () => {\n            removeErrorMessage();\n            onUnmount();\n        };\n    }, [onMount, onUnmount, removeErrorMessage, history, match.params.contract_id]);\n\n    if (isNaN(match.params.contract_id)) {\n        return <Redirect to='/404' />;\n    }\n\n    return (\n        <React.Fragment>\n            {has_error ? (\n                <ErrorComponent\n                    message={error_message}\n                    is_dialog={dialog_errors.includes(error_code)}\n                    redirect_label={\n                        dialog_errors.includes(error_code) ? localize('Ok') : localize('Go back to trading')\n                    }\n                    redirectOnClick={() => history.push(routes.trade)}\n                    should_show_refresh={false}\n                />\n            ) : (\n                <CSSTransition\n                    in={!has_error}\n                    timeout={400}\n                    classNames={{\n                        enter: 'contract--enter',\n                        enterDone: 'contract--enter-done',\n                        exit: 'contract--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <ContractReplay contract_id={+match.params.contract_id} key={+match.params.contract_id} />\n                </CSSTransition>\n            )}\n        </React.Fragment>\n    );\n});\n\nContract.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.object,\n};\n\nexport default withRouter(Contract);\n","import Contract from './Containers/contract.jsx';\n\nexport default Contract;\n"],"names":["header","message","is_dialog","redirect_label","redirectOnClick","should_show_refresh","refresh_message","localize","Dialog","title","is_visible","confirm_button_text","onConfirm","location","reload","PageErrorContainer","error_header","error_messages","redirect_urls","routes","redirect_labels","buttonOnClick","observer","is_loading","is_modal_visible","onClose","ui","useStore","disableApp","enableApp","is_unsupported_contract_modal_visible","website_domain","website_name","cancel_button_text","onCancel","is_closed_on_cancel","Localize","i18n_default_text","feature_flags","useMemo","flags","data","Object","keys","reduce","previous","current","Boolean","icon","id","label","timestamp","value","value2","className","Text","size","styles","lineHeight","weight","line_height","color","align","formatDate","formatTime","contract_end_time","contract_info","duration","duration_unit","exit_spot","is_vanilla","commission","contract_type","currency","date_start","display_number_of_contracts","entry_spot_display_value","entry_tick_time","exit_tick_time","high_barrier","low_barrier","profit","tick_count","tick_passed","transaction_ids","buy","sell","underlying","is_profit","Number","cancellation_price","getCancellationPrice","show_barrier","isAccumulatorContract","isSmartTraderContract","show_duration","isNaN","show_payout_per_point","isTurbosContract","ticks_label","show_strike_barrier","isAsiansContract","ticks_duration_text","vanilla_payout_text","isVanillaFxContract","getLocalizedBasis","payout_per_pip","payout_per_point","React","Analytics","action","form_name","form_source","ThemedScrollbars","is_bypassed","isMobile","Icon","buy_value","sell_value","undefined","isMultiplierContract","Money","amount","show_currency","isUserSold","isEndedBeforeCancellationExpired","isUserCancelled","cancellation","date_expiry","ServerTime","unix","isCancellationExpired","getBarrierLabel","getBarrierValue","isDigitType","hasTwoBarriers","map","barrier","index","key","getCurrencyDisplayCode","toGMTFormat","epochToMoment","addCommaToNumber","history","length","item","order_date","display_name","Math","abs","order_amount","contract_update_history","has_result","is_accumulator","is_multiplier","is_turbos","toggleHistoryTab","props","contract_id","update_history","setUpdateHistory","getSortedUpdateHistory","sort","a","b","Tabs","top","onTabItemClick","tab_index","WS","then","response","SwipeableContractAudit","children","onSwipedDown","swipe_handlers","SwipeableWrapper","target_el","document","getElementById","ReactDOM","classNames","SwipeableContractDrawer","onSwipedUp","validation_error","as","ContractDrawerCard","contract_update","is_collapsed","is_market_closed","is_mobile","is_smarttrader_contract","is_sell_requested","onClickCancel","onClickSell","result","server_time","toMoment","status","toggleContractAuditDrawer","contract_trade","active_symbols","useTraderStore","addToast","current_focus","removeToast","should_show_cancellation_warning","setCurrentFocus","toggleCancellationWarning","getContractById","useHover","hover_ref","should_hide_closed_overlay","is_sold","getEndTime","getSymbolDisplayName","getMarketInformation","shortcode","is_crypto","isCryptoContract","has_progress_slider","card_header","ContractCard","getCardLabels","getContractTypeDisplay","isDesktop","card_body","card_footer","contract_el","contract_card","profit_loss","should_show_result_overlay","ref","has_swipeable_drawer","DesktopWrapper","MobileWrapper","Collapsible","onClick","ContractDrawer","is_dark_theme","common","exit_tick_display_value","contract_drawer_ref","contract_drawer_card_ref","should_show_contract_audit","setShouldShowContractAudit","contract_audit","getDurationUnitText","getDurationPeriod","getDurationTime","is_open","body_content","is_expired","speed","contract_drawer","CSSTransition","in","timeout","style","transform","clientHeight","height","Div100vhContainer","height_offset","withRouter","max_longcode_length","setIsCollapsed","longcode","href","ev","preventDefault","onClickClose","width","viewBox","fill","fillRule","cx","cy","r","d","error_message","removeError","is_ready","keyname","DigitsWidget","contract_store","contract_replay","digits_info","display_status","is_digit_contract","is_ended","Digits","InfoBoxWidget","removeErrorMessage","ChartTopWidgets","client","InfoBox","is_title_enabled","is_beta_chart","ChartBottomWidgets","Widget","DelayedAccuBarriersMarker","MarkerComponent","marker_component","previous_spot_time","prevProps","nextProps","displayName","ContractReplay","swipe_index","setSwipeIndex","is_valid_to_cancel","onMount","onUnmount","indicative_status","is_chart_loading","is_forward_starting","routeBackInApp","is_dark_mode_on","NotificationMessages","notification_messages_ui","trade_type_feature_flag","getContractTypeFeatureFlag","isHighLow","is_trade_type_disabled","useFeatureFlags","setIsVisible","useHistory","url_contract_id","exec","pathname","isEmptyObject","state","from_table_row","goBack","isVanillaContract","contract_drawer_el","FadeWrapper","UnsupportedContractModal","statementws_url","urlFor","legacy","window","open","PageOverlay","is_disabled","fallback","is_dark","ReplayChart","is_accumulator_contract","is_swipe_disabled","onChange","propTypes","PropTypes","chart_margin","trade","chart_state","chartStateChange","margin","accumulator_previous_spot_time","contract_config","accumulators_barriers_marker","marker","barriers_array","getContractsArray","markers_array","symbol","audit_details","allow_scroll_to_epoch","app_routing_history","current_language","is_socket_opened","is_chart_layout_default","is_chart_countdown_visible","end_epoch","chart_type","start_epoch","granularity","should_force_light_theme","getPlatformRedirect","name","settings","language","toLowerCase","theme","position","countdown","assetInformation","isHighestLowestMarkerEnabled","scroll_to_epoch","all_ticks","wsForget","wsSubscribe","wsSendRequest","wsForgetStream","accu_barriers_marker_component","allMarkers","type","isBottomWidgetVisible","prev_start_epoch","usePrevious","has_ended","is_beta","barriers","bottomWidgets","chartControlsWidgets","chartType","endEpoch","enabledNavigationWidget","enabledChartFooter","requestAPI","requestForget","requestForgetStream","crosshair","maxTick","requestSubscribe","startEpoch","scrollToEpoch","stateChangeListener","allTicks","topWidgets","isConnectionOpened","isStaticChart","shouldFetchTradingTimes","should_zoom_out_on_yaxis","yAxisMargin","bottom","anchorChartToLeft","shouldFetchTickHistory","shouldDrawTicksFromContractInfo","contractInfo","contracts_array","isLive","startWithDataFitMode","content_config","marker_config","react_key","marker_content_props","is_bottom_widget_visible","is_in_contract_details","dialog_errors","Contract","match","error_code","has_error","removeAccountSwitcherListener","setAccountSwitcherListener","params","Redirect","to","includes","push","enter","enterDone","exit","unmountOnExit"],"sourceRoot":""}