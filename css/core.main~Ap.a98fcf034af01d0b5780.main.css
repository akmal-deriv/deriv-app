/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* @define dc-accordion */
.dc-accordion__wrapper {
  /* postcss-bem-linter: ignore */
}
.dc-accordion__wrapper > div:last-child {
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
  border-bottom-width: 1px;
}
.dc-accordion__item {
  border: 1px solid var(--general-section-1);
  border-bottom-width: 0;
  color: var(--text-general);
  font-size: 1.4rem;
}
.dc-accordion__item--first {
  border-top-right-radius: 4px;
  border-top-left-radius: 4px;
}
.dc-accordion__item--open .dc-accordion__item-header {
  border-bottom: 1px solid var(--general-section-1);
}
.dc-accordion__item--open .dc-accordion__item-content {
  display: block;
}
.dc-accordion__item--close .dc-accordion__item-content {
  display: none;
}
.dc-accordion__item-header {
  cursor: pointer;
  line-height: 1.43;
  padding: 8px 16px;
}
.dc-accordion__item-header-icon {
  vertical-align: middle;
  /* postcss-bem-linter: ignore */
}
.dc-accordion__item-header-icon-wrapper {
  float: right;
  padding-left: 16px;
}
.dc-accordion__item-header-icon path,
.dc-accordion__item-header-icon rect {
  fill: var(--text-general);
}
.dc-accordion__item-content {
  padding: 16px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.amount-input-wrapper {
  display: flex;
  flex-direction: column;
  padding: 0.8rem;
  height: auto;
}

.amount-input-container {
  position: relative;
  height: 2.8rem;
}
.amount-input-container .dc-input__field {
  color: var(--text-general);
}
.amount-input-container--error .dc-input__field {
  color: var(--text-loss-danger);
  -webkit-text-fill-color: var(--text-loss-danger);
}
.amount-input-container--disabled .dc-input__field {
  color: var(--text-disabled-1);
}
@media (min-width: 320px) and (max-width: 767px) {
  .amount-input-container {
    height: 2.4rem;
  }
}

.amount-input {
  position: absolute;
  border: none;
  flex: 1;
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
}
.amount-input input {
  font-size: var(--text-size-sm);
  font-weight: var(--text-weight-bold);
}
@media (min-width: 320px) and (max-width: 767px) {
  .amount-input input {
    font-size: var(--text-size-s);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-autocomplete {
  width: 100%;
  position: relative;
}
.dc-autocomplete__trailing-icon {
  position: absolute;
  right: 0;
  pointer-events: none;
  margin-right: 1.1rem;
  cursor: text;
  transition: transform 0.2s ease;
  transform: rotate(0deg);
  transform-origin: 50% 45%;
}
.dc-autocomplete__trailing-icon--opened {
  transform: rotate(-180deg);
}
.dc-autocomplete__trailing-icon--disabled {
  --fill-color1: var(--text-less-prominent) !important;
}
.dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--text-less-prominent);
}
.dc-autocomplete .dc-input {
  margin-bottom: 0;
}
.dc-autocomplete .dc-input--error .dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--text-loss-danger);
}
.dc-autocomplete .dc-input__field {
  white-space: nowrap;
  text-overflow: ellipsis;
}
.dc-autocomplete .dc-dropdown-list {
  box-shadow: 0 8px 16px 0 var(--shadow-menu);
  background: var(--general-main-2);
}
.dc-autocomplete:focus, .dc-autocomplete[focus-within], .dc-autocomplete:active {
  outline: 0;
}
.dc-autocomplete:focus, .dc-autocomplete:focus-within, .dc-autocomplete:active {
  outline: 0;
}
.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete[focus-within] .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--brand-secondary);
}
.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:focus-within .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--brand-secondary);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-btn {
  text-transform: none !important;
}
.dc-btn {
  vertical-align: middle;
  align-items: center;
  justify-content: center;
  touch-action: manipulation;
  cursor: pointer;
  white-space: nowrap;
  padding: 0 1.6rem;
  display: inline-flex;
  border: 0;
  height: 3.2rem;
  border-radius: 4px;
  transition: all 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
  outline: 0;
  position: relative;
  text-decoration: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
  /*
   * Text will be transformed to sentence case in JS
   * text-transform is declared in .dc-btn instead of .dc-btn__text
   * to ensure consistency (even for children) as per styleguide
   */
  /* TODO: confirm this button with designer are we still using this? */
  /* TODO: confirm this button with designer are we still using this? */
  /* postcss-bem-linter: ignore */
}
.dc-btn__toggle {
  height: auto;
  padding: 0.8rem 2.5rem;
}
.dc-btn__text, .dc-btn__icon {
  display: flex;
  pointer-events: none;
}
.dc-btn__icon {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: inherit;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general);
  padding-right: 0.8rem;
  pointer-events: none;
}
.dc-btn__icon--circle {
  padding-right: 0;
}
.dc-btn:not([disabled]):hover {
  text-decoration: none;
}
.dc-btn__rounded {
  border-radius: 24px;
}
.dc-btn--plus {
  height: 2.4rem !important;
  border: 1px solid var(--border-hover) !important;
  padding: 0 !important;
}
.dc-btn--plus {
  width: 2.4rem;
  background: inherit;
  background-repeat: no-repeat;
  background-position: center;
}
.dc-btn--circle {
  width: 3.2rem !important;
}
.dc-btn--circle {
  height: 3.2rem;
  border-radius: 50%;
}
.dc-btn--circular {
  border-radius: 100px;
}
.dc-btn--transparent {
  background: transparent;
}
.dc-btn--primary {
  background: var(--button-primary-default);
  color: var(--text-colored-background);
}
.dc-btn--primary:hover:not([disabled]) {
  background: var(--button-primary-hover);
}
.dc-btn--primary:active:not([disabled]) {
  background: var(--button-primary-default);
}
.dc-btn--primary:disabled, .dc-btn--primary[disabled] {
  cursor: not-allowed !important;
}
.dc-btn--primary:disabled, .dc-btn--primary[disabled] {
  opacity: 0.32;
}
.dc-btn--primary .dc-btn__text,
.dc-btn--primary .dc-btn__icon {
  color: var(--text-colored-background);
}
.dc-btn--primary__light {
  background: var(--button-primary-light-default);
}
.dc-btn--primary__light:hover:not([disabled]) {
  background: var(--button-primary-light-hover);
}
.dc-btn--primary__light:active:not([disabled]) {
  background: var(--button-primary-light-default);
}
.dc-btn--primary__light:disabled, .dc-btn--primary__light[disabled] {
  cursor: not-allowed !important;
}
.dc-btn--primary__light:disabled, .dc-btn--primary__light[disabled] {
  opacity: 0.32;
}
.dc-btn--primary__light .dc-btn__text,
.dc-btn--primary__light .dc-btn__icon {
  color: var(--brand-red-coral);
}
.dc-btn--secondary {
  background: transparent;
  border: 1px solid var(--button-secondary-default);
}
.dc-btn--secondary:hover:not([disabled]) {
  background: var(--button-secondary-hover);
}
.dc-btn--secondary:active:not([disabled]) {
  border: 1px solid var(--button-secondary-default);
}
.dc-btn--secondary:disabled, .dc-btn--secondary[disabled] {
  cursor: not-allowed !important;
}
.dc-btn--secondary:disabled, .dc-btn--secondary[disabled] {
  opacity: 0.32;
}
.dc-btn--secondary .dc-btn__text,
.dc-btn--secondary .dc-btn__icon {
  color: var(--text-prominent);
}
.dc-btn--tertiary {
  background: var(--button-tertiary-default);
}
.dc-btn--tertiary:hover:not([disabled]) {
  background: var(--button-tertiary-hover);
}
.dc-btn--tertiary:active:not([disabled]) {
  background: var(--button-tertiary-default);
}
.dc-btn--tertiary .dc-btn__text,
.dc-btn--tertiary .dc-btn__icon {
  color: var(--brand-red-coral);
}
.dc-btn--tertiary:disabled, .dc-btn--tertiary[disabled] {
  cursor: not-allowed !important;
}
.dc-btn--tertiary:disabled, .dc-btn--tertiary[disabled] {
  opacity: 0.32;
}
.dc-btn--alternate {
  background: var(--button-tertiary-default);
  border: 2px solid var(--button-primary-default);
}
.dc-btn--alternate:hover:not([disabled]) {
  background: var(--button-primary-default);
}
.dc-btn--alternate:hover:not([disabled]) .dc-btn__text {
  color: var(--text-colored-background);
}
.dc-btn--alternate .dc-btn__text,
.dc-btn--alternate .dc-btn__icon {
  color: var(--brand-red-coral);
}
.dc-btn--green {
  background: var(--status-success);
}
.dc-btn--green:hover:not([disabled]) {
  background: var(--transparent-success);
}
.dc-btn--green:active:not([disabled]) {
  background: var(--status-success);
}
.dc-btn--green .dc-btn__text,
.dc-btn--green .dc-btn__icon {
  color: var(--text-colored-background);
}
.dc-btn__small {
  height: 2.4rem;
  min-width: 4.8rem;
  border-width: 1px;
}
.dc-btn__small .dc-btn__text {
  font-size: 1.2rem;
}
.dc-btn__medium {
  height: 3.2rem;
  min-width: 5.6rem;
  border-width: 1px;
}
.dc-btn__medium .dc-btn__text {
  font-size: 1.4rem;
}
.dc-btn__large {
  height: 4rem;
  min-width: 6.4rem;
  border-width: 2px;
}
.dc-btn__large .dc-btn__text {
  font-size: 1.4rem;
}
.dc-btn__effect:focus:not(:active):after {
  content: "";
  position: absolute;
  top: -0.1em;
  left: -0.1em;
  bottom: -0.1em;
  right: -0.1em;
  border-radius: inherit;
  border: 0 solid var(--brand-secondary);
  opacity: 0.4;
  animation: buttonEffect 0.4s;
  animation-fill-mode: forwards;
  display: block;
}
.dc-btn__group {
  white-space: nowrap;
}
.dc-btn__group .dc-btn + .dc-btn {
  margin-left: 8px;
}
.dc-btn__button-group {
  border-radius: 0 4px 4px 0;
}
.dc-btn .initial-loader--btn {
  background-color: transparent;
  background-color: initial;
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}
.dc-btn .initial-loader--btn .initial-loader__barspinner--rect {
  background-color: var(--text-colored-background);
}
.dc-btn .initial-loader--btn .barspinner {
  margin: 0.6rem 4px 0 -4px;
  /* postcss-bem-linter: ignore */
}
.dc-btn .initial-loader--btn .barspinner__rect {
  height: 35%;
}

@keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-badge {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  color: #ffffff;
}
.dc-badge--contained {
  border: none;
}
.dc-badge--bordered {
  border: 1px solid var(--text-prominent);
  color: var(--text-prominent);
}
.dc-badge--blue {
  background-color: #377cfc;
}
.dc-badge--orange {
  background-color: #ff6444;
}
.dc-badge--red {
  background-color: #ff444f;
}
.dc-badge--gray {
  background-color: #d6dadb;
}
.dc-badge--full-rounded {
  border-radius: 2px;
}
.dc-badge--two-rounded {
  border-bottom-left-radius: 8px;
  border-top-right-radius: 8px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-button-menu */
.dc-button-menu {
  display: flex;
  justify-content: center;
  width: 100%;
  position: relative;
}
.dc-button-menu__button:first-child {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.dc-button-menu__button:last-child {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.dc-button-menu__button {
  margin: 0;
  border: none;
  border-radius: 0px;
  width: 50%;
  background-color: var(--state-normal);
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}
.dc-button-menu__button .dc-btn__text {
  display: contents;
}
@media (min-width: 1024px) {
  .dc-button-menu__button:hover:not(.dc-button-menu__button--active) {
    background-color: var(--state-hover) !important;
  }
}
.dc-button-menu__button span {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: inherit;
  text-align: left;
  line-height: 1.5;
  color: var(--text-general);
}
.dc-button-menu__button--active {
  background-color: var(--state-active) !important;
}
.dc-button-menu__button--active {
  cursor: auto;
  cursor: initial;
}
.dc-button-menu__button--active span {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: inherit;
  text-align: left;
  line-height: 1.5;
  color: var(--text-prominent);
}
.dc-button-menu__toggle {
  margin: 0;
  border: none;
  border-radius: 6px;
  width: 50%;
  background-color: var(--general-section-1);
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}
.dc-button-menu__toggle .dc-btn__text {
  display: contents;
}
@media (min-width: 1024px) {
  .dc-button-menu__toggle:hover:not(.dc-button-menu__button--active) {
    background-color: var(--state-hover) !important;
  }
}
.dc-button-menu__toggle span {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: inherit;
  text-align: left;
  line-height: 1.5;
  color: var(--text-less-prominent);
}
.dc-button-menu__toggle--active {
  background-color: var(--state-normal) !important;
}
.dc-button-menu__toggle--active {
  cursor: auto;
  cursor: initial;
}
.dc-button-menu__toggle--active span {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: inherit;
  text-align: left;
  line-height: 1.5;
  color: var(--text-prominent);
}
.dc-button-menu__counter {
  margin-left: 0.4rem;
}
.dc-button-menu__wrapper {
  position: relative;
  border-radius: 4px;
  width: 100%;
  background-color: var(--state-normal);
  display: flex;
}
.dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
  background-color: rgba(0, 0, 0, 0) !important;
}
.dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
  z-index: 1;
  padding: 0.8rem 0.6rem;
  white-space: normal;
}
.dc-button-menu__wrapper .dc-button-menu__button .dc-btn__text, .dc-button-menu__wrapper .dc-button-menu__button--active .dc-btn__text {
  line-height: normal;
}
.dc-button-menu__wrapper .dc-button-menu__button:nth-last-child(2) {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.dc-button-menu--highlight {
  display: block;
  position: absolute;
  content: "";
  height: 100%;
  top: 0;
  left: 0;
  z-index: 0;
  transition: transform 0.25s ease;
  pointer-events: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-calendar */
.dc-calendar {
  outline: 0;
  border-radius: 5px;
  z-index: 999;
  box-sizing: border-box;
  font-size: 1rem;
  background: var(--general-main-2);
  box-shadow: 0 2px 8px 0 var(--shadow-menu);
}
.dc-calendar__header, .dc-calendar__footer {
  position: relative;
  display: flex;
  align-items: center;
  height: 5rem;
  border-radius: 5px;
  padding: 1.6rem;
  box-sizing: border-box;
}
.dc-calendar__header {
  justify-content: center;
}
.dc-calendar__footer :last-child:not(:only-child),
.dc-calendar__footer .dc-calendar__btn--today {
  margin-left: auto;
}
.dc-calendar__body {
  border-top: 0.1rem solid var(--general-section-2);
  border-bottom: 0.1rem solid var(--general-section-2);
}
.dc-calendar__body--date, .dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
  display: grid;
  grid-gap: 1.2rem;
  padding: 0.8rem 2rem;
}
.dc-calendar__body--date .dc-calendar__cell, .dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 5px;
}
.dc-calendar__body--date {
  grid-template-columns: repeat(7, 2.4rem);
  grid-auto-rows: 2.4rem;
}
.dc-calendar__body--date .dc-calendar__cell {
  width: 100%;
  height: 100%;
}
.dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
  grid-template-columns: repeat(3, minmax(7.2rem, 1fr));
  grid-auto-rows: minmax(4.2rem, auto);
}
.dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
  width: 5.6rem;
  height: 3.2rem;
}
.dc-calendar__body--month .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--year .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--decade .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled) {
  color: var(--text-general);
}
.dc-calendar__body--decade .dc-calendar__cell {
  width: 100%;
}
.dc-calendar__icon {
  cursor: pointer;
  right: 5%;
}
.dc-calendar__icon--today:hover {
  cursor: pointer;
}
.dc-calendar__btn {
  text-align: center;
  padding: 0 0.2rem;
  font-weight: bold;
  cursor: pointer;
  border: none;
  outline: none;
  background: none;
}
.dc-calendar__btn--disabled {
  cursor: default;
  transition: none;
}
.dc-calendar__btn--disabled .dc-calendar__icon {
  cursor: default;
}
.dc-calendar__btn--is-hidden {
  display: none;
}
.dc-calendar__btn--select {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  color: var(--text-prominent);
}
.dc-calendar__btn--prev-year, .dc-calendar__btn--next-year, .dc-calendar__btn--prev-month, .dc-calendar__btn--next-month {
  position: absolute;
  padding: 0 0.5em;
  height: 1.4em;
}
.dc-calendar__btn--prev-year {
  left: 7%;
}
.dc-calendar__btn--next-year {
  right: 7%;
}
.dc-calendar__btn--prev-month {
  left: 14%;
}
.dc-calendar__btn--next-month {
  right: 14%;
}
.dc-calendar__cell {
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.25;
  align-self: center;
  justify-self: center;
  position: relative;
  cursor: pointer;
  color: var(--text-general);
  box-sizing: border-box;
}
.dc-calendar__cell--hover {
  color: var(--text-general);
  background: var(--state-hover);
}
.dc-calendar__cell:nth-child(7n):before {
  padding: 0;
  border-radius: 4px;
}
.dc-calendar__cell:nth-child(7n+1):before {
  left: 0;
  border-radius: 4px;
}
.dc-calendar__cell:nth-child(7n+1):after {
  content: none;
}
.dc-calendar__cell--bold {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  color: var(--text-prominent);
}
.dc-calendar__cell--disabled:not(.dc-calendar__cell--today):not(.dc-calendar__cell--between), .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--between) {
  color: var(--text-disabled);
  transition: none;
  cursor: default;
}
.dc-calendar__cell--is-hidden {
  display: none;
}
.dc-calendar__cell--today {
  font-weight: bold;
  color: var(--text-prominent);
  border: 1px solid var(--state-active);
}
.dc-calendar__cell--today-duration {
  background: var(--state-active);
}
.dc-calendar__cell--active {
  font-weight: bold;
  color: var(--text-prominent);
  background: var(--state-active);
}
.dc-calendar__cell--active:hover {
  background: var(--state-active);
}
.dc-calendar__cell--active-duration {
  background: var(--state-active);
}
.dc-calendar__cell--active-duration:after {
  position: absolute;
  content: "";
  width: 100%;
  top: 0;
  right: 50%;
  z-index: -1;
  height: 100%;
  padding-left: 1rem;
  background: var(--state-active);
}
.dc-calendar__cell--between {
  font-weight: bold;
  color: var(--text-prominent);
  background: var(--state-active);
}
.dc-calendar__cell--between-hover:before {
  position: absolute;
  content: "";
  width: 100%;
  z-index: -2;
  height: 100%;
  padding-left: 3.2rem;
  background: var(--state-hover);
}
.dc-calendar__cell--between:hover {
  background: var(--state-active);
}
.dc-calendar__cell--between:before {
  position: absolute;
  content: "";
  width: 100%;
  z-index: -1;
  height: 100%;
  padding-left: 3.2rem;
  background: var(--state-active);
}
.dc-calendar__cell-tooltip {
  position: absolute;
  display: inline-grid;
  cursor: pointer;
  height: 0;
  top: 0;
  left: 0;
  justify-content: center;
  width: 100%;
}
.dc-calendar__cell-tooltip-icon {
  margin-top: 0.1rem;
  display: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-card {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  border: 1px solid var(--border-normal);
  padding: 1.6rem;
  border-radius: 4px;
}
.dc-card__wrapper {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: auto;
  margin: 1.6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-carousel {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.dc-carousel--mt5 {
  justify-content: initial;
}
.dc-carousel__container {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}
.dc-carousel__box {
  overflow: hidden;
}
.dc-carousel__box--mt5 {
  margin: 0 -1.4rem;
}
.dc-carousel__wrapper {
  display: flex;
  flex-direction: row;
  transition: transform 0.3s linear;
  width: -moz-fit-content;
  width: fit-content;
  padding: 0.5rem 0;
  height: 100%;
}
.dc-carousel__wrapper--mt5 {
  padding-top: 0;
  padding-top: initial;
}
.dc-carousel__card {
  display: flex;
  flex-direction: column;
  padding-bottom: 0.8rem;
}
.dc-carousel__nav {
  align-items: center;
  box-sizing: border-box;
  display: flex;
  width: 100%;
  padding: 0 2.4rem;
  overflow: hidden;
  margin-bottom: 2.4rem;
  justify-content: space-between;
}
.dc-carousel__nav--upper {
  margin-bottom: 0;
}
.dc-carousel__nav-list {
  display: inline-block;
  text-align: center;
  margin: 0 auto;
  position: relative;
}
.dc-carousel__nav--lower {
  margin-bottom: 0;
}
.dc-carousel__nav-item {
  width: 0.8rem;
  height: 0.8rem;
  border-radius: 50%;
  display: inline-block;
  margin: 0 0.8rem;
  cursor: pointer;
}
.dc-carousel__nav-item--active {
  position: absolute;
  top: 0;
  left: 0;
  cursor: auto;
  cursor: initial;
  transition: transform 0.3s linear;
}
.dc-carousel__icon {
  cursor: pointer;
}
.dc-carousel__icon--left {
  position: relative;
  right: 5.2rem;
}
.dc-carousel__icon--mt5 {
  background: var(--icon-grey-background);
  width: 6rem;
  height: 6rem;
  border-radius: 50%;
  transform: scale(0.5);
  line-height: 6rem;
  text-align: center;
  justify-content: space-between;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.cfd-compare-accounts-carousel {
  position: relative;
  --slide-spacing: 1rem;
  --slide-size: 50%;
  --slide-height: 19rem;
  overflow: hidden;
}
.cfd-compare-accounts-carousel__viewport {
  overflow: hidden;
  width: 100%;
  height: 100%;
}
@media (min-width: 320px) and (max-width: 767px) {
  .cfd-compare-accounts-carousel__viewport {
    padding-bottom: 6rem;
  }
}
.cfd-compare-accounts-carousel__container {
  backface-visibility: hidden;
  display: flex;
  touch-action: pan-y;
  flex-direction: row;
  max-height: auto;
  margin-left: calc(var(--slide-spacing) * -1);
  transition: transform 0s ease-in-out;
}
.cfd-compare-accounts-carousel__slide {
  flex: 0 0 var(--slide-size);
  min-width: 0;
  padding-left: var(--slide-spacing);
  position: relative;
}
.cfd-compare-accounts-carousel__slide__img {
  display: block;
  height: var(--slide-height);
  width: 100%;
  -o-object-fit: cover;
     object-fit: cover;
}
.cfd-compare-accounts-carousel__button {
  background-color: var(--general-main-1);
  z-index: 1;
  color: var(--background-site);
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  top: 50%;
  cursor: pointer;
  width: 4rem;
  height: 4rem;
  border: 1px solid var(--general-background-main);
  border-radius: 50%;
  box-shadow: 0px 0px 24px rgba(0, 0, 0, 0.08), 0px 24px 24px rgba(0, 0, 0, 0.08);
}
.cfd-compare-accounts-carousel__button--prev {
  left: 1.6rem;
}
.cfd-compare-accounts-carousel__button--next {
  right: 1.6rem;
}
.cfd-compare-accounts-carousel__button:disabled {
  opacity: 0.3;
  display: none;
}
.cfd-compare-accounts-carousel__button__svg {
  width: 50%;
  height: 35%;
}
@media (min-width: 320px) and (max-width: 767px) {
  .cfd-compare-accounts-carousel__button {
    display: none;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-clipboard {
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-checkbox {
  display: flex;
  justify-content: flex-start;
  cursor: pointer;
  align-items: center;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
}
.dc-checkbox__input {
  display: none;
}
.dc-checkbox__box {
  outline: none !important;
}
.dc-checkbox__box {
  display: flex;
  width: 16px;
  height: 16px;
  transition: 0.3s ease-in-out;
  flex-shrink: 0;
  margin: 0 8px;
  border-radius: 2px;
  align-self: center;
  box-sizing: border-box;
  border: 2px solid var(--text-less-prominent);
}
.dc-checkbox__box--active {
  border: none;
  background-color: var(--brand-red-coral);
}
.dc-checkbox--active {
  border: none;
  background-color: var(--brand-red-coral);
}
.dc-checkbox--disabled {
  cursor: not-allowed !important;
}
.dc-checkbox--disabled {
  opacity: 0.5;
}
.dc-checkbox--grey-disabled {
  background-color: var(--checkbox-disabled-grey);
}
.dc-checkbox__label--error {
  color: var(--text-loss-danger) !important;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-checklist {
  max-width: 400px;
}
.dc-checklist__item {
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: solid 1px var(--border-normal);
  padding: 12px;
}
.dc-checklist__item-text {
  max-width: 80%;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
}
.dc-checklist__item-status {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 32px;
  height: 32px;
}
.dc-checklist__item-status--action {
  cursor: pointer;
  background-color: var(--brand-red-coral);
  border-radius: 4px;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}
.dc-checklist__item-status--disabled {
  pointer-events: none;
}
.dc-checklist__item-status--button {
  width: auto;
}
.dc-checklist__item--disabled {
  opacity: 0.5;
  pointer-events: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-circular-progress {
  position: relative;
  line-height: 0;
  width: -moz-fit-content;
  width: fit-content;
}
.dc-circular-progress__bar {
  transform: scaleX(-1) rotate(-90deg);
  transform-origin: 50% 50%;
  transition: stroke-dashoffset 1s;
  stroke: var(--brand-secondary);
}
.dc-circular-progress__bar--warning {
  stroke: var(--status-warning);
}
.dc-circular-progress__bar--danger {
  stroke: var(--status-danger);
}
.dc-circular-progress--clockwise {
  transform: rotate(-90deg);
}
.dc-circular-progress__icon {
  position: absolute;
  width: 1.6rem;
  height: 100%;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Slideout Animation */
@keyframes SlideIn {
  from {
    opacity: 0;
    max-height: 0;
  }
  to {
    opacity: 1;
    height: auto;
    max-height: 100vh;
  }
}
@keyframes SlideOut {
  from {
    opacity: 1;
    max-height: 100vh;
  }
  to {
    opacity: 0;
    max-height: 0;
  }
}
.dc-collapsible {
  padding: 0.8rem;
  border-radius: 0.4rem;
  background-color: var(--general-section-1);
}
.dc-collapsible--has-collapsible-btn {
  padding-top: 0;
}
.dc-collapsible--has-title {
  padding-bottom: 0;
}
.dc-collapsible__button {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 32px;
}
.dc-collapsible__icon {
  transition: transform 0.3s ease-in-out;
}
.dc-collapsible__icon--top {
  transform: rotate(180deg);
}
.dc-collapsible__icon--top.dc-collapsible__icon--is-open {
  transform: rotate(0deg);
}
.dc-collapsible__icon--bottom.dc-collapsible__icon--is-open {
  transform: rotate(180deg);
}
.dc-collapsible__item--collapsed {
  margin: 0 !important;
  margin: initial !important;
  padding: 0 !important;
  padding: initial !important;
}
.dc-collapsible__item--collapsed {
  opacity: 0;
  max-height: 0;
  overflow: hidden;
}
.dc-collapsible__title {
  margin-left: 0;
  margin-right: auto;
}
.dc-collapsible .trade-container__fieldset {
  flex: 1;
}
.dc-collapsible .trade-container__fieldset .dc-button-menu__wrapper {
  height: 4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}
.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-general);
}
.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-general);
}
.dc-content-expander__select-arrow .color2-fill {
  fill: none;
}
.dc-content-expander__select-arrow .color2-stroke {
  stroke: none;
}
.active.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}
.active.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-prominent);
}
.active.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-prominent);
}
.active.dc-content-expander__select-arrow .color2-fill {
  fill: none;
}
.active.dc-content-expander__select-arrow .color2-stroke {
  stroke: none;
}
.disabled.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}
.disabled.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-disabled);
}
.disabled.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-disabled);
}
.disabled.dc-content-expander__select-arrow .color2-fill {
  fill: none;
}
.disabled.dc-content-expander__select-arrow .color2-stroke {
  stroke: none;
}
.white.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}
.white.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-prominent);
}
.white.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-prominent);
}
.border_hover_color.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}
.border_hover_color.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-prominent);
}
.border_hover_color.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-prominent);
}
.secondary.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}
.secondary.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-less-prominent);
}
.secondary.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-less-prominent);
}

/**
 * Define Breakpoints here.
 */
.dc-content-expander {
  cursor: pointer;
  display: flex;
  align-items: center;
  padding: 0 0.8rem;
  height: 4rem;
  position: relative;
}
.dc-content-expander__content {
  transition: opacity 0.25s linear;
}
.dc-content-expander__content--enter {
  opacity: 0;
}
.dc-content-expander__content--enter-done {
  opacity: 1;
}
.dc-content-expander__content--exit {
  opacity: 0;
}
.dc-content-expander__title {
  display: block;
  padding-right: 0.8rem;
}
.dc-content-expander__title--spaced {
  flex: 1;
}
.dc-content-expander--expanded .dc-content-expander__select-arrow {
  transform: rotate(180deg);
}
.dc-content-expander--expanded .dc-content-expander__select-arrow--invert {
  transform: rotate(0deg);
}
.dc-content-expander__select-arrow {
  pointer-events: none;
  transform: rotate(0);
  transform-origin: 50% 45%;
  transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
}
.dc-content-expander__select-arrow--invert {
  transform: rotate(180deg);
}
.dc-content-expander__wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-counter {
  align-items: center;
  background: var(--status-danger);
  border-radius: 0.8rem;
  color: var(--text-colored-background);
  display: inline-flex;
  font-size: 1rem;
  font-weight: bold;
  justify-content: center;
  line-height: 1;
  padding: 3px 5px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.composite-checkbox {
  border-radius: 0.4rem;
  border: 1px solid var(--border-normal);
  padding: 1.6rem;
  height: 100%;
  cursor: pointer;
}
.composite-checkbox__description {
  margin: 1.2rem 0 0;
}
.composite-checkbox:hover:not(.composite-checkbox--active) {
  border: 1px solid var(--border-hover);
}
.composite-checkbox--active {
  border: 1px solid var(--border-active);
}
.composite-checkbox .dc-checkbox__box {
  margin-left: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define .dc-currency-badge */
.dc-currency-badge {
  align-self: flex-start;
  padding: 0.3rem;
  background-color: #85acb0;
  border-radius: 4px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-contract-card-dialog; weak */
.dc-contract-card-dialog {
  position: fixed;
  display: grid;
  background: var(--general-main-2);
  border-radius: 4px;
  box-shadow: 0 4px 8px 2px var(--shadow-menu);
  transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 0.25s linear;
  padding: 0.8rem;
  width: 240px;
  z-index: 99;
}
.dc-contract-card-dialog--enter-done {
  opacity: 1;
  transform: translate3d(0, 0, 0);
}
.dc-contract-card-dialog--enter, .dc-contract-card-dialog--exit {
  opacity: 0;
  transform: translate3d(-20px, 0, 0);
}
.dc-contract-card-dialog__input .dc-input-wrapper__input {
  border: 1px solid var(--border-normal);
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}
.dc-contract-card-dialog__input--currency {
  position: absolute;
  height: 3.2rem;
  right: 4rem;
  align-items: center;
  justify-content: center;
  display: flex;
  background: transparent;
  border-color: transparent;
  z-index: 2;
  color: inherit;
}
.dc-contract-card-dialog__input--currency-symbol {
  font-size: 1.4rem;
  line-height: 1.5;
  padding-bottom: 0.2rem;
}
.dc-contract-card-dialog__input--currency:before {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  color: inherit;
}
.dc-contract-card-dialog__popover {
  /* postcss-bem-linter: ignore */
}
.dc-contract-card-dialog__popover .dc-checkbox {
  margin-top: 0.8rem;
  /* postcss-bem-linter: ignore */
}
.dc-contract-card-dialog__popover .dc-checkbox__label {
  font-size: inherit;
}
.dc-contract-card-dialog__button {
  margin-top: 0.8rem;
}
.dc-contract-card-dialog__button .dc-btn {
  width: 100%;
}
.dc-contract-card-dialog__form {
  display: grid;
  flex: 1;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card-dialog__form {
    grid-template-rows: auto auto 1fr;
    grid-gap: 1.6rem;
    margin: 1.6rem;
  }
  .dc-contract-card-dialog__form--no-stop-loss {
    grid-template-rows: auto 1fr;
  }
}
@media (min-width: 1024px) {
  .dc-contract-card-dialog__form {
    grid-gap: 0.8rem;
  }
}
.dc-contract-card-dialog__form .dc-checkbox__box {
  margin-left: 0;
}
.dc-contract-card-dialog__total-profit {
  height: 5.2rem;
  padding: 1.6rem;
  background: var(--general-main-2);
  color: var(--text-general);
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-size: 1.4rem;
}

/** @define dc-contract-card-dialog-toggle; */
.dc-contract-card-dialog-toggle {
  position: absolute;
  width: calc(100% + 0.4rem);
  height: calc(100% + 0.4rem);
  right: 0.4rem;
  top: -0.4rem;
  border: 1px solid var(--general-section-1);
  border-radius: 4px;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card-dialog-toggle {
    width: 100%;
  }
}
.dc-contract-card-dialog-toggle__icon {
  float: right;
  margin: 3px;
}
.dc-contract-card-dialog-toggle:hover {
  cursor: pointer;
  border-color: var(--button-secondary-default);
}
@charset "UTF-8";
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-result */
.dc-result__content {
  display: flex;
  justify-items: center;
  align-items: center;
  flex-direction: column;
  gap: 0.4rem;
}
.dc-result__caption {
  text-transform: capitalize;
  font-size: 1.4em;
  font-weight: bold;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: opacity 0.25s ease;
  gap: 0.4rem;
}
.dc-result__caption--won {
  color: var(--text-profit-success);
}
.dc-result__caption--lost {
  color: var(--text-loss-danger);
}
.dc-result__caption-wrapper {
  cursor: pointer;
  width: 100%;
  height: calc(100% - 24px);
  text-decoration: none;
  position: absolute;
  top: 24px;
  z-index: 2;
  display: flex;
  justify-content: center;
  align-items: center;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-result__caption {
    pointer-events: none;
  }
}
.dc-result__close-btn {
  position: absolute;
  top: 2px;
  right: 8px;
  cursor: pointer;
  visibility: visible;
}
.dc-result__close-btn:after {
  content: "×";
  font-size: 24px;
  font-weight: 300;
  color: var(--text-general);
}
.dc-result__payout--won {
  color: var(--text-profit-success);
}
.dc-result__payout--lost {
  color: var(--text-loss-danger);
}
.dc-result__positions-overlay {
  max-width: 218px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-contract-card {
  box-sizing: border-box;
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  text-decoration: none;
  position: relative;
  padding: 0.8rem;
  background-color: var(--general-main-1);
  color: var(--text-prominent);
  padding-bottom: 0.8rem;
}
.dc-contract-card:before {
  content: "";
  position: absolute;
  border-radius: 4px;
  height: 52px;
  width: 100%;
  left: 0;
  top: 0;
}
.dc-contract-card--green:before {
  background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));
}
.dc-contract-card--red:before {
  background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));
}
.dc-contract-card--loss {
  color: var(--text-loss-danger);
}
.dc-contract-card--profit {
  color: var(--text-profit-success);
}
.dc-contract-card__grid {
  display: grid;
  grid-template-rows: 1fr auto;
  grid-gap: 4px;
  min-height: 4rem;
}
.dc-contract-card__grid-underlying-trade {
  grid-template-columns: 1fr 1fr;
  width: 100%;
}
.dc-contract-card__grid-underlying-trade--trader {
  grid-template-columns: 1.2fr 1fr;
}
.dc-contract-card__grid-underlying-trade--trader--accumulator, .dc-contract-card__grid-underlying-trade--trader--turbos {
  display: flex;
  grid-gap: 1px;
}
.dc-contract-card__grid-underlying-trade--trader--accumulator-sold, .dc-contract-card__grid-underlying-trade--trader--turbos-sold {
  padding-top: 1rem;
}
.dc-contract-card__grid-underlying-trade--mobile {
  grid-template-columns: 1fr 1fr 25%;
}
.dc-contract-card__grid-profit-payout {
  grid-template-columns: 1fr 1fr;
  padding: 8px 0;
  border-radius: 4px;
  margin-left: -4px;
  margin-right: -4px;
  background: var(--general-hover);
}
.dc-contract-card__grid-label {
  font-size: 1rem;
  align-self: flex-start;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-general);
  white-space: nowrap;
}
.dc-contract-card__grid-value {
  font-size: 1.2rem;
  font-weight: bold;
  align-self: flex-start;
  line-height: 1.5;
}
.dc-contract-card__grid-items {
  grid-template-columns: 1fr 1fr;
  grid-gap: 0.8rem 0.4rem;
  padding: 0.8rem 0;
}
.dc-contract-card__result {
  position: absolute;
  top: 0;
  width: 100%;
  height: calc(100% - 1rem);
  border-radius: 4px;
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--overlay-inside-dialog);
}
.dc-contract-card__result--won, .dc-contract-card__result--won:after {
  background-image: var(--gradient-success);
}
.dc-contract-card__result--lost, .dc-contract-card__result--lost:after {
  background-image: var(--gradient-danger);
}
.dc-contract-card__result--lg {
  max-height: 100%;
}
.dc-contract-card__result:hover {
  background: 0 !important;
}
.dc-contract-card__result:hover .dc-result__content {
  opacity: 0;
}
.dc-contract-card__result:after {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 4px;
  z-index: 2;
}
.dc-contract-card__result--enter, .dc-contract-card__result--exit {
  opacity: 0;
}
.dc-contract-card__result--enter-done {
  opacity: 1;
}
.dc-contract-card__wrapper {
  margin: 0 1em;
  min-width: 218px;
  max-width: 238px;
  width: -moz-min-content;
  width: min-content;
  border-radius: 4px;
  transition: transform 0.25s ease, opacity 0.25s linear;
  position: relative;
  background: var(--general-main-1);
}
.dc-contract-card__wrapper .currency-badge {
  margin-bottom: 5px;
}
.dc-contract-card__wrapper--active:before {
  content: "";
  top: -1px;
  left: -1px;
  width: calc(100% + 2px);
  height: calc(100% + 2px);
  position: absolute;
  box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.24);
  border-radius: 4px;
  pointer-events: none;
}
.dc-contract-card__wrapper--enter-done {
  opacity: 1;
  transform: translateY(0);
}
.dc-contract-card__wrapper--enter, .dc-contract-card__wrapper--exit {
  opacity: 0;
  transform: translateY(-16px);
}
.dc-contract-card .purchase-price-container,
.dc-contract-card .potential-payout-container {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
}
.dc-contract-card .purchase-price__label,
.dc-contract-card .potential-payout__label {
  font-size: 1rem;
  align-self: flex-start;
  text-transform: none;
  margin-bottom: 4px;
  color: var(--text-general);
  white-space: nowrap;
}
.dc-contract-card .purchase-price__value,
.dc-contract-card .potential-payout__value {
  font-size: 1em;
  font-weight: bold;
  align-self: flex-start;
}
.dc-contract-card .potential-payout-container {
  padding-left: 4px;
}
.dc-contract-card .potential-payout-price__value {
  font-size: 1em;
  font-weight: bold;
  align-self: flex-start;
}
.dc-contract-card__separator {
  width: 100%;
  border-top: 1px solid var(--general-section-1);
  margin: 4px 0 0;
}
.dc-contract-card__underlying-name {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  font-weight: bold;
  font-size: 1.2em;
  max-width: 18rem;
  min-width: 10rem;
}
.dc-contract-card__underlying-name--accumulator {
  max-width: 10rem;
}
.dc-contract-card__type {
  font-size: 1.2em;
  display: flex;
  justify-content: flex-start;
  font-weight: bold;
  /* postcss-bem-linter: ignore */
}
.dc-contract-card__type .category-type .color1-fill {
  fill: var(--brand-red-coral) !important;
}
.dc-contract-card__type .category-type .color2-fill {
  fill: var(--brand-secondary) !important;
}
.dc-contract-card__symbol {
  margin-left: 0.4rem;
}
.dc-contract-card__symbol--smarttrader-contract {
  width: 7rem;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card__symbol--smarttrader-contract {
    width: auto;
    width: initial;
  }
}
.dc-contract-card__header {
  display: flex;
  justify-content: space-evenly;
  flex-direction: column;
  margin: 0.5em 0.2em;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card__header {
    margin: 0 8px;
  }
}
.dc-contract-card__body {
  border-radius: 4px;
  width: 100%;
  padding: 0.8rem 0.4rem;
  color: var(--text-prominent);
  display: flex;
}
.dc-contract-card__body-wrapper {
  width: 100%;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card__body {
    padding: 0 8px;
  }
  .dc-contract-card__body-wrapper {
    display: flex;
  }
}
.dc-contract-card-items-wrapper {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: "stake current-stake" "deal-cancel-fee limit-order-info" "buy-price limit-order-info";
  grid-gap: 0.8rem 0.4rem;
  flex: 1;
  margin-top: 0.5rem;
}
.dc-contract-card-items-wrapper--mobile {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-areas: "stake current-stake limit-order-info" "deal-cancel-fee buy-price limit-order-info";
  grid-gap: 0.8rem 0.4rem;
  flex: 1;
  padding: 0.4rem 0;
}
.dc-contract-card-items-wrapper--mobile .dc-contract-card-items-wrapper-group .dc-contract-card-item:first-child {
  margin-bottom: 0.8rem;
}
.dc-contract-card-items-wrapper--has-progress-slider {
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-areas: "stake current-stake date-expiry" "deal-cancel-fee buy-price date-expiry" "limit-order-info limit-order-info date-expiry";
}
.dc-contract-card-items-wrapper--has-progress-slider .dc-contract-card__limit-order-info {
  grid-template-columns: 1fr 1fr;
}
.dc-contract-card-items-wrapper--has-progress-slider .dc-contract-card__stop-loss {
  order: initial !important;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card--turbos .dc-contract-card-item__body {
    padding-left: 0;
  }
}
.dc-contract-card--turbos .dc-contract-card__buy-price {
  grid-column: 1/1;
  grid-row: 1/1;
  padding: 0.8rem 0 0;
}
.dc-contract-card--turbos .dc-contract-card__contract-value {
  grid-column: 2/2;
  grid-row: 1/2;
  padding: 0.8rem 0 0;
}
.dc-contract-card--turbos .dc-contract-card__entry-spot {
  grid-column: 1/2;
  grid-row: 2/2;
}
.dc-contract-card--turbos .dc-contract-card__barrier-level {
  grid-column: 1/1;
  grid-row: 3/3;
}
.dc-contract-card--turbos .dc-contract-card__limit-order-info {
  grid-row: 2/2;
  grid-column: 2/2;
}
.dc-contract-card--turbos .dc-contract-card__status {
  align-self: center;
  justify-self: center;
  grid-row: 1/3;
  grid-column: 3/3;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card--turbos {
    grid-template-columns: 1fr 1fr 1fr;
  }
}
.dc-contract-card__profit-loss {
  font-size: 1.2em;
  text-align: center;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  font-weight: bold;
}
.dc-contract-card__profit-loss-label {
  font-size: 1em;
  margin-bottom: 4px;
  font-weight: normal;
  white-space: nowrap;
  max-width: 90px;
}
.dc-contract-card__profit-loss--is-crypto {
  margin-left: -6px;
}
.dc-contract-card__profit-loss--negative {
  color: var(--text-loss-danger);
}
.dc-contract-card__profit-loss--negative:before {
  content: "-";
  color: inherit;
}
.dc-contract-card__profit-loss--positive {
  color: var(--text-profit-success);
}
.dc-contract-card__profit-loss--positive:before {
  content: "+";
  color: inherit;
}
.dc-contract-card-item__header {
  max-width: calc(100% - 2.4rem);
  line-height: 1.4;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card-item__header {
    max-width: none;
    max-width: initial;
  }
}
.dc-contract-card-item__body {
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.25;
  display: flex;
  align-self: flex-start;
  line-height: 1.5;
}
.dc-contract-card-item__body--is-crypto {
  margin-left: -6px;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card-item__body {
    padding-left: 0.4rem;
  }
}
.dc-contract-card-item__body--loss {
  color: var(--text-loss-danger) !important;
}
.dc-contract-card-item__body--loss:before {
  content: "-";
}
.dc-contract-card-item__body--profit {
  color: var(--text-profit-success) !important;
}
.dc-contract-card-item__body--profit:before {
  content: "+";
}
.dc-contract-card-item__total-profit-loss {
  padding: 0.8rem 0.8rem 0;
  border-top: 1px solid var(--general-section-1);
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 0.8rem;
}
.dc-contract-card-item__total-profit-loss .dc-contract-card-item__header,
.dc-contract-card-item__total-profit-loss .dc-contract-card-item__body {
  font-size: 1.4rem;
  line-height: 2rem;
  align-self: center;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card-item__total-profit-loss {
    flex-direction: row;
    justify-content: center;
    grid-column: 1/4;
  }
  .dc-contract-card-item__total-profit-loss-value {
    margin-left: 0.2rem;
  }
}
.dc-contract-card-item__total-profit-loss-label, .dc-contract-card-item__total-profit-loss-value {
  font-size: 1.4rem;
  line-height: 2rem;
}
.dc-contract-card__sell-button {
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.25s ease, opacity 0.25s linear;
  padding-top: 0.4rem;
  margin-top: 0.8rem;
  border-top: 1px solid var(--general-section-1);
  min-height: 4rem;
}
.dc-contract-card__sell-button--positions {
  padding: 0.8rem 0;
  margin: 0 0.8rem;
}
.dc-contract-card__sell-button--enter-done {
  opacity: 1;
}
.dc-contract-card__sell-button--enter, .dc-contract-card__sell-button--exit {
  opacity: 0;
  transform: translateY(-8px);
}
.dc-contract-card__sell-button--has-cancel-btn {
  justify-content: space-between;
  display: grid;
  grid-template-columns: 1fr 1fr;
}
.dc-contract-card__sell-button--has-cancel-btn .dc-btn--cancel {
  margin-left: 0.8rem;
  max-width: 10.5rem;
}
.dc-contract-card__sell-button .dc-remaining-time {
  border-radius: 0.4rem;
  font-size: 1.2rem;
  margin-left: 0.8rem;
}
.dc-contract-card__sell-button .dc-btn--sell,
.dc-contract-card__sell-button .dc-btn--cancel {
  height: 2.4rem;
}
.dc-contract-card__sell-button .dc-btn--sell .dc-btn__text,
.dc-contract-card__sell-button .dc-btn--cancel .dc-btn__text {
  font-size: 1.2rem;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card__sell-button .dc-btn--sell,
  .dc-contract-card__sell-button .dc-btn--cancel {
    height: 3.2rem;
  }
}
.dc-contract-card__indicative--movement {
  margin-left: 2px;
  width: 16px;
  height: 16px;
}
.dc-contract-card__indicative--movement-complete, .dc-contract-card__indicative--movement-complete:after {
  display: none;
}
.dc-contract-card__indicative--movement:after {
  content: "";
  width: 16px;
}
.dc-contract-card__status {
  min-width: 25%;
  display: flex;
  align-items: center;
  justify-content: center;
}
.dc-contract-card__status .result-icon, .dc-contract-card__status--accumulator-mobile-positions .dc-result__icon {
  margin-left: 0.4rem;
}
.dc-contract-card__limit-order-info {
  grid-area: limit-order-info;
  display: grid;
  grid-gap: 0.4rem 0;
  position: relative;
}
.dc-contract-card__limit-order-info .dc-contract-card__stop-loss {
  padding-bottom: 0.4rem;
}
.dc-contract-card__take-profit {
  position: relative;
}
.dc-contract-card__buy-price {
  grid-area: buy-price;
}
.dc-contract-card__deal-cancel-fee {
  grid-area: deal-cancel-fee;
}
.dc-contract-card__stake {
  grid-area: stake;
}
.dc-contract-card__date-expiry {
  grid-area: date-expiry;
}
.dc-contract-card__date-expiry .dc-contract-card-item__body {
  justify-content: flex-end;
}
.dc-contract-card__current-stake {
  grid-area: current-stake;
}
.dc-contract-card__sell-button-mobile {
  justify-self: center;
  align-self: center;
}
.dc-contract-card__sell-button-mobile .dc-btn--sell {
  height: 3.2rem !important;
}
.dc-contract-card__no-resale-msg {
  font-size: 1.1rem;
}
.dc-contract-card .contract-audit__wrapper {
  padding: 2px 0;
  width: 100%;
}
.dc-contract-card .contract-audit__wrapper--is-open {
  margin-top: 0.5em;
}
.dc-contract-card .contract-audit__toggle {
  margin: 0 0 -0.5em;
  width: 100%;
}
.dc-contract-card .contract-audit__label {
  font-size: 0.8em;
  text-align: left;
}
.dc-contract-card .contract-audit__value {
  font-size: 1em;
  text-align: left;
}
.dc-contract-card .dc-contract-type__type-wrapper {
  width: auto;
  width: initial;
  height: auto;
  height: initial;
}

/** @define dc-contract-type */
.dc-contract-type {
  display: flex;
  flex-direction: row;
  align-items: center;
  text-align: center;
  margin-left: -4px;
}
.dc-contract-type__type-wrapper {
  margin: 0;
  padding: 0.5em 0.3em;
  display: flex;
  justify-content: center;
  align-items: center;
  /* postcss-bem-linter: ignore */
}
.dc-contract-type__type-wrapper .category-type {
  width: 20px;
  height: 20px;
}
.dc-contract-type__type-label {
  width: 3.8em;
  line-height: 1.5;
  text-align: left;
}
.dc-contract-type__type-label--smarttrader-contract {
  width: 7rem;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-type__type-label--smarttrader-contract {
    width: 9rem;
  }
}
.dc-contract-type__type-label-trade-param {
  font-size: 1rem;
  line-height: 1rem;
  color: var(--text-less-prominent);
}

/** @define dc-btn; */
.dc-btn--sell {
  width: 100%;
}

/** @define dc-remaining-time; weak */
.dc-remaining-time {
  display: inline;
}

/** @define dc-tick-counter-bar; */
.dc-tick-counter-bar__container {
  grid-column-start: 1;
  grid-column-end: 3;
  position: relative;
  width: 100%;
  padding: 0;
  padding: initial;
  box-sizing: border-box;
  margin: 0.8rem 0;
  border-bottom: 1px solid var(--general-section-1);
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-tick-counter-bar__container {
    display: flex;
    flex-direction: column;
    align-items: center;
    border-bottom: 0;
    border-bottom: initial;
    margin: 0;
    margin: initial;
  }
}
.dc-tick-counter-bar__track {
  height: 1.8rem;
  background: var(--general-section-1);
  border-radius: 4px;
  position: relative;
  margin-bottom: 0.8rem;
  width: 100%;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-tick-counter-bar__track {
    display: flex;
    flex-direction: column;
    align-items: center;
    border-bottom: 0;
    border-bottom: initial;
    margin: 0.2rem 0 0.4rem;
  }
}
.dc-tick-counter-bar__text {
  position: absolute;
  color: var(--status-success);
  width: 100%;
  text-align: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-datepicker; weak */
.dc-datepicker {
  position: relative;
  display: inline-block;
  width: 100%;
}
.dc-datepicker__container {
  display: flex;
  border: 1px solid var(--border-normal);
  border-radius: 4px;
  align-items: center;
}
.dc-datepicker__container:hover:not(.dc-input--disabled) {
  border-color: var(--border-hover);
}
.dc-datepicker__container[focus-within] {
  border-color: var(--brand-secondary);
}
.dc-datepicker__container:focus-within {
  border-color: var(--brand-secondary);
}
.dc-datepicker__container[focus-within]:hover {
  border-color: var(--brand-secondary);
}
.dc-datepicker__container:focus-within:hover {
  border-color: var(--brand-secondary);
}
.dc-datepicker__container--error {
  border-color: var(--brand-red-coral) !important;
}
.dc-datepicker__container--disabled {
  border-color: var(--general-disabled);
}
.dc-datepicker__hint {
  margin-left: 1.3rem;
  position: absolute;
  top: 4.1rem;
}
.dc-datepicker__hint--relative {
  margin-left: 1.2rem;
  position: relative;
  top: auto;
  top: initial;
}
.dc-datepicker__input .dc-input__field {
  width: 100%;
  border-radius: 4px;
  box-sizing: border-box;
  -webkit-appearance: none;
  -moz-appearance: none;
}
.dc-datepicker__input .dc-input__field:hover:not(:disabled) {
  cursor: pointer;
  border-color: var(--border-hover);
}
.dc-datepicker__input .dc-input__field:focus {
  outline: none;
}
.dc-datepicker__input .dc-input__field:active {
  border-color: var(--border-active);
}
.dc-datepicker__input .dc-input__field::-ms-clear {
  display: none;
}
.dc-datepicker__input .dc-input__field::-moz-placeholder {
  /* Fix value placeholder for datepicker for Firefox 19+ */
  line-height: 4rem;
}
.dc-datepicker__input--has-leading-icon .dc-input__field {
  text-align: center;
}
.dc-datepicker .dc-icon {
  margin-bottom: 0.3rem;
  margin-right: -0.2rem;
}
.dc-datepicker .dc-icon:not(.dc-icon--disabled) {
  cursor: pointer;
}
.dc-datepicker__picker {
  position: absolute;
  z-index: 2;
  transform: translate3d(0, 0, 0);
  opacity: 1;
}
.dc-datepicker__picker--left-enter, .dc-datepicker__picker--left-exit {
  transform: translate3d(-275px, 0, 0);
  opacity: 0;
}
.dc-datepicker__picker--left-enter-done {
  transform: translate3d(-295px, 0, 0);
  opacity: 1;
}
.dc-datepicker__picker--left-enter-done, .dc-datepicker__picker--left-exit {
  transition: transform 0.25s ease, opacity 0.25s linear;
}
.dc-datepicker__picker--top-enter, .dc-datepicker__picker--top-exit {
  transform: translate3d(0, 0, 0);
  opacity: 0;
}
.dc-datepicker__picker--top-enter-done {
  transform: translate3d(0, -40px, 0);
  opacity: 1;
}
.dc-datepicker__picker--top-enter-done, .dc-datepicker__picker--top-exit {
  transition: transform 0.25s ease, opacity 0.25s linear;
}
.dc-datepicker__picker--bottom-enter, .dc-datepicker__picker--bottom-exit {
  transform: translate3d(0, 0, 0);
  opacity: 0;
}
.dc-datepicker__picker--bottom-enter-done {
  transform: translate3d(0, 40px, 0);
  opacity: 1;
}
.dc-datepicker__picker--bottom-enter-done, .dc-datepicker__picker--bottom-exit {
  transition: transform 0.25s ease, opacity 0.25s linear;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-datepicker--hint {
    margin-bottom: 5rem;
  }
  .dc-datepicker__native {
    opacity: 0;
    width: 100%;
    min-width: calc(100% - 1rem);
    position: absolute;
    height: 38px;
  }
  .dc-datepicker__display {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    padding-left: 1rem;
    height: 38px;
    position: relative;
    width: 100%;
    color: var(--text-prominent);
  }
  .dc-datepicker__display-text {
    background-color: inherit;
    padding-top: 0.2rem;
  }
  .dc-datepicker__display-text--has-error {
    padding-top: 0;
    padding-top: initial;
  }
  .dc-datepicker__calendar-icon {
    pointer-events: none;
    margin-right: 1rem;
  }
  .dc-datepicker__placeholder {
    color: var(--text-general);
    transform: none;
    transition: transform 0.25s linear;
    position: absolute;
    font-size: 1.4rem;
    left: 1.3rem;
  }
  .dc-datepicker__placeholder--has-value {
    transform: translate3d(-14px, -20px, 0px) scale(0.7);
    color: var(--text-general);
    background-color: var(--fill-normal);
  }
  .dc-datepicker__placeholder--has-error {
    color: var(--brand-red-coral);
  }
  .dc-datepicker__placeholder--is-focused {
    color: var(--brand-secondary);
  }
  .dc-datepicker__error {
    display: flex;
    position: absolute;
    top: 4.5rem;
    left: 1.3rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define data-list; weak */
.data-list {
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column;
}
.data-list__body {
  flex: 1;
}
.data-list__body-wrapper {
  display: flex;
  flex-direction: column;
  height: 100%;
}
.data-list__footer {
  width: 100%;
  background: var(--general-main-1);
  border-top: 2px solid var(--border-disabled);
  display: flex;
  align-items: center;
  position: relative;
}
.data-list__item {
  height: inherit;
}
.data-list__item--wrapper {
  height: inherit;
  text-decoration: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
}
@media (min-width: 320px) and (max-width: 767px) {
  .data-list__item {
    border-radius: 4px;
  }
}
.data-list__row {
  display: flex;
  flex-direction: row;
  padding: 4px 16px;
  width: 100%;
}
.data-list__row > * {
  flex: 1;
}
.data-list__row-content {
  font-size: 1.4rem;
  line-height: 2rem;
  color: var(--text-general);
}
.data-list__row-cell--amount {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  flex: none;
}
.data-list__row-title {
  font-size: 1.4rem;
  font-weight: bold;
  color: var(--text-prominent);
  line-height: 2rem;
}
@media (min-width: 320px) and (max-width: 767px) {
  .data-list__row-title {
    font-size: 1.2rem;
  }
}
.data-list__row-divider {
  margin: 0 1.6rem;
}
.data-list__row-divider:after {
  content: "";
  display: block;
  border-top: 1px solid var(--general-main-1);
}
.data-list__row--wrapper:not(.data-list__item--dynamic-height-wrapper) {
  height: 100%;
}
.data-list__row--timer {
  flex: none;
}
.data-list__desc--wrapper {
  height: inherit;
  display: flex;
  text-align: center;
  align-items: center;
  font-size: var(--text-size-xxs);
  color: var(--text-general);
  padding: 1rem;
}

/* stylelint-disable-next-line plugin/selector-bem-pattern */
.ReactVirtualized__List {
  outline: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-data-table */
.dc-data-table {
  display: flex;
  flex-direction: column;
}

/** @define table */
.table {
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: default;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general);
}
.table__cell {
  padding: 0.75em;
  display: flex;
  align-items: center;
}
.table__cell:first-child {
  padding-left: 0;
}
.table__cell:last-child {
  padding-right: 0;
}
.table__row {
  display: grid;
  grid-auto-rows: max-content;
  padding: 0 1.6em;
  box-sizing: border-box;
  text-decoration: none;
  position: relative;
}
.table__row, .table__row:active, .table__row:visited {
  color: var(--text-general);
}
.table__row--preloader {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  max-height: 64px;
  width: 100%;
}
.table__row--icon {
  margin-left: 1rem;
}
.table__head {
  border-bottom: 2px solid var(--general-section-1);
  height: 52px;
}
.table__head .table__row {
  color: var(--text-prominent);
  height: 100%;
  border-bottom: none;
}
.table__body {
  overflow: hidden;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  flex-basis: 0;
}
.table__body .table__row-link:hover {
  background-color: var(--state-hover);
  cursor: pointer;
}
.table__body .table__row:last-child {
  border-bottom: none;
}
.table__head, .table__foot {
  font-weight: 500;
  white-space: nowrap;
}
.table__foot {
  border-top: 2px solid var(--general-section-1);
}
.table__foot .table__row {
  color: var(--text-general);
  border-bottom: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-dialog */
.dc-dialog {
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  flex-direction: column;
  z-index: 999;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}
.dc-dialog__wrapper {
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
  transition: opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
  background-color: var(--overlay-outside-dialog);
}
.dc-dialog__wrapper--enter, .dc-dialog__wrapper--exit {
  opacity: 0;
}
.dc-dialog__wrapper--enter .dc-dialog__dialog, .dc-dialog__wrapper--exit .dc-dialog__dialog {
  transform: translate3d(0, 50px, 0);
  opacity: 0;
}
.dc-dialog__wrapper--enter-done {
  opacity: 1;
}
.dc-dialog__wrapper--enter-done .dc-dialog__dialog {
  transform: translate3d(0, 0, 0);
  opacity: 1;
}
.dc-dialog__wrapper--has-portal {
  background-color: transparent;
}
.dc-dialog__dialog {
  max-width: 560px;
  max-height: 338px;
  min-width: 440px;
  min-height: 176px;
  margin-top: -48px;
  padding: 2.4rem;
  border-radius: 8px;
  box-sizing: border-box;
  display: flex;
  justify-content: space-around;
  flex-direction: column;
  align-items: center;
  box-shadow: 0 2px 8px 0 var(--shadow-menu);
  background-color: var(--general-main-2);
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
}
.dc-dialog__header-wrapper {
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}
.dc-dialog__header-wrapper--end {
  justify-content: flex-end;
}
.dc-dialog__header--title {
  align-self: flex-start;
}
.dc-dialog__header--close {
  cursor: pointer;
}
.dc-dialog__content {
  align-self: flex-start;
  margin-bottom: 2.4rem;
  max-width: calc(440px - 4.8rem);
  width: 100%;
  /* postcss-bem-linter: ignore */
}
.dc-dialog__content .dc-input__label {
  background-color: var(--general-main-2);
}
.dc-dialog__content--centered {
  align-self: center;
}
.dc-dialog__footer {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  width: 100%;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-dialog__footer {
    flex-wrap: wrap;
    align-items: flex-start;
  }
}
.dc-dialog__button {
  margin-left: 0.8rem;
}
@media (min-width: 320px) and (max-width: 767px) {
  .dc-dialog__button:not(:last-child) {
    margin-bottom: 1rem;
  }
}

@media screen and (max-width: 560px) {
  .dc-dialog__dialog {
    min-width: auto;
  }
  .dc-dialog__dialog--has-margin {
    min-width: 0;
    min-width: initial;
    width: calc(100vw - 4.8rem);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.app-icon {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  overflow: hidden;
}
.app-icon__top-icon {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
}
.app-icon__bottom-icon {
  position: absolute;
  bottom: 0;
  right: 0;
}
.app-icon--small {
  width: 4rem;
  height: 2.4rem;
}
.app-icon--small .app-icon__top-icon {
  top: 0.1rem;
  left: 0.1rem;
}
.app-icon--small .app-icon__bottom-icon {
  bottom: 0.1rem;
  right: 0.1rem;
}
.app-icon--medium {
  width: 6.4rem;
  height: 4rem;
}
.app-icon--medium .app-icon__top-icon {
  top: 0.2rem;
  left: 0.2rem;
}
.app-icon--medium .app-icon__bottom-icon {
  bottom: 0.2rem;
  right: 0.2rem;
}
.app-icon--large {
  width: 12.8rem;
  height: 8rem;
}
.app-icon--large .app-icon__top-icon {
  top: 0.4rem;
  left: 0.4rem;
}
.app-icon--large .app-icon__bottom-icon {
  bottom: 0.4rem;
  right: 0.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.compare-cfd-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.compare-cfd-header-navigation {
  display: flex;
  align-items: center;
  gap: 1rem;
  cursor: pointer;
}
.compare-cfd-header-title {
  flex: 1;
}
@media (min-width: 320px) and (max-width: 767px) {
  .compare-cfd-header-title {
    text-align: center;
    padding: 1rem;
  }
}

.compare-cfd-account {
  max-width: 123.2rem;
  margin: auto;
}
.compare-cfd-account-container {
  margin: 1.5rem;
}
@media (min-width: 320px) and (max-width: 767px) {
  .compare-cfd-account-container {
    margin: 0;
    overflow-x: auto;
    overflow-y: scroll;
    padding: 0 0 20.1rem;
    max-height: 80rem;
    width: 100%;
  }
}
.compare-cfd-account-container__card-count {
  display: flex;
  justify-content: center;
  margin-left: 13rem;
}
.compare-cfd-account-container__card-count--mobile {
  margin-left: 10.5rem;
}
.compare-cfd-account-main-container {
  padding-left: 1rem;
  padding-right: 1rem;
}
.compare-cfd-account-card-container {
  position: relative;
  overflow: hidden;
  width: 27rem;
  border: 1px solid var(--general-hover);
  border-radius: 2.4rem;
}
.compare-cfd-account-card-container:hover {
  box-shadow: 0 2px 8px 0 var(--shadow-menu);
}
@media (min-width: 320px) and (max-width: 767px) {
  .compare-cfd-account-card-container {
    width: 18rem;
  }
}
.compare-cfd-account-card-container__eu-clients {
  position: relative;
  top: 0.5rem;
  text-align: center;
}
.compare-cfd-account-card-container__banner {
  position: absolute;
  z-index: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1.5rem;
  width: 15rem;
  height: 2rem;
  background: var(--status-transfer);
  color: var(--text-colored-background);
  transform: translateX(17rem) translateY(-2rem) rotate(45deg);
}
.compare-cfd-account-outline {
  display: flex;
  flex-direction: column;
  padding: 4rem 2.4rem 0;
  border-radius: 2.4rem;
}
@media (min-width: 320px) and (max-width: 767px) {
  .compare-cfd-account-outline {
    padding: 7rem 1.5rem 0;
  }
}
.compare-cfd-account-text-container {
  max-height: 25.5rem;
}
.compare-cfd-account-text-container--demo {
  max-height: 13.5rem;
}
.compare-cfd-account-text-container__separator {
  margin: 0.9rem;
}
.compare-cfd-account-icon-title {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding-top: 2rem;
  align-items: center;
}
.compare-cfd-account-icon-title__separator {
  display: flex;
  align-items: center;
  gap: 0.8em;
}
.compare-cfd-account-instrument-icon {
  display: flex;
  align-items: center;
  margin: 0.2rem;
  cursor: not-allowed;
}
.compare-cfd-account-labuan-tooltip {
  position: relative;
  left: 0.5rem;
  top: 0.2rem;
}
.compare-cfd-account-labuan-tooltip--msg {
  position: relative;
  width: 62%;
}
@media (min-width: 320px) and (max-width: 767px) {
  .compare-cfd-account-labuan-tooltip--msg {
    display: block;
    position: fixed;
    width: 15.2rem;
    right: 0;
  }
}
.compare-cfd-account-platform-label {
  background-color: var(--header-background-mt5);
  padding: 0.9rem;
  border-top-left-radius: 1.4rem;
  border-top-right-radius: 1.4rem;
}
.compare-cfd-account-platform-label--other-cfds {
  background-color: var(--header-background-others);
}
.compare-cfd-account-underline {
  border-top: 0.5rem solid var(--less-prominent);
  width: 21.3rem;
}
.compare-cfd-account__button {
  width: calc(100% - 4rem);
  height: 4rem;
  margin: 2rem;
}

.card-list {
  display: flex;
  gap: 2rem;
}

.trading-instruments__span {
  position: relative;
  top: 0.2rem;
  font-size: 1.6rem;
  color: var(--text-red);
}
.trading-instruments__text {
  margin-left: 0.5rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.cashier__counter {
  position: absolute;
  top: 0.4rem;
  right: -1.5rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.terms-of-use {
  margin: 0 8rem !important;
  width: 84% !important;
}

.terms-of-use {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  padding-bottom: 0;
  padding-bottom: initial;
}

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use {
    margin: 0 !important;
    margin: initial !important;
    width: auto !important;
    width: initial !important;
  }
}
.terms-of-use__checkbox {
  margin-top: 1.6rem;
}

.terms-of-use__checkbox:last-of-type {
  margin-bottom: 5rem;
}

.terms-of-use__hr {
  height: 2px;
  margin: 1.6rem 0 0;
  width: 100%;
  border-top: 1px solid var(--general-section-1);
}

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use__hr {
    border-top-width: 2px;
    border-color: var(--border-disabled);
    width: 100%;
  }
}
.terms-of-use h4 {
  margin: 1rem 0;
  text-transform: none;
}

.terms-of-use p {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  text-transform: none;
  color: var(--text-general);
}

.terms-of-use input {
  display: none;
}

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use .dc-checkbox__box {
    width: 2.4rem;
    height: 2.4rem;
  }
  .terms-of-use .dc-checkbox__box .dc-icon {
    width: 2.4rem;
    height: 2.4rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.currency-list {
  width: 100%;
}
.currency-list form {
  width: 100%;
}
.currency-list__items {
  display: flex;
  flex-wrap: wrap;
  width: 768px;
  margin: auto;
}
.currency-list__items__center {
  justify-content: center !important;
}
@media (min-width: 1024px) {
  .currency-list__items {
    justify-content: flex-start;
  }
}
@media (min-width: 320px) and (max-width: 767px) {
  .currency-list__items {
    display: grid;
    grid-template-columns: 1fr 1fr;
    justify-items: center;
    width: 100%;
  }
}
.currency-list__item {
  align-items: center;
  border-radius: 8px;
  display: inline-flex;
  flex-direction: column;
  height: 128px;
  width: 160px;
  justify-content: space-around;
  margin: 1.6rem 1.6rem 0;
  min-width: 128px;
}
.currency-list__item:hover:not(.currency-list__item--selected) {
  cursor: pointer;
  border: 1px solid var(--border-hover);
}
.currency-list__item--current {
  pointer-events: none;
}
.currency-list__item--current svg {
  opacity: 0.08;
}
.currency-list__item--current .label {
  color: var(--text-disabled);
}
.currency-list__item--selected {
  border: 2px solid var(--border-active);
}
.currency-list__item--selected .label {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  color: var(--text-prominent);
}
.currency-list__item > div {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}
.currency-list__item .currency-list__icon {
  height: 48px;
  width: 48px;
  margin-bottom: 1em;
}
@media (min-width: 320px) and (max-width: 767px) {
  .currency-list__item .currency-list__icon {
    height: 64px;
    width: 64px;
    margin-bottom: 0.8rem;
  }
}
.currency-list__item-text {
  text-align: center;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general);
}
@media (min-width: 320px) and (max-width: 767px) {
  .currency-list__item {
    margin: 1.6rem 2rem 0.8rem;
    padding: 0.8rem 0;
    width: 85%;
    min-width: 0;
    min-width: initial;
  }
}
@media only screen and (min-width: 320px) and (max-width: 767px) and (max-width: 340px) {
  .currency-list__item {
    margin: 1.6rem 1rem 0.8rem;
    width: 136px;
    height: 136px;
  }
}
.currency-list__radio-button {
  display: none;
}
.currency-list__popover {
  position: relative;
  left: 4.8rem;
  top: -4.8rem;
  margin-top: -16px;
}
@media (min-width: 320px) and (max-width: 767px) {
  .currency-list__popover {
    right: 0;
    top: -5.8rem;
  }
}
@media (min-width: 1024px) {
  .currency-list__loading-wrapper {
    min-width: 768px;
  }
}

.currency-hr {
  height: 2px;
  margin: 1.6rem auto;
  width: 90%;
  border-top: 1px solid var(--general-section-1);
}
@media (min-width: 320px) and (max-width: 767px) {
  .currency-hr {
    border-top-width: 2px;
    border-color: var(--border-disabled);
    margin-left: -2.4rem;
    width: calc(100% + 2.4rem);
  }
}

.currency-selector__subheading {
  margin-top: 0.8rem;
}
.currency-selector__radio-group--with-margin--is-header {
  font-size: 1.6rem;
  margin: 0.4rem 0 0;
  font-weight: bold;
  color: var(--text-prominent);
}
@media (min-width: 1024px) {
  .currency-selector__radio-group--with-margin {
    margin-bottom: 0.4rem;
    margin-left: auto;
    margin-right: auto;
    width: 768px;
  }
}
.currency-selector__deposit-warn {
  width: 78%;
  margin: calc(3% - 1rem) auto;
  padding: 10px;
}

.add-currency__title {
  margin-top: 1rem;
}
.add-currency__sub-title {
  margin-top: 0.8rem;
}
.add-currency__underline {
  border-bottom: 1px solid var(--general-section-1);
  width: 55rem;
  margin: 1.6rem auto 0;
}
.add-currency__note {
  background-color: var(--general-section-1);
  width: 55rem;
  margin: 1.1rem auto 1rem;
  padding: 0.5rem;
}
.add-currency__note-wrapper {
  width: 100%;
  display: flex;
  align-self: flex-end;
}
.add-currency__wizard-header {
  margin-top: 1rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.currency-selection-modal__header {
  width: 100%;
  position: relative;
  display: inline-flex;
  align-items: center;
  padding: 1.6rem 2.4rem;
  border-bottom: 2px solid var(--general-section-1);
}
.currency-selection-modal__header .close-icon {
  margin-left: auto;
  cursor: pointer;
}
.currency-selection-modal__body {
  display: flex;
  flex-direction: column;
  height: 31.2rem;
  padding: 0.8rem 0.8rem 2.8rem;
  overflow-y: scroll;
}
.currency-selection-modal__body .currency-item-card {
  width: 100%;
  height: 5.4rem;
  display: inline-flex;
  align-items: center;
  padding: 0.8rem 1.6rem;
  border-radius: 4px;
  cursor: pointer;
}
.currency-selection-modal__body .currency-item-card:hover {
  background-color: var(--state-hover);
}
.currency-selection-modal__body .currency-item-card--active {
  background: var(--state-active);
}
.currency-selection-modal__body .currency-item-card__icons {
  margin-right: 1.6rem;
}
.currency-selection-modal__body .currency-item-card__details {
  display: flex;
  flex-direction: column;
}
.currency-selection-modal__body .currency-item-card__balance {
  margin-left: auto;
}
.currency-selection-modal__bottom-controls {
  width: 100%;
  height: 7.2rem;
  position: absolute;
  bottom: 0;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 1.6rem 2.4rem;
  border-top: 2px solid var(--general-section-1);
  background-color: var(--general-main-1);
  z-index: 4;
}
.currency-selection-modal__bottom-controls .block-button {
  width: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
@media (min-width: 320px) and (max-width: 767px) {
  .open-real-account-dialog .dc-dialog__dialog {
    max-width: 32rem;
  }
  .open-real-account-dialog .dc-dialog__content {
    font-size: 1.2rem;
  }
  .open-real-account-dialog .dc-dialog__button {
    font-size: 1.2rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.mt5-notification-modal-body {
  border-top: 2px solid #f2f3f4;
}
@media (min-width: 320px) and (max-width: 767px) {
  .mt5-notification-modal-description {
    margin: 2rem;
  }
  .mt5-notification-modal-description--button {
    display: flex;
    width: 100%;
  }
  .mt5-notification-modal-description--footer {
    padding: 1rem 1.6rem;
  }
}

.mt5-notification-list {
  list-style: disc;
  margin-top: 0.4rem;
}
.mt5-notification-list-container {
  padding-left: 1.5rem;
  font-size: 1.6rem;
  color: var(--text-general);
}
.mt5-notification-list__link {
  color: var(--text-red);
  cursor: pointer;
  text-decoration: underline;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.need-real-account-for-cashier-dialog .dc-dialog__header-wrapper {
  margin: 0 0 2rem;
}
@media (min-width: 320px) and (max-width: 767px) {
  .need-real-account-for-cashier-dialog .dc-dialog__content, .need-real-account-for-cashier-dialog .dc-dialog__button {
    font-size: 1.2rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
@media (min-width: 320px) and (max-width: 767px) {
  .ready-to-deposit-dialog .dc-dialog__content, .ready-to-deposit-dialog .dc-dialog__button {
    font-size: 1.2rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
.devtools__toggle-button {
  background: #ff444f;
  border: 0px;
  padding: 0px;
  position: fixed;
  z-index: 99999;
  font-size: 1.5em;
  margin: 0.5em;
  cursor: pointer;
  bottom: 0px;
  right: 0px;
  width: 40px;
  height: 40px;
  border-radius: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: #fff;
  padding-bottom: 2px;
  font-weight: bold;
  transition: all 0.2s;
}
.devtools__toggle-button:hover {
  scale: 1.1;
}
.devtools__panel {
  font-size: max(12px, min(1.5vw, 14px));
  font-family: sans-serif;
  display: flex;
  background-color: rgb(11, 21, 33);
  color: #fff;
  height: 290px;
  position: fixed;
  direction: ltr;
  bottom: 0px;
  border-top: 1px solid rgb(63, 78, 96);
  transform-origin: center top;
  box-shadow: rgba(0, 0, 0, 0.3) 0px 0px 20px;
  z-index: 100000;
  transition: all 0.2s ease 0s;
  left: 0px;
  width: 100%;
  max-height: 90%;
}
.devtools__panel--open {
  visibility: visible;
  opacity: 1;
  pointer-events: all;
  transform: translateY(0px) scale(1);
}
.devtools__panel--close {
  visibility: hidden;
  opacity: 0;
  pointer-events: none;
  transform: translateY(15px) scale(1.02);
}
.devtools__panel-left {
  flex: 1 1 500px;
  min-height: 40%;
  max-height: 100%;
  overflow: auto;
  border-right: 1px solid rgb(34, 46, 62);
  display: flex;
  flex-direction: column;
}
.devtools__panel-right {
  flex: 1 1 500px;
  display: flex;
  flex-direction: column;
  overflow: auto;
  height: 100%;
}
.devtools__close-button {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  font-size: 0.9em;
  font-weight: bold;
  background: rgb(63, 78, 96);
  border: 0px;
  border-radius: 0.3em;
  color: #fff;
  padding: 0.5em;
  cursor: pointer;
  position: absolute;
  z-index: 99999;
  margin: 0.5em;
  bottom: 0px;
  right: 0px;
}
.devtools__panel-title {
  padding: 0.5em;
  background: rgb(19, 35, 55);
  position: sticky;
  top: 0px;
  z-index: 1;
}
.devtools__checkbox-container {
  display: flex;
  flex-wrap: wrap;
}
.devtools__checkbox {
  margin: 10px 5px;
}
.devtools__checkbox-label {
  color: #fff;
}
.devtools__endpoint-container {
  margin: 10px;
  gap: 15px;
  display: flex;
  flex-direction: column;
}
.devtools__endpoint-container a {
  color: #ff444f;
}
.devtools__endpoint-container .dc-input__field {
  color: #fff;
}
.devtools__endpoint-container .dc-input__label {
  background: rgb(11, 21, 33);
}
.devtools__endpoint-container .dc-input__field ~ label {
  color: #fff !important;
}
.devtools__endpoint-actions {
  display: flex;
  gap: 15px;
}
