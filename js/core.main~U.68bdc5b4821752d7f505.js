/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["main~U"],{

/***/ "../../account/dist/account/css/terms-of-use.css":
/*!*******************************************************!*\
  !*** ../../account/dist/account/css/terms-of-use.css ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vYWNjb3VudC9kaXN0L2FjY291bnQvY3NzL3Rlcm1zLW9mLXVzZS5jc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL2FjY291bnQvZGlzdC9hY2NvdW50L2Nzcy90ZXJtcy1vZi11c2UuY3NzPzY1NTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../account/dist/account/css/terms-of-use.css\n");

/***/ }),

/***/ "../../account/dist/account/js/address-details-config.js":
/*!***************************************************************!*\
  !*** ../../account/dist/account/js/address-details-config.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Configs/address-details-config.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* unused harmony export transformConfig */\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"@deriv/translations\\\");\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_translations__WEBPACK_IMPORTED_MODULE_1__);\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; return _typeof = \\\"function\\\" == typeof Symbol && \\\"symbol\\\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \\\"function\\\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }, _typeof(obj); }\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \\\"string\\\"); return _typeof(key) === \\\"symbol\\\" ? key : String(key); }\\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \\\"object\\\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \\\"default\\\"); if (_typeof(res) !== \\\"object\\\") return res; throw new TypeError(\\\"@@toPrimitive must return a primitive value.\\\"); } return (hint === \\\"string\\\" ? String : Number)(input); }\\n\\n\\nvar address_details_config = function address_details_config(_ref) {\\n  var _account_settings$add, _account_settings$add2, _account_settings$add3, _account_settings$add4, _account_settings$add5;\\n  var account_settings = _ref.account_settings,\\n    is_svg = _ref.is_svg;\\n  var is_gb = account_settings.country_code === 'gb';\\n  if (!account_settings) {\\n    return {};\\n  }\\n  var base_case = {\\n    address_line_1: {\\n      supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$add = account_settings.address_line_1) !== null && _account_settings$add !== void 0 ? _account_settings$add : '',\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('First line of address is required')], ['length', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Only {{max}} characters, please.', {\\n        max: 70\\n      }), {\\n        max: 70\\n      }], ['regular', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Use only the following special characters: {{permitted_characters}}', {\\n        permitted_characters: _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.address_permitted_special_characters_message,\\n        interpolation: {\\n          escapeValue: false\\n        }\\n      }), {\\n        regex: _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.regex_checks.address_details.address_line_1\\n      }], ['po_box', (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getErrorMessages)().po_box()]].filter(function (x) {\\n        return is_svg ? x.indexOf('po_box') !== 0 : x;\\n      })\\n    },\\n    address_line_2: {\\n      supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$add2 = account_settings.address_line_2) !== null && _account_settings$add2 !== void 0 ? _account_settings$add2 : '',\\n      rules: [['length', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Only {{max}} characters, please.', {\\n        max: 70\\n      }), {\\n        max: 70\\n      }], ['regular', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Use only the following special characters: {{permitted_characters}}', {\\n        permitted_characters: _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.address_permitted_special_characters_message,\\n        interpolation: {\\n          escapeValue: false\\n        }\\n      }), {\\n        regex: _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.regex_checks.address_details.address_line_2\\n      }], ['po_box', (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getErrorMessages)().po_box()]].filter(function (x) {\\n        return is_svg ? x.indexOf('po_box') !== 0 : x;\\n      })\\n    },\\n    address_city: {\\n      supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$add3 = account_settings.address_city) !== null && _account_settings$add3 !== void 0 ? _account_settings$add3 : '',\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('City is required')], ['length', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Only {{max}} characters, please.', {\\n        max: 99\\n      }), {\\n        max: 99\\n      }], ['regular', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Only letters, periods, hyphens, apostrophes, and spaces, please.'), {\\n        regex: _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.regex_checks.address_details.address_city\\n      }]]\\n    },\\n    address_state: {\\n      supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$add4 = account_settings.address_state) !== null && _account_settings$add4 !== void 0 ? _account_settings$add4 : '',\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('State is required')], ['regular', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('State is not in a proper format'), {\\n        regex: _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.regex_checks.address_details.address_state\\n      }]]\\n    },\\n    address_postcode: {\\n      supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$add5 = account_settings.address_postcode) !== null && _account_settings$add5 !== void 0 ? _account_settings$add5 : '',\\n      rules: [['length', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please enter a {{field_name}} under {{max_number}} characters.', {\\n        field_name: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('postal/ZIP code'),\\n        max_number: 20,\\n        interpolation: {\\n          escapeValue: false\\n        }\\n      }), {\\n        min: 0,\\n        max: 20\\n      }], ['regular', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Letters, numbers, spaces, hyphens only'), {\\n        regex: _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.regex_checks.address_details.address_postcode\\n      }]]\\n    }\\n  };\\n  if (is_gb) {\\n    var _account_settings$add6;\\n    var gb_case = _objectSpread(_objectSpread({}, base_case), {}, {\\n      address_postcode: {\\n        supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n        default_value: (_account_settings$add6 = account_settings.address_postcode) !== null && _account_settings$add6 !== void 0 ? _account_settings$add6 : '',\\n        rules: [['length', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please enter a {{field_name}} under {{max_number}} characters.', {\\n          field_name: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('postal/ZIP code'),\\n          max_number: 20,\\n          interpolation: {\\n            escapeValue: false\\n          }\\n        }), {\\n          min: 0,\\n          max: 20\\n        }], ['regular', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Letters, numbers, spaces, hyphens only'), {\\n          regex: _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.regex_checks.address_details.address_postcode\\n        }], ['regular', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Our accounts and services are unavailable for the Jersey postal code.'), {\\n          regex: _deriv_shared__WEBPACK_IMPORTED_MODULE_0__.regex_checks.address_details.non_jersey_postcode\\n        }]]\\n      }\\n    });\\n    return gb_case;\\n  }\\n  return base_case;\\n};\\nvar addressDetailsConfig = function addressDetailsConfig(_ref2, AddressDetails) {\\n  var upgrade_info = _ref2.upgrade_info,\\n    real_account_signup_target = _ref2.real_account_signup_target,\\n    residence = _ref2.residence,\\n    account_settings = _ref2.account_settings;\\n  var is_svg = (upgrade_info === null || upgrade_info === void 0 ? void 0 : upgrade_info.can_upgrade_to) === 'svg';\\n  var config = address_details_config({\\n    account_settings: account_settings,\\n    is_svg: is_svg\\n  });\\n  var disabled_items = account_settings.immutable_fields;\\n  var is_gb_residence = residence === 'gb';\\n  return {\\n    header: {\\n      active_title: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Complete your address details'),\\n      title: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Address')\\n    },\\n    body: AddressDetails,\\n    form_value: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getDefaultFields)(real_account_signup_target, config),\\n    props: {\\n      validate: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.generateValidationFunction)(real_account_signup_target, transformConfig(transformForResidence(config, residence), real_account_signup_target)),\\n      disabled_items: disabled_items,\\n      is_gb_residence: is_gb_residence\\n    },\\n    passthrough: ['residence_list', 'is_fully_authenticated', 'has_real_account'],\\n    icon: 'IcDashboardAddress'\\n  };\\n};\\n\\n/**\\n * Transform general rules based on residence\\n * @name transformForResidence\\n * @param  rules - Original rules\\n * @param residence - Client's residence\\n * @return rules - Transformed rules\\n */\\nvar transformForResidence = function transformForResidence(rules, residence) {\\n  // Isle of Man Clients do not need to fill out state since API states_list is empty.\\n  if (residence === 'im') {\\n    var _rules$address_state$;\\n    (_rules$address_state$ = rules.address_state.rules) === null || _rules$address_state$ === void 0 ? void 0 : _rules$address_state$.shift();\\n  }\\n  // GB residence are required to fill in the post code.\\n  if (/^(im|gb)$/.test(residence)) {\\n    var _rules$address_postco;\\n    (_rules$address_postco = rules.address_postcode.rules) === null || _rules$address_postco === void 0 ? void 0 : _rules$address_postco.splice(0, 0, ['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Postal/ZIP code is required')]);\\n  }\\n  return rules;\\n};\\nvar transformConfig = function transformConfig(config, real_account_signup_target) {\\n  // Remove required rule for svg clients and maltainvest clients\\n  if (!real_account_signup_target || real_account_signup_target === 'svg' || real_account_signup_target === 'maltainvest') {\\n    var _config$address_state;\\n    (_config$address_state = config.address_state.rules) === null || _config$address_state === void 0 ? void 0 : _config$address_state.shift();\\n  }\\n  return config;\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addressDetailsConfig);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Configs/address-details-config.ts\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_26910__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_26910__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_26910__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_26910__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_26910__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_26910__.o(definition, key) && !__nested_webpack_require_26910__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_26910__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_26910__(\"./Configs/address-details-config.ts\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/address-details-config.js\n");

/***/ }),

/***/ "../../account/dist/account/js/currency-radio-button-group.js":
/*!********************************************************************!*\
  !*** ../../account/dist/account/js/currency-radio-button-group.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Components/currency-selector/radio-button-group.tsx\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\\\"@deriv/translations\\\");\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_deriv_translations__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\\\"@deriv/components\\\");\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_deriv_components__WEBPACK_IMPORTED_MODULE_3__);\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \\\"undefined\\\" != typeof Symbol && arr[Symbol.iterator] || arr[\\\"@@iterator\\\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\\\"return\\\"] && (_r = _i[\\\"return\\\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\n\\n/**\\n * Wrapper component for RadioButton\\n * @name RadioButtonGroup\\n * @param {string} className - class name for styling\\n * @param {boolean} is_fiat - is fiat currency\\n * @param {boolean} is_title_enabled - is title enabled\\n * @param {number} item_count - number of items\\n * @param {string} label - label for the radio button\\n * @param {React.ReactNode} description - description for the radio button\\n * @param {boolean} has_fiat - has fiat currency\\n * @returns {React.ReactNode} - returns a React node\\n */\\nvar RadioButtonGroup = function RadioButtonGroup(_ref) {\\n  var children = _ref.children,\\n    label = _ref.label,\\n    className = _ref.className,\\n    _ref$is_title_enabled = _ref.is_title_enabled,\\n    is_title_enabled = _ref$is_title_enabled === void 0 ? true : _ref$is_title_enabled,\\n    is_fiat = _ref.is_fiat,\\n    item_count = _ref.item_count,\\n    description = _ref.description,\\n    has_fiat = _ref.has_fiat;\\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\\n    _useState2 = _slicedToArray(_useState, 2),\\n    is_currency_selected = _useState2[0],\\n    setIsCurrencySelected = _useState2[1];\\n  var onCurrencyClicked = function onCurrencyClicked() {\\n    setIsCurrencySelected(true);\\n  };\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\\\"div\\\", {\\n    className: className\\n  }, is_title_enabled && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\\\"h2\\\", {\\n    className: classnames__WEBPACK_IMPORTED_MODULE_1___default()(\\\"\\\".concat(className, \\\"--is-header\\\"), {\\n      'currency-selector__is-crypto': !is_fiat\\n    })\\n  }, label), is_fiat && has_fiat && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_3__.Text, {\\n    size: \\\"xxs\\\",\\n    className: \\\"currency-selector__subheading\\\"\\n  }, (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_2__.localize)('You are limited to one fiat currency only')), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\\\"div\\\", {\\n    className: classnames__WEBPACK_IMPORTED_MODULE_1___default()('currency-list__items', {\\n      'currency-list__items__center': item_count < 4,\\n      'currency-list__items__is-fiat': is_fiat,\\n      'currency-list__items__is-crypto': !is_fiat\\n    }),\\n    onClick: onCurrencyClicked\\n  }, children), is_fiat && is_currency_selected && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\\\"p\\\", {\\n    className: \\\"currency-selector__description\\\"\\n  }, description));\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RadioButtonGroup);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL2N1cnJlbmN5LXNlbGVjdG9yL3JhZGlvLWJ1dHRvbi1ncm91cC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBU0E7QUFQQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQU1BO0FBQUE7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBSUE7QUFBQTtBQUdBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uL0NvbXBvbmVudHMvY3VycmVuY3ktc2VsZWN0b3IvcmFkaW8tYnV0dG9uLWdyb3VwLnRzeD9jZjIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tICdAZGVyaXYvdHJhbnNsYXRpb25zJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICdAZGVyaXYvY29tcG9uZW50cyc7XG5cbmV4cG9ydCB0eXBlIFRSYWRpb0J1dHRvbkdyb3VwID0ge1xuICAgIGNsYXNzTmFtZTogc3RyaW5nO1xuICAgIGlzX2ZpYXQ/OiBib29sZWFuO1xuICAgIGlzX3RpdGxlX2VuYWJsZWQ/OiBib29sZWFuO1xuICAgIGl0ZW1fY291bnQ6IG51bWJlcjtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgaGFzX2ZpYXQ/OiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBXcmFwcGVyIGNvbXBvbmVudCBmb3IgUmFkaW9CdXR0b25cbiAqIEBuYW1lIFJhZGlvQnV0dG9uR3JvdXBcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgLSBjbGFzcyBuYW1lIGZvciBzdHlsaW5nXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzX2ZpYXQgLSBpcyBmaWF0IGN1cnJlbmN5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzX3RpdGxlX2VuYWJsZWQgLSBpcyB0aXRsZSBlbmFibGVkXG4gKiBAcGFyYW0ge251bWJlcn0gaXRlbV9jb3VudCAtIG51bWJlciBvZiBpdGVtc1xuICogQHBhcmFtIHtzdHJpbmd9IGxhYmVsIC0gbGFiZWwgZm9yIHRoZSByYWRpbyBidXR0b25cbiAqIEBwYXJhbSB7UmVhY3QuUmVhY3ROb2RlfSBkZXNjcmlwdGlvbiAtIGRlc2NyaXB0aW9uIGZvciB0aGUgcmFkaW8gYnV0dG9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc19maWF0IC0gaGFzIGZpYXQgY3VycmVuY3lcbiAqIEByZXR1cm5zIHtSZWFjdC5SZWFjdE5vZGV9IC0gcmV0dXJucyBhIFJlYWN0IG5vZGVcbiAqL1xuY29uc3QgUmFkaW9CdXR0b25Hcm91cCA9ICh7XG4gICAgY2hpbGRyZW4sXG4gICAgbGFiZWwsXG4gICAgY2xhc3NOYW1lLFxuICAgIGlzX3RpdGxlX2VuYWJsZWQgPSB0cnVlLFxuICAgIGlzX2ZpYXQsXG4gICAgaXRlbV9jb3VudCxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBoYXNfZmlhdCxcbn06IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPFRSYWRpb0J1dHRvbkdyb3VwPikgPT4ge1xuICAgIGNvbnN0IFtpc19jdXJyZW5jeV9zZWxlY3RlZCwgc2V0SXNDdXJyZW5jeVNlbGVjdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIGNvbnN0IG9uQ3VycmVuY3lDbGlja2VkID0gKCkgPT4ge1xuICAgICAgICBzZXRJc0N1cnJlbmN5U2VsZWN0ZWQodHJ1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgICAgICAgIHtpc190aXRsZV9lbmFibGVkICYmIChcbiAgICAgICAgICAgICAgICA8aDJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKGAke2NsYXNzTmFtZX0tLWlzLWhlYWRlcmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjdXJyZW5jeS1zZWxlY3Rvcl9faXMtY3J5cHRvJzogIWlzX2ZpYXQsXG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2xhYmVsfVxuICAgICAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge2lzX2ZpYXQgJiYgaGFzX2ZpYXQgJiYgKFxuICAgICAgICAgICAgICAgIDxUZXh0IHNpemU9J3h4cycgY2xhc3NOYW1lPSdjdXJyZW5jeS1zZWxlY3Rvcl9fc3ViaGVhZGluZyc+XG4gICAgICAgICAgICAgICAgICAgIHtsb2NhbGl6ZSgnWW91IGFyZSBsaW1pdGVkIHRvIG9uZSBmaWF0IGN1cnJlbmN5IG9ubHknKX1cbiAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnY3VycmVuY3ktbGlzdF9faXRlbXMnLCB7XG4gICAgICAgICAgICAgICAgICAgICdjdXJyZW5jeS1saXN0X19pdGVtc19fY2VudGVyJzogaXRlbV9jb3VudCA8IDQsXG4gICAgICAgICAgICAgICAgICAgICdjdXJyZW5jeS1saXN0X19pdGVtc19faXMtZmlhdCc6IGlzX2ZpYXQsXG4gICAgICAgICAgICAgICAgICAgICdjdXJyZW5jeS1saXN0X19pdGVtc19faXMtY3J5cHRvJzogIWlzX2ZpYXQsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgb25DbGljaz17b25DdXJyZW5jeUNsaWNrZWR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7aXNfZmlhdCAmJiBpc19jdXJyZW5jeV9zZWxlY3RlZCAmJiA8cCBjbGFzc05hbWU9J2N1cnJlbmN5LXNlbGVjdG9yX19kZXNjcmlwdGlvbic+e2Rlc2NyaXB0aW9ufTwvcD59XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpb0J1dHRvbkdyb3VwO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Components/currency-selector/radio-button-group.tsx\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/classnames/index.js\":\n/***/ ((module, exports) => {\n\neval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n\\tCopyright (c) 2018 Jed Watson.\\n\\tLicensed under the MIT License (MIT), see\\n\\thttp://jedwatson.github.io/classnames\\n*/\\n/* global define */\\n\\n(function () {\\n\\t'use strict';\\n\\n\\tvar hasOwn = {}.hasOwnProperty;\\n\\tvar nativeCodeString = '[native code]';\\n\\n\\tfunction classNames() {\\n\\t\\tvar classes = [];\\n\\n\\t\\tfor (var i = 0; i < arguments.length; i++) {\\n\\t\\t\\tvar arg = arguments[i];\\n\\t\\t\\tif (!arg) continue;\\n\\n\\t\\t\\tvar argType = typeof arg;\\n\\n\\t\\t\\tif (argType === 'string' || argType === 'number') {\\n\\t\\t\\t\\tclasses.push(arg);\\n\\t\\t\\t} else if (Array.isArray(arg)) {\\n\\t\\t\\t\\tif (arg.length) {\\n\\t\\t\\t\\t\\tvar inner = classNames.apply(null, arg);\\n\\t\\t\\t\\t\\tif (inner) {\\n\\t\\t\\t\\t\\t\\tclasses.push(inner);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (argType === 'object') {\\n\\t\\t\\t\\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\\n\\t\\t\\t\\t\\tclasses.push(arg.toString());\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor (var key in arg) {\\n\\t\\t\\t\\t\\tif (hasOwn.call(arg, key) && arg[key]) {\\n\\t\\t\\t\\t\\t\\tclasses.push(key);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn classes.join(' ');\\n\\t}\\n\\n\\tif ( true && module.exports) {\\n\\t\\tclassNames.default = classNames;\\n\\t\\tmodule.exports = classNames;\\n\\t} else if (true) {\\n\\t\\t// register as 'classnames', consistent with npm package name\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn classNames;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else {}\\n}());\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4uLy4uLy4uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzNkY2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/classnames/index.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_16813__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_16813__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_16813__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_16813__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_16813__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_16813__.o(definition, key) && !__nested_webpack_require_16813__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_16813__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_16813__(\"./Components/currency-selector/radio-button-group.tsx\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/currency-radio-button-group.js\n");

/***/ }),

/***/ "../../account/dist/account/js/currency-radio-button.js":
/*!**************************************************************!*\
  !*** ../../account/dist/account/js/currency-radio-button.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.ts\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Components/currency-selector/radio-button.tsx\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ radio_button)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n;// CONCATENATED MODULE: ./Components/currency-selector/ust-popover.tsx\\n\\n\\n\\nvar USTPopover = function USTPopover(_ref) {\\n  var id = _ref.id;\\n  var popover_message;\\n  if (/^UST$/i.test(id)) {\\n    popover_message = /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n      i18n_default_text: 'Tether as an Omni token (USDT) is a version of Tether that is hosted on the Omni layer on the Bitcoin blockchain.',\\n      components: [/*#__PURE__*/external_react_default().createElement(\\\"br\\\", {\\n        key: 0\\n      })]\\n    });\\n  } else if (/^tUSDT$/i.test(id)) {\\n    popover_message = /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n      i18n_default_text: 'Tether as a TRC20 token (tUSDT) is a version of Tether that is hosted on Tron.'\\n    });\\n  } else {\\n    popover_message = /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n      i18n_default_text: 'Tether as an ERC20 token (eUSDT) is a version of Tether that is hosted on Ethereum.'\\n    });\\n  }\\n  return /*#__PURE__*/external_react_default().createElement(components_.Popover, {\\n    alignment: \\\"top\\\",\\n    className: \\\"currency-list__popover\\\",\\n    disable_message_icon: true,\\n    icon: \\\"info\\\",\\n    is_bubble_hover_enabled: true,\\n    message: popover_message,\\n    zIndex: \\\"9999\\\"\\n  });\\n};\\n/* harmony default export */ const ust_popover = (USTPopover);\\n;// CONCATENATED MODULE: ./Components/currency-selector/radio-button.tsx\\nvar _excluded = [\\\"field\\\", \\\"icon\\\", \\\"id\\\", \\\"label\\\", \\\"second_line_label\\\", \\\"onClick\\\", \\\"className\\\"];\\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n\\n\\n\\n\\n/**\\n *  RadioButton component to select currency\\n * @name RadioButton\\n * @param {React.InputHTMLAttributes<HTMLInputElement>} field - field props given by Formik\\n * @param {string} icon - icon name\\n * @param {string} id - currency id\\n * @param {string} label - currency name\\n * @param {string} second_line_label - currency code\\n * @param {Function} onClick - function to be called on click\\n * @param {AllHTMLAttributes<HTMLInputElement | HTMLLabelElement>} props - other props to be passed\\n * @returns {React.ReactNode} - returns a React node\\n */\\n\\nvar RadioButton = function RadioButton(_ref) {\\n  var _ref$field = _ref.field,\\n    name = _ref$field.name,\\n    value = _ref$field.value,\\n    onChange = _ref$field.onChange,\\n    onBlur = _ref$field.onBlur,\\n    icon = _ref.icon,\\n    id = _ref.id,\\n    label = _ref.label,\\n    second_line_label = _ref.second_line_label,\\n    onClick = _ref.onClick,\\n    className = _ref.className,\\n    props = _objectWithoutProperties(_ref, _excluded);\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(\\\"input\\\", _extends({\\n    name: name,\\n    id: id,\\n    type: \\\"radio\\\",\\n    value: id // could be something else for output?\\n    ,\\n    checked: id === value,\\n    onChange: onChange,\\n    onBlur: onBlur,\\n    disabled: props.selected,\\n    className: classnames_default()(className, 'currency-list__radio-button')\\n  }, props)), /*#__PURE__*/external_react_default().createElement(\\\"label\\\", {\\n    htmlFor: id,\\n    className: classnames_default()('currency-list__item', {\\n      'currency-list__item--selected': id === value,\\n      'currency-list__item--current': props.selected\\n    }),\\n    onClick: onClick\\n  }, icon ? /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    className: \\\"currency-list__icon\\\",\\n    icon: icon\\n  }), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"label currency-list__item-text\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"currency-list__item-label\\\"\\n  }, label), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"currency-list__item-code\\\"\\n  }, second_line_label))) : /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    className: \\\"currency-list__icon\\\",\\n    icon: \\\"IcCurrency-\\\".concat(id === null || id === void 0 ? void 0 : id.toLowerCase())\\n  }), id && /^(UST|eUSDT|tUSDT)$/i.test(id) && /*#__PURE__*/external_react_default().createElement(ust_popover, {\\n    id: id\\n  }), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"label currency-list__item-text\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"currency-list__item-label\\\"\\n  }, label), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"currency-list__item-code\\\"\\n  }, \\\"(\\\", (0,shared_.getCurrencyDisplayCode)(id), \\\")\\\")))));\\n};\\n/* harmony default export */ const radio_button = (RadioButton);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL2N1cnJlbmN5LXNlbGVjdG9yL3JhZGlvLWJ1dHRvbi50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQU1BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUVBO0FBQUE7QUFHQTtBQUNBO0FBRUE7QUFFQTtBQUdBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFFQTs7Ozs7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFTQTtBQVJBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUtBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFPQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi9Db21wb25lbnRzL2N1cnJlbmN5LXNlbGVjdG9yL3VzdC1wb3BvdmVyLnRzeD9jMTY3Iiwid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy9jdXJyZW5jeS1zZWxlY3Rvci9yYWRpby1idXR0b24udHN4Pzg4YTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBvcG92ZXIgfSBmcm9tICdAZGVyaXYvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBMb2NhbGl6ZSB9IGZyb20gJ0BkZXJpdi90cmFuc2xhdGlvbnMnO1xuXG5leHBvcnQgdHlwZSBUVVNUUG9wb3ZlciA9IHtcbiAgICBpZDogc3RyaW5nO1xufTtcblxuY29uc3QgVVNUUG9wb3ZlciA9ICh7IGlkIH06IFRVU1RQb3BvdmVyKSA9PiB7XG4gICAgbGV0IHBvcG92ZXJfbWVzc2FnZTogUmVhY3QuUmVhY3RFbGVtZW50O1xuICAgIGlmICgvXlVTVCQvaS50ZXN0KGlkKSkge1xuICAgICAgICBwb3BvdmVyX21lc3NhZ2UgPSAoXG4gICAgICAgICAgICA8TG9jYWxpemVcbiAgICAgICAgICAgICAgICBpMThuX2RlZmF1bHRfdGV4dD17XG4gICAgICAgICAgICAgICAgICAgICdUZXRoZXIgYXMgYW4gT21uaSB0b2tlbiAoVVNEVCkgaXMgYSB2ZXJzaW9uIG9mIFRldGhlciB0aGF0IGlzIGhvc3RlZCBvbiB0aGUgT21uaSBsYXllciBvbiB0aGUgQml0Y29pbiBibG9ja2NoYWluLidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcG9uZW50cz17WzxiciBrZXk9ezB9IC8+XX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmICgvXnRVU0RUJC9pLnRlc3QoaWQpKSB7XG4gICAgICAgIHBvcG92ZXJfbWVzc2FnZSA9IChcbiAgICAgICAgICAgIDxMb2NhbGl6ZVxuICAgICAgICAgICAgICAgIGkxOG5fZGVmYXVsdF90ZXh0PXsnVGV0aGVyIGFzIGEgVFJDMjAgdG9rZW4gKHRVU0RUKSBpcyBhIHZlcnNpb24gb2YgVGV0aGVyIHRoYXQgaXMgaG9zdGVkIG9uIFRyb24uJ31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcG9wb3Zlcl9tZXNzYWdlID0gKFxuICAgICAgICAgICAgPExvY2FsaXplXG4gICAgICAgICAgICAgICAgaTE4bl9kZWZhdWx0X3RleHQ9e1xuICAgICAgICAgICAgICAgICAgICAnVGV0aGVyIGFzIGFuIEVSQzIwIHRva2VuIChlVVNEVCkgaXMgYSB2ZXJzaW9uIG9mIFRldGhlciB0aGF0IGlzIGhvc3RlZCBvbiBFdGhlcmV1bS4nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8UG9wb3ZlclxuICAgICAgICAgICAgYWxpZ25tZW50PSd0b3AnXG4gICAgICAgICAgICBjbGFzc05hbWU9J2N1cnJlbmN5LWxpc3RfX3BvcG92ZXInXG4gICAgICAgICAgICBkaXNhYmxlX21lc3NhZ2VfaWNvblxuICAgICAgICAgICAgaWNvbj0naW5mbydcbiAgICAgICAgICAgIGlzX2J1YmJsZV9ob3Zlcl9lbmFibGVkXG4gICAgICAgICAgICBtZXNzYWdlPXtwb3BvdmVyX21lc3NhZ2V9XG4gICAgICAgICAgICB6SW5kZXg9Jzk5OTknXG4gICAgICAgIC8+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFVTVFBvcG92ZXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQWxsSFRNTEF0dHJpYnV0ZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IEljb24gfSBmcm9tICdAZGVyaXYvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBnZXRDdXJyZW5jeURpc3BsYXlDb2RlIH0gZnJvbSAnQGRlcml2L3NoYXJlZCc7XG5pbXBvcnQgVVNUUG9wb3ZlciBmcm9tICcuL3VzdC1wb3BvdmVyJztcblxudHlwZSBUUmFkaW9CdXR0b25FeHRlbmQgPSB7XG4gICAgZmllbGQ6IFJlYWN0LklucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD47XG4gICAgaWNvbj86IHN0cmluZztcbiAgICBzZWNvbmRfbGluZV9sYWJlbD86IHN0cmluZztcbiAgICBpZDogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgb25DbGljaz86IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxMYWJlbEVsZW1lbnQsIE1vdXNlRXZlbnQ+KSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IHR5cGUgVFJhZGlvQnV0dG9uID0gQWxsSFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudCB8IEhUTUxMYWJlbEVsZW1lbnQ+ICYgVFJhZGlvQnV0dG9uRXh0ZW5kO1xuXG4vKipcbiAqICBSYWRpb0J1dHRvbiBjb21wb25lbnQgdG8gc2VsZWN0IGN1cnJlbmN5XG4gKiBAbmFtZSBSYWRpb0J1dHRvblxuICogQHBhcmFtIHtSZWFjdC5JbnB1dEhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+fSBmaWVsZCAtIGZpZWxkIHByb3BzIGdpdmVuIGJ5IEZvcm1pa1xuICogQHBhcmFtIHtzdHJpbmd9IGljb24gLSBpY29uIG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGN1cnJlbmN5IGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgLSBjdXJyZW5jeSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gc2Vjb25kX2xpbmVfbGFiZWwgLSBjdXJyZW5jeSBjb2RlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkNsaWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGNsaWNrXG4gKiBAcGFyYW0ge0FsbEhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MTGFiZWxFbGVtZW50Pn0gcHJvcHMgLSBvdGhlciBwcm9wcyB0byBiZSBwYXNzZWRcbiAqIEByZXR1cm5zIHtSZWFjdC5SZWFjdE5vZGV9IC0gcmV0dXJucyBhIFJlYWN0IG5vZGVcbiAqL1xuXG5jb25zdCBSYWRpb0J1dHRvbiA9ICh7XG4gICAgZmllbGQ6IHsgbmFtZSwgdmFsdWUsIG9uQ2hhbmdlLCBvbkJsdXIgfSxcbiAgICBpY29uLFxuICAgIGlkLFxuICAgIGxhYmVsLFxuICAgIHNlY29uZF9saW5lX2xhYmVsLFxuICAgIG9uQ2xpY2ssXG4gICAgY2xhc3NOYW1lLFxuICAgIC4uLnByb3BzXG59OiBUUmFkaW9CdXR0b24pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgICAgICB0eXBlPSdyYWRpbydcbiAgICAgICAgICAgICAgICB2YWx1ZT17aWR9IC8vIGNvdWxkIGJlIHNvbWV0aGluZyBlbHNlIGZvciBvdXRwdXQ/XG4gICAgICAgICAgICAgICAgY2hlY2tlZD17aWQgPT09IHZhbHVlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICBvbkJsdXI9e29uQmx1cn1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuc2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKGNsYXNzTmFtZSwgJ2N1cnJlbmN5LWxpc3RfX3JhZGlvLWJ1dHRvbicpfVxuICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgICBodG1sRm9yPXtpZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2N1cnJlbmN5LWxpc3RfX2l0ZW0nLCB7XG4gICAgICAgICAgICAgICAgICAgICdjdXJyZW5jeS1saXN0X19pdGVtLS1zZWxlY3RlZCc6IGlkID09PSB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ2N1cnJlbmN5LWxpc3RfX2l0ZW0tLWN1cnJlbnQnOiBwcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtpY29uID8gKFxuICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBjbGFzc05hbWU9J2N1cnJlbmN5LWxpc3RfX2ljb24nIGljb249e2ljb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbGFiZWwgY3VycmVuY3ktbGlzdF9faXRlbS10ZXh0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY3VycmVuY3ktbGlzdF9faXRlbS1sYWJlbCc+e2xhYmVsfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjdXJyZW5jeS1saXN0X19pdGVtLWNvZGUnPntzZWNvbmRfbGluZV9sYWJlbH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIGNsYXNzTmFtZT0nY3VycmVuY3ktbGlzdF9faWNvbicgaWNvbj17YEljQ3VycmVuY3ktJHtpZD8udG9Mb3dlckNhc2UoKX1gfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAge2lkICYmIC9eKFVTVHxlVVNEVHx0VVNEVCkkL2kudGVzdChpZCkgJiYgPFVTVFBvcG92ZXIgaWQ9e2lkfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdsYWJlbCBjdXJyZW5jeS1saXN0X19pdGVtLXRleHQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjdXJyZW5jeS1saXN0X19pdGVtLWxhYmVsJz57bGFiZWx9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2N1cnJlbmN5LWxpc3RfX2l0ZW0tY29kZSc+KHtnZXRDdXJyZW5jeURpc3BsYXlDb2RlKGlkKX0pPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaW9CdXR0b247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./Components/currency-selector/radio-button.tsx\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/classnames/index.js\":\n/***/ ((module, exports) => {\n\neval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n\\tCopyright (c) 2018 Jed Watson.\\n\\tLicensed under the MIT License (MIT), see\\n\\thttp://jedwatson.github.io/classnames\\n*/\\n/* global define */\\n\\n(function () {\\n\\t'use strict';\\n\\n\\tvar hasOwn = {}.hasOwnProperty;\\n\\tvar nativeCodeString = '[native code]';\\n\\n\\tfunction classNames() {\\n\\t\\tvar classes = [];\\n\\n\\t\\tfor (var i = 0; i < arguments.length; i++) {\\n\\t\\t\\tvar arg = arguments[i];\\n\\t\\t\\tif (!arg) continue;\\n\\n\\t\\t\\tvar argType = typeof arg;\\n\\n\\t\\t\\tif (argType === 'string' || argType === 'number') {\\n\\t\\t\\t\\tclasses.push(arg);\\n\\t\\t\\t} else if (Array.isArray(arg)) {\\n\\t\\t\\t\\tif (arg.length) {\\n\\t\\t\\t\\t\\tvar inner = classNames.apply(null, arg);\\n\\t\\t\\t\\t\\tif (inner) {\\n\\t\\t\\t\\t\\t\\tclasses.push(inner);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (argType === 'object') {\\n\\t\\t\\t\\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\\n\\t\\t\\t\\t\\tclasses.push(arg.toString());\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor (var key in arg) {\\n\\t\\t\\t\\t\\tif (hasOwn.call(arg, key) && arg[key]) {\\n\\t\\t\\t\\t\\t\\tclasses.push(key);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn classes.join(' ');\\n\\t}\\n\\n\\tif ( true && module.exports) {\\n\\t\\tclassNames.default = classNames;\\n\\t\\tmodule.exports = classNames;\\n\\t} else if (true) {\\n\\t\\t// register as 'classnames', consistent with npm package name\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn classNames;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else {}\\n}());\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4uLy4uLy4uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzNkY2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/classnames/index.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_21946__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_21946__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_21946__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_21946__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_21946__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_21946__.o(definition, key) && !__nested_webpack_require_21946__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_21946__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_21946__(\"./Components/currency-selector/radio-button.tsx\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/currency-radio-button.js\n");

/***/ }),

/***/ "../../account/dist/account/js/currency-selector-config.js":
/*!*****************************************************************!*\
  !*** ../../account/dist/account/js/currency-selector-config.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Configs/currency-selector-config.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"@deriv/translations\\\");\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_translations__WEBPACK_IMPORTED_MODULE_1__);\\n\\n\\nvar currency_selector_config = {\\n  currency: {\\n    supported_in: ['maltainvest', 'malta', 'svg', 'iom'],\\n    default_value: '',\\n    rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Select an item')]]\\n  }\\n};\\nvar currencySelectorConfig = function currencySelectorConfig(_ref, CurrencySelector) {\\n  var real_account_signup_target = _ref.real_account_signup_target;\\n  return {\\n    header: {\\n      active_title: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please choose your currency'),\\n      title: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Account currency')\\n    },\\n    body: CurrencySelector,\\n    form_value: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getDefaultFields)(real_account_signup_target, currency_selector_config),\\n    props: {\\n      validate: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.generateValidationFunction)(real_account_signup_target, currency_selector_config)\\n    },\\n    passthrough: ['legal_allowed_currencies'],\\n    icon: 'IcDashboardCurrency'\\n  };\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (currencySelectorConfig);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db25maWdzL2N1cnJlbmN5LXNlbGVjdG9yLWNvbmZpZy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29uZmlncy9jdXJyZW5jeS1zZWxlY3Rvci1jb25maWcudHM/MTVhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2VuZXJhdGVWYWxpZGF0aW9uRnVuY3Rpb24sIGdldERlZmF1bHRGaWVsZHMsIFRTY2hlbWEgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnQGRlcml2L3RyYW5zbGF0aW9ucyc7XG5cbmNvbnN0IGN1cnJlbmN5X3NlbGVjdG9yX2NvbmZpZzogVFNjaGVtYSA9IHtcbiAgICBjdXJyZW5jeToge1xuICAgICAgICBzdXBwb3J0ZWRfaW46IFsnbWFsdGFpbnZlc3QnLCAnbWFsdGEnLCAnc3ZnJywgJ2lvbSddLFxuICAgICAgICBkZWZhdWx0X3ZhbHVlOiAnJyxcbiAgICAgICAgcnVsZXM6IFtbJ3JlcScsIGxvY2FsaXplKCdTZWxlY3QgYW4gaXRlbScpXV0sXG4gICAgfSxcbn07XG5cbmNvbnN0IGN1cnJlbmN5U2VsZWN0b3JDb25maWcgPSAoXG4gICAgeyByZWFsX2FjY291bnRfc2lnbnVwX3RhcmdldCB9OiB7IHJlYWxfYWNjb3VudF9zaWdudXBfdGFyZ2V0OiBzdHJpbmcgfSxcbiAgICBDdXJyZW5jeVNlbGVjdG9yOiBSZWFjdC5Db21wb25lbnRcbikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGhlYWRlcjoge1xuICAgICAgICAgICAgYWN0aXZlX3RpdGxlOiBsb2NhbGl6ZSgnUGxlYXNlIGNob29zZSB5b3VyIGN1cnJlbmN5JyksXG4gICAgICAgICAgICB0aXRsZTogbG9jYWxpemUoJ0FjY291bnQgY3VycmVuY3knKSxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogQ3VycmVuY3lTZWxlY3RvcixcbiAgICAgICAgZm9ybV92YWx1ZTogZ2V0RGVmYXVsdEZpZWxkcyhyZWFsX2FjY291bnRfc2lnbnVwX3RhcmdldCwgY3VycmVuY3lfc2VsZWN0b3JfY29uZmlnKSxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlOiBnZW5lcmF0ZVZhbGlkYXRpb25GdW5jdGlvbihyZWFsX2FjY291bnRfc2lnbnVwX3RhcmdldCwgY3VycmVuY3lfc2VsZWN0b3JfY29uZmlnKSxcbiAgICAgICAgfSxcbiAgICAgICAgcGFzc3Rocm91Z2g6IFsnbGVnYWxfYWxsb3dlZF9jdXJyZW5jaWVzJ10sXG4gICAgICAgIGljb246ICdJY0Rhc2hib2FyZEN1cnJlbmN5JyxcbiAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3VycmVuY3lTZWxlY3RvckNvbmZpZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./Configs/currency-selector-config.ts\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_5941__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_5941__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_5941__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_5941__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_5941__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_5941__.o(definition, key) && !__nested_webpack_require_5941__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_5941__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_5941__(\"./Configs/currency-selector-config.ts\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/currency-selector-config.js\n");

/***/ }),

/***/ "../../account/dist/account/js/financial-details-config.js":
/*!*****************************************************************!*\
  !*** ../../account/dist/account/js/financial-details-config.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Configs/financial-details-config.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* unused harmony exports getAccountTurnoverList, getEmploymentIndustryList, getOccupationList, getSourceOfWealthList, getEducationLevelList, getNetIncomeList, getEstimatedWorthList, getIncomeSourceList, getFormattedOccupationList */\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"@deriv/translations\\\");\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_translations__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var Constants_financial_details__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\\\"./Constants/financial-details.ts\\\");\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\\nfunction _nonIterableSpread() { throw new TypeError(\\\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\nfunction _iterableToArray(iter) { if (typeof Symbol !== \\\"undefined\\\" && iter[Symbol.iterator] != null || iter[\\\"@@iterator\\\"] != null) return Array.from(iter); }\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\n\\n\\nvar financial_details_config = function financial_details_config(_ref) {\\n  var _financial_assessment, _financial_assessment2, _financial_assessment3, _financial_assessment4, _financial_assessment5, _financial_assessment6, _financial_assessment7, _financial_assessment8;\\n  var financial_assessment = _ref.financial_assessment;\\n  return {\\n    account_turnover: {\\n      supported_in: ['maltainvest'],\\n      default_value: (_financial_assessment = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.account_turnover) !== null && _financial_assessment !== void 0 ? _financial_assessment : '',\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please select an option')]]\\n    },\\n    education_level: {\\n      supported_in: ['maltainvest'],\\n      default_value: (_financial_assessment2 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.education_level) !== null && _financial_assessment2 !== void 0 ? _financial_assessment2 : '',\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please select an option')]]\\n    },\\n    employment_industry: {\\n      default_value: (_financial_assessment3 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.employment_industry) !== null && _financial_assessment3 !== void 0 ? _financial_assessment3 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please select an option')]]\\n    },\\n    estimated_worth: {\\n      default_value: (_financial_assessment4 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.estimated_worth) !== null && _financial_assessment4 !== void 0 ? _financial_assessment4 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please select an option')]]\\n    },\\n    income_source: {\\n      default_value: (_financial_assessment5 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.income_source) !== null && _financial_assessment5 !== void 0 ? _financial_assessment5 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please select an option')]]\\n    },\\n    net_income: {\\n      default_value: (_financial_assessment6 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.net_income) !== null && _financial_assessment6 !== void 0 ? _financial_assessment6 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please select an option')]]\\n    },\\n    occupation: {\\n      default_value: (_financial_assessment7 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.occupation) !== null && _financial_assessment7 !== void 0 ? _financial_assessment7 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please select an option')]]\\n    },\\n    source_of_wealth: {\\n      default_value: (_financial_assessment8 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.source_of_wealth) !== null && _financial_assessment8 !== void 0 ? _financial_assessment8 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Please select an option')]]\\n    }\\n  };\\n};\\nvar financialDetailsConfig = function financialDetailsConfig(_ref2, FinancialDetails) {\\n  var real_account_signup_target = _ref2.real_account_signup_target,\\n    financial_assessment = _ref2.financial_assessment;\\n  var config = financial_details_config({\\n    financial_assessment: financial_assessment\\n  });\\n  return {\\n    header: {\\n      active_title: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Complete your financial assessment'),\\n      title: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Financial assessment')\\n    },\\n    body: FinancialDetails,\\n    form_value: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getDefaultFields)(real_account_signup_target, config),\\n    props: {\\n      validate: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.generateValidationFunction)(real_account_signup_target, config)\\n    },\\n    passthrough: ['residence_list', 'is_fully_authenticated']\\n  };\\n};\\nvar getAccountTurnoverList = function getAccountTurnoverList() {\\n  return [{\\n    text: localize('Less than $25,000'),\\n    value: 'Less than $25,000'\\n  }, {\\n    text: localize('$25,000 - $50,000'),\\n    value: '$25,000 - $50,000'\\n  }, {\\n    text: localize('$50,001 - $100,000'),\\n    value: '$50,001 - $100,000'\\n  }, {\\n    text: localize('$100,001 - $500,000'),\\n    value: '$100,001 - $500,000'\\n  }, {\\n    text: localize('Over $500,000'),\\n    value: 'Over $500,000'\\n  }];\\n};\\nvar getEmploymentIndustryList = function getEmploymentIndustryList() {\\n  return [{\\n    text: localize('Construction'),\\n    value: 'Construction'\\n  }, {\\n    text: localize('Education'),\\n    value: 'Education'\\n  }, {\\n    text: localize('Finance'),\\n    value: 'Finance'\\n  }, {\\n    text: localize('Health'),\\n    value: 'Health'\\n  }, {\\n    text: localize('Tourism'),\\n    value: 'Tourism'\\n  }, {\\n    text: localize('Information & Communications Technology'),\\n    value: 'Information & Communications Technology'\\n  }, {\\n    text: localize('Science & Engineering'),\\n    value: 'Science & Engineering'\\n  }, {\\n    text: localize('Legal'),\\n    value: 'Legal'\\n  }, {\\n    text: localize('Social & Cultural'),\\n    value: 'Social & Cultural'\\n  }, {\\n    text: localize('Agriculture'),\\n    value: 'Agriculture'\\n  }, {\\n    text: localize('Real Estate'),\\n    value: 'Real Estate'\\n  }, {\\n    text: localize('Food Services'),\\n    value: 'Food Services'\\n  }, {\\n    text: localize('Manufacturing'),\\n    value: 'Manufacturing'\\n  }, {\\n    text: localize('Unemployed'),\\n    value: 'Unemployed'\\n  }];\\n};\\nvar getOccupationList = function getOccupationList() {\\n  return [{\\n    text: localize('Chief Executives, Senior Officials and Legislators'),\\n    value: 'Chief Executives, Senior Officials and Legislators'\\n  }, {\\n    text: localize('Managers'),\\n    value: 'Managers'\\n  }, {\\n    text: localize('Professionals'),\\n    value: 'Professionals'\\n  }, {\\n    text: localize('Clerks'),\\n    value: 'Clerks'\\n  }, {\\n    text: localize('Personal Care, Sales and Service Workers'),\\n    value: 'Personal Care, Sales and Service Workers'\\n  }, {\\n    text: localize('Agricultural, Forestry and Fishery Workers'),\\n    value: 'Agricultural, Forestry and Fishery Workers'\\n  }, {\\n    text: localize('Craft, Metal, Electrical and Electronics Workers'),\\n    value: 'Craft, Metal, Electrical and Electronics Workers'\\n  }, {\\n    text: localize('Plant and Machine Operators and Assemblers'),\\n    value: 'Plant and Machine Operators and Assemblers'\\n  }, {\\n    text: localize('Cleaners and Helpers'),\\n    value: 'Cleaners and Helpers'\\n  }, {\\n    text: localize('Mining, Construction, Manufacturing and Transport Workers'),\\n    value: 'Mining, Construction, Manufacturing and Transport Workers'\\n  }, {\\n    text: localize('Armed Forces'),\\n    value: 'Armed Forces'\\n  }, {\\n    text: localize('Government Officers'),\\n    value: 'Government Officers'\\n  }, {\\n    text: localize('Students'),\\n    value: 'Students'\\n  }, {\\n    text: localize('Unemployed'),\\n    value: 'Unemployed'\\n  }];\\n};\\nvar getSourceOfWealthList = function getSourceOfWealthList() {\\n  return [{\\n    text: localize('Accumulation of Income/Savings'),\\n    value: 'Accumulation of Income/Savings'\\n  }, {\\n    text: localize('Cash Business'),\\n    value: 'Cash Business'\\n  }, {\\n    text: localize('Company Ownership'),\\n    value: 'Company Ownership'\\n  }, {\\n    text: localize('Divorce Settlement'),\\n    value: 'Divorce Settlement'\\n  }, {\\n    text: localize('Inheritance'),\\n    value: 'Inheritance'\\n  }, {\\n    text: localize('Investment Income'),\\n    value: 'Investment Income'\\n  }, {\\n    text: localize('Sale of Property'),\\n    value: 'Sale of Property'\\n  }];\\n};\\nvar getEducationLevelList = function getEducationLevelList() {\\n  return [{\\n    text: localize('Primary'),\\n    value: 'Primary'\\n  }, {\\n    text: localize('Secondary'),\\n    value: 'Secondary'\\n  }, {\\n    text: localize('Tertiary'),\\n    value: 'Tertiary'\\n  }];\\n};\\nvar getNetIncomeList = function getNetIncomeList() {\\n  return _toConsumableArray(getAccountTurnoverList());\\n};\\nvar getEstimatedWorthList = function getEstimatedWorthList() {\\n  return [{\\n    text: localize('Less than $100,000'),\\n    value: 'Less than $100,000'\\n  }, {\\n    text: localize('$100,000 - $250,000'),\\n    value: '$100,000 - $250,000'\\n  }, {\\n    text: localize('$250,001 - $500,000'),\\n    value: '$250,001 - $500,000'\\n  }, {\\n    text: localize('$500,001 - $1,000,000'),\\n    value: '$500,001 - $1,000,000'\\n  }, {\\n    text: localize('Over $1,000,000'),\\n    value: 'Over $1,000,000'\\n  }];\\n};\\nvar getIncomeSourceList = function getIncomeSourceList() {\\n  return [{\\n    text: localize('Salaried Employee'),\\n    value: 'Salaried Employee'\\n  }, {\\n    text: localize('Self-Employed'),\\n    value: 'Self-Employed'\\n  }, {\\n    text: localize('Investments & Dividends'),\\n    value: 'Investments & Dividends'\\n  }, {\\n    text: localize('Pension'),\\n    value: 'Pension'\\n  }, {\\n    text: localize('State Benefits'),\\n    value: 'State Benefits'\\n  }, {\\n    text: localize('Savings & Inheritance'),\\n    value: 'Savings & Inheritance'\\n  }];\\n};\\nvar getFormattedOccupationList = function getFormattedOccupationList(employment_status) {\\n  return employment_status && employment_status === EMPLOYMENT_VALUES.EMPLOYED ? getOccupationList().filter(function (item) {\\n    return item.value !== EMPLOYMENT_VALUES.UNEMPLOYED;\\n  }) : getOccupationList();\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (financialDetailsConfig);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Configs/financial-details-config.ts\\n\");\n\n/***/ }),\n\n/***/ \"./Constants/financial-details.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"/* unused harmony export EMPLOYMENT_VALUES */\\nvar EMPLOYMENT_VALUES = {\\n  EMPLOYED: 'Employed',\\n  UNEMPLOYED: 'Unemployed'\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db25zdGFudHMvZmluYW5jaWFsLWRldGFpbHMudHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi9Db25zdGFudHMvZmluYW5jaWFsLWRldGFpbHMudHM/YTEwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRU1QTE9ZTUVOVF9WQUxVRVMgPSB7XG4gICAgRU1QTE9ZRUQ6ICdFbXBsb3llZCcsXG4gICAgVU5FTVBMT1lFRDogJ1VuZW1wbG95ZWQnLFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./Constants/financial-details.ts\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_29928__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_29928__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_29928__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_29928__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_29928__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_29928__.o(definition, key) && !__nested_webpack_require_29928__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_29928__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_29928__(\"./Configs/financial-details-config.ts\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vYWNjb3VudC9kaXN0L2FjY291bnQvanMvZmluYW5jaWFsLWRldGFpbHMtY29uZmlnLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vYWNjb3VudC9kaXN0L2FjY291bnQvanMvZmluYW5jaWFsLWRldGFpbHMtY29uZmlnLmpzPzUyNjgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEFUVEVOVElPTjogQW4gXCJldmFsLXNvdXJjZS1tYXBcIiBkZXZ0b29sIGhhcyBiZWVuIHVzZWQuXG4gKiBUaGlzIGRldnRvb2wgaXMgbmVpdGhlciBtYWRlIGZvciBwcm9kdWN0aW9uIG5vciBmb3IgcmVhZGFibGUgb3V0cHV0IGZpbGVzLlxuICogSXQgdXNlcyBcImV2YWwoKVwiIGNhbGxzIHRvIGNyZWF0ZSBhIHNlcGFyYXRlIHNvdXJjZSBmaWxlIHdpdGggYXR0YWNoZWQgU291cmNlTWFwcyBpbiB0aGUgYnJvd3NlciBkZXZ0b29scy5cbiAqIElmIHlvdSBhcmUgdHJ5aW5nIHRvIHJlYWQgdGhlIG91dHB1dCBmaWxlLCBzZWxlY3QgYSBkaWZmZXJlbnQgZGV2dG9vbCAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL2RldnRvb2wvKVxuICogb3IgZGlzYWJsZSB0aGUgZGVmYXVsdCBkZXZ0b29sIHdpdGggXCJkZXZ0b29sOiBmYWxzZVwiLlxuICogSWYgeW91IGFyZSBsb29raW5nIGZvciBwcm9kdWN0aW9uLXJlYWR5IG91dHB1dCBmaWxlcywgc2VlIG1vZGU6IFwicHJvZHVjdGlvblwiIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vbW9kZS8pLlxuICovXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJAZGVyaXYvc2hhcmVkXCIpLCByZXF1aXJlKFwiQGRlcml2L3RyYW5zbGF0aW9uc1wiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJAZGVyaXYvc2hhcmVkXCIsIFwiQGRlcml2L3RyYW5zbGF0aW9uc1wiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJAZGVyaXYvYWNjb3VudFwiXSA9IGZhY3RvcnkocmVxdWlyZShcIkBkZXJpdi9zaGFyZWRcIiksIHJlcXVpcmUoXCJAZGVyaXYvdHJhbnNsYXRpb25zXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJAZGVyaXYvYWNjb3VudFwiXSA9IGZhY3Rvcnkocm9vdFtcIkBkZXJpdi9zaGFyZWRcIl0sIHJvb3RbXCJAZGVyaXYvdHJhbnNsYXRpb25zXCJdKTtcbn0pKHNlbGYsIChfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19kZXJpdl9zaGFyZWRfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fZGVyaXZfdHJhbnNsYXRpb25zX18pID0+IHtcbnJldHVybiAvKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdFwidXNlIHN0cmljdFwiO1xuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XG5cbi8qKiovIFwiLi9Db25maWdzL2ZpbmFuY2lhbC1kZXRhaWxzLWNvbmZpZy50c1wiOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5ldmFsKFwiLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFxcXCJkZWZhdWx0XFxcIjogKCkgPT4gKF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fKVxcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xcbi8qIHVudXNlZCBoYXJtb255IGV4cG9ydHMgZ2V0QWNjb3VudFR1cm5vdmVyTGlzdCwgZ2V0RW1wbG95bWVudEluZHVzdHJ5TGlzdCwgZ2V0T2NjdXBhdGlvbkxpc3QsIGdldFNvdXJjZU9mV2VhbHRoTGlzdCwgZ2V0RWR1Y2F0aW9uTGV2ZWxMaXN0LCBnZXROZXRJbmNvbWVMaXN0LCBnZXRFc3RpbWF0ZWRXb3J0aExpc3QsIGdldEluY29tZVNvdXJjZUxpc3QsIGdldEZvcm1hdHRlZE9jY3VwYXRpb25MaXN0ICovXFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXFxcIkBkZXJpdi9zaGFyZWRcXFwiKTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rlcml2X3NoYXJlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl90cmFuc2xhdGlvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXFxcIkBkZXJpdi90cmFuc2xhdGlvbnNcXFwiKTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rlcml2X3RyYW5zbGF0aW9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9kZXJpdl90cmFuc2xhdGlvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIENvbnN0YW50c19maW5hbmNpYWxfZGV0YWlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcXFwiLi9Db25zdGFudHMvZmluYW5jaWFsLWRldGFpbHMudHNcXFwiKTtcXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlxcXCIpOyB9XFxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcXFwic3RyaW5nXFxcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFxcXCJPYmplY3RcXFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcXFwiTWFwXFxcIiB8fCBuID09PSBcXFwiU2V0XFxcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcXFwiQXJndW1lbnRzXFxcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFxcXCJ1bmRlZmluZWRcXFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXFxcIkBAaXRlcmF0b3JcXFwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxcbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7IH1cXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cXG5cXG5cXG5cXG52YXIgZmluYW5jaWFsX2RldGFpbHNfY29uZmlnID0gZnVuY3Rpb24gZmluYW5jaWFsX2RldGFpbHNfY29uZmlnKF9yZWYpIHtcXG4gIHZhciBfZmluYW5jaWFsX2Fzc2Vzc21lbnQsIF9maW5hbmNpYWxfYXNzZXNzbWVudDIsIF9maW5hbmNpYWxfYXNzZXNzbWVudDMsIF9maW5hbmNpYWxfYXNzZXNzbWVudDQsIF9maW5hbmNpYWxfYXNzZXNzbWVudDUsIF9maW5hbmNpYWxfYXNzZXNzbWVudDYsIF9maW5hbmNpYWxfYXNzZXNzbWVudDcsIF9maW5hbmNpYWxfYXNzZXNzbWVudDg7XFxuICB2YXIgZmluYW5jaWFsX2Fzc2Vzc21lbnQgPSBfcmVmLmZpbmFuY2lhbF9hc3Nlc3NtZW50O1xcbiAgcmV0dXJuIHtcXG4gICAgYWNjb3VudF90dXJub3Zlcjoge1xcbiAgICAgIHN1cHBvcnRlZF9pbjogWydtYWx0YWludmVzdCddLFxcbiAgICAgIGRlZmF1bHRfdmFsdWU6IChfZmluYW5jaWFsX2Fzc2Vzc21lbnQgPSBmaW5hbmNpYWxfYXNzZXNzbWVudCA9PT0gbnVsbCB8fCBmaW5hbmNpYWxfYXNzZXNzbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmluYW5jaWFsX2Fzc2Vzc21lbnQuYWNjb3VudF90dXJub3ZlcikgIT09IG51bGwgJiYgX2ZpbmFuY2lhbF9hc3Nlc3NtZW50ICE9PSB2b2lkIDAgPyBfZmluYW5jaWFsX2Fzc2Vzc21lbnQgOiAnJyxcXG4gICAgICBydWxlczogW1sncmVxJywgKDAsX2Rlcml2X3RyYW5zbGF0aW9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmxvY2FsaXplKSgnUGxlYXNlIHNlbGVjdCBhbiBvcHRpb24nKV1dXFxuICAgIH0sXFxuICAgIGVkdWNhdGlvbl9sZXZlbDoge1xcbiAgICAgIHN1cHBvcnRlZF9pbjogWydtYWx0YWludmVzdCddLFxcbiAgICAgIGRlZmF1bHRfdmFsdWU6IChfZmluYW5jaWFsX2Fzc2Vzc21lbnQyID0gZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IG51bGwgfHwgZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpbmFuY2lhbF9hc3Nlc3NtZW50LmVkdWNhdGlvbl9sZXZlbCkgIT09IG51bGwgJiYgX2ZpbmFuY2lhbF9hc3Nlc3NtZW50MiAhPT0gdm9pZCAwID8gX2ZpbmFuY2lhbF9hc3Nlc3NtZW50MiA6ICcnLFxcbiAgICAgIHJ1bGVzOiBbWydyZXEnLCAoMCxfZGVyaXZfdHJhbnNsYXRpb25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18ubG9jYWxpemUpKCdQbGVhc2Ugc2VsZWN0IGFuIG9wdGlvbicpXV1cXG4gICAgfSxcXG4gICAgZW1wbG95bWVudF9pbmR1c3RyeToge1xcbiAgICAgIGRlZmF1bHRfdmFsdWU6IChfZmluYW5jaWFsX2Fzc2Vzc21lbnQzID0gZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IG51bGwgfHwgZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpbmFuY2lhbF9hc3Nlc3NtZW50LmVtcGxveW1lbnRfaW5kdXN0cnkpICE9PSBudWxsICYmIF9maW5hbmNpYWxfYXNzZXNzbWVudDMgIT09IHZvaWQgMCA/IF9maW5hbmNpYWxfYXNzZXNzbWVudDMgOiAnJyxcXG4gICAgICBzdXBwb3J0ZWRfaW46IFsnbWFsdGFpbnZlc3QnXSxcXG4gICAgICBydWxlczogW1sncmVxJywgKDAsX2Rlcml2X3RyYW5zbGF0aW9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmxvY2FsaXplKSgnUGxlYXNlIHNlbGVjdCBhbiBvcHRpb24nKV1dXFxuICAgIH0sXFxuICAgIGVzdGltYXRlZF93b3J0aDoge1xcbiAgICAgIGRlZmF1bHRfdmFsdWU6IChfZmluYW5jaWFsX2Fzc2Vzc21lbnQ0ID0gZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IG51bGwgfHwgZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpbmFuY2lhbF9hc3Nlc3NtZW50LmVzdGltYXRlZF93b3J0aCkgIT09IG51bGwgJiYgX2ZpbmFuY2lhbF9hc3Nlc3NtZW50NCAhPT0gdm9pZCAwID8gX2ZpbmFuY2lhbF9hc3Nlc3NtZW50NCA6ICcnLFxcbiAgICAgIHN1cHBvcnRlZF9pbjogWydtYWx0YWludmVzdCddLFxcbiAgICAgIHJ1bGVzOiBbWydyZXEnLCAoMCxfZGVyaXZfdHJhbnNsYXRpb25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18ubG9jYWxpemUpKCdQbGVhc2Ugc2VsZWN0IGFuIG9wdGlvbicpXV1cXG4gICAgfSxcXG4gICAgaW5jb21lX3NvdXJjZToge1xcbiAgICAgIGRlZmF1bHRfdmFsdWU6IChfZmluYW5jaWFsX2Fzc2Vzc21lbnQ1ID0gZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IG51bGwgfHwgZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpbmFuY2lhbF9hc3Nlc3NtZW50LmluY29tZV9zb3VyY2UpICE9PSBudWxsICYmIF9maW5hbmNpYWxfYXNzZXNzbWVudDUgIT09IHZvaWQgMCA/IF9maW5hbmNpYWxfYXNzZXNzbWVudDUgOiAnJyxcXG4gICAgICBzdXBwb3J0ZWRfaW46IFsnbWFsdGFpbnZlc3QnXSxcXG4gICAgICBydWxlczogW1sncmVxJywgKDAsX2Rlcml2X3RyYW5zbGF0aW9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmxvY2FsaXplKSgnUGxlYXNlIHNlbGVjdCBhbiBvcHRpb24nKV1dXFxuICAgIH0sXFxuICAgIG5ldF9pbmNvbWU6IHtcXG4gICAgICBkZWZhdWx0X3ZhbHVlOiAoX2ZpbmFuY2lhbF9hc3Nlc3NtZW50NiA9IGZpbmFuY2lhbF9hc3Nlc3NtZW50ID09PSBudWxsIHx8IGZpbmFuY2lhbF9hc3Nlc3NtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaW5hbmNpYWxfYXNzZXNzbWVudC5uZXRfaW5jb21lKSAhPT0gbnVsbCAmJiBfZmluYW5jaWFsX2Fzc2Vzc21lbnQ2ICE9PSB2b2lkIDAgPyBfZmluYW5jaWFsX2Fzc2Vzc21lbnQ2IDogJycsXFxuICAgICAgc3VwcG9ydGVkX2luOiBbJ21hbHRhaW52ZXN0J10sXFxuICAgICAgcnVsZXM6IFtbJ3JlcScsICgwLF9kZXJpdl90cmFuc2xhdGlvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5sb2NhbGl6ZSkoJ1BsZWFzZSBzZWxlY3QgYW4gb3B0aW9uJyldXVxcbiAgICB9LFxcbiAgICBvY2N1cGF0aW9uOiB7XFxuICAgICAgZGVmYXVsdF92YWx1ZTogKF9maW5hbmNpYWxfYXNzZXNzbWVudDcgPSBmaW5hbmNpYWxfYXNzZXNzbWVudCA9PT0gbnVsbCB8fCBmaW5hbmNpYWxfYXNzZXNzbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmluYW5jaWFsX2Fzc2Vzc21lbnQub2NjdXBhdGlvbikgIT09IG51bGwgJiYgX2ZpbmFuY2lhbF9hc3Nlc3NtZW50NyAhPT0gdm9pZCAwID8gX2ZpbmFuY2lhbF9hc3Nlc3NtZW50NyA6ICcnLFxcbiAgICAgIHN1cHBvcnRlZF9pbjogWydtYWx0YWludmVzdCddLFxcbiAgICAgIHJ1bGVzOiBbWydyZXEnLCAoMCxfZGVyaXZfdHJhbnNsYXRpb25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18ubG9jYWxpemUpKCdQbGVhc2Ugc2VsZWN0IGFuIG9wdGlvbicpXV1cXG4gICAgfSxcXG4gICAgc291cmNlX29mX3dlYWx0aDoge1xcbiAgICAgIGRlZmF1bHRfdmFsdWU6IChfZmluYW5jaWFsX2Fzc2Vzc21lbnQ4ID0gZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IG51bGwgfHwgZmluYW5jaWFsX2Fzc2Vzc21lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpbmFuY2lhbF9hc3Nlc3NtZW50LnNvdXJjZV9vZl93ZWFsdGgpICE9PSBudWxsICYmIF9maW5hbmNpYWxfYXNzZXNzbWVudDggIT09IHZvaWQgMCA/IF9maW5hbmNpYWxfYXNzZXNzbWVudDggOiAnJyxcXG4gICAgICBzdXBwb3J0ZWRfaW46IFsnbWFsdGFpbnZlc3QnXSxcXG4gICAgICBydWxlczogW1sncmVxJywgKDAsX2Rlcml2X3RyYW5zbGF0aW9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmxvY2FsaXplKSgnUGxlYXNlIHNlbGVjdCBhbiBvcHRpb24nKV1dXFxuICAgIH1cXG4gIH07XFxufTtcXG52YXIgZmluYW5jaWFsRGV0YWlsc0NvbmZpZyA9IGZ1bmN0aW9uIGZpbmFuY2lhbERldGFpbHNDb25maWcoX3JlZjIsIEZpbmFuY2lhbERldGFpbHMpIHtcXG4gIHZhciByZWFsX2FjY291bnRfc2lnbnVwX3RhcmdldCA9IF9yZWYyLnJlYWxfYWNjb3VudF9zaWdudXBfdGFyZ2V0LFxcbiAgICBmaW5hbmNpYWxfYXNzZXNzbWVudCA9IF9yZWYyLmZpbmFuY2lhbF9hc3Nlc3NtZW50O1xcbiAgdmFyIGNvbmZpZyA9IGZpbmFuY2lhbF9kZXRhaWxzX2NvbmZpZyh7XFxuICAgIGZpbmFuY2lhbF9hc3Nlc3NtZW50OiBmaW5hbmNpYWxfYXNzZXNzbWVudFxcbiAgfSk7XFxuICByZXR1cm4ge1xcbiAgICBoZWFkZXI6IHtcXG4gICAgICBhY3RpdmVfdGl0bGU6ICgwLF9kZXJpdl90cmFuc2xhdGlvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5sb2NhbGl6ZSkoJ0NvbXBsZXRlIHlvdXIgZmluYW5jaWFsIGFzc2Vzc21lbnQnKSxcXG4gICAgICB0aXRsZTogKDAsX2Rlcml2X3RyYW5zbGF0aW9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmxvY2FsaXplKSgnRmluYW5jaWFsIGFzc2Vzc21lbnQnKVxcbiAgICB9LFxcbiAgICBib2R5OiBGaW5hbmNpYWxEZXRhaWxzLFxcbiAgICBmb3JtX3ZhbHVlOiAoMCxfZGVyaXZfc2hhcmVkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uZ2V0RGVmYXVsdEZpZWxkcykocmVhbF9hY2NvdW50X3NpZ251cF90YXJnZXQsIGNvbmZpZyksXFxuICAgIHByb3BzOiB7XFxuICAgICAgdmFsaWRhdGU6ICgwLF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5nZW5lcmF0ZVZhbGlkYXRpb25GdW5jdGlvbikocmVhbF9hY2NvdW50X3NpZ251cF90YXJnZXQsIGNvbmZpZylcXG4gICAgfSxcXG4gICAgcGFzc3Rocm91Z2g6IFsncmVzaWRlbmNlX2xpc3QnLCAnaXNfZnVsbHlfYXV0aGVudGljYXRlZCddXFxuICB9O1xcbn07XFxudmFyIGdldEFjY291bnRUdXJub3Zlckxpc3QgPSBmdW5jdGlvbiBnZXRBY2NvdW50VHVybm92ZXJMaXN0KCkge1xcbiAgcmV0dXJuIFt7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdMZXNzIHRoYW4gJDI1LDAwMCcpLFxcbiAgICB2YWx1ZTogJ0xlc3MgdGhhbiAkMjUsMDAwJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnJDI1LDAwMCAtICQ1MCwwMDAnKSxcXG4gICAgdmFsdWU6ICckMjUsMDAwIC0gJDUwLDAwMCdcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJyQ1MCwwMDEgLSAkMTAwLDAwMCcpLFxcbiAgICB2YWx1ZTogJyQ1MCwwMDEgLSAkMTAwLDAwMCdcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJyQxMDAsMDAxIC0gJDUwMCwwMDAnKSxcXG4gICAgdmFsdWU6ICckMTAwLDAwMSAtICQ1MDAsMDAwJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnT3ZlciAkNTAwLDAwMCcpLFxcbiAgICB2YWx1ZTogJ092ZXIgJDUwMCwwMDAnXFxuICB9XTtcXG59O1xcbnZhciBnZXRFbXBsb3ltZW50SW5kdXN0cnlMaXN0ID0gZnVuY3Rpb24gZ2V0RW1wbG95bWVudEluZHVzdHJ5TGlzdCgpIHtcXG4gIHJldHVybiBbe1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnQ29uc3RydWN0aW9uJyksXFxuICAgIHZhbHVlOiAnQ29uc3RydWN0aW9uJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnRWR1Y2F0aW9uJyksXFxuICAgIHZhbHVlOiAnRWR1Y2F0aW9uJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnRmluYW5jZScpLFxcbiAgICB2YWx1ZTogJ0ZpbmFuY2UnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdIZWFsdGgnKSxcXG4gICAgdmFsdWU6ICdIZWFsdGgnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdUb3VyaXNtJyksXFxuICAgIHZhbHVlOiAnVG91cmlzbSdcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ0luZm9ybWF0aW9uICYgQ29tbXVuaWNhdGlvbnMgVGVjaG5vbG9neScpLFxcbiAgICB2YWx1ZTogJ0luZm9ybWF0aW9uICYgQ29tbXVuaWNhdGlvbnMgVGVjaG5vbG9neSdcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ1NjaWVuY2UgJiBFbmdpbmVlcmluZycpLFxcbiAgICB2YWx1ZTogJ1NjaWVuY2UgJiBFbmdpbmVlcmluZydcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ0xlZ2FsJyksXFxuICAgIHZhbHVlOiAnTGVnYWwnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdTb2NpYWwgJiBDdWx0dXJhbCcpLFxcbiAgICB2YWx1ZTogJ1NvY2lhbCAmIEN1bHR1cmFsJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnQWdyaWN1bHR1cmUnKSxcXG4gICAgdmFsdWU6ICdBZ3JpY3VsdHVyZSdcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ1JlYWwgRXN0YXRlJyksXFxuICAgIHZhbHVlOiAnUmVhbCBFc3RhdGUnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdGb29kIFNlcnZpY2VzJyksXFxuICAgIHZhbHVlOiAnRm9vZCBTZXJ2aWNlcydcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ01hbnVmYWN0dXJpbmcnKSxcXG4gICAgdmFsdWU6ICdNYW51ZmFjdHVyaW5nJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnVW5lbXBsb3llZCcpLFxcbiAgICB2YWx1ZTogJ1VuZW1wbG95ZWQnXFxuICB9XTtcXG59O1xcbnZhciBnZXRPY2N1cGF0aW9uTGlzdCA9IGZ1bmN0aW9uIGdldE9jY3VwYXRpb25MaXN0KCkge1xcbiAgcmV0dXJuIFt7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdDaGllZiBFeGVjdXRpdmVzLCBTZW5pb3IgT2ZmaWNpYWxzIGFuZCBMZWdpc2xhdG9ycycpLFxcbiAgICB2YWx1ZTogJ0NoaWVmIEV4ZWN1dGl2ZXMsIFNlbmlvciBPZmZpY2lhbHMgYW5kIExlZ2lzbGF0b3JzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnTWFuYWdlcnMnKSxcXG4gICAgdmFsdWU6ICdNYW5hZ2VycydcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ1Byb2Zlc3Npb25hbHMnKSxcXG4gICAgdmFsdWU6ICdQcm9mZXNzaW9uYWxzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnQ2xlcmtzJyksXFxuICAgIHZhbHVlOiAnQ2xlcmtzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnUGVyc29uYWwgQ2FyZSwgU2FsZXMgYW5kIFNlcnZpY2UgV29ya2VycycpLFxcbiAgICB2YWx1ZTogJ1BlcnNvbmFsIENhcmUsIFNhbGVzIGFuZCBTZXJ2aWNlIFdvcmtlcnMnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdBZ3JpY3VsdHVyYWwsIEZvcmVzdHJ5IGFuZCBGaXNoZXJ5IFdvcmtlcnMnKSxcXG4gICAgdmFsdWU6ICdBZ3JpY3VsdHVyYWwsIEZvcmVzdHJ5IGFuZCBGaXNoZXJ5IFdvcmtlcnMnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdDcmFmdCwgTWV0YWwsIEVsZWN0cmljYWwgYW5kIEVsZWN0cm9uaWNzIFdvcmtlcnMnKSxcXG4gICAgdmFsdWU6ICdDcmFmdCwgTWV0YWwsIEVsZWN0cmljYWwgYW5kIEVsZWN0cm9uaWNzIFdvcmtlcnMnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdQbGFudCBhbmQgTWFjaGluZSBPcGVyYXRvcnMgYW5kIEFzc2VtYmxlcnMnKSxcXG4gICAgdmFsdWU6ICdQbGFudCBhbmQgTWFjaGluZSBPcGVyYXRvcnMgYW5kIEFzc2VtYmxlcnMnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdDbGVhbmVycyBhbmQgSGVscGVycycpLFxcbiAgICB2YWx1ZTogJ0NsZWFuZXJzIGFuZCBIZWxwZXJzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnTWluaW5nLCBDb25zdHJ1Y3Rpb24sIE1hbnVmYWN0dXJpbmcgYW5kIFRyYW5zcG9ydCBXb3JrZXJzJyksXFxuICAgIHZhbHVlOiAnTWluaW5nLCBDb25zdHJ1Y3Rpb24sIE1hbnVmYWN0dXJpbmcgYW5kIFRyYW5zcG9ydCBXb3JrZXJzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnQXJtZWQgRm9yY2VzJyksXFxuICAgIHZhbHVlOiAnQXJtZWQgRm9yY2VzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnR292ZXJubWVudCBPZmZpY2VycycpLFxcbiAgICB2YWx1ZTogJ0dvdmVybm1lbnQgT2ZmaWNlcnMnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdTdHVkZW50cycpLFxcbiAgICB2YWx1ZTogJ1N0dWRlbnRzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnVW5lbXBsb3llZCcpLFxcbiAgICB2YWx1ZTogJ1VuZW1wbG95ZWQnXFxuICB9XTtcXG59O1xcbnZhciBnZXRTb3VyY2VPZldlYWx0aExpc3QgPSBmdW5jdGlvbiBnZXRTb3VyY2VPZldlYWx0aExpc3QoKSB7XFxuICByZXR1cm4gW3tcXG4gICAgdGV4dDogbG9jYWxpemUoJ0FjY3VtdWxhdGlvbiBvZiBJbmNvbWUvU2F2aW5ncycpLFxcbiAgICB2YWx1ZTogJ0FjY3VtdWxhdGlvbiBvZiBJbmNvbWUvU2F2aW5ncydcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ0Nhc2ggQnVzaW5lc3MnKSxcXG4gICAgdmFsdWU6ICdDYXNoIEJ1c2luZXNzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnQ29tcGFueSBPd25lcnNoaXAnKSxcXG4gICAgdmFsdWU6ICdDb21wYW55IE93bmVyc2hpcCdcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ0Rpdm9yY2UgU2V0dGxlbWVudCcpLFxcbiAgICB2YWx1ZTogJ0Rpdm9yY2UgU2V0dGxlbWVudCdcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ0luaGVyaXRhbmNlJyksXFxuICAgIHZhbHVlOiAnSW5oZXJpdGFuY2UnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdJbnZlc3RtZW50IEluY29tZScpLFxcbiAgICB2YWx1ZTogJ0ludmVzdG1lbnQgSW5jb21lJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnU2FsZSBvZiBQcm9wZXJ0eScpLFxcbiAgICB2YWx1ZTogJ1NhbGUgb2YgUHJvcGVydHknXFxuICB9XTtcXG59O1xcbnZhciBnZXRFZHVjYXRpb25MZXZlbExpc3QgPSBmdW5jdGlvbiBnZXRFZHVjYXRpb25MZXZlbExpc3QoKSB7XFxuICByZXR1cm4gW3tcXG4gICAgdGV4dDogbG9jYWxpemUoJ1ByaW1hcnknKSxcXG4gICAgdmFsdWU6ICdQcmltYXJ5J1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnU2Vjb25kYXJ5JyksXFxuICAgIHZhbHVlOiAnU2Vjb25kYXJ5J1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnVGVydGlhcnknKSxcXG4gICAgdmFsdWU6ICdUZXJ0aWFyeSdcXG4gIH1dO1xcbn07XFxudmFyIGdldE5ldEluY29tZUxpc3QgPSBmdW5jdGlvbiBnZXROZXRJbmNvbWVMaXN0KCkge1xcbiAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheShnZXRBY2NvdW50VHVybm92ZXJMaXN0KCkpO1xcbn07XFxudmFyIGdldEVzdGltYXRlZFdvcnRoTGlzdCA9IGZ1bmN0aW9uIGdldEVzdGltYXRlZFdvcnRoTGlzdCgpIHtcXG4gIHJldHVybiBbe1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnTGVzcyB0aGFuICQxMDAsMDAwJyksXFxuICAgIHZhbHVlOiAnTGVzcyB0aGFuICQxMDAsMDAwJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnJDEwMCwwMDAgLSAkMjUwLDAwMCcpLFxcbiAgICB2YWx1ZTogJyQxMDAsMDAwIC0gJDI1MCwwMDAnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCckMjUwLDAwMSAtICQ1MDAsMDAwJyksXFxuICAgIHZhbHVlOiAnJDI1MCwwMDEgLSAkNTAwLDAwMCdcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJyQ1MDAsMDAxIC0gJDEsMDAwLDAwMCcpLFxcbiAgICB2YWx1ZTogJyQ1MDAsMDAxIC0gJDEsMDAwLDAwMCdcXG4gIH0sIHtcXG4gICAgdGV4dDogbG9jYWxpemUoJ092ZXIgJDEsMDAwLDAwMCcpLFxcbiAgICB2YWx1ZTogJ092ZXIgJDEsMDAwLDAwMCdcXG4gIH1dO1xcbn07XFxudmFyIGdldEluY29tZVNvdXJjZUxpc3QgPSBmdW5jdGlvbiBnZXRJbmNvbWVTb3VyY2VMaXN0KCkge1xcbiAgcmV0dXJuIFt7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdTYWxhcmllZCBFbXBsb3llZScpLFxcbiAgICB2YWx1ZTogJ1NhbGFyaWVkIEVtcGxveWVlJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnU2VsZi1FbXBsb3llZCcpLFxcbiAgICB2YWx1ZTogJ1NlbGYtRW1wbG95ZWQnXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdJbnZlc3RtZW50cyAmIERpdmlkZW5kcycpLFxcbiAgICB2YWx1ZTogJ0ludmVzdG1lbnRzICYgRGl2aWRlbmRzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnUGVuc2lvbicpLFxcbiAgICB2YWx1ZTogJ1BlbnNpb24nXFxuICB9LCB7XFxuICAgIHRleHQ6IGxvY2FsaXplKCdTdGF0ZSBCZW5lZml0cycpLFxcbiAgICB2YWx1ZTogJ1N0YXRlIEJlbmVmaXRzJ1xcbiAgfSwge1xcbiAgICB0ZXh0OiBsb2NhbGl6ZSgnU2F2aW5ncyAmIEluaGVyaXRhbmNlJyksXFxuICAgIHZhbHVlOiAnU2F2aW5ncyAmIEluaGVyaXRhbmNlJ1xcbiAgfV07XFxufTtcXG52YXIgZ2V0Rm9ybWF0dGVkT2NjdXBhdGlvbkxpc3QgPSBmdW5jdGlvbiBnZXRGb3JtYXR0ZWRPY2N1cGF0aW9uTGlzdChlbXBsb3ltZW50X3N0YXR1cykge1xcbiAgcmV0dXJuIGVtcGxveW1lbnRfc3RhdHVzICYmIGVtcGxveW1lbnRfc3RhdHVzID09PSBFTVBMT1lNRU5UX1ZBTFVFUy5FTVBMT1lFRCA/IGdldE9jY3VwYXRpb25MaXN0KCkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XFxuICAgIHJldHVybiBpdGVtLnZhbHVlICE9PSBFTVBMT1lNRU5UX1ZBTFVFUy5VTkVNUExPWUVEO1xcbiAgfSkgOiBnZXRPY2N1cGF0aW9uTGlzdCgpO1xcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXyA9IChmaW5hbmNpYWxEZXRhaWxzQ29uZmlnKTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTlEYjI1bWFXZHpMMlpwYm1GdVkybGhiQzFrWlhSaGFXeHpMV052Ym1acFp5NTBjeTVxY3lJc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGUFFUdEJRVVZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlIwRTdRVUZHUVR0QlFVZEJPMEZCUVVFN1FVRkJRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGQlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkJRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkJRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGQlFUdEJRVVZCTzBGQlFVRTdRVUZEUVR0QlFVVkJJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dlFHUmxjbWwyTDJGalkyOTFiblF2TGk5RGIyNW1hV2R6TDJacGJtRnVZMmxoYkMxa1pYUmhhV3h6TFdOdmJtWnBaeTUwY3o4MFpEWmxJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnZXlCSFpYUkdhVzVoYm1OcFlXeEJjM05sYzNOdFpXNTBJSDBnWm5KdmJTQW5RR1JsY21sMkwyRndhUzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdleUJuWlc1bGNtRjBaVlpoYkdsa1lYUnBiMjVHZFc1amRHbHZiaXdnWjJWMFJHVm1ZWFZzZEVacFpXeGtjeXdnVkZOamFHVnRZU0I5SUdaeWIyMGdKMEJrWlhKcGRpOXphR0Z5WldRbk8xeHVhVzF3YjNKMElIc2diRzlqWVd4cGVtVWdmU0JtY205dElDZEFaR1Z5YVhZdmRISmhibk5zWVhScGIyNXpKenRjYm1sdGNHOXlkQ0I3SUVWTlVFeFBXVTFGVGxSZlZrRk1WVVZUSUgwZ1puSnZiU0FuUTI5dWMzUmhiblJ6TDJacGJtRnVZMmxoYkMxa1pYUmhhV3h6Snp0Y2JseHVkSGx3WlNCVVJtbHVZVzVqYVdGc1JHVjBZV2xzYzBOdmJtWnBaeUE5SUh0Y2JpQWdJQ0J5WldGc1gyRmpZMjkxYm5SZmMybG5iblZ3WDNSaGNtZGxkRG9nYzNSeWFXNW5PMXh1SUNBZ0lHWnBibUZ1WTJsaGJGOWhjM05sYzNOdFpXNTBPaUJIWlhSR2FXNWhibU5wWVd4QmMzTmxjM050Wlc1ME8xeHVmVHRjYmx4dVkyOXVjM1FnWm1sdVlXNWphV0ZzWDJSbGRHRnBiSE5mWTI5dVptbG5PaUFvY0hKdmNITTZJSHNnWm1sdVlXNWphV0ZzWDJGemMyVnpjMjFsYm5RNklFZGxkRVpwYm1GdVkybGhiRUZ6YzJWemMyMWxiblFnZlNrZ1BUNGdWRk5qYUdWdFlTQTlJQ2g3WEc0Z0lDQWdabWx1WVc1amFXRnNYMkZ6YzJWemMyMWxiblFzWEc1OUtTQTlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdZV05qYjNWdWRGOTBkWEp1YjNabGNqb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzVndjRzl5ZEdWa1gybHVPaUJiSjIxaGJIUmhhVzUyWlhOMEoxMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwWDNaaGJIVmxPaUJtYVc1aGJtTnBZV3hmWVhOelpYTnpiV1Z1ZEQ4dVlXTmpiM1Z1ZEY5MGRYSnViM1psY2lBL1B5QW5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lISjFiR1Z6T2lCYld5ZHlaWEVuTENCc2IyTmhiR2w2WlNnblVHeGxZWE5sSUhObGJHVmpkQ0JoYmlCdmNIUnBiMjRuS1YxZExGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JsWkhWallYUnBiMjVmYkdWMlpXdzZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFjSEJ2Y25SbFpGOXBiam9nV3lkdFlXeDBZV2x1ZG1WemRDZGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZEY5MllXeDFaVG9nWm1sdVlXNWphV0ZzWDJGemMyVnpjMjFsYm5RL0xtVmtkV05oZEdsdmJsOXNaWFpsYkNBL1B5QW5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lISjFiR1Z6T2lCYld5ZHlaWEVuTENCc2IyTmhiR2w2WlNnblVHeGxZWE5sSUhObGJHVmpkQ0JoYmlCdmNIUnBiMjRuS1YxZExGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JsYlhCc2IzbHRaVzUwWDJsdVpIVnpkSEo1T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBYM1poYkhWbE9pQm1hVzVoYm1OcFlXeGZZWE56WlhOemJXVnVkRDh1Wlcxd2JHOTViV1Z1ZEY5cGJtUjFjM1J5ZVNBL1B5QW5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFjSEJ2Y25SbFpGOXBiam9nV3lkdFlXeDBZV2x1ZG1WemRDZGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NuVnNaWE02SUZ0YkozSmxjU2NzSUd4dlkyRnNhWHBsS0NkUWJHVmhjMlVnYzJWc1pXTjBJR0Z1SUc5d2RHbHZiaWNwWFYwc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR1Z6ZEdsdFlYUmxaRjkzYjNKMGFEb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZEY5MllXeDFaVG9nWm1sdVlXNWphV0ZzWDJGemMyVnpjMjFsYm5RL0xtVnpkR2x0WVhSbFpGOTNiM0owYUNBL1B5QW5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFjSEJ2Y25SbFpGOXBiam9nV3lkdFlXeDBZV2x1ZG1WemRDZGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NuVnNaWE02SUZ0YkozSmxjU2NzSUd4dlkyRnNhWHBsS0NkUWJHVmhjMlVnYzJWc1pXTjBJR0Z1SUc5d2RHbHZiaWNwWFYwc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR2x1WTI5dFpWOXpiM1Z5WTJVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFJmZG1Gc2RXVTZJR1pwYm1GdVkybGhiRjloYzNObGMzTnRaVzUwUHk1cGJtTnZiV1ZmYzI5MWNtTmxJRDgvSUNjbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNWd2NHOXlkR1ZrWDJsdU9pQmJKMjFoYkhSaGFXNTJaWE4wSjEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5ZFd4bGN6b2dXMXNuY21WeEp5d2diRzlqWVd4cGVtVW9KMUJzWldGelpTQnpaV3hsWTNRZ1lXNGdiM0IwYVc5dUp5bGRYU3hjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2JtVjBYMmx1WTI5dFpUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZEY5MllXeDFaVG9nWm1sdVlXNWphV0ZzWDJGemMyVnpjMjFsYm5RL0xtNWxkRjlwYm1OdmJXVWdQejhnSnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFhCd2IzSjBaV1JmYVc0NklGc25iV0ZzZEdGcGJuWmxjM1FuWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEoxYkdWek9pQmJXeWR5WlhFbkxDQnNiMk5oYkdsNlpTZ25VR3hsWVhObElITmxiR1ZqZENCaGJpQnZjSFJwYjI0bktWMWRMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCdlkyTjFjR0YwYVc5dU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwWDNaaGJIVmxPaUJtYVc1aGJtTnBZV3hmWVhOelpYTnpiV1Z1ZEQ4dWIyTmpkWEJoZEdsdmJpQS9QeUFuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4xY0hCdmNuUmxaRjlwYmpvZ1d5ZHRZV3gwWVdsdWRtVnpkQ2RkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjblZzWlhNNklGdGJKM0psY1Njc0lHeHZZMkZzYVhwbEtDZFFiR1ZoYzJVZ2MyVnNaV04wSUdGdUlHOXdkR2x2YmljcFhWMHNYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUhOdmRYSmpaVjl2Wmw5M1pXRnNkR2c2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUmZkbUZzZFdVNklHWnBibUZ1WTJsaGJGOWhjM05sYzNOdFpXNTBQeTV6YjNWeVkyVmZiMlpmZDJWaGJIUm9JRDgvSUNjbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNWd2NHOXlkR1ZrWDJsdU9pQmJKMjFoYkhSaGFXNTJaWE4wSjEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5ZFd4bGN6b2dXMXNuY21WeEp5d2diRzlqWVd4cGVtVW9KMUJzWldGelpTQnpaV3hsWTNRZ1lXNGdiM0IwYVc5dUp5bGRYU3hjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0I5TzF4dWZUdGNibHh1WTI5dWMzUWdabWx1WVc1amFXRnNSR1YwWVdsc2MwTnZibVpwWnlBOUlDaGNiaUFnSUNCN0lISmxZV3hmWVdOamIzVnVkRjl6YVdkdWRYQmZkR0Z5WjJWMExDQm1hVzVoYm1OcFlXeGZZWE56WlhOemJXVnVkQ0I5T2lCVVJtbHVZVzVqYVdGc1JHVjBZV2xzYzBOdmJtWnBaeXhjYmlBZ0lDQkdhVzVoYm1OcFlXeEVaWFJoYVd4ek9pQlNaV0ZqZEM1RGIyMXdiMjVsYm5SY2Jpa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHTnZibVpwWnlBOUlHWnBibUZ1WTJsaGJGOWtaWFJoYVd4elgyTnZibVpwWnloN0lHWnBibUZ1WTJsaGJGOWhjM05sYzNOdFpXNTBJSDBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnYUdWaFpHVnlPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZM1JwZG1WZmRHbDBiR1U2SUd4dlkyRnNhWHBsS0NkRGIyMXdiR1YwWlNCNWIzVnlJR1pwYm1GdVkybGhiQ0JoYzNObGMzTnRaVzUwSnlrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYVhSc1pUb2diRzlqWVd4cGVtVW9KMFpwYm1GdVkybGhiQ0JoYzNObGMzTnRaVzUwSnlrc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR0p2WkhrNklFWnBibUZ1WTJsaGJFUmxkR0ZwYkhNc1hHNGdJQ0FnSUNBZ0lHWnZjbTFmZG1Gc2RXVTZJR2RsZEVSbFptRjFiSFJHYVdWc1pITW9jbVZoYkY5aFkyTnZkVzUwWDNOcFoyNTFjRjkwWVhKblpYUXNJR052Ym1acFp5a3NYRzRnSUNBZ0lDQWdJSEJ5YjNCek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeHBaR0YwWlRvZ1oyVnVaWEpoZEdWV1lXeHBaR0YwYVc5dVJuVnVZM1JwYjI0b2NtVmhiRjloWTJOdmRXNTBYM05wWjI1MWNGOTBZWEpuWlhRc0lHTnZibVpwWnlrc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSEJoYzNOMGFISnZkV2RvT2lCYkozSmxjMmxrWlc1alpWOXNhWE4wSnl3Z0oybHpYMloxYkd4NVgyRjFkR2hsYm5ScFkyRjBaV1FuWFN4Y2JpQWdJQ0I5TzF4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHZGxkRUZqWTI5MWJuUlVkWEp1YjNabGNreHBjM1FnUFNBb0tTQTlQaUJiWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwWlhoME9pQnNiMk5oYkdsNlpTZ25UR1Z6Y3lCMGFHRnVJQ1F5TlN3d01EQW5LU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ2RNWlhOeklIUm9ZVzRnSkRJMUxEQXdNQ2NzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDY2tNalVzTURBd0lDMGdKRFV3TERBd01DY3BMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dKeVF5TlN3d01EQWdMU0FrTlRBc01EQXdKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ2JHOWpZV3hwZW1Vb0p5UTFNQ3d3TURFZ0xTQWtNVEF3TERBd01DY3BMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dKeVExTUN3d01ERWdMU0FrTVRBd0xEQXdNQ2NzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDY2tNVEF3TERBd01TQXRJQ1ExTURBc01EQXdKeWtzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFuSkRFd01Dd3dNREVnTFNBa05UQXdMREF3TUNjc1hHNGdJQ0FnZlN4Y2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSbGVIUTZJR3h2WTJGc2FYcGxLQ2RQZG1WeUlDUTFNREFzTURBd0p5a3NYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQW5UM1psY2lBa05UQXdMREF3TUNjc1hHNGdJQ0FnZlN4Y2JsMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQm5aWFJGYlhCc2IzbHRaVzUwU1c1a2RYTjBjbmxNYVhOMElEMGdLQ2tnUFQ0Z1cxeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHVjRkRG9nYkc5allXeHBlbVVvSjBOdmJuTjBjblZqZEdsdmJpY3BMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dKME52Ym5OMGNuVmpkR2x2Ymljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSbGVIUTZJR3h2WTJGc2FYcGxLQ2RGWkhWallYUnBiMjRuS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkRlpIVmpZWFJwYjI0bkxGeHVJQ0FnSUgwc1hHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMFpYaDBPaUJzYjJOaGJHbDZaU2duUm1sdVlXNWpaU2NwTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSjBacGJtRnVZMlVuTEZ4dUlDQWdJSDBzWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwWlhoME9pQnNiMk5oYkdsNlpTZ25TR1ZoYkhSb0p5a3NYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQW5TR1ZoYkhSb0p5eGNiaUFnSUNCOUxGeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHVjRkRG9nYkc5allXeHBlbVVvSjFSdmRYSnBjMjBuS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkVWIzVnlhWE50Snl4Y2JpQWdJQ0I5TEZ4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdWNGREb2diRzlqWVd4cGVtVW9KMGx1Wm05eWJXRjBhVzl1SUNZZ1EyOXRiWFZ1YVdOaGRHbHZibk1nVkdWamFHNXZiRzluZVNjcExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0owbHVabTl5YldGMGFXOXVJQ1lnUTI5dGJYVnVhV05oZEdsdmJuTWdWR1ZqYUc1dmJHOW5lU2NzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZFRZMmxsYm1ObElDWWdSVzVuYVc1bFpYSnBibWNuS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkVFkybGxibU5sSUNZZ1JXNW5hVzVsWlhKcGJtY25MRnh1SUNBZ0lIMHNYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBaWGgwT2lCc2IyTmhiR2w2WlNnblRHVm5ZV3duS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkTVpXZGhiQ2NzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZFRiMk5wWVd3Z0ppQkRkV3gwZFhKaGJDY3BMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dKMU52WTJsaGJDQW1JRU4xYkhSMWNtRnNKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ2JHOWpZV3hwZW1Vb0owRm5jbWxqZFd4MGRYSmxKeWtzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFuUVdkeWFXTjFiSFIxY21VbkxGeHVJQ0FnSUgwc1hHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMFpYaDBPaUJzYjJOaGJHbDZaU2duVW1WaGJDQkZjM1JoZEdVbktTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDZFNaV0ZzSUVWemRHRjBaU2NzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZEdiMjlrSUZObGNuWnBZMlZ6Snlrc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBblJtOXZaQ0JUWlhKMmFXTmxjeWNzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZE5ZVzUxWm1GamRIVnlhVzVuSnlrc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBblRXRnVkV1poWTNSMWNtbHVaeWNzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZFZibVZ0Y0d4dmVXVmtKeWtzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFuVlc1bGJYQnNiM2xsWkNjc1hHNGdJQ0FnZlN4Y2JsMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQm5aWFJQWTJOMWNHRjBhVzl1VEdsemRDQTlJQ2dwSUQwK0lGdGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUmxlSFE2SUd4dlkyRnNhWHBsS0NkRGFHbGxaaUJGZUdWamRYUnBkbVZ6TENCVFpXNXBiM0lnVDJabWFXTnBZV3h6SUdGdVpDQk1aV2RwYzJ4aGRHOXljeWNwTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSjBOb2FXVm1JRVY0WldOMWRHbDJaWE1zSUZObGJtbHZjaUJQWm1acFkybGhiSE1nWVc1a0lFeGxaMmx6YkdGMGIzSnpKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ2JHOWpZV3hwZW1Vb0owMWhibUZuWlhKekp5a3NYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQW5UV0Z1WVdkbGNuTW5MRnh1SUNBZ0lIMHNYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBaWGgwT2lCc2IyTmhiR2w2WlNnblVISnZabVZ6YzJsdmJtRnNjeWNwTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSjFCeWIyWmxjM05wYjI1aGJITW5MRnh1SUNBZ0lIMHNYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBaWGgwT2lCc2IyTmhiR2w2WlNnblEyeGxjbXR6Snlrc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBblEyeGxjbXR6Snl4Y2JpQWdJQ0I5TEZ4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdWNGREb2diRzlqWVd4cGVtVW9KMUJsY25OdmJtRnNJRU5oY21Vc0lGTmhiR1Z6SUdGdVpDQlRaWEoyYVdObElGZHZjbXRsY25NbktTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDZFFaWEp6YjI1aGJDQkRZWEpsTENCVFlXeGxjeUJoYm1RZ1UyVnlkbWxqWlNCWGIzSnJaWEp6Snl4Y2JpQWdJQ0I5TEZ4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdWNGREb2diRzlqWVd4cGVtVW9KMEZuY21samRXeDBkWEpoYkN3Z1JtOXlaWE4wY25rZ1lXNWtJRVpwYzJobGNua2dWMjl5YTJWeWN5Y3BMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dKMEZuY21samRXeDBkWEpoYkN3Z1JtOXlaWE4wY25rZ1lXNWtJRVpwYzJobGNua2dWMjl5YTJWeWN5Y3NYRzRnSUNBZ2ZTeGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUmxlSFE2SUd4dlkyRnNhWHBsS0NkRGNtRm1kQ3dnVFdWMFlXd3NJRVZzWldOMGNtbGpZV3dnWVc1a0lFVnNaV04wY205dWFXTnpJRmR2Y210bGNuTW5LU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ2REY21GbWRDd2dUV1YwWVd3c0lFVnNaV04wY21sallXd2dZVzVrSUVWc1pXTjBjbTl1YVdOeklGZHZjbXRsY25NbkxGeHVJQ0FnSUgwc1hHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMFpYaDBPaUJzYjJOaGJHbDZaU2duVUd4aGJuUWdZVzVrSUUxaFkyaHBibVVnVDNCbGNtRjBiM0p6SUdGdVpDQkJjM05sYldKc1pYSnpKeWtzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFuVUd4aGJuUWdZVzVrSUUxaFkyaHBibVVnVDNCbGNtRjBiM0p6SUdGdVpDQkJjM05sYldKc1pYSnpKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ2JHOWpZV3hwZW1Vb0owTnNaV0Z1WlhKeklHRnVaQ0JJWld4d1pYSnpKeWtzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFuUTJ4bFlXNWxjbk1nWVc1a0lFaGxiSEJsY25NbkxGeHVJQ0FnSUgwc1hHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMFpYaDBPaUJzYjJOaGJHbDZaU2duVFdsdWFXNW5MQ0JEYjI1emRISjFZM1JwYjI0c0lFMWhiblZtWVdOMGRYSnBibWNnWVc1a0lGUnlZVzV6Y0c5eWRDQlhiM0pyWlhKekp5a3NYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQW5UV2x1YVc1bkxDQkRiMjV6ZEhKMVkzUnBiMjRzSUUxaGJuVm1ZV04wZFhKcGJtY2dZVzVrSUZSeVlXNXpjRzl5ZENCWGIzSnJaWEp6Snl4Y2JpQWdJQ0I5TEZ4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdWNGREb2diRzlqWVd4cGVtVW9KMEZ5YldWa0lFWnZjbU5sY3ljcExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0owRnliV1ZrSUVadmNtTmxjeWNzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZEhiM1psY201dFpXNTBJRTltWm1salpYSnpKeWtzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFuUjI5MlpYSnViV1Z1ZENCUFptWnBZMlZ5Y3ljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSbGVIUTZJR3h2WTJGc2FYcGxLQ2RUZEhWa1pXNTBjeWNwTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSjFOMGRXUmxiblJ6Snl4Y2JpQWdJQ0I5TEZ4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdWNGREb2diRzlqWVd4cGVtVW9KMVZ1Wlcxd2JHOTVaV1FuS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkVmJtVnRjR3h2ZVdWa0p5eGNiaUFnSUNCOUxGeHVYVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJR2RsZEZOdmRYSmpaVTltVjJWaGJIUm9UR2x6ZENBOUlDZ3BJRDArSUZ0Y2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSbGVIUTZJR3h2WTJGc2FYcGxLQ2RCWTJOMWJYVnNZWFJwYjI0Z2IyWWdTVzVqYjIxbEwxTmhkbWx1WjNNbktTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDZEJZMk4xYlhWc1lYUnBiMjRnYjJZZ1NXNWpiMjFsTDFOaGRtbHVaM01uTEZ4dUlDQWdJSDBzWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwWlhoME9pQnNiMk5oYkdsNlpTZ25RMkZ6YUNCQ2RYTnBibVZ6Y3ljcExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0owTmhjMmdnUW5WemFXNWxjM01uTEZ4dUlDQWdJSDBzWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwWlhoME9pQnNiMk5oYkdsNlpTZ25RMjl0Y0dGdWVTQlBkMjVsY25Ob2FYQW5LU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ2REYjIxd1lXNTVJRTkzYm1WeWMyaHBjQ2NzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZEVhWFp2Y21ObElGTmxkSFJzWlcxbGJuUW5LU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ2RFYVhadmNtTmxJRk5sZEhSc1pXMWxiblFuTEZ4dUlDQWdJSDBzWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwWlhoME9pQnNiMk5oYkdsNlpTZ25TVzVvWlhKcGRHRnVZMlVuS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkSmJtaGxjbWwwWVc1alpTY3NYRzRnSUNBZ2ZTeGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUmxlSFE2SUd4dlkyRnNhWHBsS0NkSmJuWmxjM1J0Wlc1MElFbHVZMjl0WlNjcExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0owbHVkbVZ6ZEcxbGJuUWdTVzVqYjIxbEp5eGNiaUFnSUNCOUxGeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHVjRkRG9nYkc5allXeHBlbVVvSjFOaGJHVWdiMllnVUhKdmNHVnlkSGtuS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkVFlXeGxJRzltSUZCeWIzQmxjblI1Snl4Y2JpQWdJQ0I5TEZ4dVhUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHZGxkRVZrZFdOaGRHbHZia3hsZG1Wc1RHbHpkQ0E5SUNncElEMCtJRnRjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZFFjbWx0WVhKNUp5a3NYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQW5VSEpwYldGeWVTY3NYRzRnSUNBZ2ZTeGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUmxlSFE2SUd4dlkyRnNhWHBsS0NkVFpXTnZibVJoY25rbktTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDZFRaV052Ym1SaGNua25MRnh1SUNBZ0lIMHNYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBaWGgwT2lCc2IyTmhiR2w2WlNnblZHVnlkR2xoY25rbktTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDZFVaWEowYVdGeWVTY3NYRzRnSUNBZ2ZTeGNibDA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JuWlhST1pYUkpibU52YldWTWFYTjBJRDBnS0NrZ1BUNGdXeTR1TG1kbGRFRmpZMjkxYm5SVWRYSnViM1psY2t4cGMzUW9LVjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JuWlhSRmMzUnBiV0YwWldSWGIzSjBhRXhwYzNRZ1BTQW9LU0E5UGlCYlhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMFpYaDBPaUJzYjJOaGJHbDZaU2duVEdWemN5QjBhR0Z1SUNReE1EQXNNREF3Snlrc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBblRHVnpjeUIwYUdGdUlDUXhNREFzTURBd0p5eGNiaUFnSUNCOUxGeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHVjRkRG9nYkc5allXeHBlbVVvSnlReE1EQXNNREF3SUMwZ0pESTFNQ3d3TURBbktTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDY2tNVEF3TERBd01DQXRJQ1F5TlRBc01EQXdKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ2JHOWpZV3hwZW1Vb0p5UXlOVEFzTURBeElDMGdKRFV3TUN3d01EQW5LU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ2NrTWpVd0xEQXdNU0F0SUNRMU1EQXNNREF3Snl4Y2JpQWdJQ0I5TEZ4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdWNGREb2diRzlqWVd4cGVtVW9KeVExTURBc01EQXhJQzBnSkRFc01EQXdMREF3TUNjcExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0p5UTFNREFzTURBeElDMGdKREVzTURBd0xEQXdNQ2NzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZFBkbVZ5SUNReExEQXdNQ3d3TURBbktTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDZFBkbVZ5SUNReExEQXdNQ3d3TURBbkxGeHVJQ0FnSUgwc1hHNWRPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdaMlYwU1c1amIyMWxVMjkxY21ObFRHbHpkQ0E5SUNncElEMCtJRnRjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZFRZV3hoY21sbFpDQkZiWEJzYjNsbFpTY3BMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dKMU5oYkdGeWFXVmtJRVZ0Y0d4dmVXVmxKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ2JHOWpZV3hwZW1Vb0oxTmxiR1l0Ulcxd2JHOTVaV1FuS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkVFpXeG1MVVZ0Y0d4dmVXVmtKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ2JHOWpZV3hwZW1Vb0owbHVkbVZ6ZEcxbGJuUnpJQ1lnUkdsMmFXUmxibVJ6Snlrc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBblNXNTJaWE4wYldWdWRITWdKaUJFYVhacFpHVnVaSE1uTEZ4dUlDQWdJSDBzWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwWlhoME9pQnNiMk5oYkdsNlpTZ25VR1Z1YzJsdmJpY3BMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dKMUJsYm5OcGIyNG5MRnh1SUNBZ0lIMHNYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBaWGgwT2lCc2IyTmhiR2w2WlNnblUzUmhkR1VnUW1WdVpXWnBkSE1uS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkVGRHRjBaU0JDWlc1bFptbDBjeWNzWEc0Z0lDQWdmU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJsZUhRNklHeHZZMkZzYVhwbEtDZFRZWFpwYm1keklDWWdTVzVvWlhKcGRHRnVZMlVuS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNkVFlYWnBibWR6SUNZZ1NXNW9aWEpwZEdGdVkyVW5MRnh1SUNBZ0lIMHNYRzVkTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWjJWMFJtOXliV0YwZEdWa1QyTmpkWEJoZEdsdmJreHBjM1FnUFNBb1pXMXdiRzk1YldWdWRGOXpkR0YwZFhNL09pQnpkSEpwYm1jcElEMCtYRzRnSUNBZ1pXMXdiRzk1YldWdWRGOXpkR0YwZFhNZ0ppWWdaVzF3Ykc5NWJXVnVkRjl6ZEdGMGRYTWdQVDA5SUVWTlVFeFBXVTFGVGxSZlZrRk1WVVZUTGtWTlVFeFBXVVZFWEc0Z0lDQWdJQ0FnSUQ4Z1oyVjBUMk5qZFhCaGRHbHZia3hwYzNRb0tTNW1hV3gwWlhJb2FYUmxiU0E5UGlCcGRHVnRMblpoYkhWbElDRTlQU0JGVFZCTVQxbE5SVTVVWDFaQlRGVkZVeTVWVGtWTlVFeFBXVVZFS1Z4dUlDQWdJQ0FnSUNBNklHZGxkRTlqWTNWd1lYUnBiMjVNYVhOMEtDazdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1pwYm1GdVkybGhiRVJsZEdGcGJITkRiMjVtYVdjN1hHNGlYU3dpYm1GdFpYTWlPbHRkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vQ29uZmlncy9maW5hbmNpYWwtZGV0YWlscy1jb25maWcudHNcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vQ29uc3RhbnRzL2ZpbmFuY2lhbC1kZXRhaWxzLnRzXCI6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbmV2YWwoXCIvKiB1bnVzZWQgaGFybW9ueSBleHBvcnQgRU1QTE9ZTUVOVF9WQUxVRVMgKi9cXG52YXIgRU1QTE9ZTUVOVF9WQUxVRVMgPSB7XFxuICBFTVBMT1lFRDogJ0VtcGxveWVkJyxcXG4gIFVORU1QTE9ZRUQ6ICdVbmVtcGxveWVkJ1xcbn07Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5RGIyNXpkR0Z1ZEhNdlptbHVZVzVqYVdGc0xXUmxkR0ZwYkhNdWRITXVhbk1pTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dlFHUmxjbWwyTDJGalkyOTFiblF2TGk5RGIyNXpkR0Z1ZEhNdlptbHVZVzVqYVdGc0xXUmxkR0ZwYkhNdWRITS9ZVEV3T0NKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25RZ1kyOXVjM1FnUlUxUVRFOVpUVVZPVkY5V1FVeFZSVk1nUFNCN1hHNGdJQ0FnUlUxUVRFOVpSVVE2SUNkRmJYQnNiM2xsWkNjc1hHNGdJQ0FnVlU1RlRWQk1UMWxGUkRvZ0oxVnVaVzF3Ykc5NVpXUW5MRnh1ZlR0Y2JpSmRMQ0p1WVcxbGN5STZXMTBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vQ29uc3RhbnRzL2ZpbmFuY2lhbC1kZXRhaWxzLnRzXFxuXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJAZGVyaXYvc2hhcmVkXCI6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X3NoYXJlZF9fO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJAZGVyaXYvdHJhbnNsYXRpb25zXCI6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X3RyYW5zbGF0aW9uc19fO1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuLyoqKioqKi8gXHRcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuLyoqKioqKi8gXHRcdFx0XHQoKSA9PiAobW9kdWxlKTtcbi8qKioqKiovIFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSlcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gc3RhcnR1cFxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0Ly8gVGhpcyBlbnRyeSBtb2R1bGUgY2FuJ3QgYmUgaW5saW5lZCBiZWNhdXNlIHRoZSBldmFsLXNvdXJjZS1tYXAgZGV2dG9vbCBpcyB1c2VkLlxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL0NvbmZpZ3MvZmluYW5jaWFsLWRldGFpbHMtY29uZmlnLnRzXCIpO1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl07XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbi8qKioqKiovIH0pKClcbjtcbn0pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../account/dist/account/js/financial-details-config.js\n");

/***/ }),

/***/ "../../account/dist/account/js/financial-details.js":
/*!**********************************************************!*\
  !*** ../../account/dist/account/js/financial-details.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.ts\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Components/financial-details/index.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ Components_financial_details)\\n});\\n\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n;// CONCATENATED MODULE: ../../../node_modules/formik/node_modules/deepmerge/dist/es.js\\nvar isMergeableObject = function isMergeableObject(value) {\\n\\treturn isNonNullObject(value)\\n\\t\\t&& !isSpecial(value)\\n};\\n\\nfunction isNonNullObject(value) {\\n\\treturn !!value && typeof value === 'object'\\n}\\n\\nfunction isSpecial(value) {\\n\\tvar stringValue = Object.prototype.toString.call(value);\\n\\n\\treturn stringValue === '[object RegExp]'\\n\\t\\t|| stringValue === '[object Date]'\\n\\t\\t|| isReactElement(value)\\n}\\n\\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\\n\\nfunction isReactElement(value) {\\n\\treturn value.$$typeof === REACT_ELEMENT_TYPE\\n}\\n\\nfunction emptyTarget(val) {\\n\\treturn Array.isArray(val) ? [] : {}\\n}\\n\\nfunction cloneUnlessOtherwiseSpecified(value, options) {\\n\\treturn (options.clone !== false && options.isMergeableObject(value))\\n\\t\\t? deepmerge(emptyTarget(value), value, options)\\n\\t\\t: value\\n}\\n\\nfunction defaultArrayMerge(target, source, options) {\\n\\treturn target.concat(source).map(function(element) {\\n\\t\\treturn cloneUnlessOtherwiseSpecified(element, options)\\n\\t})\\n}\\n\\nfunction mergeObject(target, source, options) {\\n\\tvar destination = {};\\n\\tif (options.isMergeableObject(target)) {\\n\\t\\tObject.keys(target).forEach(function(key) {\\n\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\\n\\t\\t});\\n\\t}\\n\\tObject.keys(source).forEach(function(key) {\\n\\t\\tif (!options.isMergeableObject(source[key]) || !target[key]) {\\n\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\\n\\t\\t} else {\\n\\t\\t\\tdestination[key] = deepmerge(target[key], source[key], options);\\n\\t\\t}\\n\\t});\\n\\treturn destination\\n}\\n\\nfunction deepmerge(target, source, options) {\\n\\toptions = options || {};\\n\\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\\n\\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\\n\\n\\tvar sourceIsArray = Array.isArray(source);\\n\\tvar targetIsArray = Array.isArray(target);\\n\\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\\n\\n\\tif (!sourceAndTargetTypesMatch) {\\n\\t\\treturn cloneUnlessOtherwiseSpecified(source, options)\\n\\t} else if (sourceIsArray) {\\n\\t\\treturn options.arrayMerge(target, source, options)\\n\\t} else {\\n\\t\\treturn mergeObject(target, source, options)\\n\\t}\\n}\\n\\ndeepmerge.all = function deepmergeAll(array, options) {\\n\\tif (!Array.isArray(array)) {\\n\\t\\tthrow new Error('first argument should be an array')\\n\\t}\\n\\n\\treturn array.reduce(function(prev, next) {\\n\\t\\treturn deepmerge(prev, next, options)\\n\\t}, {})\\n};\\n\\nvar deepmerge_1 = deepmerge;\\n\\n/* harmony default export */ const es = (deepmerge_1);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_freeGlobal.js\\n/** Detect free variable `global` from Node.js. */\\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\\n\\n/* harmony default export */ const _freeGlobal = (freeGlobal);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_root.js\\n\\n\\n/** Detect free variable `self`. */\\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\\n\\n/** Used as a reference to the global object. */\\nvar root = _freeGlobal || freeSelf || Function('return this')();\\n\\n/* harmony default export */ const _root = (root);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Symbol.js\\n\\n\\n/** Built-in value references. */\\nvar _Symbol_Symbol = _root.Symbol;\\n\\n/* harmony default export */ const _Symbol = (_Symbol_Symbol);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getRawTag.js\\n\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _getRawTag_hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar nativeObjectToString = objectProto.toString;\\n\\n/** Built-in value references. */\\nvar symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\\n\\n/**\\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the raw `toStringTag`.\\n */\\nfunction getRawTag(value) {\\n  var isOwn = _getRawTag_hasOwnProperty.call(value, symToStringTag),\\n      tag = value[symToStringTag];\\n\\n  try {\\n    value[symToStringTag] = undefined;\\n    var unmasked = true;\\n  } catch (e) {}\\n\\n  var result = nativeObjectToString.call(value);\\n  if (unmasked) {\\n    if (isOwn) {\\n      value[symToStringTag] = tag;\\n    } else {\\n      delete value[symToStringTag];\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _getRawTag = (getRawTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_objectToString.js\\n/** Used for built-in method references. */\\nvar _objectToString_objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar _objectToString_nativeObjectToString = _objectToString_objectProto.toString;\\n\\n/**\\n * Converts `value` to a string using `Object.prototype.toString`.\\n *\\n * @private\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n */\\nfunction objectToString(value) {\\n  return _objectToString_nativeObjectToString.call(value);\\n}\\n\\n/* harmony default export */ const _objectToString = (objectToString);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseGetTag.js\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar nullTag = '[object Null]',\\n    undefinedTag = '[object Undefined]';\\n\\n/** Built-in value references. */\\nvar _baseGetTag_symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\\n\\n/**\\n * The base implementation of `getTag` without fallbacks for buggy environments.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nfunction baseGetTag(value) {\\n  if (value == null) {\\n    return value === undefined ? undefinedTag : nullTag;\\n  }\\n  return (_baseGetTag_symToStringTag && _baseGetTag_symToStringTag in Object(value))\\n    ? _getRawTag(value)\\n    : _objectToString(value);\\n}\\n\\n/* harmony default export */ const _baseGetTag = (baseGetTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_overArg.js\\n/**\\n * Creates a unary function that invokes `func` with its argument transformed.\\n *\\n * @private\\n * @param {Function} func The function to wrap.\\n * @param {Function} transform The argument transform.\\n * @returns {Function} Returns the new function.\\n */\\nfunction overArg(func, transform) {\\n  return function(arg) {\\n    return func(transform(arg));\\n  };\\n}\\n\\n/* harmony default export */ const _overArg = (overArg);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getPrototype.js\\n\\n\\n/** Built-in value references. */\\nvar getPrototype = _overArg(Object.getPrototypeOf, Object);\\n\\n/* harmony default export */ const _getPrototype = (getPrototype);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isObjectLike.js\\n/**\\n * Checks if `value` is object-like. A value is object-like if it's not `null`\\n * and has a `typeof` result of \\\"object\\\".\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\\n * @example\\n *\\n * _.isObjectLike({});\\n * // => true\\n *\\n * _.isObjectLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isObjectLike(_.noop);\\n * // => false\\n *\\n * _.isObjectLike(null);\\n * // => false\\n */\\nfunction isObjectLike(value) {\\n  return value != null && typeof value == 'object';\\n}\\n\\n/* harmony default export */ const lodash_es_isObjectLike = (isObjectLike);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isPlainObject.js\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar objectTag = '[object Object]';\\n\\n/** Used for built-in method references. */\\nvar funcProto = Function.prototype,\\n    isPlainObject_objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = funcProto.toString;\\n\\n/** Used to check objects for own properties. */\\nvar isPlainObject_hasOwnProperty = isPlainObject_objectProto.hasOwnProperty;\\n\\n/** Used to infer the `Object` constructor. */\\nvar objectCtorString = funcToString.call(Object);\\n\\n/**\\n * Checks if `value` is a plain object, that is, an object created by the\\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.8.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n * }\\n *\\n * _.isPlainObject(new Foo);\\n * // => false\\n *\\n * _.isPlainObject([1, 2, 3]);\\n * // => false\\n *\\n * _.isPlainObject({ 'x': 0, 'y': 0 });\\n * // => true\\n *\\n * _.isPlainObject(Object.create(null));\\n * // => true\\n */\\nfunction isPlainObject(value) {\\n  if (!lodash_es_isObjectLike(value) || _baseGetTag(value) != objectTag) {\\n    return false;\\n  }\\n  var proto = _getPrototype(value);\\n  if (proto === null) {\\n    return true;\\n  }\\n  var Ctor = isPlainObject_hasOwnProperty.call(proto, 'constructor') && proto.constructor;\\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\\n    funcToString.call(Ctor) == objectCtorString;\\n}\\n\\n/* harmony default export */ const lodash_es_isPlainObject = (isPlainObject);\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: ../../../node_modules/react-fast-compare/index.js\\nvar react_fast_compare = __webpack_require__(\\\"../../../node_modules/react-fast-compare/index.js\\\");\\nvar react_fast_compare_default = /*#__PURE__*/__webpack_require__.n(react_fast_compare);\\n;// CONCATENATED MODULE: ../../../node_modules/tiny-warning/dist/tiny-warning.esm.js\\nvar isProduction = \\\"production\\\" === 'production';\\nfunction warning(condition, message) {\\n  if (!isProduction) {\\n    if (condition) {\\n      return;\\n    }\\n\\n    var text = \\\"Warning: \\\" + message;\\n\\n    if (typeof console !== 'undefined') {\\n      console.warn(text);\\n    }\\n\\n    try {\\n      throw Error(text);\\n    } catch (x) {}\\n  }\\n}\\n\\n/* harmony default export */ const tiny_warning_esm = (warning);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheClear.js\\n/**\\n * Removes all key-value entries from the list cache.\\n *\\n * @private\\n * @name clear\\n * @memberOf ListCache\\n */\\nfunction listCacheClear() {\\n  this.__data__ = [];\\n  this.size = 0;\\n}\\n\\n/* harmony default export */ const _listCacheClear = (listCacheClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/eq.js\\n/**\\n * Performs a\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * comparison between two values to determine if they are equivalent.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\\n * @example\\n *\\n * var object = { 'a': 1 };\\n * var other = { 'a': 1 };\\n *\\n * _.eq(object, object);\\n * // => true\\n *\\n * _.eq(object, other);\\n * // => false\\n *\\n * _.eq('a', 'a');\\n * // => true\\n *\\n * _.eq('a', Object('a'));\\n * // => false\\n *\\n * _.eq(NaN, NaN);\\n * // => true\\n */\\nfunction eq(value, other) {\\n  return value === other || (value !== value && other !== other);\\n}\\n\\n/* harmony default export */ const lodash_es_eq = (eq);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_assocIndexOf.js\\n\\n\\n/**\\n * Gets the index at which the `key` is found in `array` of key-value pairs.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {*} key The key to search for.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction assocIndexOf(array, key) {\\n  var length = array.length;\\n  while (length--) {\\n    if (lodash_es_eq(array[length][0], key)) {\\n      return length;\\n    }\\n  }\\n  return -1;\\n}\\n\\n/* harmony default export */ const _assocIndexOf = (assocIndexOf);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheDelete.js\\n\\n\\n/** Used for built-in method references. */\\nvar arrayProto = Array.prototype;\\n\\n/** Built-in value references. */\\nvar splice = arrayProto.splice;\\n\\n/**\\n * Removes `key` and its value from the list cache.\\n *\\n * @private\\n * @name delete\\n * @memberOf ListCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction listCacheDelete(key) {\\n  var data = this.__data__,\\n      index = _assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    return false;\\n  }\\n  var lastIndex = data.length - 1;\\n  if (index == lastIndex) {\\n    data.pop();\\n  } else {\\n    splice.call(data, index, 1);\\n  }\\n  --this.size;\\n  return true;\\n}\\n\\n/* harmony default export */ const _listCacheDelete = (listCacheDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheGet.js\\n\\n\\n/**\\n * Gets the list cache value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf ListCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction listCacheGet(key) {\\n  var data = this.__data__,\\n      index = _assocIndexOf(data, key);\\n\\n  return index < 0 ? undefined : data[index][1];\\n}\\n\\n/* harmony default export */ const _listCacheGet = (listCacheGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheHas.js\\n\\n\\n/**\\n * Checks if a list cache value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf ListCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction listCacheHas(key) {\\n  return _assocIndexOf(this.__data__, key) > -1;\\n}\\n\\n/* harmony default export */ const _listCacheHas = (listCacheHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheSet.js\\n\\n\\n/**\\n * Sets the list cache `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf ListCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the list cache instance.\\n */\\nfunction listCacheSet(key, value) {\\n  var data = this.__data__,\\n      index = _assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    ++this.size;\\n    data.push([key, value]);\\n  } else {\\n    data[index][1] = value;\\n  }\\n  return this;\\n}\\n\\n/* harmony default export */ const _listCacheSet = (listCacheSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_ListCache.js\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates an list cache object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction ListCache(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `ListCache`.\\nListCache.prototype.clear = _listCacheClear;\\nListCache.prototype['delete'] = _listCacheDelete;\\nListCache.prototype.get = _listCacheGet;\\nListCache.prototype.has = _listCacheHas;\\nListCache.prototype.set = _listCacheSet;\\n\\n/* harmony default export */ const _ListCache = (ListCache);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackClear.js\\n\\n\\n/**\\n * Removes all key-value entries from the stack.\\n *\\n * @private\\n * @name clear\\n * @memberOf Stack\\n */\\nfunction stackClear() {\\n  this.__data__ = new _ListCache;\\n  this.size = 0;\\n}\\n\\n/* harmony default export */ const _stackClear = (stackClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackDelete.js\\n/**\\n * Removes `key` and its value from the stack.\\n *\\n * @private\\n * @name delete\\n * @memberOf Stack\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction stackDelete(key) {\\n  var data = this.__data__,\\n      result = data['delete'](key);\\n\\n  this.size = data.size;\\n  return result;\\n}\\n\\n/* harmony default export */ const _stackDelete = (stackDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackGet.js\\n/**\\n * Gets the stack value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Stack\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction stackGet(key) {\\n  return this.__data__.get(key);\\n}\\n\\n/* harmony default export */ const _stackGet = (stackGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackHas.js\\n/**\\n * Checks if a stack value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Stack\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction stackHas(key) {\\n  return this.__data__.has(key);\\n}\\n\\n/* harmony default export */ const _stackHas = (stackHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isObject.js\\n/**\\n * Checks if `value` is the\\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\\n * @example\\n *\\n * _.isObject({});\\n * // => true\\n *\\n * _.isObject([1, 2, 3]);\\n * // => true\\n *\\n * _.isObject(_.noop);\\n * // => true\\n *\\n * _.isObject(null);\\n * // => false\\n */\\nfunction isObject(value) {\\n  var type = typeof value;\\n  return value != null && (type == 'object' || type == 'function');\\n}\\n\\n/* harmony default export */ const lodash_es_isObject = (isObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isFunction.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar asyncTag = '[object AsyncFunction]',\\n    funcTag = '[object Function]',\\n    genTag = '[object GeneratorFunction]',\\n    proxyTag = '[object Proxy]';\\n\\n/**\\n * Checks if `value` is classified as a `Function` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\\n * @example\\n *\\n * _.isFunction(_);\\n * // => true\\n *\\n * _.isFunction(/abc/);\\n * // => false\\n */\\nfunction isFunction(value) {\\n  if (!lodash_es_isObject(value)) {\\n    return false;\\n  }\\n  // The use of `Object#toString` avoids issues with the `typeof` operator\\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\\n  var tag = _baseGetTag(value);\\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\\n}\\n\\n/* harmony default export */ const lodash_es_isFunction = (isFunction);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_coreJsData.js\\n\\n\\n/** Used to detect overreaching core-js shims. */\\nvar coreJsData = _root[\\\"__core-js_shared__\\\"];\\n\\n/* harmony default export */ const _coreJsData = (coreJsData);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isMasked.js\\n\\n\\n/** Used to detect methods masquerading as native. */\\nvar maskSrcKey = (function() {\\n  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');\\n  return uid ? ('Symbol(src)_1.' + uid) : '';\\n}());\\n\\n/**\\n * Checks if `func` has its source masked.\\n *\\n * @private\\n * @param {Function} func The function to check.\\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\\n */\\nfunction isMasked(func) {\\n  return !!maskSrcKey && (maskSrcKey in func);\\n}\\n\\n/* harmony default export */ const _isMasked = (isMasked);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_toSource.js\\n/** Used for built-in method references. */\\nvar _toSource_funcProto = Function.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar _toSource_funcToString = _toSource_funcProto.toString;\\n\\n/**\\n * Converts `func` to its source code.\\n *\\n * @private\\n * @param {Function} func The function to convert.\\n * @returns {string} Returns the source code.\\n */\\nfunction toSource(func) {\\n  if (func != null) {\\n    try {\\n      return _toSource_funcToString.call(func);\\n    } catch (e) {}\\n    try {\\n      return (func + '');\\n    } catch (e) {}\\n  }\\n  return '';\\n}\\n\\n/* harmony default export */ const _toSource = (toSource);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsNative.js\\n\\n\\n\\n\\n\\n/**\\n * Used to match `RegExp`\\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\\n */\\nvar reRegExpChar = /[\\\\\\\\^$.*+?()[\\\\]{}|]/g;\\n\\n/** Used to detect host constructors (Safari). */\\nvar reIsHostCtor = /^\\\\[object .+?Constructor\\\\]$/;\\n\\n/** Used for built-in method references. */\\nvar _baseIsNative_funcProto = Function.prototype,\\n    _baseIsNative_objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar _baseIsNative_funcToString = _baseIsNative_funcProto.toString;\\n\\n/** Used to check objects for own properties. */\\nvar _baseIsNative_hasOwnProperty = _baseIsNative_objectProto.hasOwnProperty;\\n\\n/** Used to detect if a method is native. */\\nvar reIsNative = RegExp('^' +\\n  _baseIsNative_funcToString.call(_baseIsNative_hasOwnProperty).replace(reRegExpChar, '\\\\\\\\$&')\\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\\\\\\\()| for .+?(?=\\\\\\\\\\\\])/g, '$1.*?') + '$'\\n);\\n\\n/**\\n * The base implementation of `_.isNative` without bad shim checks.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a native function,\\n *  else `false`.\\n */\\nfunction baseIsNative(value) {\\n  if (!lodash_es_isObject(value) || _isMasked(value)) {\\n    return false;\\n  }\\n  var pattern = lodash_es_isFunction(value) ? reIsNative : reIsHostCtor;\\n  return pattern.test(_toSource(value));\\n}\\n\\n/* harmony default export */ const _baseIsNative = (baseIsNative);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getValue.js\\n/**\\n * Gets the value at `key` of `object`.\\n *\\n * @private\\n * @param {Object} [object] The object to query.\\n * @param {string} key The key of the property to get.\\n * @returns {*} Returns the property value.\\n */\\nfunction getValue(object, key) {\\n  return object == null ? undefined : object[key];\\n}\\n\\n/* harmony default export */ const _getValue = (getValue);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getNative.js\\n\\n\\n\\n/**\\n * Gets the native function at `key` of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {string} key The key of the method to get.\\n * @returns {*} Returns the function if it's native, else `undefined`.\\n */\\nfunction getNative(object, key) {\\n  var value = _getValue(object, key);\\n  return _baseIsNative(value) ? value : undefined;\\n}\\n\\n/* harmony default export */ const _getNative = (getNative);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Map.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar Map = _getNative(_root, 'Map');\\n\\n/* harmony default export */ const _Map = (Map);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nativeCreate.js\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar nativeCreate = _getNative(Object, 'create');\\n\\n/* harmony default export */ const _nativeCreate = (nativeCreate);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashClear.js\\n\\n\\n/**\\n * Removes all key-value entries from the hash.\\n *\\n * @private\\n * @name clear\\n * @memberOf Hash\\n */\\nfunction hashClear() {\\n  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};\\n  this.size = 0;\\n}\\n\\n/* harmony default export */ const _hashClear = (hashClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashDelete.js\\n/**\\n * Removes `key` and its value from the hash.\\n *\\n * @private\\n * @name delete\\n * @memberOf Hash\\n * @param {Object} hash The hash to modify.\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction hashDelete(key) {\\n  var result = this.has(key) && delete this.__data__[key];\\n  this.size -= result ? 1 : 0;\\n  return result;\\n}\\n\\n/* harmony default export */ const _hashDelete = (hashDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashGet.js\\n\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/** Used for built-in method references. */\\nvar _hashGet_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _hashGet_hasOwnProperty = _hashGet_objectProto.hasOwnProperty;\\n\\n/**\\n * Gets the hash value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Hash\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction hashGet(key) {\\n  var data = this.__data__;\\n  if (_nativeCreate) {\\n    var result = data[key];\\n    return result === HASH_UNDEFINED ? undefined : result;\\n  }\\n  return _hashGet_hasOwnProperty.call(data, key) ? data[key] : undefined;\\n}\\n\\n/* harmony default export */ const _hashGet = (hashGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashHas.js\\n\\n\\n/** Used for built-in method references. */\\nvar _hashHas_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _hashHas_hasOwnProperty = _hashHas_objectProto.hasOwnProperty;\\n\\n/**\\n * Checks if a hash value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Hash\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction hashHas(key) {\\n  var data = this.__data__;\\n  return _nativeCreate ? (data[key] !== undefined) : _hashHas_hasOwnProperty.call(data, key);\\n}\\n\\n/* harmony default export */ const _hashHas = (hashHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashSet.js\\n\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar _hashSet_HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/**\\n * Sets the hash `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Hash\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the hash instance.\\n */\\nfunction hashSet(key, value) {\\n  var data = this.__data__;\\n  this.size += this.has(key) ? 0 : 1;\\n  data[key] = (_nativeCreate && value === undefined) ? _hashSet_HASH_UNDEFINED : value;\\n  return this;\\n}\\n\\n/* harmony default export */ const _hashSet = (hashSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Hash.js\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates a hash object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Hash(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `Hash`.\\nHash.prototype.clear = _hashClear;\\nHash.prototype['delete'] = _hashDelete;\\nHash.prototype.get = _hashGet;\\nHash.prototype.has = _hashHas;\\nHash.prototype.set = _hashSet;\\n\\n/* harmony default export */ const _Hash = (Hash);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheClear.js\\n\\n\\n\\n\\n/**\\n * Removes all key-value entries from the map.\\n *\\n * @private\\n * @name clear\\n * @memberOf MapCache\\n */\\nfunction mapCacheClear() {\\n  this.size = 0;\\n  this.__data__ = {\\n    'hash': new _Hash,\\n    'map': new (_Map || _ListCache),\\n    'string': new _Hash\\n  };\\n}\\n\\n/* harmony default export */ const _mapCacheClear = (mapCacheClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isKeyable.js\\n/**\\n * Checks if `value` is suitable for use as unique object key.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\\n */\\nfunction isKeyable(value) {\\n  var type = typeof value;\\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\\n    ? (value !== '__proto__')\\n    : (value === null);\\n}\\n\\n/* harmony default export */ const _isKeyable = (isKeyable);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getMapData.js\\n\\n\\n/**\\n * Gets the data for `map`.\\n *\\n * @private\\n * @param {Object} map The map to query.\\n * @param {string} key The reference key.\\n * @returns {*} Returns the map data.\\n */\\nfunction getMapData(map, key) {\\n  var data = map.__data__;\\n  return _isKeyable(key)\\n    ? data[typeof key == 'string' ? 'string' : 'hash']\\n    : data.map;\\n}\\n\\n/* harmony default export */ const _getMapData = (getMapData);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheDelete.js\\n\\n\\n/**\\n * Removes `key` and its value from the map.\\n *\\n * @private\\n * @name delete\\n * @memberOf MapCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction mapCacheDelete(key) {\\n  var result = _getMapData(this, key)['delete'](key);\\n  this.size -= result ? 1 : 0;\\n  return result;\\n}\\n\\n/* harmony default export */ const _mapCacheDelete = (mapCacheDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheGet.js\\n\\n\\n/**\\n * Gets the map value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf MapCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction mapCacheGet(key) {\\n  return _getMapData(this, key).get(key);\\n}\\n\\n/* harmony default export */ const _mapCacheGet = (mapCacheGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheHas.js\\n\\n\\n/**\\n * Checks if a map value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf MapCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction mapCacheHas(key) {\\n  return _getMapData(this, key).has(key);\\n}\\n\\n/* harmony default export */ const _mapCacheHas = (mapCacheHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheSet.js\\n\\n\\n/**\\n * Sets the map `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf MapCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the map cache instance.\\n */\\nfunction mapCacheSet(key, value) {\\n  var data = _getMapData(this, key),\\n      size = data.size;\\n\\n  data.set(key, value);\\n  this.size += data.size == size ? 0 : 1;\\n  return this;\\n}\\n\\n/* harmony default export */ const _mapCacheSet = (mapCacheSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_MapCache.js\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates a map cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction MapCache(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `MapCache`.\\nMapCache.prototype.clear = _mapCacheClear;\\nMapCache.prototype['delete'] = _mapCacheDelete;\\nMapCache.prototype.get = _mapCacheGet;\\nMapCache.prototype.has = _mapCacheHas;\\nMapCache.prototype.set = _mapCacheSet;\\n\\n/* harmony default export */ const _MapCache = (MapCache);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackSet.js\\n\\n\\n\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * Sets the stack `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Stack\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the stack cache instance.\\n */\\nfunction stackSet(key, value) {\\n  var data = this.__data__;\\n  if (data instanceof _ListCache) {\\n    var pairs = data.__data__;\\n    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\\n      pairs.push([key, value]);\\n      this.size = ++data.size;\\n      return this;\\n    }\\n    data = this.__data__ = new _MapCache(pairs);\\n  }\\n  data.set(key, value);\\n  this.size = data.size;\\n  return this;\\n}\\n\\n/* harmony default export */ const _stackSet = (stackSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Stack.js\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates a stack cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Stack(entries) {\\n  var data = this.__data__ = new _ListCache(entries);\\n  this.size = data.size;\\n}\\n\\n// Add methods to `Stack`.\\nStack.prototype.clear = _stackClear;\\nStack.prototype['delete'] = _stackDelete;\\nStack.prototype.get = _stackGet;\\nStack.prototype.has = _stackHas;\\nStack.prototype.set = _stackSet;\\n\\n/* harmony default export */ const _Stack = (Stack);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayEach.js\\n/**\\n * A specialized version of `_.forEach` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayEach(array, iteratee) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length;\\n\\n  while (++index < length) {\\n    if (iteratee(array[index], index, array) === false) {\\n      break;\\n    }\\n  }\\n  return array;\\n}\\n\\n/* harmony default export */ const _arrayEach = (arrayEach);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_defineProperty.js\\n\\n\\nvar defineProperty = (function() {\\n  try {\\n    var func = _getNative(Object, 'defineProperty');\\n    func({}, '', {});\\n    return func;\\n  } catch (e) {}\\n}());\\n\\n/* harmony default export */ const _defineProperty = (defineProperty);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseAssignValue.js\\n\\n\\n/**\\n * The base implementation of `assignValue` and `assignMergeValue` without\\n * value checks.\\n *\\n * @private\\n * @param {Object} object The object to modify.\\n * @param {string} key The key of the property to assign.\\n * @param {*} value The value to assign.\\n */\\nfunction baseAssignValue(object, key, value) {\\n  if (key == '__proto__' && _defineProperty) {\\n    _defineProperty(object, key, {\\n      'configurable': true,\\n      'enumerable': true,\\n      'value': value,\\n      'writable': true\\n    });\\n  } else {\\n    object[key] = value;\\n  }\\n}\\n\\n/* harmony default export */ const _baseAssignValue = (baseAssignValue);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_assignValue.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _assignValue_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _assignValue_hasOwnProperty = _assignValue_objectProto.hasOwnProperty;\\n\\n/**\\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * for equality comparisons.\\n *\\n * @private\\n * @param {Object} object The object to modify.\\n * @param {string} key The key of the property to assign.\\n * @param {*} value The value to assign.\\n */\\nfunction assignValue(object, key, value) {\\n  var objValue = object[key];\\n  if (!(_assignValue_hasOwnProperty.call(object, key) && lodash_es_eq(objValue, value)) ||\\n      (value === undefined && !(key in object))) {\\n    _baseAssignValue(object, key, value);\\n  }\\n}\\n\\n/* harmony default export */ const _assignValue = (assignValue);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copyObject.js\\n\\n\\n\\n/**\\n * Copies properties of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy properties from.\\n * @param {Array} props The property identifiers to copy.\\n * @param {Object} [object={}] The object to copy properties to.\\n * @param {Function} [customizer] The function to customize copied values.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copyObject(source, props, object, customizer) {\\n  var isNew = !object;\\n  object || (object = {});\\n\\n  var index = -1,\\n      length = props.length;\\n\\n  while (++index < length) {\\n    var key = props[index];\\n\\n    var newValue = customizer\\n      ? customizer(object[key], source[key], key, object, source)\\n      : undefined;\\n\\n    if (newValue === undefined) {\\n      newValue = source[key];\\n    }\\n    if (isNew) {\\n      _baseAssignValue(object, key, newValue);\\n    } else {\\n      _assignValue(object, key, newValue);\\n    }\\n  }\\n  return object;\\n}\\n\\n/* harmony default export */ const _copyObject = (copyObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseTimes.js\\n/**\\n * The base implementation of `_.times` without support for iteratee shorthands\\n * or max array length checks.\\n *\\n * @private\\n * @param {number} n The number of times to invoke `iteratee`.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the array of results.\\n */\\nfunction baseTimes(n, iteratee) {\\n  var index = -1,\\n      result = Array(n);\\n\\n  while (++index < n) {\\n    result[index] = iteratee(index);\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseTimes = (baseTimes);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsArguments.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]';\\n\\n/**\\n * The base implementation of `_.isArguments`.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\\n */\\nfunction baseIsArguments(value) {\\n  return lodash_es_isObjectLike(value) && _baseGetTag(value) == argsTag;\\n}\\n\\n/* harmony default export */ const _baseIsArguments = (baseIsArguments);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isArguments.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar isArguments_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar isArguments_hasOwnProperty = isArguments_objectProto.hasOwnProperty;\\n\\n/** Built-in value references. */\\nvar propertyIsEnumerable = isArguments_objectProto.propertyIsEnumerable;\\n\\n/**\\n * Checks if `value` is likely an `arguments` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\\n *  else `false`.\\n * @example\\n *\\n * _.isArguments(function() { return arguments; }());\\n * // => true\\n *\\n * _.isArguments([1, 2, 3]);\\n * // => false\\n */\\nvar isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {\\n  return lodash_es_isObjectLike(value) && isArguments_hasOwnProperty.call(value, 'callee') &&\\n    !propertyIsEnumerable.call(value, 'callee');\\n};\\n\\n/* harmony default export */ const lodash_es_isArguments = (isArguments);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isArray.js\\n/**\\n * Checks if `value` is classified as an `Array` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\\n * @example\\n *\\n * _.isArray([1, 2, 3]);\\n * // => true\\n *\\n * _.isArray(document.body.children);\\n * // => false\\n *\\n * _.isArray('abc');\\n * // => false\\n *\\n * _.isArray(_.noop);\\n * // => false\\n */\\nvar isArray = Array.isArray;\\n\\n/* harmony default export */ const lodash_es_isArray = (isArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/stubFalse.js\\n/**\\n * This method returns `false`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.13.0\\n * @category Util\\n * @returns {boolean} Returns `false`.\\n * @example\\n *\\n * _.times(2, _.stubFalse);\\n * // => [false, false]\\n */\\nfunction stubFalse() {\\n  return false;\\n}\\n\\n/* harmony default export */ const lodash_es_stubFalse = (stubFalse);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isBuffer.js\\n\\n\\n\\n/** Detect free variable `exports`. */\\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar moduleExports = freeModule && freeModule.exports === freeExports;\\n\\n/** Built-in value references. */\\nvar Buffer = moduleExports ? _root.Buffer : undefined;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\\n\\n/**\\n * Checks if `value` is a buffer.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\\n * @example\\n *\\n * _.isBuffer(new Buffer(2));\\n * // => true\\n *\\n * _.isBuffer(new Uint8Array(2));\\n * // => false\\n */\\nvar isBuffer = nativeIsBuffer || lodash_es_stubFalse;\\n\\n/* harmony default export */ const lodash_es_isBuffer = (isBuffer);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isIndex.js\\n/** Used as references for various `Number` constants. */\\nvar MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/** Used to detect unsigned integer values. */\\nvar reIsUint = /^(?:0|[1-9]\\\\d*)$/;\\n\\n/**\\n * Checks if `value` is a valid array-like index.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\\n */\\nfunction isIndex(value, length) {\\n  var type = typeof value;\\n  length = length == null ? MAX_SAFE_INTEGER : length;\\n\\n  return !!length &&\\n    (type == 'number' ||\\n      (type != 'symbol' && reIsUint.test(value))) &&\\n        (value > -1 && value % 1 == 0 && value < length);\\n}\\n\\n/* harmony default export */ const _isIndex = (isIndex);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isLength.js\\n/** Used as references for various `Number` constants. */\\nvar isLength_MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/**\\n * Checks if `value` is a valid array-like length.\\n *\\n * **Note:** This method is loosely based on\\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\\n * @example\\n *\\n * _.isLength(3);\\n * // => true\\n *\\n * _.isLength(Number.MIN_VALUE);\\n * // => false\\n *\\n * _.isLength(Infinity);\\n * // => false\\n *\\n * _.isLength('3');\\n * // => false\\n */\\nfunction isLength(value) {\\n  return typeof value == 'number' &&\\n    value > -1 && value % 1 == 0 && value <= isLength_MAX_SAFE_INTEGER;\\n}\\n\\n/* harmony default export */ const lodash_es_isLength = (isLength);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsTypedArray.js\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _baseIsTypedArray_argsTag = '[object Arguments]',\\n    arrayTag = '[object Array]',\\n    boolTag = '[object Boolean]',\\n    dateTag = '[object Date]',\\n    errorTag = '[object Error]',\\n    _baseIsTypedArray_funcTag = '[object Function]',\\n    mapTag = '[object Map]',\\n    numberTag = '[object Number]',\\n    _baseIsTypedArray_objectTag = '[object Object]',\\n    regexpTag = '[object RegExp]',\\n    setTag = '[object Set]',\\n    stringTag = '[object String]',\\n    weakMapTag = '[object WeakMap]';\\n\\nvar arrayBufferTag = '[object ArrayBuffer]',\\n    dataViewTag = '[object DataView]',\\n    float32Tag = '[object Float32Array]',\\n    float64Tag = '[object Float64Array]',\\n    int8Tag = '[object Int8Array]',\\n    int16Tag = '[object Int16Array]',\\n    int32Tag = '[object Int32Array]',\\n    uint8Tag = '[object Uint8Array]',\\n    uint8ClampedTag = '[object Uint8ClampedArray]',\\n    uint16Tag = '[object Uint16Array]',\\n    uint32Tag = '[object Uint32Array]';\\n\\n/** Used to identify `toStringTag` values of typed arrays. */\\nvar typedArrayTags = {};\\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\\ntypedArrayTags[uint32Tag] = true;\\ntypedArrayTags[_baseIsTypedArray_argsTag] = typedArrayTags[arrayTag] =\\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\\ntypedArrayTags[errorTag] = typedArrayTags[_baseIsTypedArray_funcTag] =\\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\\ntypedArrayTags[_baseIsTypedArray_objectTag] = typedArrayTags[regexpTag] =\\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\\ntypedArrayTags[weakMapTag] = false;\\n\\n/**\\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\\n */\\nfunction baseIsTypedArray(value) {\\n  return lodash_es_isObjectLike(value) &&\\n    lodash_es_isLength(value.length) && !!typedArrayTags[_baseGetTag(value)];\\n}\\n\\n/* harmony default export */ const _baseIsTypedArray = (baseIsTypedArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseUnary.js\\n/**\\n * The base implementation of `_.unary` without support for storing metadata.\\n *\\n * @private\\n * @param {Function} func The function to cap arguments for.\\n * @returns {Function} Returns the new capped function.\\n */\\nfunction baseUnary(func) {\\n  return function(value) {\\n    return func(value);\\n  };\\n}\\n\\n/* harmony default export */ const _baseUnary = (baseUnary);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nodeUtil.js\\n\\n\\n/** Detect free variable `exports`. */\\nvar _nodeUtil_freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar _nodeUtil_freeModule = _nodeUtil_freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar _nodeUtil_moduleExports = _nodeUtil_freeModule && _nodeUtil_freeModule.exports === _nodeUtil_freeExports;\\n\\n/** Detect free variable `process` from Node.js. */\\nvar freeProcess = _nodeUtil_moduleExports && _freeGlobal.process;\\n\\n/** Used to access faster Node.js helpers. */\\nvar nodeUtil = (function() {\\n  try {\\n    // Use `util.types` for Node.js 10+.\\n    var types = _nodeUtil_freeModule && _nodeUtil_freeModule.require && _nodeUtil_freeModule.require('util').types;\\n\\n    if (types) {\\n      return types;\\n    }\\n\\n    // Legacy `process.binding('util')` for Node.js < 10.\\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\\n  } catch (e) {}\\n}());\\n\\n/* harmony default export */ const _nodeUtil = (nodeUtil);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isTypedArray.js\\n\\n\\n\\n\\n/* Node.js helper references. */\\nvar nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;\\n\\n/**\\n * Checks if `value` is classified as a typed array.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\\n * @example\\n *\\n * _.isTypedArray(new Uint8Array);\\n * // => true\\n *\\n * _.isTypedArray([]);\\n * // => false\\n */\\nvar isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;\\n\\n/* harmony default export */ const lodash_es_isTypedArray = (isTypedArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayLikeKeys.js\\n\\n\\n\\n\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _arrayLikeKeys_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _arrayLikeKeys_hasOwnProperty = _arrayLikeKeys_objectProto.hasOwnProperty;\\n\\n/**\\n * Creates an array of the enumerable property names of the array-like `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @param {boolean} inherited Specify returning inherited property names.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction arrayLikeKeys(value, inherited) {\\n  var isArr = lodash_es_isArray(value),\\n      isArg = !isArr && lodash_es_isArguments(value),\\n      isBuff = !isArr && !isArg && lodash_es_isBuffer(value),\\n      isType = !isArr && !isArg && !isBuff && lodash_es_isTypedArray(value),\\n      skipIndexes = isArr || isArg || isBuff || isType,\\n      result = skipIndexes ? _baseTimes(value.length, String) : [],\\n      length = result.length;\\n\\n  for (var key in value) {\\n    if ((inherited || _arrayLikeKeys_hasOwnProperty.call(value, key)) &&\\n        !(skipIndexes && (\\n           // Safari 9 has enumerable `arguments.length` in strict mode.\\n           key == 'length' ||\\n           // Node.js 0.10 has enumerable non-index properties on buffers.\\n           (isBuff && (key == 'offset' || key == 'parent')) ||\\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\\n           // Skip index properties.\\n           _isIndex(key, length)\\n        ))) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _arrayLikeKeys = (arrayLikeKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isPrototype.js\\n/** Used for built-in method references. */\\nvar _isPrototype_objectProto = Object.prototype;\\n\\n/**\\n * Checks if `value` is likely a prototype object.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\\n */\\nfunction isPrototype(value) {\\n  var Ctor = value && value.constructor,\\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || _isPrototype_objectProto;\\n\\n  return value === proto;\\n}\\n\\n/* harmony default export */ const _isPrototype = (isPrototype);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nativeKeys.js\\n\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeKeys = _overArg(Object.keys, Object);\\n\\n/* harmony default export */ const _nativeKeys = (nativeKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseKeys.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _baseKeys_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _baseKeys_hasOwnProperty = _baseKeys_objectProto.hasOwnProperty;\\n\\n/**\\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction baseKeys(object) {\\n  if (!_isPrototype(object)) {\\n    return _nativeKeys(object);\\n  }\\n  var result = [];\\n  for (var key in Object(object)) {\\n    if (_baseKeys_hasOwnProperty.call(object, key) && key != 'constructor') {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseKeys = (baseKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isArrayLike.js\\n\\n\\n\\n/**\\n * Checks if `value` is array-like. A value is considered array-like if it's\\n * not a function and has a `value.length` that's an integer greater than or\\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\\n * @example\\n *\\n * _.isArrayLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isArrayLike(document.body.children);\\n * // => true\\n *\\n * _.isArrayLike('abc');\\n * // => true\\n *\\n * _.isArrayLike(_.noop);\\n * // => false\\n */\\nfunction isArrayLike(value) {\\n  return value != null && lodash_es_isLength(value.length) && !lodash_es_isFunction(value);\\n}\\n\\n/* harmony default export */ const lodash_es_isArrayLike = (isArrayLike);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/keys.js\\n\\n\\n\\n\\n/**\\n * Creates an array of the own enumerable property names of `object`.\\n *\\n * **Note:** Non-object values are coerced to objects. See the\\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\\n * for more details.\\n *\\n * @static\\n * @since 0.1.0\\n * @memberOf _\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.keys(new Foo);\\n * // => ['a', 'b'] (iteration order is not guaranteed)\\n *\\n * _.keys('hi');\\n * // => ['0', '1']\\n */\\nfunction keys(object) {\\n  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object) : _baseKeys(object);\\n}\\n\\n/* harmony default export */ const lodash_es_keys = (keys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseAssign.js\\n\\n\\n\\n/**\\n * The base implementation of `_.assign` without support for multiple sources\\n * or `customizer` functions.\\n *\\n * @private\\n * @param {Object} object The destination object.\\n * @param {Object} source The source object.\\n * @returns {Object} Returns `object`.\\n */\\nfunction baseAssign(object, source) {\\n  return object && _copyObject(source, lodash_es_keys(source), object);\\n}\\n\\n/* harmony default export */ const _baseAssign = (baseAssign);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nativeKeysIn.js\\n/**\\n * This function is like\\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\\n * except that it includes inherited enumerable properties.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction nativeKeysIn(object) {\\n  var result = [];\\n  if (object != null) {\\n    for (var key in Object(object)) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _nativeKeysIn = (nativeKeysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseKeysIn.js\\n\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _baseKeysIn_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _baseKeysIn_hasOwnProperty = _baseKeysIn_objectProto.hasOwnProperty;\\n\\n/**\\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction baseKeysIn(object) {\\n  if (!lodash_es_isObject(object)) {\\n    return _nativeKeysIn(object);\\n  }\\n  var isProto = _isPrototype(object),\\n      result = [];\\n\\n  for (var key in object) {\\n    if (!(key == 'constructor' && (isProto || !_baseKeysIn_hasOwnProperty.call(object, key)))) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseKeysIn = (baseKeysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/keysIn.js\\n\\n\\n\\n\\n/**\\n * Creates an array of the own and inherited enumerable property names of `object`.\\n *\\n * **Note:** Non-object values are coerced to objects.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.keysIn(new Foo);\\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\\n */\\nfunction keysIn(object) {\\n  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);\\n}\\n\\n/* harmony default export */ const lodash_es_keysIn = (keysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseAssignIn.js\\n\\n\\n\\n/**\\n * The base implementation of `_.assignIn` without support for multiple sources\\n * or `customizer` functions.\\n *\\n * @private\\n * @param {Object} object The destination object.\\n * @param {Object} source The source object.\\n * @returns {Object} Returns `object`.\\n */\\nfunction baseAssignIn(object, source) {\\n  return object && _copyObject(source, lodash_es_keysIn(source), object);\\n}\\n\\n/* harmony default export */ const _baseAssignIn = (baseAssignIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneBuffer.js\\n\\n\\n/** Detect free variable `exports`. */\\nvar _cloneBuffer_freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar _cloneBuffer_freeModule = _cloneBuffer_freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar _cloneBuffer_moduleExports = _cloneBuffer_freeModule && _cloneBuffer_freeModule.exports === _cloneBuffer_freeExports;\\n\\n/** Built-in value references. */\\nvar _cloneBuffer_Buffer = _cloneBuffer_moduleExports ? _root.Buffer : undefined,\\n    allocUnsafe = _cloneBuffer_Buffer ? _cloneBuffer_Buffer.allocUnsafe : undefined;\\n\\n/**\\n * Creates a clone of  `buffer`.\\n *\\n * @private\\n * @param {Buffer} buffer The buffer to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Buffer} Returns the cloned buffer.\\n */\\nfunction cloneBuffer(buffer, isDeep) {\\n  if (isDeep) {\\n    return buffer.slice();\\n  }\\n  var length = buffer.length,\\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\\n\\n  buffer.copy(result);\\n  return result;\\n}\\n\\n/* harmony default export */ const _cloneBuffer = (cloneBuffer);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copyArray.js\\n/**\\n * Copies the values of `source` to `array`.\\n *\\n * @private\\n * @param {Array} source The array to copy values from.\\n * @param {Array} [array=[]] The array to copy values to.\\n * @returns {Array} Returns `array`.\\n */\\nfunction copyArray(source, array) {\\n  var index = -1,\\n      length = source.length;\\n\\n  array || (array = Array(length));\\n  while (++index < length) {\\n    array[index] = source[index];\\n  }\\n  return array;\\n}\\n\\n/* harmony default export */ const _copyArray = (copyArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayFilter.js\\n/**\\n * A specialized version of `_.filter` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} predicate The function invoked per iteration.\\n * @returns {Array} Returns the new filtered array.\\n */\\nfunction arrayFilter(array, predicate) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length,\\n      resIndex = 0,\\n      result = [];\\n\\n  while (++index < length) {\\n    var value = array[index];\\n    if (predicate(value, index, array)) {\\n      result[resIndex++] = value;\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _arrayFilter = (arrayFilter);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/stubArray.js\\n/**\\n * This method returns a new empty array.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.13.0\\n * @category Util\\n * @returns {Array} Returns the new empty array.\\n * @example\\n *\\n * var arrays = _.times(2, _.stubArray);\\n *\\n * console.log(arrays);\\n * // => [[], []]\\n *\\n * console.log(arrays[0] === arrays[1]);\\n * // => false\\n */\\nfunction stubArray() {\\n  return [];\\n}\\n\\n/* harmony default export */ const lodash_es_stubArray = (stubArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getSymbols.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _getSymbols_objectProto = Object.prototype;\\n\\n/** Built-in value references. */\\nvar _getSymbols_propertyIsEnumerable = _getSymbols_objectProto.propertyIsEnumerable;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\\n\\n/**\\n * Creates an array of the own enumerable symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of symbols.\\n */\\nvar getSymbols = !nativeGetSymbols ? lodash_es_stubArray : function(object) {\\n  if (object == null) {\\n    return [];\\n  }\\n  object = Object(object);\\n  return _arrayFilter(nativeGetSymbols(object), function(symbol) {\\n    return _getSymbols_propertyIsEnumerable.call(object, symbol);\\n  });\\n};\\n\\n/* harmony default export */ const _getSymbols = (getSymbols);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copySymbols.js\\n\\n\\n\\n/**\\n * Copies own symbols of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy symbols from.\\n * @param {Object} [object={}] The object to copy symbols to.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copySymbols(source, object) {\\n  return _copyObject(source, _getSymbols(source), object);\\n}\\n\\n/* harmony default export */ const _copySymbols = (copySymbols);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayPush.js\\n/**\\n * Appends the elements of `values` to `array`.\\n *\\n * @private\\n * @param {Array} array The array to modify.\\n * @param {Array} values The values to append.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayPush(array, values) {\\n  var index = -1,\\n      length = values.length,\\n      offset = array.length;\\n\\n  while (++index < length) {\\n    array[offset + index] = values[index];\\n  }\\n  return array;\\n}\\n\\n/* harmony default export */ const _arrayPush = (arrayPush);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getSymbolsIn.js\\n\\n\\n\\n\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar _getSymbolsIn_nativeGetSymbols = Object.getOwnPropertySymbols;\\n\\n/**\\n * Creates an array of the own and inherited enumerable symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of symbols.\\n */\\nvar getSymbolsIn = !_getSymbolsIn_nativeGetSymbols ? lodash_es_stubArray : function(object) {\\n  var result = [];\\n  while (object) {\\n    _arrayPush(result, _getSymbols(object));\\n    object = _getPrototype(object);\\n  }\\n  return result;\\n};\\n\\n/* harmony default export */ const _getSymbolsIn = (getSymbolsIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copySymbolsIn.js\\n\\n\\n\\n/**\\n * Copies own and inherited symbols of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy symbols from.\\n * @param {Object} [object={}] The object to copy symbols to.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copySymbolsIn(source, object) {\\n  return _copyObject(source, _getSymbolsIn(source), object);\\n}\\n\\n/* harmony default export */ const _copySymbolsIn = (copySymbolsIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseGetAllKeys.js\\n\\n\\n\\n/**\\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\\n * symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Function} keysFunc The function to get the keys of `object`.\\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\\n  var result = keysFunc(object);\\n  return lodash_es_isArray(object) ? result : _arrayPush(result, symbolsFunc(object));\\n}\\n\\n/* harmony default export */ const _baseGetAllKeys = (baseGetAllKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getAllKeys.js\\n\\n\\n\\n\\n/**\\n * Creates an array of own enumerable property names and symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction getAllKeys(object) {\\n  return _baseGetAllKeys(object, lodash_es_keys, _getSymbols);\\n}\\n\\n/* harmony default export */ const _getAllKeys = (getAllKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getAllKeysIn.js\\n\\n\\n\\n\\n/**\\n * Creates an array of own and inherited enumerable property names and\\n * symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction getAllKeysIn(object) {\\n  return _baseGetAllKeys(object, lodash_es_keysIn, _getSymbolsIn);\\n}\\n\\n/* harmony default export */ const _getAllKeysIn = (getAllKeysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_DataView.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar DataView = _getNative(_root, 'DataView');\\n\\n/* harmony default export */ const _DataView = (DataView);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Promise.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar _Promise_Promise = _getNative(_root, 'Promise');\\n\\n/* harmony default export */ const _Promise = (_Promise_Promise);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Set.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar Set = _getNative(_root, 'Set');\\n\\n/* harmony default export */ const _Set = (Set);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_WeakMap.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar _WeakMap_WeakMap = _getNative(_root, 'WeakMap');\\n\\n/* harmony default export */ const _WeakMap = (_WeakMap_WeakMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getTag.js\\n\\n\\n\\n\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _getTag_mapTag = '[object Map]',\\n    _getTag_objectTag = '[object Object]',\\n    promiseTag = '[object Promise]',\\n    _getTag_setTag = '[object Set]',\\n    _getTag_weakMapTag = '[object WeakMap]';\\n\\nvar _getTag_dataViewTag = '[object DataView]';\\n\\n/** Used to detect maps, sets, and weakmaps. */\\nvar dataViewCtorString = _toSource(_DataView),\\n    mapCtorString = _toSource(_Map),\\n    promiseCtorString = _toSource(_Promise),\\n    setCtorString = _toSource(_Set),\\n    weakMapCtorString = _toSource(_WeakMap);\\n\\n/**\\n * Gets the `toStringTag` of `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nvar getTag = _baseGetTag;\\n\\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\\nif ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != _getTag_dataViewTag) ||\\n    (_Map && getTag(new _Map) != _getTag_mapTag) ||\\n    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||\\n    (_Set && getTag(new _Set) != _getTag_setTag) ||\\n    (_WeakMap && getTag(new _WeakMap) != _getTag_weakMapTag)) {\\n  getTag = function(value) {\\n    var result = _baseGetTag(value),\\n        Ctor = result == _getTag_objectTag ? value.constructor : undefined,\\n        ctorString = Ctor ? _toSource(Ctor) : '';\\n\\n    if (ctorString) {\\n      switch (ctorString) {\\n        case dataViewCtorString: return _getTag_dataViewTag;\\n        case mapCtorString: return _getTag_mapTag;\\n        case promiseCtorString: return promiseTag;\\n        case setCtorString: return _getTag_setTag;\\n        case weakMapCtorString: return _getTag_weakMapTag;\\n      }\\n    }\\n    return result;\\n  };\\n}\\n\\n/* harmony default export */ const _getTag = (getTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_initCloneArray.js\\n/** Used for built-in method references. */\\nvar _initCloneArray_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _initCloneArray_hasOwnProperty = _initCloneArray_objectProto.hasOwnProperty;\\n\\n/**\\n * Initializes an array clone.\\n *\\n * @private\\n * @param {Array} array The array to clone.\\n * @returns {Array} Returns the initialized clone.\\n */\\nfunction initCloneArray(array) {\\n  var length = array.length,\\n      result = new array.constructor(length);\\n\\n  // Add properties assigned by `RegExp#exec`.\\n  if (length && typeof array[0] == 'string' && _initCloneArray_hasOwnProperty.call(array, 'index')) {\\n    result.index = array.index;\\n    result.input = array.input;\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _initCloneArray = (initCloneArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Uint8Array.js\\n\\n\\n/** Built-in value references. */\\nvar Uint8Array = _root.Uint8Array;\\n\\n/* harmony default export */ const _Uint8Array = (Uint8Array);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneArrayBuffer.js\\n\\n\\n/**\\n * Creates a clone of `arrayBuffer`.\\n *\\n * @private\\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\\n * @returns {ArrayBuffer} Returns the cloned array buffer.\\n */\\nfunction cloneArrayBuffer(arrayBuffer) {\\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\\n  new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));\\n  return result;\\n}\\n\\n/* harmony default export */ const _cloneArrayBuffer = (cloneArrayBuffer);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneDataView.js\\n\\n\\n/**\\n * Creates a clone of `dataView`.\\n *\\n * @private\\n * @param {Object} dataView The data view to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned data view.\\n */\\nfunction cloneDataView(dataView, isDeep) {\\n  var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;\\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\\n}\\n\\n/* harmony default export */ const _cloneDataView = (cloneDataView);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneRegExp.js\\n/** Used to match `RegExp` flags from their coerced string values. */\\nvar reFlags = /\\\\w*$/;\\n\\n/**\\n * Creates a clone of `regexp`.\\n *\\n * @private\\n * @param {Object} regexp The regexp to clone.\\n * @returns {Object} Returns the cloned regexp.\\n */\\nfunction cloneRegExp(regexp) {\\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\\n  result.lastIndex = regexp.lastIndex;\\n  return result;\\n}\\n\\n/* harmony default export */ const _cloneRegExp = (cloneRegExp);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneSymbol.js\\n\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = _Symbol ? _Symbol.prototype : undefined,\\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\\n\\n/**\\n * Creates a clone of the `symbol` object.\\n *\\n * @private\\n * @param {Object} symbol The symbol object to clone.\\n * @returns {Object} Returns the cloned symbol object.\\n */\\nfunction cloneSymbol(symbol) {\\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\\n}\\n\\n/* harmony default export */ const _cloneSymbol = (cloneSymbol);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneTypedArray.js\\n\\n\\n/**\\n * Creates a clone of `typedArray`.\\n *\\n * @private\\n * @param {Object} typedArray The typed array to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned typed array.\\n */\\nfunction cloneTypedArray(typedArray, isDeep) {\\n  var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n}\\n\\n/* harmony default export */ const _cloneTypedArray = (cloneTypedArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_initCloneByTag.js\\n\\n\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _initCloneByTag_boolTag = '[object Boolean]',\\n    _initCloneByTag_dateTag = '[object Date]',\\n    _initCloneByTag_mapTag = '[object Map]',\\n    _initCloneByTag_numberTag = '[object Number]',\\n    _initCloneByTag_regexpTag = '[object RegExp]',\\n    _initCloneByTag_setTag = '[object Set]',\\n    _initCloneByTag_stringTag = '[object String]',\\n    symbolTag = '[object Symbol]';\\n\\nvar _initCloneByTag_arrayBufferTag = '[object ArrayBuffer]',\\n    _initCloneByTag_dataViewTag = '[object DataView]',\\n    _initCloneByTag_float32Tag = '[object Float32Array]',\\n    _initCloneByTag_float64Tag = '[object Float64Array]',\\n    _initCloneByTag_int8Tag = '[object Int8Array]',\\n    _initCloneByTag_int16Tag = '[object Int16Array]',\\n    _initCloneByTag_int32Tag = '[object Int32Array]',\\n    _initCloneByTag_uint8Tag = '[object Uint8Array]',\\n    _initCloneByTag_uint8ClampedTag = '[object Uint8ClampedArray]',\\n    _initCloneByTag_uint16Tag = '[object Uint16Array]',\\n    _initCloneByTag_uint32Tag = '[object Uint32Array]';\\n\\n/**\\n * Initializes an object clone based on its `toStringTag`.\\n *\\n * **Note:** This function only supports cloning values with tags of\\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\\n *\\n * @private\\n * @param {Object} object The object to clone.\\n * @param {string} tag The `toStringTag` of the object to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the initialized clone.\\n */\\nfunction initCloneByTag(object, tag, isDeep) {\\n  var Ctor = object.constructor;\\n  switch (tag) {\\n    case _initCloneByTag_arrayBufferTag:\\n      return _cloneArrayBuffer(object);\\n\\n    case _initCloneByTag_boolTag:\\n    case _initCloneByTag_dateTag:\\n      return new Ctor(+object);\\n\\n    case _initCloneByTag_dataViewTag:\\n      return _cloneDataView(object, isDeep);\\n\\n    case _initCloneByTag_float32Tag: case _initCloneByTag_float64Tag:\\n    case _initCloneByTag_int8Tag: case _initCloneByTag_int16Tag: case _initCloneByTag_int32Tag:\\n    case _initCloneByTag_uint8Tag: case _initCloneByTag_uint8ClampedTag: case _initCloneByTag_uint16Tag: case _initCloneByTag_uint32Tag:\\n      return _cloneTypedArray(object, isDeep);\\n\\n    case _initCloneByTag_mapTag:\\n      return new Ctor;\\n\\n    case _initCloneByTag_numberTag:\\n    case _initCloneByTag_stringTag:\\n      return new Ctor(object);\\n\\n    case _initCloneByTag_regexpTag:\\n      return _cloneRegExp(object);\\n\\n    case _initCloneByTag_setTag:\\n      return new Ctor;\\n\\n    case symbolTag:\\n      return _cloneSymbol(object);\\n  }\\n}\\n\\n/* harmony default export */ const _initCloneByTag = (initCloneByTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseCreate.js\\n\\n\\n/** Built-in value references. */\\nvar objectCreate = Object.create;\\n\\n/**\\n * The base implementation of `_.create` without support for assigning\\n * properties to the created object.\\n *\\n * @private\\n * @param {Object} proto The object to inherit from.\\n * @returns {Object} Returns the new object.\\n */\\nvar baseCreate = (function() {\\n  function object() {}\\n  return function(proto) {\\n    if (!lodash_es_isObject(proto)) {\\n      return {};\\n    }\\n    if (objectCreate) {\\n      return objectCreate(proto);\\n    }\\n    object.prototype = proto;\\n    var result = new object;\\n    object.prototype = undefined;\\n    return result;\\n  };\\n}());\\n\\n/* harmony default export */ const _baseCreate = (baseCreate);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_initCloneObject.js\\n\\n\\n\\n\\n/**\\n * Initializes an object clone.\\n *\\n * @private\\n * @param {Object} object The object to clone.\\n * @returns {Object} Returns the initialized clone.\\n */\\nfunction initCloneObject(object) {\\n  return (typeof object.constructor == 'function' && !_isPrototype(object))\\n    ? _baseCreate(_getPrototype(object))\\n    : {};\\n}\\n\\n/* harmony default export */ const _initCloneObject = (initCloneObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsMap.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _baseIsMap_mapTag = '[object Map]';\\n\\n/**\\n * The base implementation of `_.isMap` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\\n */\\nfunction baseIsMap(value) {\\n  return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsMap_mapTag;\\n}\\n\\n/* harmony default export */ const _baseIsMap = (baseIsMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isMap.js\\n\\n\\n\\n\\n/* Node.js helper references. */\\nvar nodeIsMap = _nodeUtil && _nodeUtil.isMap;\\n\\n/**\\n * Checks if `value` is classified as a `Map` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\\n * @example\\n *\\n * _.isMap(new Map);\\n * // => true\\n *\\n * _.isMap(new WeakMap);\\n * // => false\\n */\\nvar isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;\\n\\n/* harmony default export */ const lodash_es_isMap = (isMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsSet.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _baseIsSet_setTag = '[object Set]';\\n\\n/**\\n * The base implementation of `_.isSet` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\\n */\\nfunction baseIsSet(value) {\\n  return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsSet_setTag;\\n}\\n\\n/* harmony default export */ const _baseIsSet = (baseIsSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isSet.js\\n\\n\\n\\n\\n/* Node.js helper references. */\\nvar nodeIsSet = _nodeUtil && _nodeUtil.isSet;\\n\\n/**\\n * Checks if `value` is classified as a `Set` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\\n * @example\\n *\\n * _.isSet(new Set);\\n * // => true\\n *\\n * _.isSet(new WeakSet);\\n * // => false\\n */\\nvar isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;\\n\\n/* harmony default export */ const lodash_es_isSet = (isSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseClone.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/** Used to compose bitmasks for cloning. */\\nvar CLONE_DEEP_FLAG = 1,\\n    CLONE_FLAT_FLAG = 2,\\n    CLONE_SYMBOLS_FLAG = 4;\\n\\n/** `Object#toString` result references. */\\nvar _baseClone_argsTag = '[object Arguments]',\\n    _baseClone_arrayTag = '[object Array]',\\n    _baseClone_boolTag = '[object Boolean]',\\n    _baseClone_dateTag = '[object Date]',\\n    _baseClone_errorTag = '[object Error]',\\n    _baseClone_funcTag = '[object Function]',\\n    _baseClone_genTag = '[object GeneratorFunction]',\\n    _baseClone_mapTag = '[object Map]',\\n    _baseClone_numberTag = '[object Number]',\\n    _baseClone_objectTag = '[object Object]',\\n    _baseClone_regexpTag = '[object RegExp]',\\n    _baseClone_setTag = '[object Set]',\\n    _baseClone_stringTag = '[object String]',\\n    _baseClone_symbolTag = '[object Symbol]',\\n    _baseClone_weakMapTag = '[object WeakMap]';\\n\\nvar _baseClone_arrayBufferTag = '[object ArrayBuffer]',\\n    _baseClone_dataViewTag = '[object DataView]',\\n    _baseClone_float32Tag = '[object Float32Array]',\\n    _baseClone_float64Tag = '[object Float64Array]',\\n    _baseClone_int8Tag = '[object Int8Array]',\\n    _baseClone_int16Tag = '[object Int16Array]',\\n    _baseClone_int32Tag = '[object Int32Array]',\\n    _baseClone_uint8Tag = '[object Uint8Array]',\\n    _baseClone_uint8ClampedTag = '[object Uint8ClampedArray]',\\n    _baseClone_uint16Tag = '[object Uint16Array]',\\n    _baseClone_uint32Tag = '[object Uint32Array]';\\n\\n/** Used to identify `toStringTag` values supported by `_.clone`. */\\nvar cloneableTags = {};\\ncloneableTags[_baseClone_argsTag] = cloneableTags[_baseClone_arrayTag] =\\ncloneableTags[_baseClone_arrayBufferTag] = cloneableTags[_baseClone_dataViewTag] =\\ncloneableTags[_baseClone_boolTag] = cloneableTags[_baseClone_dateTag] =\\ncloneableTags[_baseClone_float32Tag] = cloneableTags[_baseClone_float64Tag] =\\ncloneableTags[_baseClone_int8Tag] = cloneableTags[_baseClone_int16Tag] =\\ncloneableTags[_baseClone_int32Tag] = cloneableTags[_baseClone_mapTag] =\\ncloneableTags[_baseClone_numberTag] = cloneableTags[_baseClone_objectTag] =\\ncloneableTags[_baseClone_regexpTag] = cloneableTags[_baseClone_setTag] =\\ncloneableTags[_baseClone_stringTag] = cloneableTags[_baseClone_symbolTag] =\\ncloneableTags[_baseClone_uint8Tag] = cloneableTags[_baseClone_uint8ClampedTag] =\\ncloneableTags[_baseClone_uint16Tag] = cloneableTags[_baseClone_uint32Tag] = true;\\ncloneableTags[_baseClone_errorTag] = cloneableTags[_baseClone_funcTag] =\\ncloneableTags[_baseClone_weakMapTag] = false;\\n\\n/**\\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\\n * traversed objects.\\n *\\n * @private\\n * @param {*} value The value to clone.\\n * @param {boolean} bitmask The bitmask flags.\\n *  1 - Deep clone\\n *  2 - Flatten inherited properties\\n *  4 - Clone symbols\\n * @param {Function} [customizer] The function to customize cloning.\\n * @param {string} [key] The key of `value`.\\n * @param {Object} [object] The parent object of `value`.\\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\\n * @returns {*} Returns the cloned value.\\n */\\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\\n  var result,\\n      isDeep = bitmask & CLONE_DEEP_FLAG,\\n      isFlat = bitmask & CLONE_FLAT_FLAG,\\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\\n\\n  if (customizer) {\\n    result = object ? customizer(value, key, object, stack) : customizer(value);\\n  }\\n  if (result !== undefined) {\\n    return result;\\n  }\\n  if (!lodash_es_isObject(value)) {\\n    return value;\\n  }\\n  var isArr = lodash_es_isArray(value);\\n  if (isArr) {\\n    result = _initCloneArray(value);\\n    if (!isDeep) {\\n      return _copyArray(value, result);\\n    }\\n  } else {\\n    var tag = _getTag(value),\\n        isFunc = tag == _baseClone_funcTag || tag == _baseClone_genTag;\\n\\n    if (lodash_es_isBuffer(value)) {\\n      return _cloneBuffer(value, isDeep);\\n    }\\n    if (tag == _baseClone_objectTag || tag == _baseClone_argsTag || (isFunc && !object)) {\\n      result = (isFlat || isFunc) ? {} : _initCloneObject(value);\\n      if (!isDeep) {\\n        return isFlat\\n          ? _copySymbolsIn(value, _baseAssignIn(result, value))\\n          : _copySymbols(value, _baseAssign(result, value));\\n      }\\n    } else {\\n      if (!cloneableTags[tag]) {\\n        return object ? value : {};\\n      }\\n      result = _initCloneByTag(value, tag, isDeep);\\n    }\\n  }\\n  // Check for circular references and return its corresponding clone.\\n  stack || (stack = new _Stack);\\n  var stacked = stack.get(value);\\n  if (stacked) {\\n    return stacked;\\n  }\\n  stack.set(value, result);\\n\\n  if (lodash_es_isSet(value)) {\\n    value.forEach(function(subValue) {\\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n    });\\n  } else if (lodash_es_isMap(value)) {\\n    value.forEach(function(subValue, key) {\\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\\n    });\\n  }\\n\\n  var keysFunc = isFull\\n    ? (isFlat ? _getAllKeysIn : _getAllKeys)\\n    : (isFlat ? lodash_es_keysIn : lodash_es_keys);\\n\\n  var props = isArr ? undefined : keysFunc(value);\\n  _arrayEach(props || value, function(subValue, key) {\\n    if (props) {\\n      key = subValue;\\n      subValue = value[key];\\n    }\\n    // Recursively populate clone (susceptible to call stack limits).\\n    _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\\n  });\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseClone = (baseClone);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/clone.js\\n\\n\\n/** Used to compose bitmasks for cloning. */\\nvar clone_CLONE_SYMBOLS_FLAG = 4;\\n\\n/**\\n * Creates a shallow clone of `value`.\\n *\\n * **Note:** This method is loosely based on the\\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\\n * arrays. The own enumerable properties of `arguments` objects are cloned\\n * as plain objects. An empty object is returned for uncloneable values such\\n * as error objects, functions, DOM nodes, and WeakMaps.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to clone.\\n * @returns {*} Returns the cloned value.\\n * @see _.cloneDeep\\n * @example\\n *\\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\\n *\\n * var shallow = _.clone(objects);\\n * console.log(shallow[0] === objects[0]);\\n * // => true\\n */\\nfunction clone(value) {\\n  return _baseClone(value, clone_CLONE_SYMBOLS_FLAG);\\n}\\n\\n/* harmony default export */ const lodash_es_clone = (clone);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayMap.js\\n/**\\n * A specialized version of `_.map` for arrays without support for iteratee\\n * shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the new mapped array.\\n */\\nfunction arrayMap(array, iteratee) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length,\\n      result = Array(length);\\n\\n  while (++index < length) {\\n    result[index] = iteratee(array[index], index, array);\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _arrayMap = (arrayMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isSymbol.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar isSymbol_symbolTag = '[object Symbol]';\\n\\n/**\\n * Checks if `value` is classified as a `Symbol` primitive or object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\\n * @example\\n *\\n * _.isSymbol(Symbol.iterator);\\n * // => true\\n *\\n * _.isSymbol('abc');\\n * // => false\\n */\\nfunction isSymbol(value) {\\n  return typeof value == 'symbol' ||\\n    (lodash_es_isObjectLike(value) && _baseGetTag(value) == isSymbol_symbolTag);\\n}\\n\\n/* harmony default export */ const lodash_es_isSymbol = (isSymbol);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/memoize.js\\n\\n\\n/** Error message constants. */\\nvar FUNC_ERROR_TEXT = 'Expected a function';\\n\\n/**\\n * Creates a function that memoizes the result of `func`. If `resolver` is\\n * provided, it determines the cache key for storing the result based on the\\n * arguments provided to the memoized function. By default, the first argument\\n * provided to the memoized function is used as the map cache key. The `func`\\n * is invoked with the `this` binding of the memoized function.\\n *\\n * **Note:** The cache is exposed as the `cache` property on the memoized\\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\\n * constructor with one whose instances implement the\\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to have its output memoized.\\n * @param {Function} [resolver] The function to resolve the cache key.\\n * @returns {Function} Returns the new memoized function.\\n * @example\\n *\\n * var object = { 'a': 1, 'b': 2 };\\n * var other = { 'c': 3, 'd': 4 };\\n *\\n * var values = _.memoize(_.values);\\n * values(object);\\n * // => [1, 2]\\n *\\n * values(other);\\n * // => [3, 4]\\n *\\n * object.a = 2;\\n * values(object);\\n * // => [1, 2]\\n *\\n * // Modify the result cache.\\n * values.cache.set(object, ['a', 'b']);\\n * values(object);\\n * // => ['a', 'b']\\n *\\n * // Replace `_.memoize.Cache`.\\n * _.memoize.Cache = WeakMap;\\n */\\nfunction memoize(func, resolver) {\\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\\n    throw new TypeError(FUNC_ERROR_TEXT);\\n  }\\n  var memoized = function() {\\n    var args = arguments,\\n        key = resolver ? resolver.apply(this, args) : args[0],\\n        cache = memoized.cache;\\n\\n    if (cache.has(key)) {\\n      return cache.get(key);\\n    }\\n    var result = func.apply(this, args);\\n    memoized.cache = cache.set(key, result) || cache;\\n    return result;\\n  };\\n  memoized.cache = new (memoize.Cache || _MapCache);\\n  return memoized;\\n}\\n\\n// Expose `MapCache`.\\nmemoize.Cache = _MapCache;\\n\\n/* harmony default export */ const lodash_es_memoize = (memoize);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_memoizeCapped.js\\n\\n\\n/** Used as the maximum memoize cache size. */\\nvar MAX_MEMOIZE_SIZE = 500;\\n\\n/**\\n * A specialized version of `_.memoize` which clears the memoized function's\\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\\n *\\n * @private\\n * @param {Function} func The function to have its output memoized.\\n * @returns {Function} Returns the new memoized function.\\n */\\nfunction memoizeCapped(func) {\\n  var result = lodash_es_memoize(func, function(key) {\\n    if (cache.size === MAX_MEMOIZE_SIZE) {\\n      cache.clear();\\n    }\\n    return key;\\n  });\\n\\n  var cache = result.cache;\\n  return result;\\n}\\n\\n/* harmony default export */ const _memoizeCapped = (memoizeCapped);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stringToPath.js\\n\\n\\n/** Used to match property names within property paths. */\\nvar rePropName = /[^.[\\\\]]+|\\\\[(?:(-?\\\\d+(?:\\\\.\\\\d+)?)|([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2)\\\\]|(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))/g;\\n\\n/** Used to match backslashes in property paths. */\\nvar reEscapeChar = /\\\\\\\\(\\\\\\\\)?/g;\\n\\n/**\\n * Converts `string` to a property path array.\\n *\\n * @private\\n * @param {string} string The string to convert.\\n * @returns {Array} Returns the property path array.\\n */\\nvar stringToPath = _memoizeCapped(function(string) {\\n  var result = [];\\n  if (string.charCodeAt(0) === 46 /* . */) {\\n    result.push('');\\n  }\\n  string.replace(rePropName, function(match, number, quote, subString) {\\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\\n  });\\n  return result;\\n});\\n\\n/* harmony default export */ const _stringToPath = (stringToPath);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_toKey.js\\n\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/**\\n * Converts `value` to a string key if it's not a string or symbol.\\n *\\n * @private\\n * @param {*} value The value to inspect.\\n * @returns {string|symbol} Returns the key.\\n */\\nfunction toKey(value) {\\n  if (typeof value == 'string' || lodash_es_isSymbol(value)) {\\n    return value;\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\\n}\\n\\n/* harmony default export */ const _toKey = (toKey);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseToString.js\\n\\n\\n\\n\\n\\n/** Used as references for various `Number` constants. */\\nvar _baseToString_INFINITY = 1 / 0;\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar _baseToString_symbolProto = _Symbol ? _Symbol.prototype : undefined,\\n    symbolToString = _baseToString_symbolProto ? _baseToString_symbolProto.toString : undefined;\\n\\n/**\\n * The base implementation of `_.toString` which doesn't convert nullish\\n * values to empty strings.\\n *\\n * @private\\n * @param {*} value The value to process.\\n * @returns {string} Returns the string.\\n */\\nfunction baseToString(value) {\\n  // Exit early for strings to avoid a performance hit in some environments.\\n  if (typeof value == 'string') {\\n    return value;\\n  }\\n  if (lodash_es_isArray(value)) {\\n    // Recursively convert values (susceptible to call stack limits).\\n    return _arrayMap(value, baseToString) + '';\\n  }\\n  if (lodash_es_isSymbol(value)) {\\n    return symbolToString ? symbolToString.call(value) : '';\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -_baseToString_INFINITY) ? '-0' : result;\\n}\\n\\n/* harmony default export */ const _baseToString = (baseToString);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/toString.js\\n\\n\\n/**\\n * Converts `value` to a string. An empty string is returned for `null`\\n * and `undefined` values. The sign of `-0` is preserved.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n * @example\\n *\\n * _.toString(null);\\n * // => ''\\n *\\n * _.toString(-0);\\n * // => '-0'\\n *\\n * _.toString([1, 2, 3]);\\n * // => '1,2,3'\\n */\\nfunction toString_toString(value) {\\n  return value == null ? '' : _baseToString(value);\\n}\\n\\n/* harmony default export */ const lodash_es_toString = (toString_toString);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/toPath.js\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Converts `value` to a property path array.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Util\\n * @param {*} value The value to convert.\\n * @returns {Array} Returns the new property path array.\\n * @example\\n *\\n * _.toPath('a.b.c');\\n * // => ['a', 'b', 'c']\\n *\\n * _.toPath('a[0].b.c');\\n * // => ['a', '0', 'b', 'c']\\n */\\nfunction toPath(value) {\\n  if (lodash_es_isArray(value)) {\\n    return _arrayMap(value, _toKey);\\n  }\\n  return lodash_es_isSymbol(value) ? [value] : _copyArray(_stringToPath(lodash_es_toString(value)));\\n}\\n\\n/* harmony default export */ const lodash_es_toPath = (toPath);\\n\\n// EXTERNAL MODULE: ../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\\nvar hoist_non_react_statics_cjs = __webpack_require__(\\\"../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\\\");\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/cloneDeep.js\\n\\n\\n/** Used to compose bitmasks for cloning. */\\nvar cloneDeep_CLONE_DEEP_FLAG = 1,\\n    cloneDeep_CLONE_SYMBOLS_FLAG = 4;\\n\\n/**\\n * This method is like `_.clone` except that it recursively clones `value`.\\n *\\n * @static\\n * @memberOf _\\n * @since 1.0.0\\n * @category Lang\\n * @param {*} value The value to recursively clone.\\n * @returns {*} Returns the deep cloned value.\\n * @see _.clone\\n * @example\\n *\\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\\n *\\n * var deep = _.cloneDeep(objects);\\n * console.log(deep[0] === objects[0]);\\n * // => false\\n */\\nfunction cloneDeep(value) {\\n  return _baseClone(value, cloneDeep_CLONE_DEEP_FLAG | cloneDeep_CLONE_SYMBOLS_FLAG);\\n}\\n\\n/* harmony default export */ const lodash_es_cloneDeep = (cloneDeep);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/formik/dist/formik.esm.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction _extends() {\\n  _extends = Object.assign || function (target) {\\n    for (var i = 1; i < arguments.length; i++) {\\n      var source = arguments[i];\\n\\n      for (var key in source) {\\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\\n          target[key] = source[key];\\n        }\\n      }\\n    }\\n\\n    return target;\\n  };\\n\\n  return _extends.apply(this, arguments);\\n}\\n\\nfunction _inheritsLoose(subClass, superClass) {\\n  subClass.prototype = Object.create(superClass.prototype);\\n  subClass.prototype.constructor = subClass;\\n  subClass.__proto__ = superClass;\\n}\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) {\\n  if (source == null) return {};\\n  var target = {};\\n  var sourceKeys = Object.keys(source);\\n  var key, i;\\n\\n  for (i = 0; i < sourceKeys.length; i++) {\\n    key = sourceKeys[i];\\n    if (excluded.indexOf(key) >= 0) continue;\\n    target[key] = source[key];\\n  }\\n\\n  return target;\\n}\\n\\nfunction _assertThisInitialized(self) {\\n  if (self === void 0) {\\n    throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\");\\n  }\\n\\n  return self;\\n}\\n\\nvar FormikContext = /*#__PURE__*/(0,external_react_.createContext)(undefined);\\nFormikContext.displayName = 'FormikContext';\\nvar FormikProvider = FormikContext.Provider;\\nvar FormikConsumer = FormikContext.Consumer;\\nfunction useFormikContext() {\\n  var formik = (0,external_react_.useContext)(FormikContext);\\n  !!!formik ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n  return formik;\\n}\\n\\n/** @private is the value an empty array? */\\n\\nvar isEmptyArray = function isEmptyArray(value) {\\n  return Array.isArray(value) && value.length === 0;\\n};\\n/** @private is the given object a Function? */\\n\\nvar formik_esm_isFunction = function isFunction(obj) {\\n  return typeof obj === 'function';\\n};\\n/** @private is the given object an Object? */\\n\\nvar formik_esm_isObject = function isObject(obj) {\\n  return obj !== null && typeof obj === 'object';\\n};\\n/** @private is the given object an integer? */\\n\\nvar isInteger = function isInteger(obj) {\\n  return String(Math.floor(Number(obj))) === obj;\\n};\\n/** @private is the given object a string? */\\n\\nvar isString = function isString(obj) {\\n  return Object.prototype.toString.call(obj) === '[object String]';\\n};\\n/** @private is the given object a NaN? */\\n// eslint-disable-next-line no-self-compare\\n\\nvar isNaN$1 = function isNaN(obj) {\\n  return obj !== obj;\\n};\\n/** @private Does a React component have exactly 0 children? */\\n\\nvar isEmptyChildren = function isEmptyChildren(children) {\\n  return external_react_.Children.count(children) === 0;\\n};\\n/** @private is the given object/value a promise? */\\n\\nvar isPromise = function isPromise(value) {\\n  return formik_esm_isObject(value) && formik_esm_isFunction(value.then);\\n};\\n/** @private is the given object/value a type of synthetic event? */\\n\\nvar isInputEvent = function isInputEvent(value) {\\n  return value && formik_esm_isObject(value) && formik_esm_isObject(value.target);\\n};\\n/**\\r\\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\\r\\n * not safe to call document.activeElement if there is nothing focused.\\r\\n *\\r\\n * The activeElement will be null only if the document or document body is not\\r\\n * yet defined.\\r\\n *\\r\\n * @param {?Document} doc Defaults to current document.\\r\\n * @return {Element | null}\\r\\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\\r\\n */\\n\\nfunction getActiveElement(doc) {\\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\\n\\n  if (typeof doc === 'undefined') {\\n    return null;\\n  }\\n\\n  try {\\n    return doc.activeElement || doc.body;\\n  } catch (e) {\\n    return doc.body;\\n  }\\n}\\n/**\\r\\n * Deeply get a value from an object via its path.\\r\\n */\\n\\nfunction getIn(obj, key, def, p) {\\n  if (p === void 0) {\\n    p = 0;\\n  }\\n\\n  var path = lodash_es_toPath(key);\\n\\n  while (obj && p < path.length) {\\n    obj = obj[path[p++]];\\n  } // check if path is not in the end\\n\\n\\n  if (p !== path.length && !obj) {\\n    return def;\\n  }\\n\\n  return obj === undefined ? def : obj;\\n}\\n/**\\r\\n * Deeply set a value from in object via it's path. If the value at `path`\\r\\n * has changed, return a shallow copy of obj with `value` set at `path`.\\r\\n * If `value` has not changed, return the original `obj`.\\r\\n *\\r\\n * Existing objects / arrays along `path` are also shallow copied. Sibling\\r\\n * objects along path retain the same internal js reference. Since new\\r\\n * objects / arrays are only created along `path`, we can test if anything\\r\\n * changed in a nested structure by comparing the object's reference in\\r\\n * the old and new object, similar to how russian doll cache invalidation\\r\\n * works.\\r\\n *\\r\\n * In earlier versions of this function, which used cloneDeep, there were\\r\\n * issues whereby settings a nested value would mutate the parent\\r\\n * instead of creating a new object. `clone` avoids that bug making a\\r\\n * shallow copy of the objects along the update path\\r\\n * so no object is mutated in place.\\r\\n *\\r\\n * Before changing this function, please read through the following\\r\\n * discussions.\\r\\n *\\r\\n * @see https://github.com/developit/linkstate\\r\\n * @see https://github.com/jaredpalmer/formik/pull/123\\r\\n */\\n\\nfunction setIn(obj, path, value) {\\n  var res = lodash_es_clone(obj); // this keeps inheritance when obj is a class\\n\\n  var resVal = res;\\n  var i = 0;\\n  var pathArray = lodash_es_toPath(path);\\n\\n  for (; i < pathArray.length - 1; i++) {\\n    var currentPath = pathArray[i];\\n    var currentObj = getIn(obj, pathArray.slice(0, i + 1));\\n\\n    if (currentObj && (formik_esm_isObject(currentObj) || Array.isArray(currentObj))) {\\n      resVal = resVal[currentPath] = lodash_es_clone(currentObj);\\n    } else {\\n      var nextPath = pathArray[i + 1];\\n      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\\n    }\\n  } // Return original object if new value is the same as current\\n\\n\\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\\n    return obj;\\n  }\\n\\n  if (value === undefined) {\\n    delete resVal[pathArray[i]];\\n  } else {\\n    resVal[pathArray[i]] = value;\\n  } // If the path array has a single element, the loop did not run.\\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\\n\\n\\n  if (i === 0 && value === undefined) {\\n    delete res[pathArray[i]];\\n  }\\n\\n  return res;\\n}\\n/**\\r\\n * Recursively a set the same value for all keys and arrays nested object, cloning\\r\\n * @param object\\r\\n * @param value\\r\\n * @param visited\\r\\n * @param response\\r\\n */\\n\\nfunction setNestedObjectValues(object, value, visited, response) {\\n  if (visited === void 0) {\\n    visited = new WeakMap();\\n  }\\n\\n  if (response === void 0) {\\n    response = {};\\n  }\\n\\n  for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {\\n    var k = _Object$keys[_i];\\n    var val = object[k];\\n\\n    if (formik_esm_isObject(val)) {\\n      if (!visited.get(val)) {\\n        visited.set(val, true); // In order to keep array values consistent for both dot path  and\\n        // bracket syntax, we need to check if this is an array so that\\n        // this will output  { friends: [true] } and not { friends: { \\\"0\\\": true } }\\n\\n        response[k] = Array.isArray(val) ? [] : {};\\n        setNestedObjectValues(val, value, visited, response[k]);\\n      }\\n    } else {\\n      response[k] = value;\\n    }\\n  }\\n\\n  return response;\\n}\\n\\nfunction formikReducer(state, msg) {\\n  switch (msg.type) {\\n    case 'SET_VALUES':\\n      return _extends({}, state, {\\n        values: msg.payload\\n      });\\n\\n    case 'SET_TOUCHED':\\n      return _extends({}, state, {\\n        touched: msg.payload\\n      });\\n\\n    case 'SET_ERRORS':\\n      if (react_fast_compare_default()(state.errors, msg.payload)) {\\n        return state;\\n      }\\n\\n      return _extends({}, state, {\\n        errors: msg.payload\\n      });\\n\\n    case 'SET_STATUS':\\n      return _extends({}, state, {\\n        status: msg.payload\\n      });\\n\\n    case 'SET_ISSUBMITTING':\\n      return _extends({}, state, {\\n        isSubmitting: msg.payload\\n      });\\n\\n    case 'SET_ISVALIDATING':\\n      return _extends({}, state, {\\n        isValidating: msg.payload\\n      });\\n\\n    case 'SET_FIELD_VALUE':\\n      return _extends({}, state, {\\n        values: setIn(state.values, msg.payload.field, msg.payload.value)\\n      });\\n\\n    case 'SET_FIELD_TOUCHED':\\n      return _extends({}, state, {\\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value)\\n      });\\n\\n    case 'SET_FIELD_ERROR':\\n      return _extends({}, state, {\\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value)\\n      });\\n\\n    case 'RESET_FORM':\\n      return _extends({}, state, msg.payload);\\n\\n    case 'SET_FORMIK_STATE':\\n      return msg.payload(state);\\n\\n    case 'SUBMIT_ATTEMPT':\\n      return _extends({}, state, {\\n        touched: setNestedObjectValues(state.values, true),\\n        isSubmitting: true,\\n        submitCount: state.submitCount + 1\\n      });\\n\\n    case 'SUBMIT_FAILURE':\\n      return _extends({}, state, {\\n        isSubmitting: false\\n      });\\n\\n    case 'SUBMIT_SUCCESS':\\n      return _extends({}, state, {\\n        isSubmitting: false\\n      });\\n\\n    default:\\n      return state;\\n  }\\n} // Initial empty states // objects\\n\\n\\nvar emptyErrors = {};\\nvar emptyTouched = {};\\nfunction useFormik(_ref) {\\n  var _ref$validateOnChange = _ref.validateOnChange,\\n      validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange,\\n      _ref$validateOnBlur = _ref.validateOnBlur,\\n      validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur,\\n      _ref$validateOnMount = _ref.validateOnMount,\\n      validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount,\\n      isInitialValid = _ref.isInitialValid,\\n      _ref$enableReinitiali = _ref.enableReinitialize,\\n      enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali,\\n      onSubmit = _ref.onSubmit,\\n      rest = _objectWithoutPropertiesLoose(_ref, [\\\"validateOnChange\\\", \\\"validateOnBlur\\\", \\\"validateOnMount\\\", \\\"isInitialValid\\\", \\\"enableReinitialize\\\", \\\"onSubmit\\\"]);\\n\\n  var props = _extends({\\n    validateOnChange: validateOnChange,\\n    validateOnBlur: validateOnBlur,\\n    validateOnMount: validateOnMount,\\n    onSubmit: onSubmit\\n  }, rest);\\n\\n  var initialValues = (0,external_react_.useRef)(props.initialValues);\\n  var initialErrors = (0,external_react_.useRef)(props.initialErrors || emptyErrors);\\n  var initialTouched = (0,external_react_.useRef)(props.initialTouched || emptyTouched);\\n  var initialStatus = (0,external_react_.useRef)(props.initialStatus);\\n  var isMounted = (0,external_react_.useRef)(false);\\n  var fieldRegistry = (0,external_react_.useRef)({});\\n\\n  if (false) {}\\n\\n  (0,external_react_.useEffect)(function () {\\n    isMounted.current = true;\\n    return function () {\\n      isMounted.current = false;\\n    };\\n  }, []);\\n\\n  var _React$useState = (0,external_react_.useState)(0),\\n      setIteration = _React$useState[1];\\n\\n  var stateRef = (0,external_react_.useRef)({\\n    values: props.initialValues,\\n    errors: props.initialErrors || emptyErrors,\\n    touched: props.initialTouched || emptyTouched,\\n    status: props.initialStatus,\\n    isSubmitting: false,\\n    isValidating: false,\\n    submitCount: 0\\n  });\\n  var state = stateRef.current;\\n  var dispatch = (0,external_react_.useCallback)(function (action) {\\n    var prev = stateRef.current;\\n    stateRef.current = formikReducer(prev, action); // force rerender\\n\\n    if (prev !== stateRef.current) setIteration(function (x) {\\n      return x + 1;\\n    });\\n  }, []);\\n  var runValidateHandler = (0,external_react_.useCallback)(function (values, field) {\\n    return new Promise(function (resolve, reject) {\\n      var maybePromisedErrors = props.validate(values, field);\\n\\n      if (maybePromisedErrors == null) {\\n        // use loose null check here on purpose\\n        resolve(emptyErrors);\\n      } else if (isPromise(maybePromisedErrors)) {\\n        maybePromisedErrors.then(function (errors) {\\n          resolve(errors || emptyErrors);\\n        }, function (actualException) {\\n          if (false) {}\\n\\n          reject(actualException);\\n        });\\n      } else {\\n        resolve(maybePromisedErrors);\\n      }\\n    });\\n  }, [props.validate]);\\n  /**\\r\\n   * Run validation against a Yup schema and optionally run a function if successful\\r\\n   */\\n\\n  var runValidationSchema = (0,external_react_.useCallback)(function (values, field) {\\n    var validationSchema = props.validationSchema;\\n    var schema = formik_esm_isFunction(validationSchema) ? validationSchema(field) : validationSchema;\\n    var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);\\n    return new Promise(function (resolve, reject) {\\n      promise.then(function () {\\n        resolve(emptyErrors);\\n      }, function (err) {\\n        // Yup will throw a validation error if validation fails. We catch those and\\n        // resolve them into Formik errors. We can sniff if something is a Yup error\\n        // by checking error.name.\\n        // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\\n        if (err.name === 'ValidationError') {\\n          resolve(yupToFormErrors(err));\\n        } else {\\n          // We throw any other errors\\n          if (false) {}\\n\\n          reject(err);\\n        }\\n      });\\n    });\\n  }, [props.validationSchema]);\\n  var runSingleFieldLevelValidation = (0,external_react_.useCallback)(function (field, value) {\\n    return new Promise(function (resolve) {\\n      return resolve(fieldRegistry.current[field].validate(value));\\n    });\\n  }, []);\\n  var runFieldLevelValidations = (0,external_react_.useCallback)(function (values) {\\n    var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function (f) {\\n      return formik_esm_isFunction(fieldRegistry.current[f].validate);\\n    }); // Construct an array with all of the field validation functions\\n\\n    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function (f) {\\n      return runSingleFieldLevelValidation(f, getIn(values, f));\\n    }) : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\\n\\n    return Promise.all(fieldValidations).then(function (fieldErrorsList) {\\n      return fieldErrorsList.reduce(function (prev, curr, index) {\\n        if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\\n          return prev;\\n        }\\n\\n        if (curr) {\\n          prev = setIn(prev, fieldKeysWithValidation[index], curr);\\n        }\\n\\n        return prev;\\n      }, {});\\n    });\\n  }, [runSingleFieldLevelValidation]); // Run all validations and return the result\\n\\n  var runAllValidations = (0,external_react_.useCallback)(function (values) {\\n    return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function (_ref2) {\\n      var fieldErrors = _ref2[0],\\n          schemaErrors = _ref2[1],\\n          validateErrors = _ref2[2];\\n      var combinedErrors = es.all([fieldErrors, schemaErrors, validateErrors], {\\n        arrayMerge: arrayMerge\\n      });\\n      return combinedErrors;\\n    });\\n  }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]); // Run all validations methods and update state accordingly\\n\\n  var validateFormWithHighPriority = useEventCallback(function (values) {\\n    if (values === void 0) {\\n      values = state.values;\\n    }\\n\\n    dispatch({\\n      type: 'SET_ISVALIDATING',\\n      payload: true\\n    });\\n    return runAllValidations(values).then(function (combinedErrors) {\\n      if (!!isMounted.current) {\\n        dispatch({\\n          type: 'SET_ISVALIDATING',\\n          payload: false\\n        });\\n        dispatch({\\n          type: 'SET_ERRORS',\\n          payload: combinedErrors\\n        });\\n      }\\n\\n      return combinedErrors;\\n    });\\n  });\\n  (0,external_react_.useEffect)(function () {\\n    if (validateOnMount && isMounted.current === true && react_fast_compare_default()(initialValues.current, props.initialValues)) {\\n      validateFormWithHighPriority(initialValues.current);\\n    }\\n  }, [validateOnMount, validateFormWithHighPriority]);\\n  var resetForm = (0,external_react_.useCallback)(function (nextState) {\\n    var values = nextState && nextState.values ? nextState.values : initialValues.current;\\n    var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};\\n    var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};\\n    var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;\\n    initialValues.current = values;\\n    initialErrors.current = errors;\\n    initialTouched.current = touched;\\n    initialStatus.current = status;\\n\\n    var dispatchFn = function dispatchFn() {\\n      dispatch({\\n        type: 'RESET_FORM',\\n        payload: {\\n          isSubmitting: !!nextState && !!nextState.isSubmitting,\\n          errors: errors,\\n          touched: touched,\\n          status: status,\\n          values: values,\\n          isValidating: !!nextState && !!nextState.isValidating,\\n          submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === 'number' ? nextState.submitCount : 0\\n        }\\n      });\\n    };\\n\\n    if (props.onReset) {\\n      var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);\\n\\n      if (isPromise(maybePromisedOnReset)) {\\n        maybePromisedOnReset.then(dispatchFn);\\n      } else {\\n        dispatchFn();\\n      }\\n    } else {\\n      dispatchFn();\\n    }\\n  }, [props.initialErrors, props.initialStatus, props.initialTouched, props.onReset]);\\n  (0,external_react_.useEffect)(function () {\\n    if (isMounted.current === true && !react_fast_compare_default()(initialValues.current, props.initialValues)) {\\n      if (enableReinitialize) {\\n        initialValues.current = props.initialValues;\\n        resetForm();\\n\\n        if (validateOnMount) {\\n          validateFormWithHighPriority(initialValues.current);\\n        }\\n      }\\n    }\\n  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);\\n  (0,external_react_.useEffect)(function () {\\n    if (enableReinitialize && isMounted.current === true && !react_fast_compare_default()(initialErrors.current, props.initialErrors)) {\\n      initialErrors.current = props.initialErrors || emptyErrors;\\n      dispatch({\\n        type: 'SET_ERRORS',\\n        payload: props.initialErrors || emptyErrors\\n      });\\n    }\\n  }, [enableReinitialize, props.initialErrors]);\\n  (0,external_react_.useEffect)(function () {\\n    if (enableReinitialize && isMounted.current === true && !react_fast_compare_default()(initialTouched.current, props.initialTouched)) {\\n      initialTouched.current = props.initialTouched || emptyTouched;\\n      dispatch({\\n        type: 'SET_TOUCHED',\\n        payload: props.initialTouched || emptyTouched\\n      });\\n    }\\n  }, [enableReinitialize, props.initialTouched]);\\n  (0,external_react_.useEffect)(function () {\\n    if (enableReinitialize && isMounted.current === true && !react_fast_compare_default()(initialStatus.current, props.initialStatus)) {\\n      initialStatus.current = props.initialStatus;\\n      dispatch({\\n        type: 'SET_STATUS',\\n        payload: props.initialStatus\\n      });\\n    }\\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\\n  var validateField = useEventCallback(function (name) {\\n    // This will efficiently validate a single field by avoiding state\\n    // changes if the validation function is synchronous. It's different from\\n    // what is called when using validateForm.\\n    if (fieldRegistry.current[name] && formik_esm_isFunction(fieldRegistry.current[name].validate)) {\\n      var value = getIn(state.values, name);\\n      var maybePromise = fieldRegistry.current[name].validate(value);\\n\\n      if (isPromise(maybePromise)) {\\n        // Only flip isValidating if the function is async.\\n        dispatch({\\n          type: 'SET_ISVALIDATING',\\n          payload: true\\n        });\\n        return maybePromise.then(function (x) {\\n          return x;\\n        }).then(function (error) {\\n          dispatch({\\n            type: 'SET_FIELD_ERROR',\\n            payload: {\\n              field: name,\\n              value: error\\n            }\\n          });\\n          dispatch({\\n            type: 'SET_ISVALIDATING',\\n            payload: false\\n          });\\n        });\\n      } else {\\n        dispatch({\\n          type: 'SET_FIELD_ERROR',\\n          payload: {\\n            field: name,\\n            value: maybePromise\\n          }\\n        });\\n        return Promise.resolve(maybePromise);\\n      }\\n    } else if (props.validationSchema) {\\n      dispatch({\\n        type: 'SET_ISVALIDATING',\\n        payload: true\\n      });\\n      return runValidationSchema(state.values, name).then(function (x) {\\n        return x;\\n      }).then(function (error) {\\n        dispatch({\\n          type: 'SET_FIELD_ERROR',\\n          payload: {\\n            field: name,\\n            value: getIn(error, name)\\n          }\\n        });\\n        dispatch({\\n          type: 'SET_ISVALIDATING',\\n          payload: false\\n        });\\n      });\\n    }\\n\\n    return Promise.resolve();\\n  });\\n  var registerField = (0,external_react_.useCallback)(function (name, _ref3) {\\n    var validate = _ref3.validate;\\n    fieldRegistry.current[name] = {\\n      validate: validate\\n    };\\n  }, []);\\n  var unregisterField = (0,external_react_.useCallback)(function (name) {\\n    delete fieldRegistry.current[name];\\n  }, []);\\n  var setTouched = useEventCallback(function (touched, shouldValidate) {\\n    dispatch({\\n      type: 'SET_TOUCHED',\\n      payload: touched\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();\\n  });\\n  var setErrors = (0,external_react_.useCallback)(function (errors) {\\n    dispatch({\\n      type: 'SET_ERRORS',\\n      payload: errors\\n    });\\n  }, []);\\n  var setValues = useEventCallback(function (values, shouldValidate) {\\n    var resolvedValues = formik_esm_isFunction(values) ? values(state.values) : values;\\n    dispatch({\\n      type: 'SET_VALUES',\\n      payload: resolvedValues\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();\\n  });\\n  var setFieldError = (0,external_react_.useCallback)(function (field, value) {\\n    dispatch({\\n      type: 'SET_FIELD_ERROR',\\n      payload: {\\n        field: field,\\n        value: value\\n      }\\n    });\\n  }, []);\\n  var setFieldValue = useEventCallback(function (field, value, shouldValidate) {\\n    dispatch({\\n      type: 'SET_FIELD_VALUE',\\n      payload: {\\n        field: field,\\n        value: value\\n      }\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value)) : Promise.resolve();\\n  });\\n  var executeChange = (0,external_react_.useCallback)(function (eventOrTextValue, maybePath) {\\n    // By default, assume that the first argument is a string. This allows us to use\\n    // handleChange with React Native and React Native Web's onChangeText prop which\\n    // provides just the value of the input.\\n    var field = maybePath;\\n    var val = eventOrTextValue;\\n    var parsed; // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\\n    // so we handle like we would a normal HTML change event.\\n\\n    if (!isString(eventOrTextValue)) {\\n      // If we can, persist the event\\n      // @see https://reactjs.org/docs/events.html#event-pooling\\n      if (eventOrTextValue.persist) {\\n        eventOrTextValue.persist();\\n      }\\n\\n      var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;\\n      var type = target.type,\\n          name = target.name,\\n          id = target.id,\\n          value = target.value,\\n          checked = target.checked,\\n          outerHTML = target.outerHTML,\\n          options = target.options,\\n          multiple = target.multiple;\\n      field = maybePath ? maybePath : name ? name : id;\\n\\n      if (!field && \\\"production\\\" !== \\\"production\\\") {}\\n\\n      val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? '' : parsed) : /checkbox/.test(type) // checkboxes\\n      ? getValueForCheckbox(getIn(state.values, field), checked, value) : options && multiple // <select multiple>\\n      ? getSelectedValues(options) : value;\\n    }\\n\\n    if (field) {\\n      // Set form fields by name\\n      setFieldValue(field, val);\\n    }\\n  }, [setFieldValue, state.values]);\\n  var handleChange = useEventCallback(function (eventOrPath) {\\n    if (isString(eventOrPath)) {\\n      return function (event) {\\n        return executeChange(event, eventOrPath);\\n      };\\n    } else {\\n      executeChange(eventOrPath);\\n    }\\n  });\\n  var setFieldTouched = useEventCallback(function (field, touched, shouldValidate) {\\n    if (touched === void 0) {\\n      touched = true;\\n    }\\n\\n    dispatch({\\n      type: 'SET_FIELD_TOUCHED',\\n      payload: {\\n        field: field,\\n        value: touched\\n      }\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();\\n  });\\n  var executeBlur = (0,external_react_.useCallback)(function (e, path) {\\n    if (e.persist) {\\n      e.persist();\\n    }\\n\\n    var _e$target = e.target,\\n        name = _e$target.name,\\n        id = _e$target.id,\\n        outerHTML = _e$target.outerHTML;\\n    var field = path ? path : name ? name : id;\\n\\n    if (!field && \\\"production\\\" !== \\\"production\\\") {}\\n\\n    setFieldTouched(field, true);\\n  }, [setFieldTouched]);\\n  var handleBlur = useEventCallback(function (eventOrString) {\\n    if (isString(eventOrString)) {\\n      return function (event) {\\n        return executeBlur(event, eventOrString);\\n      };\\n    } else {\\n      executeBlur(eventOrString);\\n    }\\n  });\\n  var setFormikState = (0,external_react_.useCallback)(function (stateOrCb) {\\n    if (formik_esm_isFunction(stateOrCb)) {\\n      dispatch({\\n        type: 'SET_FORMIK_STATE',\\n        payload: stateOrCb\\n      });\\n    } else {\\n      dispatch({\\n        type: 'SET_FORMIK_STATE',\\n        payload: function payload() {\\n          return stateOrCb;\\n        }\\n      });\\n    }\\n  }, []);\\n  var setStatus = (0,external_react_.useCallback)(function (status) {\\n    dispatch({\\n      type: 'SET_STATUS',\\n      payload: status\\n    });\\n  }, []);\\n  var setSubmitting = (0,external_react_.useCallback)(function (isSubmitting) {\\n    dispatch({\\n      type: 'SET_ISSUBMITTING',\\n      payload: isSubmitting\\n    });\\n  }, []);\\n  var submitForm = useEventCallback(function () {\\n    dispatch({\\n      type: 'SUBMIT_ATTEMPT'\\n    });\\n    return validateFormWithHighPriority().then(function (combinedErrors) {\\n      // In case an error was thrown and passed to the resolved Promise,\\n      // `combinedErrors` can be an instance of an Error. We need to check\\n      // that and abort the submit.\\n      // If we don't do that, calling `Object.keys(new Error())` yields an\\n      // empty array, which causes the validation to pass and the form\\n      // to be submitted.\\n      var isInstanceOfError = combinedErrors instanceof Error;\\n      var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;\\n\\n      if (isActuallyValid) {\\n        // Proceed with submit...\\n        //\\n        // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\\n        // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\\n        // This would be fine in simple cases, but make it impossible to disable submit\\n        // buttons where people use callbacks or promises as side effects (which is basically\\n        // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\\n        //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\\n        // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\\n        // cleanup of isSubmitting on behalf of the consumer.\\n        var promiseOrUndefined;\\n\\n        try {\\n          promiseOrUndefined = executeSubmit(); // Bail if it's sync, consumer is responsible for cleaning up\\n          // via setSubmitting(false)\\n\\n          if (promiseOrUndefined === undefined) {\\n            return;\\n          }\\n        } catch (error) {\\n          throw error;\\n        }\\n\\n        return Promise.resolve(promiseOrUndefined).then(function (result) {\\n          if (!!isMounted.current) {\\n            dispatch({\\n              type: 'SUBMIT_SUCCESS'\\n            });\\n          }\\n\\n          return result;\\n        })[\\\"catch\\\"](function (_errors) {\\n          if (!!isMounted.current) {\\n            dispatch({\\n              type: 'SUBMIT_FAILURE'\\n            }); // This is a legit error rejected by the onSubmit fn\\n            // so we don't want to break the promise chain\\n\\n            throw _errors;\\n          }\\n        });\\n      } else if (!!isMounted.current) {\\n        // ^^^ Make sure Formik is still mounted before updating state\\n        dispatch({\\n          type: 'SUBMIT_FAILURE'\\n        }); // throw combinedErrors;\\n\\n        if (isInstanceOfError) {\\n          throw combinedErrors;\\n        }\\n      }\\n\\n      return;\\n    });\\n  });\\n  var handleSubmit = useEventCallback(function (e) {\\n    if (e && e.preventDefault && formik_esm_isFunction(e.preventDefault)) {\\n      e.preventDefault();\\n    }\\n\\n    if (e && e.stopPropagation && formik_esm_isFunction(e.stopPropagation)) {\\n      e.stopPropagation();\\n    } // Warn if form submission is triggered by a <button> without a\\n    // specified `type` attribute during development. This mitigates\\n    // a common gotcha in forms with both reset and submit buttons,\\n    // where the dev forgets to add type=\\\"button\\\" to the reset button.\\n\\n\\n    if (false) { var activeElement; }\\n\\n    submitForm()[\\\"catch\\\"](function (reason) {\\n      console.warn(\\\"Warning: An unhandled error was caught from submitForm()\\\", reason);\\n    });\\n  });\\n  var imperativeMethods = {\\n    resetForm: resetForm,\\n    validateForm: validateFormWithHighPriority,\\n    validateField: validateField,\\n    setErrors: setErrors,\\n    setFieldError: setFieldError,\\n    setFieldTouched: setFieldTouched,\\n    setFieldValue: setFieldValue,\\n    setStatus: setStatus,\\n    setSubmitting: setSubmitting,\\n    setTouched: setTouched,\\n    setValues: setValues,\\n    setFormikState: setFormikState,\\n    submitForm: submitForm\\n  };\\n  var executeSubmit = useEventCallback(function () {\\n    return onSubmit(state.values, imperativeMethods);\\n  });\\n  var handleReset = useEventCallback(function (e) {\\n    if (e && e.preventDefault && formik_esm_isFunction(e.preventDefault)) {\\n      e.preventDefault();\\n    }\\n\\n    if (e && e.stopPropagation && formik_esm_isFunction(e.stopPropagation)) {\\n      e.stopPropagation();\\n    }\\n\\n    resetForm();\\n  });\\n  var getFieldMeta = (0,external_react_.useCallback)(function (name) {\\n    return {\\n      value: getIn(state.values, name),\\n      error: getIn(state.errors, name),\\n      touched: !!getIn(state.touched, name),\\n      initialValue: getIn(initialValues.current, name),\\n      initialTouched: !!getIn(initialTouched.current, name),\\n      initialError: getIn(initialErrors.current, name)\\n    };\\n  }, [state.errors, state.touched, state.values]);\\n  var getFieldHelpers = (0,external_react_.useCallback)(function (name) {\\n    return {\\n      setValue: function setValue(value, shouldValidate) {\\n        return setFieldValue(name, value, shouldValidate);\\n      },\\n      setTouched: function setTouched(value, shouldValidate) {\\n        return setFieldTouched(name, value, shouldValidate);\\n      },\\n      setError: function setError(value) {\\n        return setFieldError(name, value);\\n      }\\n    };\\n  }, [setFieldValue, setFieldTouched, setFieldError]);\\n  var getFieldProps = (0,external_react_.useCallback)(function (nameOrOptions) {\\n    var isAnObject = formik_esm_isObject(nameOrOptions);\\n    var name = isAnObject ? nameOrOptions.name : nameOrOptions;\\n    var valueState = getIn(state.values, name);\\n    var field = {\\n      name: name,\\n      value: valueState,\\n      onChange: handleChange,\\n      onBlur: handleBlur\\n    };\\n\\n    if (isAnObject) {\\n      var type = nameOrOptions.type,\\n          valueProp = nameOrOptions.value,\\n          is = nameOrOptions.as,\\n          multiple = nameOrOptions.multiple;\\n\\n      if (type === 'checkbox') {\\n        if (valueProp === undefined) {\\n          field.checked = !!valueState;\\n        } else {\\n          field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));\\n          field.value = valueProp;\\n        }\\n      } else if (type === 'radio') {\\n        field.checked = valueState === valueProp;\\n        field.value = valueProp;\\n      } else if (is === 'select' && multiple) {\\n        field.value = field.value || [];\\n        field.multiple = true;\\n      }\\n    }\\n\\n    return field;\\n  }, [handleBlur, handleChange, state.values]);\\n  var dirty = (0,external_react_.useMemo)(function () {\\n    return !react_fast_compare_default()(initialValues.current, state.values);\\n  }, [initialValues.current, state.values]);\\n  var isValid = (0,external_react_.useMemo)(function () {\\n    return typeof isInitialValid !== 'undefined' ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && formik_esm_isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;\\n  }, [isInitialValid, dirty, state.errors, props]);\\n\\n  var ctx = _extends({}, state, {\\n    initialValues: initialValues.current,\\n    initialErrors: initialErrors.current,\\n    initialTouched: initialTouched.current,\\n    initialStatus: initialStatus.current,\\n    handleBlur: handleBlur,\\n    handleChange: handleChange,\\n    handleReset: handleReset,\\n    handleSubmit: handleSubmit,\\n    resetForm: resetForm,\\n    setErrors: setErrors,\\n    setFormikState: setFormikState,\\n    setFieldTouched: setFieldTouched,\\n    setFieldValue: setFieldValue,\\n    setFieldError: setFieldError,\\n    setStatus: setStatus,\\n    setSubmitting: setSubmitting,\\n    setTouched: setTouched,\\n    setValues: setValues,\\n    submitForm: submitForm,\\n    validateForm: validateFormWithHighPriority,\\n    validateField: validateField,\\n    isValid: isValid,\\n    dirty: dirty,\\n    unregisterField: unregisterField,\\n    registerField: registerField,\\n    getFieldProps: getFieldProps,\\n    getFieldMeta: getFieldMeta,\\n    getFieldHelpers: getFieldHelpers,\\n    validateOnBlur: validateOnBlur,\\n    validateOnChange: validateOnChange,\\n    validateOnMount: validateOnMount\\n  });\\n\\n  return ctx;\\n}\\nfunction Formik(props) {\\n  var formikbag = useFormik(props);\\n  var component = props.component,\\n      children = props.children,\\n      render = props.render,\\n      innerRef = props.innerRef; // This allows folks to pass a ref to <Formik />\\n\\n  (0,external_react_.useImperativeHandle)(innerRef, function () {\\n    return formikbag;\\n  });\\n\\n  if (false) {}\\n\\n  return (0,external_react_.createElement)(FormikProvider, {\\n    value: formikbag\\n  }, component ? (0,external_react_.createElement)(component, formikbag) : render ? render(formikbag) : children // children come last, always called\\n  ? formik_esm_isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? external_react_.Children.only(children) : null : null);\\n}\\n\\nfunction warnAboutMissingIdentifier(_ref4) {\\n  var htmlContent = _ref4.htmlContent,\\n      documentationAnchorLink = _ref4.documentationAnchorLink,\\n      handlerName = _ref4.handlerName;\\n  console.warn(\\\"Warning: Formik called `\\\" + handlerName + \\\"`, but you forgot to pass an `id` or `name` attribute to your input:\\\\n    \\\" + htmlContent + \\\"\\\\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#\\\" + documentationAnchorLink + \\\"\\\\n  \\\");\\n}\\n/**\\r\\n * Transform Yup ValidationError to a more usable object\\r\\n */\\n\\n\\nfunction yupToFormErrors(yupError) {\\n  var errors = {};\\n\\n  if (yupError.inner) {\\n    if (yupError.inner.length === 0) {\\n      return setIn(errors, yupError.path, yupError.message);\\n    }\\n\\n    for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\\n      var _ref5;\\n\\n      if (_isArray) {\\n        if (_i >= _iterator.length) break;\\n        _ref5 = _iterator[_i++];\\n      } else {\\n        _i = _iterator.next();\\n        if (_i.done) break;\\n        _ref5 = _i.value;\\n      }\\n\\n      var err = _ref5;\\n\\n      if (!getIn(errors, err.path)) {\\n        errors = setIn(errors, err.path, err.message);\\n      }\\n    }\\n  }\\n\\n  return errors;\\n}\\n/**\\r\\n * Validate a yup schema.\\r\\n */\\n\\nfunction validateYupSchema(values, schema, sync, context) {\\n  if (sync === void 0) {\\n    sync = false;\\n  }\\n\\n  var normalizedValues = prepareDataForValidation(values);\\n  return schema[sync ? 'validateSync' : 'validate'](normalizedValues, {\\n    abortEarly: false,\\n    context: context || normalizedValues\\n  });\\n}\\n/**\\r\\n * Recursively prepare values.\\r\\n */\\n\\nfunction prepareDataForValidation(values) {\\n  var data = Array.isArray(values) ? [] : {};\\n\\n  for (var k in values) {\\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\\n      var key = String(k);\\n\\n      if (Array.isArray(values[key]) === true) {\\n        data[key] = values[key].map(function (value) {\\n          if (Array.isArray(value) === true || lodash_es_isPlainObject(value)) {\\n            return prepareDataForValidation(value);\\n          } else {\\n            return value !== '' ? value : undefined;\\n          }\\n        });\\n      } else if (lodash_es_isPlainObject(values[key])) {\\n        data[key] = prepareDataForValidation(values[key]);\\n      } else {\\n        data[key] = values[key] !== '' ? values[key] : undefined;\\n      }\\n    }\\n  }\\n\\n  return data;\\n}\\n/**\\r\\n * deepmerge array merging algorithm\\r\\n * https://github.com/KyleAMathews/deepmerge#combine-array\\r\\n */\\n\\nfunction arrayMerge(target, source, options) {\\n  var destination = target.slice();\\n  source.forEach(function merge(e, i) {\\n    if (typeof destination[i] === 'undefined') {\\n      var cloneRequested = options.clone !== false;\\n      var shouldClone = cloneRequested && options.isMergeableObject(e);\\n      destination[i] = shouldClone ? es(Array.isArray(e) ? [] : {}, e, options) : e;\\n    } else if (options.isMergeableObject(e)) {\\n      destination[i] = es(target[i], e, options);\\n    } else if (target.indexOf(e) === -1) {\\n      destination.push(e);\\n    }\\n  });\\n  return destination;\\n}\\n/** Return multi select values based on an array of options */\\n\\n\\nfunction getSelectedValues(options) {\\n  return Array.from(options).filter(function (el) {\\n    return el.selected;\\n  }).map(function (el) {\\n    return el.value;\\n  });\\n}\\n/** Return the next value for a checkbox */\\n\\n\\nfunction getValueForCheckbox(currentValue, checked, valueProp) {\\n  // If the current value was a boolean, return a boolean\\n  if (typeof currentValue === 'boolean') {\\n    return Boolean(checked);\\n  } // If the currentValue was not a boolean we want to return an array\\n\\n\\n  var currentArrayOfValues = [];\\n  var isValueInArray = false;\\n  var index = -1;\\n\\n  if (!Array.isArray(currentValue)) {\\n    // eslint-disable-next-line eqeqeq\\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\\n      return Boolean(checked);\\n    }\\n  } else {\\n    // If the current value is already an array, use it\\n    currentArrayOfValues = currentValue;\\n    index = currentValue.indexOf(valueProp);\\n    isValueInArray = index >= 0;\\n  } // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\\n\\n\\n  if (checked && valueProp && !isValueInArray) {\\n    return currentArrayOfValues.concat(valueProp);\\n  } // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\\n\\n\\n  if (!isValueInArray) {\\n    return currentArrayOfValues;\\n  } // If the checkbox was unchecked and the value is in the array, remove the value and return the array\\n\\n\\n  return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));\\n} // React currently throws a warning when using useLayoutEffect on the server.\\n// To get around it, we can conditionally useEffect on the server (no-op) and\\n// useLayoutEffect in the browser.\\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\\n\\n\\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? external_react_.useLayoutEffect : external_react_.useEffect;\\n\\nfunction useEventCallback(fn) {\\n  var ref = (0,external_react_.useRef)(fn); // we copy a ref to the callback scoped to the current state/props on each render\\n\\n  useIsomorphicLayoutEffect(function () {\\n    ref.current = fn;\\n  });\\n  return (0,external_react_.useCallback)(function () {\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    return ref.current.apply(void 0, args);\\n  }, []);\\n}\\n\\nfunction useField(propsOrFieldName) {\\n  var formik = useFormikContext();\\n  var getFieldProps = formik.getFieldProps,\\n      getFieldMeta = formik.getFieldMeta,\\n      getFieldHelpers = formik.getFieldHelpers,\\n      registerField = formik.registerField,\\n      unregisterField = formik.unregisterField;\\n  var isAnObject = formik_esm_isObject(propsOrFieldName); // Normalize propsOrFieldName to FieldHookConfig<Val>\\n\\n  var props = isAnObject ? propsOrFieldName : {\\n    name: propsOrFieldName\\n  };\\n  var fieldName = props.name,\\n      validateFn = props.validate;\\n  useEffect(function () {\\n    if (fieldName) {\\n      registerField(fieldName, {\\n        validate: validateFn\\n      });\\n    }\\n\\n    return function () {\\n      if (fieldName) {\\n        unregisterField(fieldName);\\n      }\\n    };\\n  }, [registerField, unregisterField, fieldName, validateFn]);\\n\\n  if (false) {}\\n\\n  !fieldName ?  false ? 0 : invariant(false) : void 0;\\n  var fieldHelpers = useMemo(function () {\\n    return getFieldHelpers(fieldName);\\n  }, [getFieldHelpers, fieldName]);\\n  return [getFieldProps(props), getFieldMeta(fieldName), fieldHelpers];\\n}\\nfunction Field(_ref) {\\n  var validate = _ref.validate,\\n      name = _ref.name,\\n      render = _ref.render,\\n      children = _ref.children,\\n      is = _ref.as,\\n      component = _ref.component,\\n      className = _ref.className,\\n      props = _objectWithoutPropertiesLoose(_ref, [\\\"validate\\\", \\\"name\\\", \\\"render\\\", \\\"children\\\", \\\"as\\\", \\\"component\\\", \\\"className\\\"]);\\n\\n  var _useFormikContext = useFormikContext(),\\n      formik = _objectWithoutPropertiesLoose(_useFormikContext, [\\\"validate\\\", \\\"validationSchema\\\"]);\\n\\n  if (false) {} // Register field and field-level validation with parent <Formik>\\n\\n\\n  var registerField = formik.registerField,\\n      unregisterField = formik.unregisterField;\\n  (0,external_react_.useEffect)(function () {\\n    registerField(name, {\\n      validate: validate\\n    });\\n    return function () {\\n      unregisterField(name);\\n    };\\n  }, [registerField, unregisterField, name, validate]);\\n  var field = formik.getFieldProps(_extends({\\n    name: name\\n  }, props));\\n  var meta = formik.getFieldMeta(name);\\n  var legacyBag = {\\n    field: field,\\n    form: formik\\n  };\\n\\n  if (render) {\\n    return render(_extends({}, legacyBag, {\\n      meta: meta\\n    }));\\n  }\\n\\n  if (formik_esm_isFunction(children)) {\\n    return children(_extends({}, legacyBag, {\\n      meta: meta\\n    }));\\n  }\\n\\n  if (component) {\\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\\n    if (typeof component === 'string') {\\n      var innerRef = props.innerRef,\\n          rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n      return (0,external_react_.createElement)(component, _extends({\\n        ref: innerRef\\n      }, field, rest, {\\n        className: className\\n      }), children);\\n    } // We don't pass `meta` for backwards compat\\n\\n\\n    return (0,external_react_.createElement)(component, _extends({\\n      field: field,\\n      form: formik\\n    }, props, {\\n      className: className\\n    }), children);\\n  } // default to input here so we can check for both `as` and `children` above\\n\\n\\n  var asElement = is || 'input';\\n\\n  if (typeof asElement === 'string') {\\n    var _innerRef = props.innerRef,\\n        _rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n    return (0,external_react_.createElement)(asElement, _extends({\\n      ref: _innerRef\\n    }, field, _rest, {\\n      className: className\\n    }), children);\\n  }\\n\\n  return (0,external_react_.createElement)(asElement, _extends({}, field, props, {\\n    className: className\\n  }), children);\\n}\\n\\nvar Form = /*#__PURE__*/(0,external_react_.forwardRef)(function (props, ref) {\\n  // iOS needs an \\\"action\\\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\\n  // We default the action to \\\"#\\\" in case the preventDefault fails (just updates the URL hash)\\n  var action = props.action,\\n      rest = _objectWithoutPropertiesLoose(props, [\\\"action\\\"]);\\n\\n  var _action = action != null ? action : '#';\\n\\n  var _useFormikContext = useFormikContext(),\\n      handleReset = _useFormikContext.handleReset,\\n      handleSubmit = _useFormikContext.handleSubmit;\\n\\n  return (0,external_react_.createElement)(\\\"form\\\", _extends({\\n    onSubmit: handleSubmit,\\n    ref: ref,\\n    onReset: handleReset,\\n    action: _action\\n  }, rest));\\n});\\nForm.displayName = 'Form';\\n\\n/**\\r\\n * A public higher-order component to access the imperative API\\r\\n */\\n\\nfunction withFormik(_ref) {\\n  var _ref$mapPropsToValues = _ref.mapPropsToValues,\\n      mapPropsToValues = _ref$mapPropsToValues === void 0 ? function (vanillaProps) {\\n    var val = {};\\n\\n    for (var k in vanillaProps) {\\n      if (vanillaProps.hasOwnProperty(k) && typeof vanillaProps[k] !== 'function') {\\n        // @todo TypeScript fix\\n        val[k] = vanillaProps[k];\\n      }\\n    }\\n\\n    return val;\\n  } : _ref$mapPropsToValues,\\n      config = _objectWithoutPropertiesLoose(_ref, [\\\"mapPropsToValues\\\"]);\\n\\n  return function createFormik(Component$1) {\\n    var componentDisplayName = Component$1.displayName || Component$1.name || Component$1.constructor && Component$1.constructor.name || 'Component';\\n    /**\\r\\n     * We need to use closures here for to provide the wrapped component's props to\\r\\n     * the respective withFormik config methods.\\r\\n     */\\n\\n    var C = /*#__PURE__*/function (_React$Component) {\\n      _inheritsLoose(C, _React$Component);\\n\\n      function C() {\\n        var _this;\\n\\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n          args[_key] = arguments[_key];\\n        }\\n\\n        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\\n\\n        _this.validate = function (values) {\\n          return config.validate(values, _this.props);\\n        };\\n\\n        _this.validationSchema = function () {\\n          return formik_esm_isFunction(config.validationSchema) ? config.validationSchema(_this.props) : config.validationSchema;\\n        };\\n\\n        _this.handleSubmit = function (values, actions) {\\n          return config.handleSubmit(values, _extends({}, actions, {\\n            props: _this.props\\n          }));\\n        };\\n\\n        _this.renderFormComponent = function (formikProps) {\\n          return createElement(Component$1, _extends({}, _this.props, formikProps));\\n        };\\n\\n        return _this;\\n      }\\n\\n      var _proto = C.prototype;\\n\\n      _proto.render = function render() {\\n        var _this$props = this.props,\\n            props = _objectWithoutPropertiesLoose(_this$props, [\\\"children\\\"]);\\n\\n        return createElement(Formik, _extends({}, props, config, {\\n          validate: config.validate && this.validate,\\n          validationSchema: config.validationSchema && this.validationSchema,\\n          initialValues: mapPropsToValues(this.props),\\n          initialStatus: config.mapPropsToStatus && config.mapPropsToStatus(this.props),\\n          initialErrors: config.mapPropsToErrors && config.mapPropsToErrors(this.props),\\n          initialTouched: config.mapPropsToTouched && config.mapPropsToTouched(this.props),\\n          onSubmit: this.handleSubmit,\\n          children: this.renderFormComponent\\n        }));\\n      };\\n\\n      return C;\\n    }(Component);\\n\\n    C.displayName = \\\"WithFormik(\\\" + componentDisplayName + \\\")\\\";\\n    return hoistNonReactStatics(C, Component$1 // cast type to ComponentClass (even if SFC)\\n    );\\n  };\\n}\\n\\n/**\\r\\n * Connect any component to Formik context, and inject as a prop called `formik`;\\r\\n * @param Comp React Component\\r\\n */\\n\\nfunction connect(Comp) {\\n  var C = function C(props) {\\n    return createElement(FormikConsumer, null, function (formik) {\\n      !!!formik ?  false ? 0 : invariant(false) : void 0;\\n      return createElement(Comp, _extends({}, props, {\\n        formik: formik\\n      }));\\n    });\\n  };\\n\\n  var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component'; // Assign Comp to C.WrappedComponent so we can access the inner component in tests\\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\\n\\n  C.WrappedComponent = Comp;\\n  C.displayName = \\\"FormikConnect(\\\" + componentDisplayName + \\\")\\\";\\n  return hoistNonReactStatics(C, Comp // cast type to ComponentClass (even if SFC)\\n  );\\n}\\n\\n/**\\r\\n * Some array helpers!\\r\\n */\\n\\nvar move = function move(array, from, to) {\\n  var copy = copyArrayLike(array);\\n  var value = copy[from];\\n  copy.splice(from, 1);\\n  copy.splice(to, 0, value);\\n  return copy;\\n};\\nvar swap = function swap(arrayLike, indexA, indexB) {\\n  var copy = copyArrayLike(arrayLike);\\n  var a = copy[indexA];\\n  copy[indexA] = copy[indexB];\\n  copy[indexB] = a;\\n  return copy;\\n};\\nvar insert = function insert(arrayLike, index, value) {\\n  var copy = copyArrayLike(arrayLike);\\n  copy.splice(index, 0, value);\\n  return copy;\\n};\\nvar replace = function replace(arrayLike, index, value) {\\n  var copy = copyArrayLike(arrayLike);\\n  copy[index] = value;\\n  return copy;\\n};\\n\\nvar copyArrayLike = function copyArrayLike(arrayLike) {\\n  if (!arrayLike) {\\n    return [];\\n  } else if (Array.isArray(arrayLike)) {\\n    return [].concat(arrayLike);\\n  } else {\\n    var maxIndex = Object.keys(arrayLike).map(function (key) {\\n      return parseInt(key);\\n    }).reduce(function (max, el) {\\n      return el > max ? el : max;\\n    }, 0);\\n    return Array.from(_extends({}, arrayLike, {\\n      length: maxIndex + 1\\n    }));\\n  }\\n};\\n\\nvar createAlterationHandler = function createAlterationHandler(alteration, defaultFunction) {\\n  var fn = typeof alteration === 'function' ? alteration : defaultFunction;\\n  return function (data) {\\n    if (Array.isArray(data) || formik_esm_isObject(data)) {\\n      var clone = copyArrayLike(data);\\n      return fn(clone);\\n    } // This can be assumed to be a primitive, which\\n    // is a case for top level validation errors\\n\\n\\n    return data;\\n  };\\n};\\n\\nvar FieldArrayInner = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(FieldArrayInner, _React$Component);\\n\\n  function FieldArrayInner(props) {\\n    var _this;\\n\\n    _this = _React$Component.call(this, props) || this; // We need TypeScript generics on these, so we'll bind them in the constructor\\n    // @todo Fix TS 3.2.1\\n\\n    _this.updateArrayField = function (fn, alterTouched, alterErrors) {\\n      var _this$props = _this.props,\\n          name = _this$props.name,\\n          setFormikState = _this$props.formik.setFormikState;\\n      setFormikState(function (prevState) {\\n        var updateErrors = createAlterationHandler(alterErrors, fn);\\n        var updateTouched = createAlterationHandler(alterTouched, fn); // values fn should be executed before updateErrors and updateTouched,\\n        // otherwise it causes an error with unshift.\\n\\n        var values = setIn(prevState.values, name, fn(getIn(prevState.values, name)));\\n        var fieldError = alterErrors ? updateErrors(getIn(prevState.errors, name)) : undefined;\\n        var fieldTouched = alterTouched ? updateTouched(getIn(prevState.touched, name)) : undefined;\\n\\n        if (isEmptyArray(fieldError)) {\\n          fieldError = undefined;\\n        }\\n\\n        if (isEmptyArray(fieldTouched)) {\\n          fieldTouched = undefined;\\n        }\\n\\n        return _extends({}, prevState, {\\n          values: values,\\n          errors: alterErrors ? setIn(prevState.errors, name, fieldError) : prevState.errors,\\n          touched: alterTouched ? setIn(prevState.touched, name, fieldTouched) : prevState.touched\\n        });\\n      });\\n    };\\n\\n    _this.push = function (value) {\\n      return _this.updateArrayField(function (arrayLike) {\\n        return [].concat(copyArrayLike(arrayLike), [lodash_es_cloneDeep(value)]);\\n      }, false, false);\\n    };\\n\\n    _this.handlePush = function (value) {\\n      return function () {\\n        return _this.push(value);\\n      };\\n    };\\n\\n    _this.swap = function (indexA, indexB) {\\n      return _this.updateArrayField(function (array) {\\n        return swap(array, indexA, indexB);\\n      }, true, true);\\n    };\\n\\n    _this.handleSwap = function (indexA, indexB) {\\n      return function () {\\n        return _this.swap(indexA, indexB);\\n      };\\n    };\\n\\n    _this.move = function (from, to) {\\n      return _this.updateArrayField(function (array) {\\n        return move(array, from, to);\\n      }, true, true);\\n    };\\n\\n    _this.handleMove = function (from, to) {\\n      return function () {\\n        return _this.move(from, to);\\n      };\\n    };\\n\\n    _this.insert = function (index, value) {\\n      return _this.updateArrayField(function (array) {\\n        return insert(array, index, value);\\n      }, function (array) {\\n        return insert(array, index, null);\\n      }, function (array) {\\n        return insert(array, index, null);\\n      });\\n    };\\n\\n    _this.handleInsert = function (index, value) {\\n      return function () {\\n        return _this.insert(index, value);\\n      };\\n    };\\n\\n    _this.replace = function (index, value) {\\n      return _this.updateArrayField(function (array) {\\n        return replace(array, index, value);\\n      }, false, false);\\n    };\\n\\n    _this.handleReplace = function (index, value) {\\n      return function () {\\n        return _this.replace(index, value);\\n      };\\n    };\\n\\n    _this.unshift = function (value) {\\n      var length = -1;\\n\\n      _this.updateArrayField(function (array) {\\n        var arr = array ? [value].concat(array) : [value];\\n        length = arr.length;\\n        return arr;\\n      }, function (array) {\\n        return array ? [null].concat(array) : [null];\\n      }, function (array) {\\n        return array ? [null].concat(array) : [null];\\n      });\\n\\n      return length;\\n    };\\n\\n    _this.handleUnshift = function (value) {\\n      return function () {\\n        return _this.unshift(value);\\n      };\\n    };\\n\\n    _this.handleRemove = function (index) {\\n      return function () {\\n        return _this.remove(index);\\n      };\\n    };\\n\\n    _this.handlePop = function () {\\n      return function () {\\n        return _this.pop();\\n      };\\n    };\\n\\n    _this.remove = _this.remove.bind(_assertThisInitialized(_this));\\n    _this.pop = _this.pop.bind(_assertThisInitialized(_this));\\n    return _this;\\n  }\\n\\n  var _proto = FieldArrayInner.prototype;\\n\\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\\n    if (this.props.validateOnChange && this.props.formik.validateOnChange && !react_fast_compare_default()(getIn(prevProps.formik.values, prevProps.name), getIn(this.props.formik.values, this.props.name))) {\\n      this.props.formik.validateForm(this.props.formik.values);\\n    }\\n  };\\n\\n  _proto.remove = function remove(index) {\\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\\n    var result;\\n    this.updateArrayField( // so this gets call 3 times\\n    function (array) {\\n      var copy = array ? copyArrayLike(array) : [];\\n\\n      if (!result) {\\n        result = copy[index];\\n      }\\n\\n      if (formik_esm_isFunction(copy.splice)) {\\n        copy.splice(index, 1);\\n      } // if the array only includes undefined values we have to return an empty array\\n\\n\\n      return formik_esm_isFunction(copy.every) ? copy.every(function (v) {\\n        return v === undefined;\\n      }) ? [] : copy : copy;\\n    }, true, true);\\n    return result;\\n  };\\n\\n  _proto.pop = function pop() {\\n    // Remove relevant pieces of `touched` and `errors` too!\\n    var result;\\n    this.updateArrayField( // so this gets call 3 times\\n    function (array) {\\n      var tmp = array.slice();\\n\\n      if (!result) {\\n        result = tmp && tmp.pop && tmp.pop();\\n      }\\n\\n      return tmp;\\n    }, true, true);\\n    return result;\\n  };\\n\\n  _proto.render = function render() {\\n    var arrayHelpers = {\\n      push: this.push,\\n      pop: this.pop,\\n      swap: this.swap,\\n      move: this.move,\\n      insert: this.insert,\\n      replace: this.replace,\\n      unshift: this.unshift,\\n      remove: this.remove,\\n      handlePush: this.handlePush,\\n      handlePop: this.handlePop,\\n      handleSwap: this.handleSwap,\\n      handleMove: this.handleMove,\\n      handleInsert: this.handleInsert,\\n      handleReplace: this.handleReplace,\\n      handleUnshift: this.handleUnshift,\\n      handleRemove: this.handleRemove\\n    };\\n\\n    var _this$props2 = this.props,\\n        component = _this$props2.component,\\n        render = _this$props2.render,\\n        children = _this$props2.children,\\n        name = _this$props2.name,\\n        _this$props2$formik = _this$props2.formik,\\n        restOfFormik = _objectWithoutPropertiesLoose(_this$props2$formik, [\\\"validate\\\", \\\"validationSchema\\\"]);\\n\\n    var props = _extends({}, arrayHelpers, {\\n      form: restOfFormik,\\n      name: name\\n    });\\n\\n    return component ? (0,external_react_.createElement)(component, props) : render ? render(props) : children // children come last, always called\\n    ? typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? external_react_.Children.only(children) : null : null;\\n  };\\n\\n  return FieldArrayInner;\\n}(external_react_.Component);\\n\\nFieldArrayInner.defaultProps = {\\n  validateOnChange: true\\n};\\nvar FieldArray = /*#__PURE__*/(/* unused pure expression or super */ null && (connect(FieldArrayInner)));\\n\\nvar ErrorMessageImpl = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(ErrorMessageImpl, _React$Component);\\n\\n  function ErrorMessageImpl() {\\n    return _React$Component.apply(this, arguments) || this;\\n  }\\n\\n  var _proto = ErrorMessageImpl.prototype;\\n\\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {\\n    if (getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n\\n  _proto.render = function render() {\\n    var _this$props = this.props,\\n        component = _this$props.component,\\n        formik = _this$props.formik,\\n        render = _this$props.render,\\n        children = _this$props.children,\\n        name = _this$props.name,\\n        rest = _objectWithoutPropertiesLoose(_this$props, [\\\"component\\\", \\\"formik\\\", \\\"render\\\", \\\"children\\\", \\\"name\\\"]);\\n\\n    var touch = getIn(formik.touched, name);\\n    var error = getIn(formik.errors, name);\\n    return !!touch && !!error ? render ? formik_esm_isFunction(render) ? render(error) : null : children ? formik_esm_isFunction(children) ? children(error) : null : component ? (0,external_react_.createElement)(component, rest, error) : error : null;\\n  };\\n\\n  return ErrorMessageImpl;\\n}(external_react_.Component);\\n\\nvar ErrorMessage = /*#__PURE__*/(/* unused pure expression or super */ null && (connect(ErrorMessageImpl)));\\n\\n/**\\r\\n * Custom Field component for quickly hooking into Formik\\r\\n * context and wiring up forms.\\r\\n */\\n\\nvar FastFieldInner = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(FastFieldInner, _React$Component);\\n\\n  function FastFieldInner(props) {\\n    var _this;\\n\\n    _this = _React$Component.call(this, props) || this;\\n    var render = props.render,\\n        children = props.children,\\n        component = props.component,\\n        is = props.as,\\n        name = props.name;\\n    !!render ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(component && render) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(is && children && formik_esm_isFunction(children)) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(component && children && formik_esm_isFunction(children)) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(render && children && !isEmptyChildren(children)) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    return _this;\\n  }\\n\\n  var _proto = FastFieldInner.prototype;\\n\\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {\\n    if (this.props.shouldUpdate) {\\n      return this.props.shouldUpdate(props, this.props);\\n    } else if (props.name !== this.props.name || getIn(props.formik.values, this.props.name) !== getIn(this.props.formik.values, this.props.name) || getIn(props.formik.errors, this.props.name) !== getIn(this.props.formik.errors, this.props.name) || getIn(props.formik.touched, this.props.name) !== getIn(this.props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || props.formik.isSubmitting !== this.props.formik.isSubmitting) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n\\n  _proto.componentDidMount = function componentDidMount() {\\n    // Register the Field with the parent Formik. Parent will cycle through\\n    // registered Field's validate fns right prior to submit\\n    this.props.formik.registerField(this.props.name, {\\n      validate: this.props.validate\\n    });\\n  };\\n\\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\\n    if (this.props.name !== prevProps.name) {\\n      this.props.formik.unregisterField(prevProps.name);\\n      this.props.formik.registerField(this.props.name, {\\n        validate: this.props.validate\\n      });\\n    }\\n\\n    if (this.props.validate !== prevProps.validate) {\\n      this.props.formik.registerField(this.props.name, {\\n        validate: this.props.validate\\n      });\\n    }\\n  };\\n\\n  _proto.componentWillUnmount = function componentWillUnmount() {\\n    this.props.formik.unregisterField(this.props.name);\\n  };\\n\\n  _proto.render = function render() {\\n    var _this$props = this.props,\\n        name = _this$props.name,\\n        render = _this$props.render,\\n        is = _this$props.as,\\n        children = _this$props.children,\\n        component = _this$props.component,\\n        formik = _this$props.formik,\\n        props = _objectWithoutPropertiesLoose(_this$props, [\\\"validate\\\", \\\"name\\\", \\\"render\\\", \\\"as\\\", \\\"children\\\", \\\"component\\\", \\\"shouldUpdate\\\", \\\"formik\\\"]);\\n\\n    var restOfFormik = _objectWithoutPropertiesLoose(formik, [\\\"validate\\\", \\\"validationSchema\\\"]);\\n\\n    var field = formik.getFieldProps(_extends({\\n      name: name\\n    }, props));\\n    var meta = {\\n      value: getIn(formik.values, name),\\n      error: getIn(formik.errors, name),\\n      touched: !!getIn(formik.touched, name),\\n      initialValue: getIn(formik.initialValues, name),\\n      initialTouched: !!getIn(formik.initialTouched, name),\\n      initialError: getIn(formik.initialErrors, name)\\n    };\\n    var bag = {\\n      field: field,\\n      meta: meta,\\n      form: restOfFormik\\n    };\\n\\n    if (render) {\\n      return render(bag);\\n    }\\n\\n    if (formik_esm_isFunction(children)) {\\n      return children(bag);\\n    }\\n\\n    if (component) {\\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\\n      if (typeof component === 'string') {\\n        var innerRef = props.innerRef,\\n            rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n        return (0,external_react_.createElement)(component, _extends({\\n          ref: innerRef\\n        }, field, rest), children);\\n      } // We don't pass `meta` for backwards compat\\n\\n\\n      return (0,external_react_.createElement)(component, _extends({\\n        field: field,\\n        form: formik\\n      }, props), children);\\n    } // default to input here so we can check for both `as` and `children` above\\n\\n\\n    var asElement = is || 'input';\\n\\n    if (typeof asElement === 'string') {\\n      var _innerRef = props.innerRef,\\n          _rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n      return (0,external_react_.createElement)(asElement, _extends({\\n        ref: _innerRef\\n      }, field, _rest), children);\\n    }\\n\\n    return (0,external_react_.createElement)(asElement, _extends({}, field, props), children);\\n  };\\n\\n  return FastFieldInner;\\n}(external_react_.Component);\\n\\nvar FastField = /*#__PURE__*/(/* unused pure expression or super */ null && (connect(FastFieldInner)));\\n\\n\\n//# sourceMappingURL=formik.esm.js.map\\n\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n// EXTERNAL MODULE: ./Constants/financial-details.ts\\nvar financial_details = __webpack_require__(\\\"./Constants/financial-details.ts\\\");\\n// EXTERNAL MODULE: ./Configs/financial-details-config.ts\\nvar financial_details_config = __webpack_require__(\\\"./Configs/financial-details-config.ts\\\");\\n;// CONCATENATED MODULE: ./Components/financial-details/financial-details-partials.tsx\\nfunction financial_details_partials_extends() { financial_details_partials_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return financial_details_partials_extends.apply(this, arguments); }\\n\\n\\n\\n\\n\\n\\n/**\\n * Dropdown field for financial details form.\\n * @name FinancialDetailsDropdownField\\n * @param {Array<object>} dropdown_list - list of dropdown items\\n * @param {string} field_key - field reference of the field\\n * @param {string} placeholder - placeholder of the field\\n * @param {string} label - label of the field\\n *  @param {string} employment_status - selected employment_status,\\n * @returns {JSX.Element}\\n */\\nvar FinancialDetailsDropdownField = function FinancialDetailsDropdownField(_ref) {\\n  var dropdown_list = _ref.dropdown_list,\\n    field_key = _ref.field_key,\\n    _ref$placeholder = _ref.placeholder,\\n    placeholder = _ref$placeholder === void 0 ? (0,translations_.localize)('Please select') : _ref$placeholder,\\n    label = _ref.label;\\n  var _useFormikContext = useFormikContext(),\\n    values = _useFormikContext.values,\\n    handleChange = _useFormikContext.handleChange,\\n    handleBlur = _useFormikContext.handleBlur,\\n    touched = _useFormikContext.touched,\\n    errors = _useFormikContext.errors,\\n    setFieldValue = _useFormikContext.setFieldValue;\\n  return /*#__PURE__*/external_react_default().createElement(Field, {\\n    name: field_key\\n  }, function (_ref2) {\\n    var field = _ref2.field;\\n    return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.DesktopWrapper, null, /*#__PURE__*/external_react_default().createElement(components_.Dropdown, financial_details_partials_extends({\\n      placeholder: label,\\n      is_align_text_left: true,\\n      name: field.name,\\n      list: dropdown_list,\\n      value: values === null || values === void 0 ? void 0 : values[field_key],\\n      onChange: handleChange,\\n      handleBlur: handleBlur,\\n      error: (touched === null || touched === void 0 ? void 0 : touched[field_key]) && (errors === null || errors === void 0 ? void 0 : errors[field_key]),\\n      list_portal_id: \\\"modal_root\\\",\\n      required: true\\n    }, field))), /*#__PURE__*/external_react_default().createElement(components_.MobileWrapper, null, /*#__PURE__*/external_react_default().createElement(components_.SelectNative, financial_details_partials_extends({\\n      placeholder: placeholder,\\n      name: field.name,\\n      label: label,\\n      list_items: dropdown_list,\\n      value: values === null || values === void 0 ? void 0 : values[field_key],\\n      error: (touched === null || touched === void 0 ? void 0 : touched[field_key]) && (errors === null || errors === void 0 ? void 0 : errors[field_key]),\\n      onChange: function onChange(e) {\\n        handleChange(e);\\n        setFieldValue('field_key', e.target.value, true);\\n      },\\n      required: true\\n    }, field))));\\n  });\\n};\\nvar FinancialDetailsOccupationDropdownField = function FinancialDetailsOccupationDropdownField(_ref3) {\\n  var dropdown_list = _ref3.dropdown_list,\\n    field_key = _ref3.field_key,\\n    _ref3$placeholder = _ref3.placeholder,\\n    placeholder = _ref3$placeholder === void 0 ? (0,translations_.localize)('Please select') : _ref3$placeholder,\\n    label = _ref3.label,\\n    employment_status = _ref3.employment_status;\\n  var _useFormikContext2 = useFormikContext(),\\n    values = _useFormikContext2.values,\\n    handleChange = _useFormikContext2.handleChange,\\n    handleBlur = _useFormikContext2.handleBlur,\\n    touched = _useFormikContext2.touched,\\n    errors = _useFormikContext2.errors,\\n    setFieldValue = _useFormikContext2.setFieldValue;\\n  var getFormattedOccupationValues = function getFormattedOccupationValues() {\\n    return employment_status === financial_details/* EMPLOYMENT_VALUES.EMPLOYED */.p.EMPLOYED && (values === null || values === void 0 ? void 0 : values.occupation) === financial_details/* EMPLOYMENT_VALUES.UNEMPLOYED */.p.UNEMPLOYED ? '' : values === null || values === void 0 ? void 0 : values.occupation;\\n  };\\n  return /*#__PURE__*/external_react_default().createElement(Field, {\\n    name: field_key\\n  }, function (_ref4) {\\n    var field = _ref4.field;\\n    return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.DesktopWrapper, null, /*#__PURE__*/external_react_default().createElement(components_.Dropdown, financial_details_partials_extends({}, field, {\\n      placeholder: label,\\n      is_align_text_left: true,\\n      name: field.name,\\n      list: dropdown_list,\\n      value: getFormattedOccupationValues(),\\n      onChange: function onChange(e) {\\n        setFieldValue(field_key, getFormattedOccupationValues(), true);\\n        handleChange(e);\\n      },\\n      handleBlur: handleBlur,\\n      error: (touched === null || touched === void 0 ? void 0 : touched[field_key]) && (errors === null || errors === void 0 ? void 0 : errors[field_key]),\\n      list_portal_id: \\\"modal_root\\\",\\n      required: true\\n    }))), /*#__PURE__*/external_react_default().createElement(components_.MobileWrapper, null, /*#__PURE__*/external_react_default().createElement(components_.SelectNative, financial_details_partials_extends({}, field, {\\n      placeholder: placeholder,\\n      name: field.name,\\n      label: label,\\n      list_items: dropdown_list,\\n      value: getFormattedOccupationValues(),\\n      error: (touched === null || touched === void 0 ? void 0 : touched[field_key]) && (errors === null || errors === void 0 ? void 0 : errors[field_key]),\\n      onChange: function onChange(e) {\\n        setFieldValue(field_key, getFormattedOccupationValues(), true);\\n        handleChange(e);\\n      },\\n      required: true\\n    }))));\\n  });\\n};\\n/**\\n * Wrapper for financial details form fields.\\n * @name FinancialInformation\\n * @returns {JSX.Element}\\n */\\nvar FinancialInformation = function FinancialInformation(_ref5) {\\n  var employment_status = _ref5.employment_status;\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(FinancialDetailsDropdownField, {\\n    dropdown_list: (0,financial_details_config/* getIncomeSourceList */.WI)(),\\n    field_key: \\\"income_source\\\",\\n    label: (0,translations_.localize)('Source of income')\\n  }), /*#__PURE__*/external_react_default().createElement(FinancialDetailsDropdownField, {\\n    dropdown_list: (0,financial_details_config/* getEmploymentIndustryList */.fG)(),\\n    field_key: \\\"employment_industry\\\",\\n    label: (0,translations_.localize)('Industry of employment')\\n  }), /*#__PURE__*/external_react_default().createElement(FinancialDetailsOccupationDropdownField, {\\n    dropdown_list: (0,financial_details_config/* getFormattedOccupationList */.cU)(employment_status),\\n    field_key: \\\"occupation\\\",\\n    label: (0,translations_.localize)('Occupation'),\\n    employment_status: employment_status\\n  }), /*#__PURE__*/external_react_default().createElement(FinancialDetailsDropdownField, {\\n    dropdown_list: (0,financial_details_config/* getSourceOfWealthList */.DX)(),\\n    field_key: \\\"source_of_wealth\\\",\\n    label: (0,translations_.localize)('Source of wealth')\\n  }), /*#__PURE__*/external_react_default().createElement(FinancialDetailsDropdownField, {\\n    dropdown_list: (0,financial_details_config/* getEducationLevelList */.SK)(),\\n    field_key: \\\"education_level\\\",\\n    label: (0,translations_.localize)('Level of education')\\n  }), /*#__PURE__*/external_react_default().createElement(FinancialDetailsDropdownField, {\\n    dropdown_list: (0,financial_details_config/* getNetIncomeList */.i5)(),\\n    field_key: \\\"net_income\\\",\\n    label: (0,translations_.localize)('Net annual income')\\n  }), /*#__PURE__*/external_react_default().createElement(FinancialDetailsDropdownField, {\\n    dropdown_list: (0,financial_details_config/* getEstimatedWorthList */.I2)(),\\n    field_key: \\\"estimated_worth\\\",\\n    label: (0,translations_.localize)('Estimated net worth')\\n  }), /*#__PURE__*/external_react_default().createElement(FinancialDetailsDropdownField, {\\n    dropdown_list: (0,financial_details_config/* getAccountTurnoverList */.A6)(),\\n    field_key: \\\"account_turnover\\\",\\n    label: (0,translations_.localize)('Anticipated annual turnover')\\n  }));\\n};\\n/* harmony default export */ const financial_details_partials = (FinancialInformation);\\n;// CONCATENATED MODULE: ./Components/real-account-signup/helpers/utils.ts\\n/**\\n * Takes validation result of a form, sets warnings on component's state and pass errors down to the form\\n *\\n * @param {object} values - object containing form field values and validations\\n * @return {object} object containing errors and warnings\\n */\\nfunction splitValidationResultTypes(values) {\\n  var warnings = {};\\n  var errors = {};\\n  Object.keys(values).forEach(function (field) {\\n    var item = values[field];\\n    if (Array.isArray(item)) {\\n      if (item[0] === 'warn') {\\n        warnings[field] = item[1];\\n      } else if (item[0] === 'error') {\\n        errors[field] = item[1];\\n      }\\n    }\\n  });\\n  return {\\n    warnings: warnings,\\n    errors: errors\\n  };\\n}\\n\\n;// CONCATENATED MODULE: ./Components/forms/scroll-to-field-with-error.tsx\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\\nfunction _nonIterableSpread() { throw new TypeError(\\\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\nfunction _iterableToArray(iter) { if (typeof Symbol !== \\\"undefined\\\" && iter[Symbol.iterator] != null || iter[\\\"@@iterator\\\"] != null) return Array.from(iter); }\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \\\"undefined\\\" != typeof Symbol && arr[Symbol.iterator] || arr[\\\"@@iterator\\\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\\\"return\\\"] && (_r = _i[\\\"return\\\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\nvar ScrollToFieldWithError = function ScrollToFieldWithError(_ref) {\\n  var fields_to_scroll_top = _ref.fields_to_scroll_top,\\n    fields_to_scroll_bottom = _ref.fields_to_scroll_bottom,\\n    _ref$should_recollect = _ref.should_recollect_inputs_names,\\n    should_recollect_inputs_names = _ref$should_recollect === void 0 ? false : _ref$should_recollect;\\n  var _React$useState = external_react_default().useState([]),\\n    _React$useState2 = _slicedToArray(_React$useState, 2),\\n    all_page_inputs_names = _React$useState2[0],\\n    setAllPageInputsNames = _React$useState2[1];\\n  var _useFormikContext = useFormikContext(),\\n    errors = _useFormikContext.errors,\\n    isSubmitting = _useFormikContext.isSubmitting;\\n  var scrollToElement = function scrollToElement(element_name) {\\n    var _ref2, _el$parentElement;\\n    var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'center';\\n    if (!element_name) return;\\n    var el = document.querySelector(\\\"[name=\\\\\\\"\\\".concat(element_name, \\\"\\\\\\\"]\\\"));\\n    (_ref2 = (_el$parentElement = el === null || el === void 0 ? void 0 : el.parentElement) !== null && _el$parentElement !== void 0 ? _el$parentElement : el) === null || _ref2 === void 0 ? void 0 : _ref2.scrollIntoView({\\n      behavior: 'smooth',\\n      block: block\\n    });\\n    if ((el === null || el === void 0 ? void 0 : el.type) !== 'radio') el === null || el === void 0 ? void 0 : el.focus();\\n  };\\n  external_react_default().useEffect(function () {\\n    var inputs = _toConsumableArray(document.querySelectorAll('input, select'));\\n    setAllPageInputsNames(inputs.map(function (input) {\\n      return input.name;\\n    }));\\n  }, [should_recollect_inputs_names]);\\n  external_react_default().useEffect(function () {\\n    var current_error_field_name = all_page_inputs_names.find(function (input_name) {\\n      return Object.hasOwn(errors, input_name);\\n    }) || '';\\n    if (fields_to_scroll_top !== null && fields_to_scroll_top !== void 0 && fields_to_scroll_top.includes(current_error_field_name)) {\\n      scrollToElement(current_error_field_name, 'start');\\n    } else if (fields_to_scroll_bottom !== null && fields_to_scroll_bottom !== void 0 && fields_to_scroll_bottom.includes(current_error_field_name)) {\\n      scrollToElement(current_error_field_name, 'end');\\n    } else {\\n      scrollToElement(current_error_field_name);\\n    }\\n    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, [isSubmitting]);\\n  return null;\\n};\\n/* harmony default export */ const scroll_to_field_with_error = (ScrollToFieldWithError);\\n;// CONCATENATED MODULE: ./Components/financial-details/financial-details.tsx\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; return _typeof = \\\"function\\\" == typeof Symbol && \\\"symbol\\\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \\\"function\\\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }, _typeof(obj); }\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { financial_details_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\nfunction financial_details_defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \\\"string\\\"); return _typeof(key) === \\\"symbol\\\" ? key : String(key); }\\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \\\"object\\\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \\\"default\\\"); if (_typeof(res) !== \\\"object\\\") return res; throw new TypeError(\\\"@@toPrimitive must return a primitive value.\\\"); } return (hint === \\\"string\\\" ? String : Number)(input); }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * A wrapper for the financial details form.\\n * @name FinancialDetails\\n * @param {TFinancialDetails} props  - props of the component\\n * @returns {React.ReactNode} React component that renders FinancialDetails form.\\n */\\nvar FinancialDetails = function FinancialDetails(props) {\\n  var handleCancel = function handleCancel(values) {\\n    var current_step = props.getCurrentStep() - 1;\\n    props.onSave(current_step, values);\\n    props.onCancel(current_step, props.goToPreviousStep);\\n  };\\n  var handleValidate = function handleValidate(values) {\\n    var _splitValidationResul = splitValidationResultTypes(props.validate(values)),\\n      errors = _splitValidationResul.errors;\\n    return errors;\\n  };\\n  var fields_to_scroll_top = (0,shared_.isMobile)() ? ['income_source', 'account_turnover', 'estimated_worth'] : ['income_source'];\\n  var fields_to_scroll_bottom = (0,shared_.isMobile)() ? [] : ['account_turnover', 'estimated_worth'];\\n  return /*#__PURE__*/external_react_default().createElement(Formik, {\\n    initialValues: _objectSpread({}, props.value),\\n    validate: handleValidate,\\n    onSubmit: function onSubmit(values, actions) {\\n      props.onSubmit(props.getCurrentStep() - 1, values, actions.setSubmitting, props.goToNextStep);\\n    },\\n    validateOnMount: true\\n  }, function (_ref) {\\n    var handleSubmit = _ref.handleSubmit,\\n      isSubmitting = _ref.isSubmitting,\\n      values = _ref.values;\\n    return /*#__PURE__*/external_react_default().createElement(components_.AutoHeightWrapper, {\\n      default_height: 200\\n    }, function (_ref2) {\\n      var setRef = _ref2.setRef,\\n        height = _ref2.height;\\n      return /*#__PURE__*/external_react_default().createElement(\\\"form\\\", {\\n        ref: setRef,\\n        onSubmit: handleSubmit,\\n        noValidate: true\\n      }, /*#__PURE__*/external_react_default().createElement(scroll_to_field_with_error, {\\n        fields_to_scroll_top: fields_to_scroll_top,\\n        fields_to_scroll_bottom: fields_to_scroll_bottom\\n      }), /*#__PURE__*/external_react_default().createElement(components_.Div100vhContainer, {\\n        className: classnames_default()('details-form', 'financial-assessment'),\\n        height_offset: \\\"110px\\\",\\n        is_disabled: (0,shared_.isDesktop)()\\n      }, /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n        as: \\\"p\\\",\\n        color: \\\"prominent\\\",\\n        size: \\\"xxs\\\",\\n        className: \\\"trading-assessment__side-note\\\"\\n      }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n        i18n_default_text: \\\"We collect information about your employment as part of our due diligence obligations, as required by anti-money laundering legislation.\\\"\\n      })), /*#__PURE__*/external_react_default().createElement(components_.ThemedScrollbars, {\\n        autohide: window.innerHeight >= 890,\\n        height: Number(height) - 77\\n      }, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n        className: classnames_default()('details-form__elements', 'financial-assessment__form')\\n      }, /*#__PURE__*/external_react_default().createElement(financial_details_partials, {\\n        employment_status: props.employment_status\\n      })))), /*#__PURE__*/external_react_default().createElement(components_.Modal.Footer, {\\n        has_separator: true,\\n        is_bypassed: (0,shared_.isMobile)()\\n      }, /*#__PURE__*/external_react_default().createElement(components_.FormSubmitButton, {\\n        is_disabled: isSubmitting || !!(props.employment_status === financial_details/* EMPLOYMENT_VALUES.EMPLOYED */.p.EMPLOYED && (values === null || values === void 0 ? void 0 : values.occupation) === financial_details/* EMPLOYMENT_VALUES.UNEMPLOYED */.p.UNEMPLOYED),\\n        is_absolute: (0,shared_.isMobile)(),\\n        label: (0,translations_.localize)('Next'),\\n        has_cancel: true,\\n        cancel_label: (0,translations_.localize)('Previous'),\\n        onCancel: function onCancel() {\\n          return handleCancel(values);\\n        }\\n      })));\\n    });\\n  });\\n};\\n/* harmony default export */ const financial_details_financial_details = (FinancialDetails);\\n;// CONCATENATED MODULE: ./Components/financial-details/index.ts\\n\\n/* harmony default export */ const Components_financial_details = (financial_details_financial_details);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Components/financial-details/index.ts\\n\");\n\n/***/ }),\n\n/***/ \"./Configs/financial-details-config.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"A6\\\": () => (/* binding */ getAccountTurnoverList),\\n/* harmony export */   \\\"DX\\\": () => (/* binding */ getSourceOfWealthList),\\n/* harmony export */   \\\"I2\\\": () => (/* binding */ getEstimatedWorthList),\\n/* harmony export */   \\\"SK\\\": () => (/* binding */ getEducationLevelList),\\n/* harmony export */   \\\"WI\\\": () => (/* binding */ getIncomeSourceList),\\n/* harmony export */   \\\"cU\\\": () => (/* binding */ getFormattedOccupationList),\\n/* harmony export */   \\\"fG\\\": () => (/* binding */ getEmploymentIndustryList),\\n/* harmony export */   \\\"i5\\\": () => (/* binding */ getNetIncomeList)\\n/* harmony export */ });\\n/* unused harmony export getOccupationList */\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"@deriv/translations\\\");\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_translations__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var Constants_financial_details__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\\\"./Constants/financial-details.ts\\\");\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\\nfunction _nonIterableSpread() { throw new TypeError(\\\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\nfunction _iterableToArray(iter) { if (typeof Symbol !== \\\"undefined\\\" && iter[Symbol.iterator] != null || iter[\\\"@@iterator\\\"] != null) return Array.from(iter); }\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\n\\n\\nvar financial_details_config = function financial_details_config(_ref) {\\n  var _financial_assessment, _financial_assessment2, _financial_assessment3, _financial_assessment4, _financial_assessment5, _financial_assessment6, _financial_assessment7, _financial_assessment8;\\n  var financial_assessment = _ref.financial_assessment;\\n  return {\\n    account_turnover: {\\n      supported_in: ['maltainvest'],\\n      default_value: (_financial_assessment = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.account_turnover) !== null && _financial_assessment !== void 0 ? _financial_assessment : '',\\n      rules: [['req', localize('Please select an option')]]\\n    },\\n    education_level: {\\n      supported_in: ['maltainvest'],\\n      default_value: (_financial_assessment2 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.education_level) !== null && _financial_assessment2 !== void 0 ? _financial_assessment2 : '',\\n      rules: [['req', localize('Please select an option')]]\\n    },\\n    employment_industry: {\\n      default_value: (_financial_assessment3 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.employment_industry) !== null && _financial_assessment3 !== void 0 ? _financial_assessment3 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', localize('Please select an option')]]\\n    },\\n    estimated_worth: {\\n      default_value: (_financial_assessment4 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.estimated_worth) !== null && _financial_assessment4 !== void 0 ? _financial_assessment4 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', localize('Please select an option')]]\\n    },\\n    income_source: {\\n      default_value: (_financial_assessment5 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.income_source) !== null && _financial_assessment5 !== void 0 ? _financial_assessment5 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', localize('Please select an option')]]\\n    },\\n    net_income: {\\n      default_value: (_financial_assessment6 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.net_income) !== null && _financial_assessment6 !== void 0 ? _financial_assessment6 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', localize('Please select an option')]]\\n    },\\n    occupation: {\\n      default_value: (_financial_assessment7 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.occupation) !== null && _financial_assessment7 !== void 0 ? _financial_assessment7 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', localize('Please select an option')]]\\n    },\\n    source_of_wealth: {\\n      default_value: (_financial_assessment8 = financial_assessment === null || financial_assessment === void 0 ? void 0 : financial_assessment.source_of_wealth) !== null && _financial_assessment8 !== void 0 ? _financial_assessment8 : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', localize('Please select an option')]]\\n    }\\n  };\\n};\\nvar financialDetailsConfig = function financialDetailsConfig(_ref2, FinancialDetails) {\\n  var real_account_signup_target = _ref2.real_account_signup_target,\\n    financial_assessment = _ref2.financial_assessment;\\n  var config = financial_details_config({\\n    financial_assessment: financial_assessment\\n  });\\n  return {\\n    header: {\\n      active_title: localize('Complete your financial assessment'),\\n      title: localize('Financial assessment')\\n    },\\n    body: FinancialDetails,\\n    form_value: getDefaultFields(real_account_signup_target, config),\\n    props: {\\n      validate: generateValidationFunction(real_account_signup_target, config)\\n    },\\n    passthrough: ['residence_list', 'is_fully_authenticated']\\n  };\\n};\\nvar getAccountTurnoverList = function getAccountTurnoverList() {\\n  return [{\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Less than $25,000'),\\n    value: 'Less than $25,000'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('$25,000 - $50,000'),\\n    value: '$25,000 - $50,000'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('$50,001 - $100,000'),\\n    value: '$50,001 - $100,000'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('$100,001 - $500,000'),\\n    value: '$100,001 - $500,000'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Over $500,000'),\\n    value: 'Over $500,000'\\n  }];\\n};\\nvar getEmploymentIndustryList = function getEmploymentIndustryList() {\\n  return [{\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Construction'),\\n    value: 'Construction'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Education'),\\n    value: 'Education'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Finance'),\\n    value: 'Finance'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Health'),\\n    value: 'Health'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Tourism'),\\n    value: 'Tourism'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Information & Communications Technology'),\\n    value: 'Information & Communications Technology'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Science & Engineering'),\\n    value: 'Science & Engineering'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Legal'),\\n    value: 'Legal'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Social & Cultural'),\\n    value: 'Social & Cultural'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Agriculture'),\\n    value: 'Agriculture'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Real Estate'),\\n    value: 'Real Estate'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Food Services'),\\n    value: 'Food Services'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Manufacturing'),\\n    value: 'Manufacturing'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Unemployed'),\\n    value: 'Unemployed'\\n  }];\\n};\\nvar getOccupationList = function getOccupationList() {\\n  return [{\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Chief Executives, Senior Officials and Legislators'),\\n    value: 'Chief Executives, Senior Officials and Legislators'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Managers'),\\n    value: 'Managers'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Professionals'),\\n    value: 'Professionals'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Clerks'),\\n    value: 'Clerks'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Personal Care, Sales and Service Workers'),\\n    value: 'Personal Care, Sales and Service Workers'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Agricultural, Forestry and Fishery Workers'),\\n    value: 'Agricultural, Forestry and Fishery Workers'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Craft, Metal, Electrical and Electronics Workers'),\\n    value: 'Craft, Metal, Electrical and Electronics Workers'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Plant and Machine Operators and Assemblers'),\\n    value: 'Plant and Machine Operators and Assemblers'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Cleaners and Helpers'),\\n    value: 'Cleaners and Helpers'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Mining, Construction, Manufacturing and Transport Workers'),\\n    value: 'Mining, Construction, Manufacturing and Transport Workers'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Armed Forces'),\\n    value: 'Armed Forces'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Government Officers'),\\n    value: 'Government Officers'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Students'),\\n    value: 'Students'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Unemployed'),\\n    value: 'Unemployed'\\n  }];\\n};\\nvar getSourceOfWealthList = function getSourceOfWealthList() {\\n  return [{\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Accumulation of Income/Savings'),\\n    value: 'Accumulation of Income/Savings'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Cash Business'),\\n    value: 'Cash Business'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Company Ownership'),\\n    value: 'Company Ownership'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Divorce Settlement'),\\n    value: 'Divorce Settlement'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Inheritance'),\\n    value: 'Inheritance'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Investment Income'),\\n    value: 'Investment Income'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Sale of Property'),\\n    value: 'Sale of Property'\\n  }];\\n};\\nvar getEducationLevelList = function getEducationLevelList() {\\n  return [{\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Primary'),\\n    value: 'Primary'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Secondary'),\\n    value: 'Secondary'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Tertiary'),\\n    value: 'Tertiary'\\n  }];\\n};\\nvar getNetIncomeList = function getNetIncomeList() {\\n  return _toConsumableArray(getAccountTurnoverList());\\n};\\nvar getEstimatedWorthList = function getEstimatedWorthList() {\\n  return [{\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Less than $100,000'),\\n    value: 'Less than $100,000'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('$100,000 - $250,000'),\\n    value: '$100,000 - $250,000'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('$250,001 - $500,000'),\\n    value: '$250,001 - $500,000'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('$500,001 - $1,000,000'),\\n    value: '$500,001 - $1,000,000'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Over $1,000,000'),\\n    value: 'Over $1,000,000'\\n  }];\\n};\\nvar getIncomeSourceList = function getIncomeSourceList() {\\n  return [{\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Salaried Employee'),\\n    value: 'Salaried Employee'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Self-Employed'),\\n    value: 'Self-Employed'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Investments & Dividends'),\\n    value: 'Investments & Dividends'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Pension'),\\n    value: 'Pension'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('State Benefits'),\\n    value: 'State Benefits'\\n  }, {\\n    text: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Savings & Inheritance'),\\n    value: 'Savings & Inheritance'\\n  }];\\n};\\nvar getFormattedOccupationList = function getFormattedOccupationList(employment_status) {\\n  return employment_status && employment_status === Constants_financial_details__WEBPACK_IMPORTED_MODULE_2__/* .EMPLOYMENT_VALUES.EMPLOYED */ .p.EMPLOYED ? getOccupationList().filter(function (item) {\\n    return item.value !== Constants_financial_details__WEBPACK_IMPORTED_MODULE_2__/* .EMPLOYMENT_VALUES.UNEMPLOYED */ .p.UNEMPLOYED;\\n  }) : getOccupationList();\\n};\\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (financialDetailsConfig)));//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Configs/financial-details-config.ts\\n\");\n\n/***/ }),\n\n/***/ \"./Constants/financial-details.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"p\\\": () => (/* binding */ EMPLOYMENT_VALUES)\\n/* harmony export */ });\\nvar EMPLOYMENT_VALUES = {\\n  EMPLOYED: 'Employed',\\n  UNEMPLOYED: 'Unemployed'\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db25zdGFudHMvZmluYW5jaWFsLWRldGFpbHMudHMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uL0NvbnN0YW50cy9maW5hbmNpYWwtZGV0YWlscy50cz9hMTA4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBFTVBMT1lNRU5UX1ZBTFVFUyA9IHtcbiAgICBFTVBMT1lFRDogJ0VtcGxveWVkJyxcbiAgICBVTkVNUExPWUVEOiAnVW5lbXBsb3llZCcsXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Constants/financial-details.ts\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/classnames/index.js\":\n/***/ ((module, exports) => {\n\neval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n\\tCopyright (c) 2018 Jed Watson.\\n\\tLicensed under the MIT License (MIT), see\\n\\thttp://jedwatson.github.io/classnames\\n*/\\n/* global define */\\n\\n(function () {\\n\\t'use strict';\\n\\n\\tvar hasOwn = {}.hasOwnProperty;\\n\\tvar nativeCodeString = '[native code]';\\n\\n\\tfunction classNames() {\\n\\t\\tvar classes = [];\\n\\n\\t\\tfor (var i = 0; i < arguments.length; i++) {\\n\\t\\t\\tvar arg = arguments[i];\\n\\t\\t\\tif (!arg) continue;\\n\\n\\t\\t\\tvar argType = typeof arg;\\n\\n\\t\\t\\tif (argType === 'string' || argType === 'number') {\\n\\t\\t\\t\\tclasses.push(arg);\\n\\t\\t\\t} else if (Array.isArray(arg)) {\\n\\t\\t\\t\\tif (arg.length) {\\n\\t\\t\\t\\t\\tvar inner = classNames.apply(null, arg);\\n\\t\\t\\t\\t\\tif (inner) {\\n\\t\\t\\t\\t\\t\\tclasses.push(inner);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (argType === 'object') {\\n\\t\\t\\t\\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\\n\\t\\t\\t\\t\\tclasses.push(arg.toString());\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor (var key in arg) {\\n\\t\\t\\t\\t\\tif (hasOwn.call(arg, key) && arg[key]) {\\n\\t\\t\\t\\t\\t\\tclasses.push(key);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn classes.join(' ');\\n\\t}\\n\\n\\tif ( true && module.exports) {\\n\\t\\tclassNames.default = classNames;\\n\\t\\tmodule.exports = classNames;\\n\\t} else if (true) {\\n\\t\\t// register as 'classnames', consistent with npm package name\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn classNames;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else {}\\n}());\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4uLy4uLy4uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzNkY2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/classnames/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n\\nvar reactIs = __webpack_require__(\\\"../../../node_modules/react-is/index.js\\\");\\n\\n/**\\n * Copyright 2015, Yahoo! Inc.\\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\\n */\\nvar REACT_STATICS = {\\n  childContextTypes: true,\\n  contextType: true,\\n  contextTypes: true,\\n  defaultProps: true,\\n  displayName: true,\\n  getDefaultProps: true,\\n  getDerivedStateFromError: true,\\n  getDerivedStateFromProps: true,\\n  mixins: true,\\n  propTypes: true,\\n  type: true\\n};\\nvar KNOWN_STATICS = {\\n  name: true,\\n  length: true,\\n  prototype: true,\\n  caller: true,\\n  callee: true,\\n  arguments: true,\\n  arity: true\\n};\\nvar FORWARD_REF_STATICS = {\\n  '$$typeof': true,\\n  render: true,\\n  defaultProps: true,\\n  displayName: true,\\n  propTypes: true\\n};\\nvar MEMO_STATICS = {\\n  '$$typeof': true,\\n  compare: true,\\n  defaultProps: true,\\n  displayName: true,\\n  propTypes: true,\\n  type: true\\n};\\nvar TYPE_STATICS = {};\\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\\n\\nfunction getStatics(component) {\\n  // React v16.11 and below\\n  if (reactIs.isMemo(component)) {\\n    return MEMO_STATICS;\\n  } // React v16.12 and above\\n\\n\\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\\n}\\n\\nvar defineProperty = Object.defineProperty;\\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\\nvar getPrototypeOf = Object.getPrototypeOf;\\nvar objectPrototype = Object.prototype;\\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\\n  if (typeof sourceComponent !== 'string') {\\n    // don't hoist over string (html) components\\n    if (objectPrototype) {\\n      var inheritedComponent = getPrototypeOf(sourceComponent);\\n\\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\\n      }\\n    }\\n\\n    var keys = getOwnPropertyNames(sourceComponent);\\n\\n    if (getOwnPropertySymbols) {\\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\\n    }\\n\\n    var targetStatics = getStatics(targetComponent);\\n    var sourceStatics = getStatics(sourceComponent);\\n\\n    for (var i = 0; i < keys.length; ++i) {\\n      var key = keys[i];\\n\\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\\n\\n        try {\\n          // Avoid failures from read-only properties\\n          defineProperty(targetComponent, key, descriptor);\\n        } catch (e) {}\\n      }\\n    }\\n  }\\n\\n  return targetComponent;\\n}\\n\\nmodule.exports = hoistNonReactStatics;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzPzkwY2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react-fast-compare/index.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"\\n\\nvar isArray = Array.isArray;\\nvar keyList = Object.keys;\\nvar hasProp = Object.prototype.hasOwnProperty;\\nvar hasElementType = typeof Element !== 'undefined';\\n\\nfunction equal(a, b) {\\n  // fast-deep-equal index.js 2.0.1\\n  if (a === b) return true;\\n\\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\\n    var arrA = isArray(a)\\n      , arrB = isArray(b)\\n      , i\\n      , length\\n      , key;\\n\\n    if (arrA && arrB) {\\n      length = a.length;\\n      if (length != b.length) return false;\\n      for (i = length; i-- !== 0;)\\n        if (!equal(a[i], b[i])) return false;\\n      return true;\\n    }\\n\\n    if (arrA != arrB) return false;\\n\\n    var dateA = a instanceof Date\\n      , dateB = b instanceof Date;\\n    if (dateA != dateB) return false;\\n    if (dateA && dateB) return a.getTime() == b.getTime();\\n\\n    var regexpA = a instanceof RegExp\\n      , regexpB = b instanceof RegExp;\\n    if (regexpA != regexpB) return false;\\n    if (regexpA && regexpB) return a.toString() == b.toString();\\n\\n    var keys = keyList(a);\\n    length = keys.length;\\n\\n    if (length !== keyList(b).length)\\n      return false;\\n\\n    for (i = length; i-- !== 0;)\\n      if (!hasProp.call(b, keys[i])) return false;\\n    // end fast-deep-equal\\n\\n    // start react-fast-compare\\n    // custom handling for DOM elements\\n    if (hasElementType && a instanceof Element && b instanceof Element)\\n      return a === b;\\n\\n    // custom handling for React\\n    for (i = length; i-- !== 0;) {\\n      key = keys[i];\\n      if (key === '_owner' && a.$$typeof) {\\n        // React-specific: avoid traversing React elements' _owner.\\n        //  _owner contains circular references\\n        // and is not needed when comparing the actual elements (and not their owners)\\n        // .$$typeof and ._store on just reasonable markers of a react element\\n        continue;\\n      } else {\\n        // all other properties should be traversed as usual\\n        if (!equal(a[key], b[key])) return false;\\n      }\\n    }\\n    // end react-fast-compare\\n\\n    // fast-deep-equal index.js 2.0.1\\n    return true;\\n  }\\n\\n  return a !== a && b !== b;\\n}\\n// end fast-deep-equal\\n\\nmodule.exports = function exportedEqual(a, b) {\\n  try {\\n    return equal(a, b);\\n  } catch (error) {\\n    if ((error.message && error.message.match(/stack|recursion/i)) || (error.number === -2146828260)) {\\n      // warn on circular references, don't crash\\n      // browsers give this different errors name and messages:\\n      // chrome/safari: \\\"RangeError\\\", \\\"Maximum call stack size exceeded\\\"\\n      // firefox: \\\"InternalError\\\", too much recursion\\\"\\n      // edge: \\\"Error\\\", \\\"Out of stack space\\\"\\n      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);\\n      return false;\\n    }\\n    // some other error. we should definitely know about these\\n    throw error;\\n  }\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWZhc3QtY29tcGFyZS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1mYXN0LWNvbXBhcmUvaW5kZXguanM/NjZmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBrZXlMaXN0ID0gT2JqZWN0LmtleXM7XG52YXIgaGFzUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaGFzRWxlbWVudFR5cGUgPSB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbmZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgLy8gZmFzdC1kZWVwLWVxdWFsIGluZGV4LmpzIDIuMC4xXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFyckEgPSBpc0FycmF5KGEpXG4gICAgICAsIGFyckIgPSBpc0FycmF5KGIpXG4gICAgICAsIGlcbiAgICAgICwgbGVuZ3RoXG4gICAgICAsIGtleTtcblxuICAgIGlmIChhcnJBICYmIGFyckIpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYXJyQSAhPSBhcnJCKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgZGF0ZUEgPSBhIGluc3RhbmNlb2YgRGF0ZVxuICAgICAgLCBkYXRlQiA9IGIgaW5zdGFuY2VvZiBEYXRlO1xuICAgIGlmIChkYXRlQSAhPSBkYXRlQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChkYXRlQSAmJiBkYXRlQikgcmV0dXJuIGEuZ2V0VGltZSgpID09IGIuZ2V0VGltZSgpO1xuXG4gICAgdmFyIHJlZ2V4cEEgPSBhIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgICAsIHJlZ2V4cEIgPSBiIGluc3RhbmNlb2YgUmVnRXhwO1xuICAgIGlmIChyZWdleHBBICE9IHJlZ2V4cEIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocmVnZXhwQSAmJiByZWdleHBCKSByZXR1cm4gYS50b1N0cmluZygpID09IGIudG9TdHJpbmcoKTtcblxuICAgIHZhciBrZXlzID0ga2V5TGlzdChhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGggIT09IGtleUxpc3QoYikubGVuZ3RoKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgaWYgKCFoYXNQcm9wLmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICAvLyBlbmQgZmFzdC1kZWVwLWVxdWFsXG5cbiAgICAvLyBzdGFydCByZWFjdC1mYXN0LWNvbXBhcmVcbiAgICAvLyBjdXN0b20gaGFuZGxpbmcgZm9yIERPTSBlbGVtZW50c1xuICAgIGlmIChoYXNFbGVtZW50VHlwZSAmJiBhIGluc3RhbmNlb2YgRWxlbWVudCAmJiBiIGluc3RhbmNlb2YgRWxlbWVudClcbiAgICAgIHJldHVybiBhID09PSBiO1xuXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBSZWFjdFxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChrZXkgPT09ICdfb3duZXInICYmIGEuJCR0eXBlb2YpIHtcbiAgICAgICAgLy8gUmVhY3Qtc3BlY2lmaWM6IGF2b2lkIHRyYXZlcnNpbmcgUmVhY3QgZWxlbWVudHMnIF9vd25lci5cbiAgICAgICAgLy8gIF9vd25lciBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgICAgIC8vIGFuZCBpcyBub3QgbmVlZGVkIHdoZW4gY29tcGFyaW5nIHRoZSBhY3R1YWwgZWxlbWVudHMgKGFuZCBub3QgdGhlaXIgb3duZXJzKVxuICAgICAgICAvLyAuJCR0eXBlb2YgYW5kIC5fc3RvcmUgb24ganVzdCByZWFzb25hYmxlIG1hcmtlcnMgb2YgYSByZWFjdCBlbGVtZW50XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYWxsIG90aGVyIHByb3BlcnRpZXMgc2hvdWxkIGJlIHRyYXZlcnNlZCBhcyB1c3VhbFxuICAgICAgICBpZiAoIWVxdWFsKGFba2V5XSwgYltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBlbmQgcmVhY3QtZmFzdC1jb21wYXJlXG5cbiAgICAvLyBmYXN0LWRlZXAtZXF1YWwgaW5kZXguanMgMi4wLjFcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhICE9PSBhICYmIGIgIT09IGI7XG59XG4vLyBlbmQgZmFzdC1kZWVwLWVxdWFsXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXhwb3J0ZWRFcXVhbChhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVxdWFsKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICgoZXJyb3IubWVzc2FnZSAmJiBlcnJvci5tZXNzYWdlLm1hdGNoKC9zdGFja3xyZWN1cnNpb24vaSkpIHx8IChlcnJvci5udW1iZXIgPT09IC0yMTQ2ODI4MjYwKSkge1xuICAgICAgLy8gd2FybiBvbiBjaXJjdWxhciByZWZlcmVuY2VzLCBkb24ndCBjcmFzaFxuICAgICAgLy8gYnJvd3NlcnMgZ2l2ZSB0aGlzIGRpZmZlcmVudCBlcnJvcnMgbmFtZSBhbmQgbWVzc2FnZXM6XG4gICAgICAvLyBjaHJvbWUvc2FmYXJpOiBcIlJhbmdlRXJyb3JcIiwgXCJNYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiXG4gICAgICAvLyBmaXJlZm94OiBcIkludGVybmFsRXJyb3JcIiwgdG9vIG11Y2ggcmVjdXJzaW9uXCJcbiAgICAgIC8vIGVkZ2U6IFwiRXJyb3JcIiwgXCJPdXQgb2Ygc3RhY2sgc3BhY2VcIlxuICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nOiByZWFjdC1mYXN0LWNvbXBhcmUgZG9lcyBub3QgaGFuZGxlIGNpcmN1bGFyIHJlZmVyZW5jZXMuJywgZXJyb3IubmFtZSwgZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIHNvbWUgb3RoZXIgZXJyb3IuIHdlIHNob3VsZCBkZWZpbml0ZWx5IGtub3cgYWJvdXQgdGhlc2VcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/react-fast-compare/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react-is/cjs/react-is.production.min.js\":\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\neval(\"/** @license React v16.13.1\\n * react-is.production.min.js\\n *\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nvar b=\\\"function\\\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\\\"react.element\\\"):60103,d=b?Symbol.for(\\\"react.portal\\\"):60106,e=b?Symbol.for(\\\"react.fragment\\\"):60107,f=b?Symbol.for(\\\"react.strict_mode\\\"):60108,g=b?Symbol.for(\\\"react.profiler\\\"):60114,h=b?Symbol.for(\\\"react.provider\\\"):60109,k=b?Symbol.for(\\\"react.context\\\"):60110,l=b?Symbol.for(\\\"react.async_mode\\\"):60111,m=b?Symbol.for(\\\"react.concurrent_mode\\\"):60111,n=b?Symbol.for(\\\"react.forward_ref\\\"):60112,p=b?Symbol.for(\\\"react.suspense\\\"):60113,q=b?\\nSymbol.for(\\\"react.suspense_list\\\"):60120,r=b?Symbol.for(\\\"react.memo\\\"):60115,t=b?Symbol.for(\\\"react.lazy\\\"):60116,v=b?Symbol.for(\\\"react.block\\\"):60121,w=b?Symbol.for(\\\"react.fundamental\\\"):60117,x=b?Symbol.for(\\\"react.responder\\\"):60118,y=b?Symbol.for(\\\"react.scope\\\"):60119;\\nfunction z(a){if(\\\"object\\\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\\\"object\\\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\\nexports.isValidElementType=function(a){return\\\"string\\\"===typeof a||\\\"function\\\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\\\"object\\\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzPzBhOTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/react-is/cjs/react-is.production.min.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react-is/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n\\nif (true) {\\n  module.exports = __webpack_require__(\\\"../../../node_modules/react-is/cjs/react-is.production.min.js\\\");\\n} else {}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/NzZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/react-is/index.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_533816__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_533816__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_533816__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_533816__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_533816__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_533816__.o(definition, key) && !__nested_webpack_require_533816__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_533816__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_533816__(\"./Components/financial-details/index.ts\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/financial-details.js\n");

/***/ }),

/***/ "../../account/dist/account/js/get-status-badge-config.js":
/*!****************************************************************!*\
  !*** ../../account/dist/account/js/get-status-badge-config.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.ts\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"), __webpack_require__(/*! react-router-dom */ \"../../../node_modules/react-router-dom/esm/react-router-dom.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_router_dom__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Configs/get-status-badge-config.tsx\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"react-router-dom\\\");\\n/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_router_dom__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\\\"@deriv/components\\\");\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_deriv_components__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\\\"@deriv/translations\\\");\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_deriv_translations__WEBPACK_IMPORTED_MODULE_4__);\\n\\n\\n\\n\\n\\nvar getStatusBadgeConfig = function getStatusBadgeConfig(account_status, openFailedVerificationModal, selected_account_type) {\\n  var BadgeTextComponent = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Text, {\\n    key: 0,\\n    weight: \\\"bold\\\",\\n    size: \\\"xxxs\\\",\\n    color: \\\"warning\\\"\\n  });\\n  switch (account_status) {\\n    case _deriv_shared__WEBPACK_IMPORTED_MODULE_3__.MT5_ACCOUNT_STATUS.PENDING:\\n      return {\\n        text: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_translations__WEBPACK_IMPORTED_MODULE_4__.Localize, {\\n          i18n_default_text: \\\"<0>Pending verification</0>\\\",\\n          components: [/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Text, {\\n            key: 0,\\n            weight: \\\"bold\\\",\\n            size: \\\"xxxs\\\",\\n            color: \\\"var(--status-warning)\\\"\\n          })]\\n        }),\\n        icon: 'IcAlertWarning'\\n      };\\n    case _deriv_shared__WEBPACK_IMPORTED_MODULE_3__.MT5_ACCOUNT_STATUS.FAILED:\\n      return {\\n        text: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_translations__WEBPACK_IMPORTED_MODULE_4__.Localize, {\\n          i18n_default_text: \\\"<0>Verification failed.</0> <1>Why?</1>\\\",\\n          components: [/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Text, {\\n            key: 0,\\n            weight: \\\"bold\\\",\\n            size: \\\"xxxs\\\",\\n            color: \\\"var(--status-danger)\\\"\\n          }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Text, {\\n            key: 1,\\n            className: \\\"link-verification-failed\\\",\\n            onClick: function onClick() {\\n              openFailedVerificationModal === null || openFailedVerificationModal === void 0 ? void 0 : openFailedVerificationModal(selected_account_type !== null && selected_account_type !== void 0 ? selected_account_type : '');\\n            }\\n          })]\\n        }),\\n        icon: 'IcRedWarning'\\n      };\\n    case _deriv_shared__WEBPACK_IMPORTED_MODULE_3__.MT5_ACCOUNT_STATUS.NEED_VERIFICATION:\\n      return {\\n        text: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_translations__WEBPACK_IMPORTED_MODULE_4__.Localize, {\\n          i18n_default_text: \\\"<0>Need verification.</0><1>Verify now</1>\\\",\\n          components: [/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Text, {\\n            key: 0,\\n            weight: \\\"bold\\\",\\n            size: \\\"xxxs\\\",\\n            color: \\\"var(--status-info)\\\"\\n          }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_1__.Link, {\\n            key: 1,\\n            className: \\\"link-need-verification\\\",\\n            to: \\\"/account/proof-of-identity\\\"\\n          })]\\n        }),\\n        icon: 'IcAlertInfo'\\n      };\\n    case _deriv_shared__WEBPACK_IMPORTED_MODULE_3__.MT5_ACCOUNT_STATUS.MIGRATED_WITH_POSITION:\\n      return {\\n        text: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_translations__WEBPACK_IMPORTED_MODULE_4__.Localize, {\\n          i18n_default_text: \\\"<0>No new positions</0>\\\",\\n          components: [BadgeTextComponent]\\n        }),\\n        icon: 'IcAlertWarning'\\n      };\\n    case _deriv_shared__WEBPACK_IMPORTED_MODULE_3__.MT5_ACCOUNT_STATUS.MIGRATED_WITHOUT_POSITION:\\n      return {\\n        text: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_translations__WEBPACK_IMPORTED_MODULE_4__.Localize, {\\n          i18n_default_text: \\\"<0>Account closed</0>\\\",\\n          components: [BadgeTextComponent]\\n        }),\\n        icon: 'IcAlertWarning'\\n      };\\n    default:\\n      return {\\n        text: '',\\n        icon: ''\\n      };\\n  }\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getStatusBadgeConfig);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db25maWdzL2dldC1zdGF0dXMtYmFkZ2UtY29uZmlnLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBS0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29uZmlncy9nZXQtc3RhdHVzLWJhZGdlLWNvbmZpZy50c3g/MWE2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJ0BkZXJpdi9jb21wb25lbnRzJztcbmltcG9ydCB7IE1UNV9BQ0NPVU5UX1NUQVRVUyB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuaW1wb3J0IHsgTG9jYWxpemUgfSBmcm9tICdAZGVyaXYvdHJhbnNsYXRpb25zJztcblxuY29uc3QgZ2V0U3RhdHVzQmFkZ2VDb25maWcgPSAoXG4gICAgYWNjb3VudF9zdGF0dXM6IHR5cGVvZiBNVDVfQUNDT1VOVF9TVEFUVVNba2V5b2YgdHlwZW9mIE1UNV9BQ0NPVU5UX1NUQVRVU10sXG4gICAgb3BlbkZhaWxlZFZlcmlmaWNhdGlvbk1vZGFsPzogKHNlbGVjdGVkX2FjY291bnRfdHlwZTogc3RyaW5nKSA9PiB2b2lkLFxuICAgIHNlbGVjdGVkX2FjY291bnRfdHlwZT86IHN0cmluZ1xuKSA9PiB7XG4gICAgY29uc3QgQmFkZ2VUZXh0Q29tcG9uZW50ID0gPFRleHQga2V5PXswfSB3ZWlnaHQ9J2JvbGQnIHNpemU9J3h4eHMnIGNvbG9yPSd3YXJuaW5nJyAvPjtcblxuICAgIHN3aXRjaCAoYWNjb3VudF9zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBNVDVfQUNDT1VOVF9TVEFUVVMuUEVORElORzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGV4dDogKFxuICAgICAgICAgICAgICAgICAgICA8TG9jYWxpemVcbiAgICAgICAgICAgICAgICAgICAgICAgIGkxOG5fZGVmYXVsdF90ZXh0PSc8MD5QZW5kaW5nIHZlcmlmaWNhdGlvbjwvMD4nXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzPXtbPFRleHQga2V5PXswfSB3ZWlnaHQ9J2JvbGQnIHNpemU9J3h4eHMnIGNvbG9yPSd2YXIoLS1zdGF0dXMtd2FybmluZyknIC8+XX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGljb246ICdJY0FsZXJ0V2FybmluZycsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIE1UNV9BQ0NPVU5UX1NUQVRVUy5GQUlMRUQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6IChcbiAgICAgICAgICAgICAgICAgICAgPExvY2FsaXplXG4gICAgICAgICAgICAgICAgICAgICAgICBpMThuX2RlZmF1bHRfdGV4dD0nPDA+VmVyaWZpY2F0aW9uIGZhaWxlZC48LzA+IDwxPldoeT88LzE+J1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cz17W1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IGtleT17MH0gd2VpZ2h0PSdib2xkJyBzaXplPSd4eHhzJyBjb2xvcj0ndmFyKC0tc3RhdHVzLWRhbmdlciknIC8+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdsaW5rLXZlcmlmaWNhdGlvbi1mYWlsZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5GYWlsZWRWZXJpZmljYXRpb25Nb2RhbD8uKHNlbGVjdGVkX2FjY291bnRfdHlwZSA/PyAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4sXG4gICAgICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgaWNvbjogJ0ljUmVkV2FybmluZycsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIE1UNV9BQ0NPVU5UX1NUQVRVUy5ORUVEX1ZFUklGSUNBVElPTjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGV4dDogKFxuICAgICAgICAgICAgICAgICAgICA8TG9jYWxpemVcbiAgICAgICAgICAgICAgICAgICAgICAgIGkxOG5fZGVmYXVsdF90ZXh0PSc8MD5OZWVkIHZlcmlmaWNhdGlvbi48LzA+PDE+VmVyaWZ5IG5vdzwvMT4nXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQga2V5PXswfSB3ZWlnaHQ9J2JvbGQnIHNpemU9J3h4eHMnIGNvbG9yPSd2YXIoLS1zdGF0dXMtaW5mbyknIC8+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGtleT17MX0gY2xhc3NOYW1lPSdsaW5rLW5lZWQtdmVyaWZpY2F0aW9uJyB0bz0nL2FjY291bnQvcHJvb2Ytb2YtaWRlbnRpdHknIC8+LFxuICAgICAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGljb246ICdJY0FsZXJ0SW5mbycsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIE1UNV9BQ0NPVU5UX1NUQVRVUy5NSUdSQVRFRF9XSVRIX1BPU0lUSU9OOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiA8TG9jYWxpemUgaTE4bl9kZWZhdWx0X3RleHQ9JzwwPk5vIG5ldyBwb3NpdGlvbnM8LzA+JyBjb21wb25lbnRzPXtbQmFkZ2VUZXh0Q29tcG9uZW50XX0gLz4sXG4gICAgICAgICAgICAgICAgaWNvbjogJ0ljQWxlcnRXYXJuaW5nJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgTVQ1X0FDQ09VTlRfU1RBVFVTLk1JR1JBVEVEX1dJVEhPVVRfUE9TSVRJT046XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6IDxMb2NhbGl6ZSBpMThuX2RlZmF1bHRfdGV4dD0nPDA+QWNjb3VudCBjbG9zZWQ8LzA+JyBjb21wb25lbnRzPXtbQmFkZ2VUZXh0Q29tcG9uZW50XX0gLz4sXG4gICAgICAgICAgICAgICAgaWNvbjogJ0ljQWxlcnRXYXJuaW5nJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgICAgIGljb246ICcnLFxuICAgICAgICAgICAgfTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRTdGF0dXNCYWRnZUNvbmZpZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./Configs/get-status-badge-config.tsx\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ }),\n\n/***/ \"react-router-dom\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_router_dom__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_13540__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_13540__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_13540__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_13540__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_13540__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_13540__.o(definition, key) && !__nested_webpack_require_13540__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_13540__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_13540__(\"./Configs/get-status-badge-config.tsx\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/get-status-badge-config.js\n");

/***/ }),

/***/ "../../account/dist/account/js/personal-details-config.js":
/*!****************************************************************!*\
  !*** ../../account/dist/account/js/personal-details-config.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Configs/personal-details-config.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ Configs_personal_details_config)\\n});\\n\\n// UNUSED EXPORTS: personal_details_config\\n\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\n// EXTERNAL MODULE: ../../../node_modules/i18n-iso-countries/index.js\\nvar i18n_iso_countries = __webpack_require__(\\\"../../../node_modules/i18n-iso-countries/index.js\\\");\\n;// CONCATENATED MODULE: ./Constants/idv-document-config.ts\\n\\n\\n// Note: Ensure that the object keys matches BE API's keys. This is simply a mapping for FE templates\\n\\nvar getIDVDocumentConfig = function getIDVDocumentConfig() {\\n  return {\\n    ke: {\\n      alien_card: {\\n        new_display_name: '',\\n        example_format: '123456'\\n      },\\n      national_id: {\\n        new_display_name: '',\\n        example_format: '12345678'\\n      },\\n      passport: {\\n        new_display_name: '',\\n        example_format: 'A12345678'\\n      }\\n    },\\n    za: {\\n      national_id: {\\n        new_display_name: localize('National ID'),\\n        example_format: '1234567890123'\\n      },\\n      national_id_no_photo: {\\n        new_display_name: localize('National ID (No Photo)'),\\n        example_format: '1234567890123'\\n      }\\n    },\\n    ng: {\\n      bvn: {\\n        new_display_name: localize('Bank Verification Number'),\\n        example_format: '12345678901'\\n      },\\n      cac: {\\n        new_display_name: localize('Corporate Affairs Commission'),\\n        example_format: '12345678'\\n      },\\n      drivers_license: {\\n        new_display_name: '',\\n        example_format: 'ABC123456789'\\n      },\\n      nin: {\\n        new_display_name: localize('National Identity Number'),\\n        example_format: '12345678901'\\n      },\\n      nin_slip: {\\n        new_display_name: localize('National Identity Number Slip'),\\n        example_format: '12345678901'\\n      },\\n      tin: {\\n        new_display_name: localize('Taxpayer identification number'),\\n        example_format: '12345678-1234'\\n      },\\n      voter_id: {\\n        new_display_name: localize('Voter ID'),\\n        example_format: '1234567890123456789'\\n      }\\n    },\\n    gh: {\\n      drivers_license: {\\n        new_display_name: '',\\n        example_format: 'B1234567'\\n      },\\n      national_id: {\\n        new_display_name: localize('National ID'),\\n        example_format: 'GHA-123456789-1'\\n      },\\n      passport: {\\n        new_display_name: localize('Passport'),\\n        example_format: 'G1234567'\\n      },\\n      ssnit: {\\n        new_display_name: localize('Social Security and National Insurance Trust'),\\n        example_format: 'C123456789012'\\n      },\\n      voter_id: {\\n        new_display_name: localize('Voter ID'),\\n        example_format: '01234567890'\\n      }\\n    },\\n    br: {\\n      cpf: {\\n        new_display_name: localize('CPF'),\\n        example_format: '123.456.789-12'\\n      }\\n    },\\n    ug: {\\n      national_id: {\\n        new_display_name: localize('National ID'),\\n        example_format: 'CM12345678PE1D'\\n      },\\n      national_id_no_photo: {\\n        new_display_name: localize('National ID (No Photo)'),\\n        example_format: 'CM12345678PE1D',\\n        additional_document_example_format: '0123456789'\\n      }\\n    },\\n    zw: {\\n      national_id: {\\n        new_display_name: localize('National ID'),\\n        example_format: '081234567F53'\\n      }\\n    },\\n    cl: {\\n      national_id: {\\n        example_format: '123456789'\\n      }\\n    },\\n    ar: {\\n      dni: {\\n        example_format: '12345678'\\n      }\\n    },\\n    mx: {\\n      curp: {\\n        example_format: 'ABCD123456HEFGIJ00'\\n      }\\n    },\\n    id: {\\n      nik: {\\n        example_format: '1234567890123456'\\n      }\\n    },\\n    \\\"in\\\": {\\n      aadhaar: {\\n        example_format: '123456789012',\\n        additional_document_example_format: 'ABCDE1234F'\\n      },\\n      drivers_license: {\\n        example_format: 'AB1234567890123'\\n      },\\n      epic: {\\n        example_format: 'ABC1234567'\\n      },\\n      pan: {\\n        example_format: 'ABCDE1234F'\\n      },\\n      passport: {\\n        example_format: 'A1234567',\\n        additional_document_example_format: 'AB1234567890123'\\n      }\\n    },\\n    pe: {\\n      national_id: {\\n        example_format: '12345678'\\n      }\\n    },\\n    vn: {\\n      national_id: {\\n        example_format: '12345678901'\\n      }\\n    }\\n  };\\n};\\nvar idv_document_config_getIDVDocuments = function getIDVDocuments(country_code) {\\n  var IDV_DOCUMENT_DATA = getIDVDocumentConfig();\\n  return IDV_DOCUMENT_DATA[country_code];\\n};\\n;// CONCATENATED MODULE: ./Constants/onfido.js\\n\\n\\n\\n//TODO: Check if these phrases are required;\\nvar getOnfidoPhrases = function getOnfidoPhrases() {\\n  return {\\n    country_select: {\\n      alert_dropdown: {\\n        country_not_found: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Country not found\\\"\\n        })\\n      },\\n      alert: {\\n        another_doc: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Documents from that country are not currently supported \\\\u2014 <fallback>try another document type</fallback>\\\"\\n        })\\n      },\\n      button_primary: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Submit document\\\"\\n      }),\\n      search: {\\n        accessibility: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Select country\\\"\\n        }),\\n        input_placeholder: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"e.g. United States\\\"\\n        }),\\n        label: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Search for country\\\"\\n        })\\n      },\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Select issuing country\\\"\\n      })\\n    },\\n    cross_device_checklist: {\\n      button_primary: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Submit verification\\\"\\n      }),\\n      info: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Tips\\\"\\n      }),\\n      list_item_doc_multiple: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Documents uploaded\\\"\\n      }),\\n      list_item_doc_one: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Document uploaded\\\"\\n      }),\\n      list_item_selfie: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Selfie uploaded\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"We're now ready to verify your identity\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Great, that's everything we need\\\"\\n      })\\n    },\\n    cross_device_error_desktop: {\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"The link only works on mobile devices\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Something's gone wrong\\\"\\n      })\\n    },\\n    cross_device_error_restart: {\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"You'll need to restart your verification on your computer\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Something's gone wrong\\\"\\n      })\\n    },\\n    cross_device_intro: {\\n      button_primary: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Get secure link\\\"\\n      }),\\n      list_accessibility: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Steps required to continue verification on your mobile\\\"\\n      }),\\n      list_item_finish: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Check back here to finish the submission\\\"\\n      }),\\n      list_item_open_link: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Open the link and complete the tasks\\\"\\n      }),\\n      list_item_send_phone: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Send a secure link to your phone\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Here's how to do it:\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Continue on your phone\\\"\\n      })\\n    },\\n    cross_device_return: {\\n      body: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Your computer may take a few seconds to update\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"You can now return to your computer to continue\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Uploads successful\\\"\\n      })\\n    },\\n    doc_confirmation: {\\n      alert: {\\n        blur_detail: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Make sure everything is clear\\\"\\n        }),\\n        blur_title: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Blurry photo detected\\\"\\n        }),\\n        crop_detail: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Make sure full document is visible\\\"\\n        }),\\n        crop_title: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Cut-off image detected\\\"\\n        }),\\n        glare_detail: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Move away from direct light\\\"\\n        }),\\n        glare_title: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Glare detected\\\"\\n        }),\\n        no_doc_detail: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Make sure all of the document is in the photo\\\"\\n        }),\\n        no_doc_title: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"No document detected\\\"\\n        })\\n      },\\n      body_id: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Make sure your card details are clear to read, with no blur or glare\\\"\\n      }),\\n      body_image_medium: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"It\\\\u2019ll take longer to verify you if we can\\\\u2019t read it\\\"\\n      }),\\n      body_image_poor: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"To smoothly verify you, we need a better photo\\\"\\n      }),\\n      body_license: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Make sure your license details are clear to read, with no blur or glare\\\"\\n      }),\\n      body_passport: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Make sure your passport details are clear to read, with no blur or glare\\\"\\n      }),\\n      body_permit: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Make sure your permit details are clear to read, with no blur or glare\\\"\\n      }),\\n      body_tax_letter: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Make sure details are clear to read, with no blur or glare\\\"\\n      }),\\n      button_close: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Close\\\"\\n      }),\\n      button_primary_redo: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Redo\\\"\\n      }),\\n      button_primary_upload: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Confirm\\\"\\n      }),\\n      button_primary_upload_anyway: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload anyway\\\"\\n      }),\\n      button_secondary_redo: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Redo\\\"\\n      }),\\n      button_zoom: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Enlarge image\\\"\\n      }),\\n      image_accessibility: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Photo of your document\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Check your image\\\"\\n      })\\n    },\\n    doc_select: {\\n      button_id: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Identity card\\\"\\n      }),\\n      button_id_detail: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Front and back\\\"\\n      }),\\n      button_license: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Driver's license\\\"\\n      }),\\n      button_license_detail: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Front and back\\\"\\n      }),\\n      button_passport: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Passport\\\"\\n      }),\\n      button_passport_detail: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Face photo page\\\"\\n      }),\\n      button_permit: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Residence permit\\\"\\n      }),\\n      button_permit_detail: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Front and back\\\"\\n      }),\\n      extra_no_mobile: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Sorry, no mobile phone bills\\\"\\n      }),\\n      list_accessibility: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Documents you can use to verify your identity\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"It must be an official photo ID\\\"\\n      }),\\n      subtitle_poa: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"These are the documents most likely to show your current home address\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Choose document\\\"\\n      }),\\n      title_poa: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Select a %{country} document\\\"\\n      })\\n    },\\n    doc_submit: {\\n      button_link_upload: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"or upload photo \\\\u2013 no scans or photocopies\\\"\\n      }),\\n      button_primary: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Continue on phone\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Take a photo with your phone\\\"\\n      }),\\n      title_id_back: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Submit identity card (back)\\\"\\n      }),\\n      title_id_front: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Submit identity card (front)\\\"\\n      }),\\n      title_license_back: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Submit license (back)\\\"\\n      }),\\n      title_license_front: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Submit license (front)\\\"\\n      }),\\n      title_passport: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Submit passport photo page\\\"\\n      }),\\n      title_permit_back: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Submit residence permit (back)\\\"\\n      }),\\n      title_permit_front: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Submit residence permit (front)\\\"\\n      })\\n    },\\n    error_unsupported_browser: {\\n      subtitle_android: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Restart the process on the latest version of Google Chrome\\\"\\n      }),\\n      subtitle_ios: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Restart the process on the latest version of Safari\\\"\\n      }),\\n      title_android: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Unsupported browser\\\"\\n      }),\\n      title_ios: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Unsupported browser\\\"\\n      })\\n    },\\n    generic: {\\n      accessibility: {\\n        close_sdk_screen: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Close identity verification screen\\\"\\n        }),\\n        dismiss_alert: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Dismiss alert\\\"\\n        })\\n      },\\n      back: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"back\\\"\\n      }),\\n      close: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"close\\\"\\n      }),\\n      errors: {\\n        interrupted_flow_error: {\\n          instruction: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Restart process on a different device\\\"\\n          }),\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Camera not detected\\\"\\n          })\\n        },\\n        invalid_size: {\\n          instruction: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Must be under 10MB.\\\"\\n          }),\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"File size exceeded.\\\"\\n          })\\n        },\\n        invalid_type: {\\n          instruction: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Try using another file type.\\\"\\n          }),\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"File not uploaded.\\\"\\n          })\\n        },\\n        lazy_loading: {\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"An error occurred while loading the component\\\"\\n          })\\n        },\\n        multiple_faces: {\\n          instruction: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Only your face can be in the selfie\\\"\\n          }),\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Multiple faces found\\\"\\n          })\\n        },\\n        no_face: {\\n          instruction: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Your face is needed in the selfie\\\"\\n          }),\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"No face found\\\"\\n          })\\n        },\\n        request_error: {\\n          instruction: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Please try again\\\"\\n          }),\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Connection lost\\\"\\n          })\\n        },\\n        sms_failed: {\\n          instruction: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Copy the link to your phone\\\"\\n          }),\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Something's gone wrong\\\"\\n          })\\n        },\\n        sms_overuse: {\\n          instruction: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Copy the link to your phone\\\"\\n          }),\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Too many failed attempts\\\"\\n          })\\n        },\\n        unsupported_file: {\\n          instruction: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Try using a JPG or PNG file\\\"\\n          }),\\n          message: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"File type not supported\\\"\\n          })\\n        }\\n      },\\n      lazy_load_placeholder: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Loading...\\\"\\n      }),\\n      loading: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Loading\\\"\\n      })\\n    },\\n    get_link: {\\n      alert_wrong_number: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Check that your number is correct\\\"\\n      }),\\n      button_copied: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Copied\\\"\\n      }),\\n      button_copy: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Copy\\\"\\n      }),\\n      button_submit: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Send link\\\"\\n      }),\\n      info_qr_how: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"How to scan a QR code\\\"\\n      }),\\n      info_qr_how_list_item_camera: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Point your phone\\\\u2019s camera at the QR code\\\"\\n      }),\\n      info_qr_how_list_item_download: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"If it doesn\\\\u2019t work, download a QR code scanner from Google Play or the App Store\\\"\\n      }),\\n      link_divider: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"or\\\"\\n      }),\\n      link_qr: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Scan QR code\\\"\\n      }),\\n      link_sms: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Get link via SMS\\\"\\n      }),\\n      link_url: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Copy link\\\"\\n      }),\\n      loader_sending: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Sending\\\"\\n      }),\\n      number_field_input_placeholder: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Enter mobile number\\\"\\n      }),\\n      number_field_label: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Enter your mobile number:\\\"\\n      }),\\n      subtitle_qr: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Scan the QR code with your phone\\\"\\n      }),\\n      subtitle_sms: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Send this one-time link to your phone\\\"\\n      }),\\n      subtitle_url: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Open the link on your mobile\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Get your secure link\\\"\\n      }),\\n      url_field_label: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Copy the link to your mobile browser\\\"\\n      })\\n    },\\n    linked_computer: {\\n      button_primary: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Continue\\\"\\n      }),\\n      info: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Make sure\\\\xA7\\\"\\n      }),\\n      list_item_desktop_open: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"2. Your desktop window stays open\\\"\\n      }),\\n      list_item_sent_by_you: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"1. This link was sent by you\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Continue with the verification\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Linked to your computer\\\"\\n      })\\n    },\\n    mobilePhrases: {\\n      photo_upload: {\\n        body_id_back: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Take a photo of the back of your card\\\"\\n        }),\\n        body_id_front: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Take a photo of the front of your card\\\"\\n        }),\\n        body_license_back: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Take a photo of the back of your license\\\"\\n        }),\\n        body_license_front: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Take a photo of the front of your license\\\"\\n        }),\\n        body_passport: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Take a photo of your passport photo page\\\"\\n        }),\\n        body_selfie: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Take a selfie showing your face\\\"\\n        })\\n      },\\n      selfie_capture: {\\n        alert: {\\n          camera_inactive: {\\n            detail: /*#__PURE__*/React.createElement(Localize, {\\n              i18n_default_text: \\\"Take a photo using the <fallback>basic camera mode</fallback> instead\\\"\\n            })\\n          },\\n          camera_not_working: {\\n            detail: /*#__PURE__*/React.createElement(Localize, {\\n              i18n_default_text: \\\"Take a photo using the <fallback>basic camera mode</fallback> instead\\\"\\n            })\\n          }\\n        }\\n      },\\n      upload_guide: {\\n        button_primary: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Take a photo\\\"\\n        }),\\n        title: /*#__PURE__*/React.createElement(Localize, {\\n          i18n_default_text: \\\"Passport photo page\\\"\\n        })\\n      }\\n    },\\n    outro: {\\n      body: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Thank you\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Verification complete\\\"\\n      })\\n    },\\n    permission_recovery: {\\n      button_primary: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Refresh\\\"\\n      }),\\n      info: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Recovery\\\"\\n      }),\\n      list_header_cam: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Follow these steps to recover camera access:\\\"\\n      }),\\n      list_item_action_cam: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Refresh this page to restart the identity verification process\\\"\\n      }),\\n      list_item_how_to_cam: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Grant access to your camera from your browser settings\\\"\\n      }),\\n      subtitle_cam: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Recover camera access to continue face verification\\\"\\n      }),\\n      title_cam: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Camera access is denied\\\"\\n      })\\n    },\\n    permission: {\\n      body_cam: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"We cannot verify you without using your camera\\\"\\n      }),\\n      button_primary_cam: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Enable camera\\\"\\n      }),\\n      subtitle_cam: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"When prompted, you must enable camera access to continue\\\"\\n      }),\\n      title_cam: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Allow camera access\\\"\\n      })\\n    },\\n    photo_upload: {\\n      body_bank_statement: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Provide the whole document page for best results\\\"\\n      }),\\n      body_benefits_letter: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Provide the whole document page for best results\\\"\\n      }),\\n      body_bill: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Provide the whole document page for best results\\\"\\n      }),\\n      body_government_letter: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Provide the whole document page for best results\\\"\\n      }),\\n      body_id_back: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload back of card from your computer\\\"\\n      }),\\n      body_id_front: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload front of card from your computer\\\"\\n      }),\\n      body_license_back: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload back of license from your computer\\\"\\n      }),\\n      body_license_front: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload front of license from your computer\\\"\\n      }),\\n      body_passport: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload passport photo page from your computer\\\"\\n      }),\\n      body_selfie: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload a selfie from your computer\\\"\\n      }),\\n      body_tax_letter: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Provide the whole document page for best results\\\"\\n      }),\\n      button_take_photo: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Take photo\\\"\\n      }),\\n      button_upload: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload\\\"\\n      }),\\n      title_selfie: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Selfie\\\"\\n      })\\n    },\\n    selfie_capture: {\\n      alert: {\\n        camera_inactive: {\\n          detail: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Check that it is connected and functional. You can also <fallback>continue verification on your phone</fallback>\\\"\\n          }),\\n          detail_no_fallback: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Make sure your device has a working camera\\\"\\n          }),\\n          title: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Camera not working?\\\"\\n          })\\n        },\\n        camera_not_working: {\\n          detail: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"It may be disconnected. <fallback>Try using your phone instead</fallback>.\\\"\\n          }),\\n          detail_no_fallback: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Make sure your device's camera works\\\"\\n          }),\\n          title: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Camera not working\\\"\\n          })\\n        },\\n        timeout: {\\n          detail: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Remember to press stop when you're done. <fallback>Redo video actions</fallback>\\\"\\n          }),\\n          title: /*#__PURE__*/React.createElement(Localize, {\\n            i18n_default_text: \\\"Looks like you took too long\\\"\\n          })\\n        }\\n      },\\n      button_accessibility: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Take a photo\\\"\\n      }),\\n      frame_accessibility: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"View from camera\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Take a selfie\\\"\\n      })\\n    },\\n    selfie_confirmation: {\\n      image_accessibility: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Photo of your face\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Make sure your selfie clearly shows your face\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Check selfie\\\"\\n      })\\n    },\\n    selfie_intro: {\\n      button_primary: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Continue\\\"\\n      }),\\n      list_accessibility: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Tips to take a good selfie\\\"\\n      }),\\n      list_item_face_forward: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Face forward and make sure your eyes are clearly visible\\\"\\n      }),\\n      list_item_no_glasses: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Remove your glasses, if necessary\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"We'll compare it with your document\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Take a selfie\\\"\\n      })\\n    },\\n    sms_sent: {\\n      info: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Tips\\\"\\n      }),\\n      info_link_expire: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Your link will expire in one hour\\\"\\n      }),\\n      info_link_window: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Keep this window open while using your mobile\\\"\\n      }),\\n      link: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Resend link\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"We've sent a secure link to %{number}\\\"\\n      }),\\n      subtitle_minutes: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"It may take a few minutes to arrive\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Check your mobile\\\"\\n      })\\n    },\\n    switch_phone: {\\n      info: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Tips\\\"\\n      }),\\n      info_link_expire: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Your mobile link will expire in one hour\\\"\\n      }),\\n      info_link_refresh: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Don't refresh this page\\\"\\n      }),\\n      info_link_window: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Keep this window open while using your mobile\\\"\\n      }),\\n      link: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Cancel\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Once you\\\\\\\\'ve finished we'll take you to the next step\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Connected to your mobile\\\"\\n      })\\n    },\\n    upload_guide: {\\n      button_primary: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload photo\\\"\\n      }),\\n      image_detail_blur_alt: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Example of a blurry document\\\"\\n      }),\\n      image_detail_blur_label: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"All details must be clear \\\\u2014 nothing blurry\\\"\\n      }),\\n      image_detail_cutoff_alt: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Example of a cut-off document\\\"\\n      }),\\n      image_detail_cutoff_label: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Show all details \\\\u2014 including the bottom 2 lines\\\"\\n      }),\\n      image_detail_glare_alt: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Example of a document with glare\\\"\\n      }),\\n      image_detail_glare_label: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Move away from direct light \\\\u2014 no glare\\\"\\n      }),\\n      image_detail_good_alt: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Document example\\\"\\n      }),\\n      image_detail_good_label: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"The photo should clearly show your document\\\"\\n      }),\\n      subtitle: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Scans and photocopies are not accepted\\\"\\n      }),\\n      title: /*#__PURE__*/React.createElement(Localize, {\\n        i18n_default_text: \\\"Upload passport photo page\\\"\\n      })\\n    }\\n  };\\n};\\nvar onfido_LANGUAGE_CODES = {\\n  ID: 'id_ID',\\n  EN: 'en_US'\\n};\\n;// CONCATENATED MODULE: ./Helpers/utils.tsx\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; return _typeof = \\\"function\\\" == typeof Symbol && \\\"symbol\\\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \\\"function\\\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }, _typeof(obj); }\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\\nfunction _nonIterableSpread() { throw new TypeError(\\\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\nfunction _iterableToArray(iter) { if (typeof Symbol !== \\\"undefined\\\" && iter[Symbol.iterator] != null || iter[\\\"@@iterator\\\"] != null) return Array.from(iter); }\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\n\\n\\n\\n\\n\\nvar documentAdditionalError = function documentAdditionalError(additional_document_value, document_additional_config) {\\n  var error_message = null;\\n  if (!additional_document_value) {\\n    var _document_additional_, _document_additional_2;\\n    error_message = localize('Please enter your {{document_name}}. ', {\\n      document_name: (_document_additional_ = document_additional_config === null || document_additional_config === void 0 ? void 0 : (_document_additional_2 = document_additional_config.display_name) === null || _document_additional_2 === void 0 ? void 0 : _document_additional_2.toLowerCase()) !== null && _document_additional_ !== void 0 ? _document_additional_ : localize('document number')\\n    });\\n  } else {\\n    var format_regex = getRegex(document_additional_config === null || document_additional_config === void 0 ? void 0 : document_additional_config.format);\\n    if (!format_regex.test(additional_document_value)) {\\n      error_message = localize('Please enter the correct format. ');\\n    }\\n  }\\n  return error_message;\\n};\\n\\n// Unsupported Regex List\\nvar regex = [{\\n  regex_string: '^(?i)G[a-zA-Z0-9]{7,9}$',\\n  value: '^G[a-zA-Z0-9]{7,9}$',\\n  flags: 'i'\\n}];\\nvar IDV_NOT_APPLICABLE_OPTION = (0,shared_.getIDVNotApplicableOption)();\\nvar shouldShowIdentityInformation = function shouldShowIdentityInformation(_ref) {\\n  var _account_status$authe, _account_status$statu, _country$identity, _country$identity$ser, _country$identity$ser2;\\n  var account_status = _ref.account_status,\\n    citizen = _ref.citizen,\\n    residence_list = _ref.residence_list,\\n    real_account_signup_target = _ref.real_account_signup_target;\\n  var country = residence_list.find(function (item) {\\n    return item.value === citizen;\\n  });\\n  var maltainvest = real_account_signup_target === 'maltainvest';\\n  var identity = account_status === null || account_status === void 0 ? void 0 : (_account_status$authe = account_status.authentication) === null || _account_status$authe === void 0 ? void 0 : _account_status$authe.identity;\\n  var is_identity_verified = (identity === null || identity === void 0 ? void 0 : identity.status) === shared_.AUTH_STATUS_CODES.VERIFIED;\\n  var should_skip_idv = is_identity_verified || (account_status === null || account_status === void 0 ? void 0 : (_account_status$statu = account_status.status) === null || _account_status$statu === void 0 ? void 0 : _account_status$statu.some(function (status) {\\n    return status === 'skip_idv';\\n  })); //status added by BE when idv should be skipped for the user\\n  return Boolean(!maltainvest && citizen && (country === null || country === void 0 ? void 0 : (_country$identity = country.identity) === null || _country$identity === void 0 ? void 0 : (_country$identity$ser = _country$identity.services) === null || _country$identity$ser === void 0 ? void 0 : (_country$identity$ser2 = _country$identity$ser.idv) === null || _country$identity$ser2 === void 0 ? void 0 : _country$identity$ser2.is_country_supported) && !should_skip_idv);\\n};\\nvar getDocumentData = function getDocumentData(country_code, document_type) {\\n  var _IDV_DOCUMENT_DATA$do;\\n  var DEFAULT_CONFIG = {\\n    new_display_name: '',\\n    example_format: ''\\n  };\\n  var IDV_DOCUMENT_DATA = getIDVDocuments(country_code);\\n  return (_IDV_DOCUMENT_DATA$do = IDV_DOCUMENT_DATA[document_type]) !== null && _IDV_DOCUMENT_DATA$do !== void 0 ? _IDV_DOCUMENT_DATA$do : DEFAULT_CONFIG;\\n};\\nvar preventEmptyClipboardPaste = function preventEmptyClipboardPaste(e) {\\n  var _e$clipboardData;\\n  var clipboardData = ((_e$clipboardData = e.clipboardData) !== null && _e$clipboardData !== void 0 ? _e$clipboardData : window.clipboardData).getData('text');\\n  if (clipboardData.length === 0) {\\n    e.preventDefault();\\n  }\\n};\\nvar getRegex = function getRegex(target_regex) {\\n  var output_regex = regex.find(function (r) {\\n    return r.regex_string === target_regex;\\n  });\\n  if (output_regex) {\\n    return new RegExp(output_regex.value, output_regex.flags);\\n  }\\n  return new RegExp(target_regex);\\n};\\n\\n/**\\n * @param {string} selected_doc  - Could be one of the following: 'drivers_license', 'ssnit', 'id_card', 'passport'\\n * @returns {string} - Returns the placeholder text for the document number input\\n */\\nvar generatePlaceholderText = function generatePlaceholderText(selected_doc) {\\n  switch (selected_doc) {\\n    case 'drivers_license':\\n      return localize('Enter Driver License Reference number');\\n    case 'ssnit':\\n      return localize('Enter your SSNIT number');\\n    case 'national_id_no_photo':\\n      return localize('Enter your National Identification Number (NIN)');\\n    default:\\n      return localize('Enter your document number');\\n  }\\n};\\nvar isFieldImmutable = function isFieldImmutable(field) {\\n  var mutable_fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n  return !mutable_fields.includes(field);\\n};\\nvar makeSettingsRequest = function makeSettingsRequest(values, changeable_fields) {\\n  var request = filterObjProperties(values, changeable_fields);\\n  if (request.first_name) {\\n    request.first_name = request.first_name.trim();\\n  }\\n  if (request.last_name) {\\n    request.last_name = request.last_name.trim();\\n  }\\n  if (request.date_of_birth) {\\n    request.date_of_birth = toMoment(request.date_of_birth).format('YYYY-MM-DD');\\n  }\\n  return request;\\n};\\nvar validateName = function validateName(name) {\\n  if (name) {\\n    if (!validLength(name.trim(), {\\n      min: 2,\\n      max: 50\\n    })) {\\n      return localize('You should enter 2-50 characters.');\\n    } else if (!validName(name)) {\\n      return localize('Letters, spaces, periods, hyphens, apostrophes only.');\\n    }\\n  }\\n  return '';\\n};\\nvar getExampleFormat = function getExampleFormat(example_format) {\\n  return example_format ? localize('Example: ') + example_format : '';\\n};\\nvar isDocumentTypeValid = function isDocumentTypeValid(document_type) {\\n  if (!(document_type !== null && document_type !== void 0 && document_type.text)) {\\n    return localize('Please select a document type.');\\n  }\\n  return undefined;\\n};\\nvar isAdditionalDocumentValid = function isAdditionalDocumentValid(document_type, additional_document_value) {\\n  var error_message = documentAdditionalError(additional_document_value, document_type === null || document_type === void 0 ? void 0 : document_type.additional);\\n  if (error_message) {\\n    var _document_type$additi;\\n    return localize(error_message) + getExampleFormat((_document_type$additi = document_type.additional) === null || _document_type$additi === void 0 ? void 0 : _document_type$additi.example_format);\\n  }\\n  return undefined;\\n};\\nvar isDocumentNumberValid = function isDocumentNumberValid(document_number, document_type) {\\n  var is_document_number_invalid = document_number === document_type.example_format;\\n  if (!document_number && document_type.text) {\\n    var document_name = '';\\n    var example_format = getExampleFormat(document_type.example_format);\\n    switch (document_type.id) {\\n      case 'drivers_license':\\n        document_name = 'Driver License Reference number';\\n        break;\\n      case 'ssnit':\\n        document_name = 'SSNIT number';\\n        break;\\n      case 'national_id_no_photo':\\n        document_name = 'NIN';\\n        break;\\n      default:\\n        document_name = 'document number';\\n        break;\\n    }\\n    return /*#__PURE__*/React.createElement(Localize, {\\n      i18n_default_text: \\\"Please enter your {{document_name}}. {{example_format}}\\\",\\n      values: {\\n        document_name: document_name,\\n        example_format: example_format\\n      }\\n    });\\n  } else if (is_document_number_invalid) {\\n    return localize('Please enter a valid ID number.');\\n  }\\n  var format_regex = getRegex(document_type.value);\\n  if (!format_regex.test(document_number)) {\\n    return localize('Please enter the correct format. ') + getExampleFormat(document_type.example_format);\\n  }\\n  return undefined;\\n};\\nvar shouldHideHelperImage = function shouldHideHelperImage(document_id) {\\n  return document_id === IDV_NOT_APPLICABLE_OPTION.id;\\n};\\n\\n// @ts-expect-error as the generic is a Array\\nvar flatten = function flatten(arr) {\\n  var _ref2;\\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(arr));\\n};\\nvar isServerError = function isServerError(error) {\\n  return _typeof(error) === 'object' && error !== null && 'code' in error;\\n};\\n\\n/**\\n *  Returns the alpha 3 code for a given country code\\n * @name convertAlpha2toAlpha3\\n * @param country_code  - country code\\n * @returns alpha 3 code\\n */\\nvar convertAlpha2toAlpha3 = function convertAlpha2toAlpha3(country_code) {\\n  return country_code.length !== 3 ? countries.alpha2ToAlpha3(country_code.toUpperCase()) : country_code;\\n};\\n\\n/**\\n * Returns the alpha 2 code for a given country code\\n * @name convertAlpha3toAlpha2\\n * @param country_code - country code\\n * @returns alpha 2 code\\n */\\n\\nvar convertAlpha3toAlpha2 = function convertAlpha3toAlpha2(country_code) {\\n  return country_code.length !== 2 ? countries.alpha3ToAlpha2(country_code.toUpperCase()) : country_code;\\n};\\n\\n/**\\n * Generates a language code supported by Onfido\\n * @name getOnfidoSupportedLocaleCode\\n * @param language_code\\n * @returns language code supported by Onfido\\n */\\nvar getOnfidoSupportedLocaleCode = function getOnfidoSupportedLocaleCode(language_code) {\\n  try {\\n    var code = language_code.toLowerCase().split('_');\\n    if (code[0] === 'id') {\\n      return LANGUAGE_CODES.ID;\\n    }\\n    return code.length > 1 ? \\\"\\\".concat(code[0], \\\"_\\\").concat(code[1].toUpperCase()) : code[0];\\n  } catch (e) {\\n    return LANGUAGE_CODES.EN;\\n  }\\n};\\nvar getIDVDocumentType = function getIDVDocumentType(idv_latest_attempt, residence) {\\n  if (!idv_latest_attempt || !Object.keys(residence).length) return localize('identity document');\\n  var document_type = idv_latest_attempt.document_type;\\n  if (!document_type) return localize('identity document');\\n  var documents_supported = residence.identity.services.idv.documents_supported;\\n  return documents_supported[document_type].display_name;\\n};\\nvar validate = function validate(errors, values) {\\n  return function (fn, arr, err_msg) {\\n    arr.forEach(function (field) {\\n      var value = values[field];\\n      if (!fn(value) && !errors[field]) errors[field] = err_msg;\\n    });\\n  };\\n};\\nvar verifyFields = function verifyFields(status) {\\n  switch (status) {\\n    case idv_error_statuses.poi_dob_mismatch:\\n      return ['date_of_birth'];\\n    case idv_error_statuses.poi_name_mismatch:\\n      return ['first_name', 'last_name'];\\n    default:\\n      return ['first_name', 'last_name', 'date_of_birth'];\\n  }\\n};\\n;// CONCATENATED MODULE: ./Constants/personal-details.ts\\nvar PHONE_NUMBER_LENGTH = {\\n  MIN: 9,\\n  MAX: 35\\n};\\n;// CONCATENATED MODULE: ./Configs/personal-details-config.ts\\n\\n\\n\\n\\nvar personal_details_config = function personal_details_config(_ref) {\\n  var _account_settings$acc, _account_settings$sal, _account_settings$fir, _account_settings$las, _residence_list$find, _residence_list$find2, _account_settings$pho, _residence_list$find3, _account_settings$tax, _account_settings$emp, _account_settings$doc, _account_settings$doc2;\\n  var residence_list = _ref.residence_list,\\n    account_settings = _ref.account_settings,\\n    real_account_signup_target = _ref.real_account_signup_target,\\n    is_high_risk_client_for_mt5 = _ref.is_high_risk_client_for_mt5;\\n  if (!residence_list || !account_settings) {\\n    return {};\\n  }\\n  var default_residence = real_account_signup_target === 'maltainvest' && (account_settings === null || account_settings === void 0 ? void 0 : account_settings.residence) || '';\\n  var config = {\\n    account_opening_reason: {\\n      supported_in: ['iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$acc = account_settings.account_opening_reason) !== null && _account_settings$acc !== void 0 ? _account_settings$acc : '',\\n      rules: [['req', (0,translations_.localize)('Account opening reason is required.')]]\\n    },\\n    salutation: {\\n      supported_in: ['iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$sal = account_settings.salutation) !== null && _account_settings$sal !== void 0 ? _account_settings$sal : '',\\n      rules: [['req', (0,translations_.localize)('Salutation is required.')]]\\n    },\\n    first_name: {\\n      supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$fir = account_settings.first_name) !== null && _account_settings$fir !== void 0 ? _account_settings$fir : '',\\n      rules: [['req', (0,translations_.localize)('First name is required.')], ['length', (0,translations_.localize)('First name should be between 2 and 50 characters.'), {\\n        min: 2,\\n        max: 50\\n      }], ['name', (0,shared_.getErrorMessages)().name()]]\\n    },\\n    last_name: {\\n      supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$las = account_settings.last_name) !== null && _account_settings$las !== void 0 ? _account_settings$las : '',\\n      rules: [['req', (0,translations_.localize)('Last name is required.')], ['length', (0,translations_.localize)('Last name should be between 2 and 50 characters.'), {\\n        min: 2,\\n        max: 50\\n      }], ['name', (0,shared_.getErrorMessages)().name()]]\\n    },\\n    date_of_birth: {\\n      supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n      default_value: account_settings.date_of_birth ? (0,shared_.toMoment)(account_settings.date_of_birth).format('YYYY-MM-DD') : '',\\n      rules: [['req', (0,translations_.localize)('Date of birth is required.')], [function (v) {\\n        return (0,shared_.toMoment)(v).isValid() && (0,shared_.toMoment)(v).isBefore((0,shared_.toMoment)().subtract(18, 'years'));\\n      }, (0,translations_.localize)('You must be 18 years old and above.')]]\\n    },\\n    place_of_birth: {\\n      supported_in: ['maltainvest', 'iom', 'malta'],\\n      default_value: account_settings.place_of_birth && ((_residence_list$find = residence_list.find(function (item) {\\n        return item.value === account_settings.place_of_birth;\\n      })) === null || _residence_list$find === void 0 ? void 0 : _residence_list$find.text) || '',\\n      rules: [['req', (0,translations_.localize)('Place of birth is required.')]]\\n    },\\n    citizen: {\\n      supported_in: ['iom', 'malta', 'maltainvest'],\\n      default_value: account_settings.citizen && ((_residence_list$find2 = residence_list.find(function (item) {\\n        return item.value === account_settings.citizen;\\n      })) === null || _residence_list$find2 === void 0 ? void 0 : _residence_list$find2.text) || '',\\n      rules: [['req', (0,translations_.localize)('Citizenship is required')]]\\n    },\\n    phone: {\\n      supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\\n      default_value: (_account_settings$pho = account_settings.phone) !== null && _account_settings$pho !== void 0 ? _account_settings$pho : '',\\n      rules: [['req', (0,translations_.localize)('Phone is required.')], ['phone', (0,translations_.localize)('Phone is not in a proper format.')], [function (value) {\\n        // phone_trim uses regex that trims non-digits\\n        var phone_trim = value.replace(/\\\\D/g, '');\\n        // minimum characters required is 9 numbers (excluding +- signs or space)\\n        return (0,shared_.validLength)(phone_trim, {\\n          min: PHONE_NUMBER_LENGTH.MIN,\\n          max: PHONE_NUMBER_LENGTH.MAX\\n        });\\n      }, (0,translations_.localize)('You should enter {{min}}-{{max}} numbers.', {\\n        min: PHONE_NUMBER_LENGTH.MIN,\\n        max: PHONE_NUMBER_LENGTH.MAX\\n      })]]\\n    },\\n    tax_residence: {\\n      //if tax_residence is already set, we will use it as default value else for mf clients we will use residence as default value\\n      default_value: (account_settings === null || account_settings === void 0 ? void 0 : account_settings.tax_residence) && ((_residence_list$find3 = residence_list.find(function (item) {\\n        return item.value === (account_settings === null || account_settings === void 0 ? void 0 : account_settings.tax_residence);\\n      })) === null || _residence_list$find3 === void 0 ? void 0 : _residence_list$find3.text) || default_residence,\\n      supported_in: ['maltainvest'],\\n      rules: [['req', (0,translations_.localize)('Tax residence is required.')]]\\n    },\\n    tax_identification_number: {\\n      default_value: (_account_settings$tax = account_settings.tax_identification_number) !== null && _account_settings$tax !== void 0 ? _account_settings$tax : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', (0,translations_.localize)('Tax Identification Number is required.')], ['length', (0,translations_.localize)(\\\"Tax Identification Number can't be longer than 25 characters.\\\"), {\\n        min: 0,\\n        max: 25\\n      }], [\\n      // check if the TIN value is available, then perform the regex test\\n      // else return true (to pass the test)\\n      // this is to allow empty string to pass the test in case of optioal TIN field\\n      function (value) {\\n        return value ? RegExp(/^(?!^$|\\\\s+)[A-Za-z0-9./\\\\s-]{0,25}$/).test(value) : true;\\n      }, (0,translations_.localize)('Letters, numbers, spaces, periods, hyphens and forward slashes only.')], [function (value, options, _ref2) {\\n        var tax_residence = _ref2.tax_residence;\\n        // check if  TIN value is available,\\n        // only then ask client to fill in tax residence\\n        return value ? !!tax_residence : true;\\n      }, (0,translations_.localize)('Please fill in Tax residence.')], [function (value, options, _ref3) {\\n        var _residence_list$find4;\\n        var tax_residence = _ref3.tax_residence;\\n        var tin_format = (_residence_list$find4 = residence_list.find(function (res) {\\n          return res.text === tax_residence && res.tin_format;\\n        })) === null || _residence_list$find4 === void 0 ? void 0 : _residence_list$find4.tin_format;\\n        return value && tin_format ? tin_format.some(function (regex) {\\n          return new RegExp(regex).test(value);\\n        }) : true;\\n      }, (0,translations_.localize)('Tax Identification Number is not properly formatted.')]]\\n    },\\n    employment_status: {\\n      default_value: (_account_settings$emp = account_settings.employment_status) !== null && _account_settings$emp !== void 0 ? _account_settings$emp : '',\\n      supported_in: ['maltainvest'],\\n      rules: [['req', (0,translations_.localize)('Employment status is required.')]]\\n    },\\n    tax_identification_confirm: {\\n      default_value: false,\\n      supported_in: ['maltainvest'],\\n      rules: [['confirm', (0,translations_.localize)('Please confirm your tax information.')]]\\n    },\\n    document_type: {\\n      default_value: (_account_settings$doc = account_settings.document_type) !== null && _account_settings$doc !== void 0 ? _account_settings$doc : {\\n        id: '',\\n        text: '',\\n        value: '',\\n        example_format: ''\\n      },\\n      supported_in: ['svg'],\\n      rules: []\\n    },\\n    document_number: {\\n      default_value: (_account_settings$doc2 = account_settings.document_number) !== null && _account_settings$doc2 !== void 0 ? _account_settings$doc2 : '',\\n      supported_in: ['svg'],\\n      rules: []\\n    },\\n    confirmation_checkbox: {\\n      default_value: false,\\n      supported_in: ['svg'],\\n      rules: []\\n    }\\n  };\\n\\n  // Need to check if client is high risk (only have SVG i.e. China & Russia)\\n  // No need to get additinal details when client is high risk\\n  if (!is_high_risk_client_for_mt5 && real_account_signup_target !== 'maltainvest') {\\n    var properties_to_update = ['place_of_birth', 'tax_residence', 'tax_identification_number', 'account_opening_reason'];\\n    properties_to_update.forEach(function (key) {\\n      config[key].supported_in.push('svg');\\n      // Remove required rule for TIN and Tax residence from the config to make the fields optional\\n      if (key === 'tax_identification_number' || key === 'tax_residence') {\\n        config[key].rules = config[key].rules.filter(function (rule) {\\n          return rule[0] !== 'req';\\n        });\\n      }\\n    });\\n  }\\n  return config;\\n};\\nvar personalDetailsConfig = function personalDetailsConfig(_ref4, PersonalDetails) {\\n  var upgrade_info = _ref4.upgrade_info,\\n    real_account_signup_target = _ref4.real_account_signup_target,\\n    residence_list = _ref4.residence_list,\\n    account_settings = _ref4.account_settings,\\n    account_status = _ref4.account_status,\\n    residence = _ref4.residence,\\n    is_high_risk_client_for_mt5 = _ref4.is_high_risk_client_for_mt5;\\n  var is_appstore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\\n  var config = personal_details_config({\\n    residence_list: residence_list,\\n    account_settings: account_settings,\\n    real_account_signup_target: real_account_signup_target,\\n    residence: residence,\\n    account_status: account_status,\\n    is_high_risk_client_for_mt5: is_high_risk_client_for_mt5\\n  });\\n  var disabled_items = account_settings.immutable_fields;\\n  return {\\n    header: {\\n      active_title: is_appstore ? (0,translations_.localize)('A few personal details') : (0,translations_.localize)('Complete your personal details'),\\n      title: is_appstore ? (0,translations_.localize)('PERSONAL') : (0,translations_.localize)('Personal details')\\n    },\\n    body: PersonalDetails,\\n    form_value: (0,shared_.getDefaultFields)(real_account_signup_target, config),\\n    props: {\\n      validate: (0,shared_.generateValidationFunction)(real_account_signup_target, transformConfig(config, {\\n        real_account_signup_target: real_account_signup_target,\\n        residence_list: residence_list,\\n        account_settings: account_settings,\\n        account_status: account_status,\\n        residence: residence\\n      })),\\n      is_svg: (upgrade_info === null || upgrade_info === void 0 ? void 0 : upgrade_info.can_upgrade_to) === 'svg',\\n      is_mf: real_account_signup_target === 'maltainvest',\\n      account_opening_reason_list: [{\\n        text: (0,translations_.localize)('Hedging'),\\n        value: 'Hedging'\\n      }, {\\n        text: (0,translations_.localize)('Income Earning'),\\n        value: 'Income Earning'\\n      }, {\\n        text: (0,translations_.localize)('Speculative'),\\n        value: 'Speculative'\\n      }],\\n      salutation_list: [{\\n        label: (0,translations_.localize)('Mr'),\\n        value: 'Mr'\\n      }, {\\n        label: (0,translations_.localize)('Ms'),\\n        value: 'Ms'\\n      }],\\n      disabled_items: disabled_items,\\n      account_status: account_status,\\n      residence: residence,\\n      account_settings: account_settings,\\n      real_account_signup_target: real_account_signup_target\\n    },\\n    passthrough: ['residence_list', 'is_fully_authenticated', 'has_real_account'],\\n    icon: 'IcDashboardPersonalDetails'\\n  };\\n};\\nvar transformConfig = function transformConfig(config, _ref5) {\\n  var real_account_signup_target = _ref5.real_account_signup_target,\\n    residence_list = _ref5.residence_list,\\n    account_settings = _ref5.account_settings,\\n    account_status = _ref5.account_status,\\n    residence = _ref5.residence;\\n  // Remove required rule for malta and iom\\n  if (['malta', 'iom'].includes(real_account_signup_target) && config.tax_residence) {\\n    var _config$tax_residence, _config$tax_residence2;\\n    config === null || config === void 0 ? void 0 : (_config$tax_residence = config.tax_residence) === null || _config$tax_residence === void 0 ? void 0 : (_config$tax_residence2 = _config$tax_residence.rules) === null || _config$tax_residence2 === void 0 ? void 0 : _config$tax_residence2.shift();\\n  }\\n  // Remove IDV for non supporting SVG countries\\n  if (!shouldShowIdentityInformation({\\n    account_status: account_status,\\n    account_settings: account_settings,\\n    residence: residence,\\n    residence_list: residence_list,\\n    real_account_signup_target: real_account_signup_target\\n  })) {\\n    delete config.document_type;\\n    delete config.document_number;\\n  }\\n  return config;\\n};\\n/* harmony default export */ const Configs_personal_details_config = (personalDetailsConfig);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Configs/personal-details-config.ts\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/diacritics/index.js\":\n/***/ ((__unused_webpack_module, exports) => {\n\neval(\"var __webpack_unused_export__;\\nexports.Od = removeDiacritics;\\n\\nvar replacementList = [\\n  {\\n    base: ' ',\\n    chars: \\\"\\\\u00A0\\\",\\n  }, {\\n    base: '0',\\n    chars: \\\"\\\\u07C0\\\",\\n  }, {\\n    base: 'A',\\n    chars: \\\"\\\\u24B6\\\\uFF21\\\\u00C0\\\\u00C1\\\\u00C2\\\\u1EA6\\\\u1EA4\\\\u1EAA\\\\u1EA8\\\\u00C3\\\\u0100\\\\u0102\\\\u1EB0\\\\u1EAE\\\\u1EB4\\\\u1EB2\\\\u0226\\\\u01E0\\\\u00C4\\\\u01DE\\\\u1EA2\\\\u00C5\\\\u01FA\\\\u01CD\\\\u0200\\\\u0202\\\\u1EA0\\\\u1EAC\\\\u1EB6\\\\u1E00\\\\u0104\\\\u023A\\\\u2C6F\\\",\\n  }, {\\n    base: 'AA',\\n    chars: \\\"\\\\uA732\\\",\\n  }, {\\n    base: 'AE',\\n    chars: \\\"\\\\u00C6\\\\u01FC\\\\u01E2\\\",\\n  }, {\\n    base: 'AO',\\n    chars: \\\"\\\\uA734\\\",\\n  }, {\\n    base: 'AU',\\n    chars: \\\"\\\\uA736\\\",\\n  }, {\\n    base: 'AV',\\n    chars: \\\"\\\\uA738\\\\uA73A\\\",\\n  }, {\\n    base: 'AY',\\n    chars: \\\"\\\\uA73C\\\",\\n  }, {\\n    base: 'B',\\n    chars: \\\"\\\\u24B7\\\\uFF22\\\\u1E02\\\\u1E04\\\\u1E06\\\\u0243\\\\u0181\\\",\\n  }, {\\n    base: 'C',\\n    chars: \\\"\\\\u24b8\\\\uff23\\\\uA73E\\\\u1E08\\\\u0106\\\\u0043\\\\u0108\\\\u010A\\\\u010C\\\\u00C7\\\\u0187\\\\u023B\\\",\\n  }, {\\n    base: 'D',\\n    chars: \\\"\\\\u24B9\\\\uFF24\\\\u1E0A\\\\u010E\\\\u1E0C\\\\u1E10\\\\u1E12\\\\u1E0E\\\\u0110\\\\u018A\\\\u0189\\\\u1D05\\\\uA779\\\",\\n  }, {\\n    base: 'Dh',\\n    chars: \\\"\\\\u00D0\\\",\\n  }, {\\n    base: 'DZ',\\n    chars: \\\"\\\\u01F1\\\\u01C4\\\",\\n  }, {\\n    base: 'Dz',\\n    chars: \\\"\\\\u01F2\\\\u01C5\\\",\\n  }, {\\n    base: 'E',\\n    chars: \\\"\\\\u025B\\\\u24BA\\\\uFF25\\\\u00C8\\\\u00C9\\\\u00CA\\\\u1EC0\\\\u1EBE\\\\u1EC4\\\\u1EC2\\\\u1EBC\\\\u0112\\\\u1E14\\\\u1E16\\\\u0114\\\\u0116\\\\u00CB\\\\u1EBA\\\\u011A\\\\u0204\\\\u0206\\\\u1EB8\\\\u1EC6\\\\u0228\\\\u1E1C\\\\u0118\\\\u1E18\\\\u1E1A\\\\u0190\\\\u018E\\\\u1D07\\\",\\n  }, {\\n    base: 'F',\\n    chars: \\\"\\\\uA77C\\\\u24BB\\\\uFF26\\\\u1E1E\\\\u0191\\\\uA77B\\\",\\n  }, {\\n    base: 'G',\\n    chars: \\\"\\\\u24BC\\\\uFF27\\\\u01F4\\\\u011C\\\\u1E20\\\\u011E\\\\u0120\\\\u01E6\\\\u0122\\\\u01E4\\\\u0193\\\\uA7A0\\\\uA77D\\\\uA77E\\\\u0262\\\",\\n  }, {\\n    base: 'H',\\n    chars: \\\"\\\\u24BD\\\\uFF28\\\\u0124\\\\u1E22\\\\u1E26\\\\u021E\\\\u1E24\\\\u1E28\\\\u1E2A\\\\u0126\\\\u2C67\\\\u2C75\\\\uA78D\\\",\\n  }, {\\n    base: 'I',\\n    chars: \\\"\\\\u24BE\\\\uFF29\\\\xCC\\\\xCD\\\\xCE\\\\u0128\\\\u012A\\\\u012C\\\\u0130\\\\xCF\\\\u1E2E\\\\u1EC8\\\\u01CF\\\\u0208\\\\u020A\\\\u1ECA\\\\u012E\\\\u1E2C\\\\u0197\\\",\\n  }, {\\n    base: 'J',\\n    chars: \\\"\\\\u24BF\\\\uFF2A\\\\u0134\\\\u0248\\\\u0237\\\",\\n  }, {\\n    base: 'K',\\n    chars: \\\"\\\\u24C0\\\\uFF2B\\\\u1E30\\\\u01E8\\\\u1E32\\\\u0136\\\\u1E34\\\\u0198\\\\u2C69\\\\uA740\\\\uA742\\\\uA744\\\\uA7A2\\\",\\n  }, {\\n    base: 'L',\\n    chars: \\\"\\\\u24C1\\\\uFF2C\\\\u013F\\\\u0139\\\\u013D\\\\u1E36\\\\u1E38\\\\u013B\\\\u1E3C\\\\u1E3A\\\\u0141\\\\u023D\\\\u2C62\\\\u2C60\\\\uA748\\\\uA746\\\\uA780\\\",\\n  }, {\\n    base: 'LJ',\\n    chars: \\\"\\\\u01C7\\\",\\n  }, {\\n    base: 'Lj',\\n    chars: \\\"\\\\u01C8\\\",\\n  }, {\\n    base: 'M',\\n    chars: \\\"\\\\u24C2\\\\uFF2D\\\\u1E3E\\\\u1E40\\\\u1E42\\\\u2C6E\\\\u019C\\\\u03FB\\\",\\n  }, {\\n    base: 'N',\\n    chars: \\\"\\\\uA7A4\\\\u0220\\\\u24C3\\\\uFF2E\\\\u01F8\\\\u0143\\\\xD1\\\\u1E44\\\\u0147\\\\u1E46\\\\u0145\\\\u1E4A\\\\u1E48\\\\u019D\\\\uA790\\\\u1D0E\\\",\\n  }, {\\n    base: 'NJ',\\n    chars: \\\"\\\\u01CA\\\",\\n  }, {\\n    base: 'Nj',\\n    chars: \\\"\\\\u01CB\\\",\\n  }, {\\n    base: 'O',\\n    chars: \\\"\\\\u24C4\\\\uFF2F\\\\xD2\\\\xD3\\\\xD4\\\\u1ED2\\\\u1ED0\\\\u1ED6\\\\u1ED4\\\\xD5\\\\u1E4C\\\\u022C\\\\u1E4E\\\\u014C\\\\u1E50\\\\u1E52\\\\u014E\\\\u022E\\\\u0230\\\\xD6\\\\u022A\\\\u1ECE\\\\u0150\\\\u01D1\\\\u020C\\\\u020E\\\\u01A0\\\\u1EDC\\\\u1EDA\\\\u1EE0\\\\u1EDE\\\\u1EE2\\\\u1ECC\\\\u1ED8\\\\u01EA\\\\u01EC\\\\xD8\\\\u01FE\\\\u0186\\\\u019F\\\\uA74A\\\\uA74C\\\",\\n  }, {\\n    base: 'OE',\\n    chars: \\\"\\\\u0152\\\",\\n  }, {\\n    base: 'OI',\\n    chars: \\\"\\\\u01A2\\\",\\n  }, {\\n    base: 'OO',\\n    chars: \\\"\\\\uA74E\\\",\\n  }, {\\n    base: 'OU',\\n    chars: \\\"\\\\u0222\\\",\\n  }, {\\n    base: 'P',\\n    chars: \\\"\\\\u24C5\\\\uFF30\\\\u1E54\\\\u1E56\\\\u01A4\\\\u2C63\\\\uA750\\\\uA752\\\\uA754\\\",\\n  }, {\\n    base: 'Q',\\n    chars: \\\"\\\\u24C6\\\\uFF31\\\\uA756\\\\uA758\\\\u024A\\\",\\n  }, {\\n    base: 'R',\\n    chars: \\\"\\\\u24C7\\\\uFF32\\\\u0154\\\\u1E58\\\\u0158\\\\u0210\\\\u0212\\\\u1E5A\\\\u1E5C\\\\u0156\\\\u1E5E\\\\u024C\\\\u2C64\\\\uA75A\\\\uA7A6\\\\uA782\\\",\\n  }, {\\n    base: 'S',\\n    chars: \\\"\\\\u24C8\\\\uFF33\\\\u1E9E\\\\u015A\\\\u1E64\\\\u015C\\\\u1E60\\\\u0160\\\\u1E66\\\\u1E62\\\\u1E68\\\\u0218\\\\u015E\\\\u2C7E\\\\uA7A8\\\\uA784\\\",\\n  }, {\\n    base: 'T',\\n    chars: \\\"\\\\u24C9\\\\uFF34\\\\u1E6A\\\\u0164\\\\u1E6C\\\\u021A\\\\u0162\\\\u1E70\\\\u1E6E\\\\u0166\\\\u01AC\\\\u01AE\\\\u023E\\\\uA786\\\",\\n  }, {\\n    base: 'Th',\\n    chars: \\\"\\\\u00DE\\\",\\n  }, {\\n    base: 'TZ',\\n    chars: \\\"\\\\uA728\\\",\\n  }, {\\n    base: 'U',\\n    chars: \\\"\\\\u24CA\\\\uFF35\\\\xD9\\\\xDA\\\\xDB\\\\u0168\\\\u1E78\\\\u016A\\\\u1E7A\\\\u016C\\\\xDC\\\\u01DB\\\\u01D7\\\\u01D5\\\\u01D9\\\\u1EE6\\\\u016E\\\\u0170\\\\u01D3\\\\u0214\\\\u0216\\\\u01AF\\\\u1EEA\\\\u1EE8\\\\u1EEE\\\\u1EEC\\\\u1EF0\\\\u1EE4\\\\u1E72\\\\u0172\\\\u1E76\\\\u1E74\\\\u0244\\\",\\n  }, {\\n    base: 'V',\\n    chars: \\\"\\\\u24CB\\\\uFF36\\\\u1E7C\\\\u1E7E\\\\u01B2\\\\uA75E\\\\u0245\\\",\\n  }, {\\n    base: 'VY',\\n    chars: \\\"\\\\uA760\\\",\\n  }, {\\n    base: 'W',\\n    chars: \\\"\\\\u24CC\\\\uFF37\\\\u1E80\\\\u1E82\\\\u0174\\\\u1E86\\\\u1E84\\\\u1E88\\\\u2C72\\\",\\n  }, {\\n    base: 'X',\\n    chars: \\\"\\\\u24CD\\\\uFF38\\\\u1E8A\\\\u1E8C\\\",\\n  }, {\\n    base: 'Y',\\n    chars: \\\"\\\\u24CE\\\\uFF39\\\\u1EF2\\\\xDD\\\\u0176\\\\u1EF8\\\\u0232\\\\u1E8E\\\\u0178\\\\u1EF6\\\\u1EF4\\\\u01B3\\\\u024E\\\\u1EFE\\\",\\n  }, {\\n    base: 'Z',\\n    chars: \\\"\\\\u24CF\\\\uFF3A\\\\u0179\\\\u1E90\\\\u017B\\\\u017D\\\\u1E92\\\\u1E94\\\\u01B5\\\\u0224\\\\u2C7F\\\\u2C6B\\\\uA762\\\",\\n  }, {\\n    base: 'a',\\n    chars: \\\"\\\\u24D0\\\\uFF41\\\\u1E9A\\\\u00E0\\\\u00E1\\\\u00E2\\\\u1EA7\\\\u1EA5\\\\u1EAB\\\\u1EA9\\\\u00E3\\\\u0101\\\\u0103\\\\u1EB1\\\\u1EAF\\\\u1EB5\\\\u1EB3\\\\u0227\\\\u01E1\\\\u00E4\\\\u01DF\\\\u1EA3\\\\u00E5\\\\u01FB\\\\u01CE\\\\u0201\\\\u0203\\\\u1EA1\\\\u1EAD\\\\u1EB7\\\\u1E01\\\\u0105\\\\u2C65\\\\u0250\\\\u0251\\\",\\n  }, {\\n    base: 'aa',\\n    chars: \\\"\\\\uA733\\\",\\n  }, {\\n    base: 'ae',\\n    chars: \\\"\\\\u00E6\\\\u01FD\\\\u01E3\\\",\\n  }, {\\n    base: 'ao',\\n    chars: \\\"\\\\uA735\\\",\\n  }, {\\n    base: 'au',\\n    chars: \\\"\\\\uA737\\\",\\n  }, {\\n    base: 'av',\\n    chars: \\\"\\\\uA739\\\\uA73B\\\",\\n  }, {\\n    base: 'ay',\\n    chars: \\\"\\\\uA73D\\\",\\n  }, {\\n    base: 'b',\\n    chars: \\\"\\\\u24D1\\\\uFF42\\\\u1E03\\\\u1E05\\\\u1E07\\\\u0180\\\\u0183\\\\u0253\\\\u0182\\\",\\n  }, {\\n    base: 'c',\\n    chars: \\\"\\\\uFF43\\\\u24D2\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u00E7\\\\u1E09\\\\u0188\\\\u023C\\\\uA73F\\\\u2184\\\",\\n  }, {\\n    base: 'd',\\n    chars: \\\"\\\\u24D3\\\\uFF44\\\\u1E0B\\\\u010F\\\\u1E0D\\\\u1E11\\\\u1E13\\\\u1E0F\\\\u0111\\\\u018C\\\\u0256\\\\u0257\\\\u018B\\\\u13E7\\\\u0501\\\\uA7AA\\\",\\n  }, {\\n    base: 'dh',\\n    chars: \\\"\\\\u00F0\\\",\\n  }, {\\n    base: 'dz',\\n    chars: \\\"\\\\u01F3\\\\u01C6\\\",\\n  }, {\\n    base: 'e',\\n    chars: \\\"\\\\u24D4\\\\uFF45\\\\u00E8\\\\u00E9\\\\u00EA\\\\u1EC1\\\\u1EBF\\\\u1EC5\\\\u1EC3\\\\u1EBD\\\\u0113\\\\u1E15\\\\u1E17\\\\u0115\\\\u0117\\\\u00EB\\\\u1EBB\\\\u011B\\\\u0205\\\\u0207\\\\u1EB9\\\\u1EC7\\\\u0229\\\\u1E1D\\\\u0119\\\\u1E19\\\\u1E1B\\\\u0247\\\\u01DD\\\",\\n  }, {\\n    base: 'f',\\n    chars: \\\"\\\\u24D5\\\\uFF46\\\\u1E1F\\\\u0192\\\",\\n  }, {\\n    base: 'ff',\\n    chars: \\\"\\\\uFB00\\\",\\n  }, {\\n    base: 'fi',\\n    chars: \\\"\\\\uFB01\\\",\\n  }, {\\n    base: 'fl',\\n    chars: \\\"\\\\uFB02\\\",\\n  }, {\\n    base: 'ffi',\\n    chars: \\\"\\\\uFB03\\\",\\n  }, {\\n    base: 'ffl',\\n    chars: \\\"\\\\uFB04\\\",\\n  }, {\\n    base: 'g',\\n    chars: \\\"\\\\u24D6\\\\uFF47\\\\u01F5\\\\u011D\\\\u1E21\\\\u011F\\\\u0121\\\\u01E7\\\\u0123\\\\u01E5\\\\u0260\\\\uA7A1\\\\uA77F\\\\u1D79\\\",\\n  }, {\\n    base: 'h',\\n    chars: \\\"\\\\u24D7\\\\uFF48\\\\u0125\\\\u1E23\\\\u1E27\\\\u021F\\\\u1E25\\\\u1E29\\\\u1E2B\\\\u1E96\\\\u0127\\\\u2C68\\\\u2C76\\\\u0265\\\",\\n  }, {\\n    base: 'hv',\\n    chars: \\\"\\\\u0195\\\",\\n  }, {\\n    base: 'i',\\n    chars: \\\"\\\\u24D8\\\\uFF49\\\\xEC\\\\xED\\\\xEE\\\\u0129\\\\u012B\\\\u012D\\\\xEF\\\\u1E2F\\\\u1EC9\\\\u01D0\\\\u0209\\\\u020B\\\\u1ECB\\\\u012F\\\\u1E2D\\\\u0268\\\\u0131\\\",\\n  }, {\\n    base: 'j',\\n    chars: \\\"\\\\u24D9\\\\uFF4A\\\\u0135\\\\u01F0\\\\u0249\\\",\\n  }, {\\n    base: 'k',\\n    chars: \\\"\\\\u24DA\\\\uFF4B\\\\u1E31\\\\u01E9\\\\u1E33\\\\u0137\\\\u1E35\\\\u0199\\\\u2C6A\\\\uA741\\\\uA743\\\\uA745\\\\uA7A3\\\",\\n  }, {\\n    base: 'l',\\n    chars: \\\"\\\\u24DB\\\\uFF4C\\\\u0140\\\\u013A\\\\u013E\\\\u1E37\\\\u1E39\\\\u013C\\\\u1E3D\\\\u1E3B\\\\u017F\\\\u0142\\\\u019A\\\\u026B\\\\u2C61\\\\uA749\\\\uA781\\\\uA747\\\\u026D\\\",\\n  }, {\\n    base: 'lj',\\n    chars: \\\"\\\\u01C9\\\",\\n  }, {\\n    base: 'm',\\n    chars: \\\"\\\\u24DC\\\\uFF4D\\\\u1E3F\\\\u1E41\\\\u1E43\\\\u0271\\\\u026F\\\",\\n  }, {\\n    base: 'n',\\n    chars: \\\"\\\\u24DD\\\\uFF4E\\\\u01F9\\\\u0144\\\\xF1\\\\u1E45\\\\u0148\\\\u1E47\\\\u0146\\\\u1E4B\\\\u1E49\\\\u019E\\\\u0272\\\\u0149\\\\uA791\\\\uA7A5\\\\u043B\\\\u0509\\\",\\n  }, {\\n    base: 'nj',\\n    chars: \\\"\\\\u01CC\\\",\\n  }, {\\n    base: 'o',\\n    chars: \\\"\\\\u24DE\\\\uFF4F\\\\xF2\\\\xF3\\\\xF4\\\\u1ED3\\\\u1ED1\\\\u1ED7\\\\u1ED5\\\\xF5\\\\u1E4D\\\\u022D\\\\u1E4F\\\\u014D\\\\u1E51\\\\u1E53\\\\u014F\\\\u022F\\\\u0231\\\\xF6\\\\u022B\\\\u1ECF\\\\u0151\\\\u01D2\\\\u020D\\\\u020F\\\\u01A1\\\\u1EDD\\\\u1EDB\\\\u1EE1\\\\u1EDF\\\\u1EE3\\\\u1ECD\\\\u1ED9\\\\u01EB\\\\u01ED\\\\xF8\\\\u01FF\\\\uA74B\\\\uA74D\\\\u0275\\\\u0254\\\\u1D11\\\",\\n  }, {\\n    base: 'oe',\\n    chars: \\\"\\\\u0153\\\",\\n  }, {\\n    base: 'oi',\\n    chars: \\\"\\\\u01A3\\\",\\n  }, {\\n    base: 'oo',\\n    chars: \\\"\\\\uA74F\\\",\\n  }, {\\n    base: 'ou',\\n    chars: \\\"\\\\u0223\\\",\\n  }, {\\n    base: 'p',\\n    chars: \\\"\\\\u24DF\\\\uFF50\\\\u1E55\\\\u1E57\\\\u01A5\\\\u1D7D\\\\uA751\\\\uA753\\\\uA755\\\\u03C1\\\",\\n  }, {\\n    base: 'q',\\n    chars: \\\"\\\\u24E0\\\\uFF51\\\\u024B\\\\uA757\\\\uA759\\\",\\n  }, {\\n    base: 'r',\\n    chars: \\\"\\\\u24E1\\\\uFF52\\\\u0155\\\\u1E59\\\\u0159\\\\u0211\\\\u0213\\\\u1E5B\\\\u1E5D\\\\u0157\\\\u1E5F\\\\u024D\\\\u027D\\\\uA75B\\\\uA7A7\\\\uA783\\\",\\n  }, {\\n    base: 's',\\n    chars: \\\"\\\\u24E2\\\\uFF53\\\\u015B\\\\u1E65\\\\u015D\\\\u1E61\\\\u0161\\\\u1E67\\\\u1E63\\\\u1E69\\\\u0219\\\\u015F\\\\u023F\\\\uA7A9\\\\uA785\\\\u1E9B\\\\u0282\\\",\\n  }, {\\n    base: 'ss',\\n    chars: \\\"\\\\xDF\\\",\\n  }, {\\n    base: 't',\\n    chars: \\\"\\\\u24E3\\\\uFF54\\\\u1E6B\\\\u1E97\\\\u0165\\\\u1E6D\\\\u021B\\\\u0163\\\\u1E71\\\\u1E6F\\\\u0167\\\\u01AD\\\\u0288\\\\u2C66\\\\uA787\\\",\\n  }, {\\n    base: 'th',\\n    chars: \\\"\\\\u00FE\\\",\\n  }, {\\n    base: 'tz',\\n    chars: \\\"\\\\uA729\\\",\\n  }, {\\n    base: 'u',\\n    chars: \\\"\\\\u24E4\\\\uFF55\\\\xF9\\\\xFA\\\\xFB\\\\u0169\\\\u1E79\\\\u016B\\\\u1E7B\\\\u016D\\\\xFC\\\\u01DC\\\\u01D8\\\\u01D6\\\\u01DA\\\\u1EE7\\\\u016F\\\\u0171\\\\u01D4\\\\u0215\\\\u0217\\\\u01B0\\\\u1EEB\\\\u1EE9\\\\u1EEF\\\\u1EED\\\\u1EF1\\\\u1EE5\\\\u1E73\\\\u0173\\\\u1E77\\\\u1E75\\\\u0289\\\",\\n  }, {\\n    base: 'v',\\n    chars: \\\"\\\\u24E5\\\\uFF56\\\\u1E7D\\\\u1E7F\\\\u028B\\\\uA75F\\\\u028C\\\",\\n  }, {\\n    base: 'vy',\\n    chars: \\\"\\\\uA761\\\",\\n  }, {\\n    base: 'w',\\n    chars: \\\"\\\\u24E6\\\\uFF57\\\\u1E81\\\\u1E83\\\\u0175\\\\u1E87\\\\u1E85\\\\u1E98\\\\u1E89\\\\u2C73\\\",\\n  }, {\\n    base: 'x',\\n    chars: \\\"\\\\u24E7\\\\uFF58\\\\u1E8B\\\\u1E8D\\\",\\n  }, {\\n    base: 'y',\\n    chars: \\\"\\\\u24E8\\\\uFF59\\\\u1EF3\\\\xFD\\\\u0177\\\\u1EF9\\\\u0233\\\\u1E8F\\\\xFF\\\\u1EF7\\\\u1E99\\\\u1EF5\\\\u01B4\\\\u024F\\\\u1EFF\\\",\\n  }, {\\n    base: 'z',\\n    chars: \\\"\\\\u24E9\\\\uFF5A\\\\u017A\\\\u1E91\\\\u017C\\\\u017E\\\\u1E93\\\\u1E95\\\\u01B6\\\\u0225\\\\u0240\\\\u2C6C\\\\uA763\\\",\\n  }\\n];\\n\\nvar diacriticsMap = {};\\nfor (var i = 0; i < replacementList.length; i += 1) {\\n  var chars = replacementList[i].chars;\\n  for (var j = 0; j < chars.length; j += 1) {\\n    diacriticsMap[chars[j]] = replacementList[i].base;\\n  }\\n}\\n\\nfunction removeDiacritics(str) {\\n  return str.replace(/[^\\\\u0000-\\\\u007e]/g, function(c) {\\n    return diacriticsMap[c] || c;\\n  });\\n}\\n\\n__webpack_unused_export__ = replacementList;\\n__webpack_unused_export__ = diacriticsMap;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///../../../node_modules/diacritics/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/i18n-iso-countries/index.js\":\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n\\nconst codes = __webpack_require__(\\\"../../../node_modules/i18n-iso-countries/codes.json\\\");\\nconst removeDiacritics = (__webpack_require__(\\\"../../../node_modules/diacritics/index.js\\\")/* .remove */ .Od);\\nconst registeredLocales = {};\\n\\n/*\\n * All codes map to ISO 3166-1 alpha-2\\n */\\nconst alpha2 = {},\\n  alpha3 = {},\\n  numeric = {},\\n  invertedNumeric = {};\\n\\ncodes.forEach(function (codeInformation) {\\n  const s = codeInformation;\\n  alpha2[s[0]] = s[1];\\n  alpha3[s[1]] = s[0];\\n  numeric[s[2]] = s[0];\\n  invertedNumeric[s[0]] = s[2];\\n});\\n\\n/**\\n * @private\\n * @param {number} code\\n */\\nfunction formatNumericCode(code) {\\n  return String(\\\"000\\\" + (code ? code : \\\"\\\")).slice(-3);\\n}\\n\\n/**\\n * @private\\n * Avoid using obj.hasOwnProperty directly as `hasOwnProperty` could be a\\n * property in itself ({ hasOwnProperty: 1 }) and cause weird bugs\\n * https://eslint.org/docs/rules/no-prototype-builtins\\n */\\nfunction hasOwnProperty(object, property) {\\n  return Object.prototype.hasOwnProperty.call(object, property);\\n}\\n\\n/**\\n * @private\\n * Pass localeList through a filter and return a newLocaleList obj\\n * with the same structure of the old localeList.\\n *\\n * @param {LocalizedCountryNames} localeList  Local List in raw\\n * @param {Function} filter    callback to set filter rule\\n * @return {String | String[]} new filtered Local List\\n */\\nfunction localeFilter(localeList, filter) {\\n  return Object.keys(localeList).reduce(function (newLocaleList, alpha2) {\\n    const nameList = localeList[alpha2];\\n    newLocaleList[alpha2] = filter(nameList, alpha2);\\n    return newLocaleList;\\n  }, {});\\n}\\n\\n/**\\n * @private\\n * Preserve for getName & getNames\\n *\\n * @param {GetNameOptions.select} type all | official | alias\\n * @param countryNameList  string array of country's\\n *                         official name and alias\\n * @return {String | String[]} of a country name\\n */\\nfunction filterNameBy(type, countryNameList) {\\n  switch (type) {\\n    case \\\"official\\\":\\n      return Array.isArray(countryNameList)\\n        ? countryNameList[0]\\n        : countryNameList;\\n\\n    case \\\"all\\\":\\n      return typeof countryNameList === \\\"string\\\"\\n        ? [countryNameList]\\n        : countryNameList;\\n\\n    case \\\"alias\\\":\\n      return Array.isArray(countryNameList)\\n        ? countryNameList[1] || countryNameList[0]\\n        : countryNameList;\\n\\n    default:\\n      throw new TypeError(\\n        \\\"LocaleNameType must be one of these: all, official, alias!\\\"\\n      );\\n  }\\n}\\n\\n/**\\n * Register countries in browsers' environment:\\n * @param {object} localeData\\n * @example countries.registerLocale(require(\\\"i18n-iso-countries/langs/en.json\\\"));\\n * @return void\\n */\\nexports.registerLocale = function (localeData) {\\n  if (!localeData.locale) {\\n    throw new TypeError(\\\"Missing localeData.locale\\\");\\n  }\\n\\n  if (!localeData.countries) {\\n    throw new TypeError(\\\"Missing localeData.countries\\\");\\n  }\\n\\n  registeredLocales[localeData.locale] = localeData.countries;\\n};\\n\\n/*\\n * @param code Alpha-3 code\\n * @return Alpha-2 code or undefined\\n */\\nfunction alpha3ToAlpha2(code) {\\n  return alpha3[code];\\n}\\nexports.alpha3ToAlpha2 = alpha3ToAlpha2;\\n\\n/*\\n * @param code Alpha-2 code\\n * @return Alpha-3 code or undefined\\n */\\nfunction alpha2ToAlpha3(code) {\\n  return alpha2[code];\\n}\\nexports.alpha2ToAlpha3 = alpha2ToAlpha3;\\n\\n/*\\n * @param code Alpha-3 code\\n * @return Numeric code or undefined\\n */\\nfunction alpha3ToNumeric(code) {\\n  return invertedNumeric[alpha3ToAlpha2(code)];\\n}\\nexports.alpha3ToNumeric = alpha3ToNumeric;\\n\\n/*\\n * @param code Alpha-2 code\\n * @return Numeric code or undefined\\n */\\nfunction alpha2ToNumeric(code) {\\n  return invertedNumeric[code];\\n}\\nexports.alpha2ToNumeric = alpha2ToNumeric;\\n\\n/*\\n * @param code Numeric code\\n * @return Alpha-3 code or undefined\\n */\\nfunction numericToAlpha3(code) {\\n  const padded = formatNumericCode(code);\\n  return alpha2ToAlpha3(numeric[padded]);\\n}\\nexports.numericToAlpha3 = numericToAlpha3;\\n\\n/*\\n * @param code Numeric code\\n * @return Alpha-2 code or undefined\\n */\\nfunction numericToAlpha2(code) {\\n  const padded = formatNumericCode(code);\\n  return numeric[padded];\\n}\\nexports.numericToAlpha2 = numericToAlpha2;\\n\\n/*\\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\\n * @return ISO 3166-1 alpha-3\\n */\\nfunction toAlpha3(code) {\\n  if (typeof code === \\\"string\\\") {\\n    if (/^[0-9]*$/.test(code)) {\\n      return numericToAlpha3(code);\\n    }\\n    if (code.length === 2) {\\n      return alpha2ToAlpha3(code.toUpperCase());\\n    }\\n    if (code.length === 3) {\\n      return code.toUpperCase();\\n    }\\n  }\\n  if (typeof code === \\\"number\\\") {\\n    return numericToAlpha3(code);\\n  }\\n  return undefined;\\n}\\nexports.toAlpha3 = toAlpha3;\\n\\n/*\\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\\n * @return ISO 3166-1 alpha-2\\n */\\nfunction toAlpha2(code) {\\n  if (typeof code === \\\"string\\\") {\\n    if (/^[0-9]*$/.test(code)) {\\n      return numericToAlpha2(code);\\n    }\\n    if (code.length === 2) {\\n      return code.toUpperCase();\\n    }\\n    if (code.length === 3) {\\n      return alpha3ToAlpha2(code.toUpperCase());\\n    }\\n  }\\n  if (typeof code === \\\"number\\\") {\\n    return numericToAlpha2(code);\\n  }\\n  return undefined;\\n}\\nexports.toAlpha2 = toAlpha2;\\n\\n/**\\n * @param {string | number | Alpha2Code | Alpha3Code} code\\n * @param {String} lang          language for country name\\n * @param {GetNameOptions} options\\n * @return {String | String[] | undefined}  name\\n */\\nexports.getName = function (code, lang, options = {}) {\\n  if (!(\\\"select\\\" in options)) {\\n    options.select = \\\"official\\\";\\n  }\\n  try {\\n    const codeMaps = registeredLocales[lang.toLowerCase()];\\n    const nameList = codeMaps[toAlpha2(code)];\\n    return filterNameBy(options.select, nameList);\\n  } catch (err) {\\n    return undefined;\\n  }\\n};\\n\\n/**\\n * @param {String} lang             language for country names\\n * @param {GetNameOptions} options   getNames Options\\n * @return {LocalizedCountryNames}  country code\\n *                                  mapped to county name\\n */\\nexports.getNames = function (lang, options = {}) {\\n  if (!(\\\"select\\\" in options)) {\\n    options.select = \\\"official\\\";\\n  }\\n  const localeList = registeredLocales[lang.toLowerCase()];\\n  if (localeList === undefined) return {};\\n  return localeFilter(localeList, function (nameList) {\\n    return filterNameBy(options.select, nameList);\\n  });\\n};\\n\\n/*\\n * @param name name\\n * @param lang language for country name\\n * @return ISO 3166-1 alpha-2 or undefined\\n */\\nexports.getAlpha2Code = function (name, lang) {\\n  const normalizeString = (string) => string.toLowerCase();\\n  const areSimilar = (a, b) => normalizeString(a) === normalizeString(b);\\n\\n  try {\\n    const codenames = registeredLocales[lang.toLowerCase()];\\n    for (const p in codenames) {\\n      if (!hasOwnProperty(codenames, p)) {\\n        continue;\\n      }\\n      if (typeof codenames[p] === \\\"string\\\") {\\n        if (areSimilar(codenames[p], name)) {\\n          return p;\\n        }\\n      }\\n      if (Array.isArray(codenames[p])) {\\n        for (const mappedName of codenames[p]) {\\n          if (areSimilar(mappedName, name)) {\\n            return p;\\n          }\\n        }\\n      }\\n    }\\n    return undefined;\\n  } catch (err) {\\n    return undefined;\\n  }\\n};\\n\\n/*\\n * @param name name\\n * @param lang language for country name\\n * @return ISO 3166-1 alpha-2 or undefined\\n */\\nexports.getSimpleAlpha2Code = function (name, lang) {\\n  const normalizeString = (string) => removeDiacritics(string.toLowerCase());\\n  const areSimilar = (a, b) => normalizeString(a) === normalizeString(b);\\n\\n  try {\\n    const codenames = registeredLocales[lang.toLowerCase()];\\n    for (const p in codenames) {\\n      if (!hasOwnProperty(codenames, p)) {\\n        continue;\\n      }\\n      if (typeof codenames[p] === \\\"string\\\") {\\n        if (areSimilar(codenames[p], name)) {\\n          return p;\\n        }\\n      }\\n      if (Array.isArray(codenames[p])) {\\n        for (const mappedName of codenames[p]) {\\n          if (areSimilar(mappedName, name)) {\\n            return p;\\n          }\\n        }\\n      }\\n    }\\n    return undefined;\\n  } catch (err) {\\n    return undefined;\\n  }\\n};\\n\\n/*\\n * @return Object of alpha-2 codes mapped to alpha-3 codes\\n */\\nexports.getAlpha2Codes = function () {\\n  return alpha2;\\n};\\n\\n/*\\n * @param name name\\n * @param lang language for country name\\n * @return ISO 3166-1 alpha-3 or undefined\\n */\\nexports.getAlpha3Code = function (name, lang) {\\n  const alpha2 = exports.getAlpha2Code(name, lang);\\n  if (alpha2) {\\n    return exports.toAlpha3(alpha2);\\n  } else {\\n    return undefined;\\n  }\\n};\\n\\n/*\\n * @param name name\\n * @param lang language for country name\\n * @return ISO 3166-1 alpha-3 or undefined\\n */\\nexports.getSimpleAlpha3Code = function (name, lang) {\\n  const alpha2 = exports.getSimpleAlpha2Code(name, lang);\\n  if (alpha2) {\\n    return exports.toAlpha3(alpha2);\\n  } else {\\n    return undefined;\\n  }\\n};\\n\\n/*\\n * @return Object of alpha-3 codes mapped to alpha-2 codes\\n */\\nexports.getAlpha3Codes = function () {\\n  return alpha3;\\n};\\n\\n/*\\n * @return Object of numeric codes mapped to alpha-2 codes\\n */\\nexports.getNumericCodes = function () {\\n  return numeric;\\n};\\n\\n/*\\n * @return Array of supported languages\\n */\\nexports.langs = function () {\\n  return Object.keys(registeredLocales);\\n};\\n\\n/*\\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\\n * @return Boolean\\n */\\nexports.isValid = function (code) {\\n  if (!code) {\\n    return false;\\n  }\\n\\n  const coerced = code.toString().toUpperCase();\\n  return (\\n    hasOwnProperty(alpha3, coerced) ||\\n    hasOwnProperty(alpha2, coerced) ||\\n    hasOwnProperty(numeric, coerced)\\n  );\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///../../../node_modules/i18n-iso-countries/index.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ }),\n\n/***/ \"../../../node_modules/i18n-iso-countries/codes.json\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = JSON.parse('[[\"AF\",\"AFG\",\"004\",\"ISO 3166-2:AF\"],[\"AL\",\"ALB\",\"008\",\"ISO 3166-2:AL\"],[\"DZ\",\"DZA\",\"012\",\"ISO 3166-2:DZ\"],[\"AS\",\"ASM\",\"016\",\"ISO 3166-2:AS\"],[\"AD\",\"AND\",\"020\",\"ISO 3166-2:AD\"],[\"AO\",\"AGO\",\"024\",\"ISO 3166-2:AO\"],[\"AI\",\"AIA\",\"660\",\"ISO 3166-2:AI\"],[\"AQ\",\"ATA\",\"010\",\"ISO 3166-2:AQ\"],[\"AG\",\"ATG\",\"028\",\"ISO 3166-2:AG\"],[\"AR\",\"ARG\",\"032\",\"ISO 3166-2:AR\"],[\"AM\",\"ARM\",\"051\",\"ISO 3166-2:AM\"],[\"AW\",\"ABW\",\"533\",\"ISO 3166-2:AW\"],[\"AU\",\"AUS\",\"036\",\"ISO 3166-2:AU\"],[\"AT\",\"AUT\",\"040\",\"ISO 3166-2:AT\"],[\"AZ\",\"AZE\",\"031\",\"ISO 3166-2:AZ\"],[\"BS\",\"BHS\",\"044\",\"ISO 3166-2:BS\"],[\"BH\",\"BHR\",\"048\",\"ISO 3166-2:BH\"],[\"BD\",\"BGD\",\"050\",\"ISO 3166-2:BD\"],[\"BB\",\"BRB\",\"052\",\"ISO 3166-2:BB\"],[\"BY\",\"BLR\",\"112\",\"ISO 3166-2:BY\"],[\"BE\",\"BEL\",\"056\",\"ISO 3166-2:BE\"],[\"BZ\",\"BLZ\",\"084\",\"ISO 3166-2:BZ\"],[\"BJ\",\"BEN\",\"204\",\"ISO 3166-2:BJ\"],[\"BM\",\"BMU\",\"060\",\"ISO 3166-2:BM\"],[\"BT\",\"BTN\",\"064\",\"ISO 3166-2:BT\"],[\"BO\",\"BOL\",\"068\",\"ISO 3166-2:BO\"],[\"BA\",\"BIH\",\"070\",\"ISO 3166-2:BA\"],[\"BW\",\"BWA\",\"072\",\"ISO 3166-2:BW\"],[\"BV\",\"BVT\",\"074\",\"ISO 3166-2:BV\"],[\"BR\",\"BRA\",\"076\",\"ISO 3166-2:BR\"],[\"IO\",\"IOT\",\"086\",\"ISO 3166-2:IO\"],[\"BN\",\"BRN\",\"096\",\"ISO 3166-2:BN\"],[\"BG\",\"BGR\",\"100\",\"ISO 3166-2:BG\"],[\"BF\",\"BFA\",\"854\",\"ISO 3166-2:BF\"],[\"BI\",\"BDI\",\"108\",\"ISO 3166-2:BI\"],[\"KH\",\"KHM\",\"116\",\"ISO 3166-2:KH\"],[\"CM\",\"CMR\",\"120\",\"ISO 3166-2:CM\"],[\"CA\",\"CAN\",\"124\",\"ISO 3166-2:CA\"],[\"CV\",\"CPV\",\"132\",\"ISO 3166-2:CV\"],[\"KY\",\"CYM\",\"136\",\"ISO 3166-2:KY\"],[\"CF\",\"CAF\",\"140\",\"ISO 3166-2:CF\"],[\"TD\",\"TCD\",\"148\",\"ISO 3166-2:TD\"],[\"CL\",\"CHL\",\"152\",\"ISO 3166-2:CL\"],[\"CN\",\"CHN\",\"156\",\"ISO 3166-2:CN\"],[\"CX\",\"CXR\",\"162\",\"ISO 3166-2:CX\"],[\"CC\",\"CCK\",\"166\",\"ISO 3166-2:CC\"],[\"CO\",\"COL\",\"170\",\"ISO 3166-2:CO\"],[\"KM\",\"COM\",\"174\",\"ISO 3166-2:KM\"],[\"CG\",\"COG\",\"178\",\"ISO 3166-2:CG\"],[\"CD\",\"COD\",\"180\",\"ISO 3166-2:CD\"],[\"CK\",\"COK\",\"184\",\"ISO 3166-2:CK\"],[\"CR\",\"CRI\",\"188\",\"ISO 3166-2:CR\"],[\"CI\",\"CIV\",\"384\",\"ISO 3166-2:CI\"],[\"HR\",\"HRV\",\"191\",\"ISO 3166-2:HR\"],[\"CU\",\"CUB\",\"192\",\"ISO 3166-2:CU\"],[\"CY\",\"CYP\",\"196\",\"ISO 3166-2:CY\"],[\"CZ\",\"CZE\",\"203\",\"ISO 3166-2:CZ\"],[\"DK\",\"DNK\",\"208\",\"ISO 3166-2:DK\"],[\"DJ\",\"DJI\",\"262\",\"ISO 3166-2:DJ\"],[\"DM\",\"DMA\",\"212\",\"ISO 3166-2:DM\"],[\"DO\",\"DOM\",\"214\",\"ISO 3166-2:DO\"],[\"EC\",\"ECU\",\"218\",\"ISO 3166-2:EC\"],[\"EG\",\"EGY\",\"818\",\"ISO 3166-2:EG\"],[\"SV\",\"SLV\",\"222\",\"ISO 3166-2:SV\"],[\"GQ\",\"GNQ\",\"226\",\"ISO 3166-2:GQ\"],[\"ER\",\"ERI\",\"232\",\"ISO 3166-2:ER\"],[\"EE\",\"EST\",\"233\",\"ISO 3166-2:EE\"],[\"ET\",\"ETH\",\"231\",\"ISO 3166-2:ET\"],[\"FK\",\"FLK\",\"238\",\"ISO 3166-2:FK\"],[\"FO\",\"FRO\",\"234\",\"ISO 3166-2:FO\"],[\"FJ\",\"FJI\",\"242\",\"ISO 3166-2:FJ\"],[\"FI\",\"FIN\",\"246\",\"ISO 3166-2:FI\"],[\"FR\",\"FRA\",\"250\",\"ISO 3166-2:FR\"],[\"GF\",\"GUF\",\"254\",\"ISO 3166-2:GF\"],[\"PF\",\"PYF\",\"258\",\"ISO 3166-2:PF\"],[\"TF\",\"ATF\",\"260\",\"ISO 3166-2:TF\"],[\"GA\",\"GAB\",\"266\",\"ISO 3166-2:GA\"],[\"GM\",\"GMB\",\"270\",\"ISO 3166-2:GM\"],[\"GE\",\"GEO\",\"268\",\"ISO 3166-2:GE\"],[\"DE\",\"DEU\",\"276\",\"ISO 3166-2:DE\"],[\"GH\",\"GHA\",\"288\",\"ISO 3166-2:GH\"],[\"GI\",\"GIB\",\"292\",\"ISO 3166-2:GI\"],[\"GR\",\"GRC\",\"300\",\"ISO 3166-2:GR\"],[\"GL\",\"GRL\",\"304\",\"ISO 3166-2:GL\"],[\"GD\",\"GRD\",\"308\",\"ISO 3166-2:GD\"],[\"GP\",\"GLP\",\"312\",\"ISO 3166-2:GP\"],[\"GU\",\"GUM\",\"316\",\"ISO 3166-2:GU\"],[\"GT\",\"GTM\",\"320\",\"ISO 3166-2:GT\"],[\"GN\",\"GIN\",\"324\",\"ISO 3166-2:GN\"],[\"GW\",\"GNB\",\"624\",\"ISO 3166-2:GW\"],[\"GY\",\"GUY\",\"328\",\"ISO 3166-2:GY\"],[\"HT\",\"HTI\",\"332\",\"ISO 3166-2:HT\"],[\"HM\",\"HMD\",\"334\",\"ISO 3166-2:HM\"],[\"VA\",\"VAT\",\"336\",\"ISO 3166-2:VA\"],[\"HN\",\"HND\",\"340\",\"ISO 3166-2:HN\"],[\"HK\",\"HKG\",\"344\",\"ISO 3166-2:HK\"],[\"HU\",\"HUN\",\"348\",\"ISO 3166-2:HU\"],[\"IS\",\"ISL\",\"352\",\"ISO 3166-2:IS\"],[\"IN\",\"IND\",\"356\",\"ISO 3166-2:IN\"],[\"ID\",\"IDN\",\"360\",\"ISO 3166-2:ID\"],[\"IR\",\"IRN\",\"364\",\"ISO 3166-2:IR\"],[\"IQ\",\"IRQ\",\"368\",\"ISO 3166-2:IQ\"],[\"IE\",\"IRL\",\"372\",\"ISO 3166-2:IE\"],[\"IL\",\"ISR\",\"376\",\"ISO 3166-2:IL\"],[\"IT\",\"ITA\",\"380\",\"ISO 3166-2:IT\"],[\"JM\",\"JAM\",\"388\",\"ISO 3166-2:JM\"],[\"JP\",\"JPN\",\"392\",\"ISO 3166-2:JP\"],[\"JO\",\"JOR\",\"400\",\"ISO 3166-2:JO\"],[\"KZ\",\"KAZ\",\"398\",\"ISO 3166-2:KZ\"],[\"KE\",\"KEN\",\"404\",\"ISO 3166-2:KE\"],[\"KI\",\"KIR\",\"296\",\"ISO 3166-2:KI\"],[\"KP\",\"PRK\",\"408\",\"ISO 3166-2:KP\"],[\"KR\",\"KOR\",\"410\",\"ISO 3166-2:KR\"],[\"KW\",\"KWT\",\"414\",\"ISO 3166-2:KW\"],[\"KG\",\"KGZ\",\"417\",\"ISO 3166-2:KG\"],[\"LA\",\"LAO\",\"418\",\"ISO 3166-2:LA\"],[\"LV\",\"LVA\",\"428\",\"ISO 3166-2:LV\"],[\"LB\",\"LBN\",\"422\",\"ISO 3166-2:LB\"],[\"LS\",\"LSO\",\"426\",\"ISO 3166-2:LS\"],[\"LR\",\"LBR\",\"430\",\"ISO 3166-2:LR\"],[\"LY\",\"LBY\",\"434\",\"ISO 3166-2:LY\"],[\"LI\",\"LIE\",\"438\",\"ISO 3166-2:LI\"],[\"LT\",\"LTU\",\"440\",\"ISO 3166-2:LT\"],[\"LU\",\"LUX\",\"442\",\"ISO 3166-2:LU\"],[\"MO\",\"MAC\",\"446\",\"ISO 3166-2:MO\"],[\"MG\",\"MDG\",\"450\",\"ISO 3166-2:MG\"],[\"MW\",\"MWI\",\"454\",\"ISO 3166-2:MW\"],[\"MY\",\"MYS\",\"458\",\"ISO 3166-2:MY\"],[\"MV\",\"MDV\",\"462\",\"ISO 3166-2:MV\"],[\"ML\",\"MLI\",\"466\",\"ISO 3166-2:ML\"],[\"MT\",\"MLT\",\"470\",\"ISO 3166-2:MT\"],[\"MH\",\"MHL\",\"584\",\"ISO 3166-2:MH\"],[\"MQ\",\"MTQ\",\"474\",\"ISO 3166-2:MQ\"],[\"MR\",\"MRT\",\"478\",\"ISO 3166-2:MR\"],[\"MU\",\"MUS\",\"480\",\"ISO 3166-2:MU\"],[\"YT\",\"MYT\",\"175\",\"ISO 3166-2:YT\"],[\"MX\",\"MEX\",\"484\",\"ISO 3166-2:MX\"],[\"FM\",\"FSM\",\"583\",\"ISO 3166-2:FM\"],[\"MD\",\"MDA\",\"498\",\"ISO 3166-2:MD\"],[\"MC\",\"MCO\",\"492\",\"ISO 3166-2:MC\"],[\"MN\",\"MNG\",\"496\",\"ISO 3166-2:MN\"],[\"MS\",\"MSR\",\"500\",\"ISO 3166-2:MS\"],[\"MA\",\"MAR\",\"504\",\"ISO 3166-2:MA\"],[\"MZ\",\"MOZ\",\"508\",\"ISO 3166-2:MZ\"],[\"MM\",\"MMR\",\"104\",\"ISO 3166-2:MM\"],[\"NA\",\"NAM\",\"516\",\"ISO 3166-2:NA\"],[\"NR\",\"NRU\",\"520\",\"ISO 3166-2:NR\"],[\"NP\",\"NPL\",\"524\",\"ISO 3166-2:NP\"],[\"NL\",\"NLD\",\"528\",\"ISO 3166-2:NL\"],[\"NC\",\"NCL\",\"540\",\"ISO 3166-2:NC\"],[\"NZ\",\"NZL\",\"554\",\"ISO 3166-2:NZ\"],[\"NI\",\"NIC\",\"558\",\"ISO 3166-2:NI\"],[\"NE\",\"NER\",\"562\",\"ISO 3166-2:NE\"],[\"NG\",\"NGA\",\"566\",\"ISO 3166-2:NG\"],[\"NU\",\"NIU\",\"570\",\"ISO 3166-2:NU\"],[\"NF\",\"NFK\",\"574\",\"ISO 3166-2:NF\"],[\"MP\",\"MNP\",\"580\",\"ISO 3166-2:MP\"],[\"MK\",\"MKD\",\"807\",\"ISO 3166-2:MK\"],[\"NO\",\"NOR\",\"578\",\"ISO 3166-2:NO\"],[\"OM\",\"OMN\",\"512\",\"ISO 3166-2:OM\"],[\"PK\",\"PAK\",\"586\",\"ISO 3166-2:PK\"],[\"PW\",\"PLW\",\"585\",\"ISO 3166-2:PW\"],[\"PS\",\"PSE\",\"275\",\"ISO 3166-2:PS\"],[\"PA\",\"PAN\",\"591\",\"ISO 3166-2:PA\"],[\"PG\",\"PNG\",\"598\",\"ISO 3166-2:PG\"],[\"PY\",\"PRY\",\"600\",\"ISO 3166-2:PY\"],[\"PE\",\"PER\",\"604\",\"ISO 3166-2:PE\"],[\"PH\",\"PHL\",\"608\",\"ISO 3166-2:PH\"],[\"PN\",\"PCN\",\"612\",\"ISO 3166-2:PN\"],[\"PL\",\"POL\",\"616\",\"ISO 3166-2:PL\"],[\"PT\",\"PRT\",\"620\",\"ISO 3166-2:PT\"],[\"PR\",\"PRI\",\"630\",\"ISO 3166-2:PR\"],[\"QA\",\"QAT\",\"634\",\"ISO 3166-2:QA\"],[\"RE\",\"REU\",\"638\",\"ISO 3166-2:RE\"],[\"RO\",\"ROU\",\"642\",\"ISO 3166-2:RO\"],[\"RU\",\"RUS\",\"643\",\"ISO 3166-2:RU\"],[\"RW\",\"RWA\",\"646\",\"ISO 3166-2:RW\"],[\"SH\",\"SHN\",\"654\",\"ISO 3166-2:SH\"],[\"KN\",\"KNA\",\"659\",\"ISO 3166-2:KN\"],[\"LC\",\"LCA\",\"662\",\"ISO 3166-2:LC\"],[\"PM\",\"SPM\",\"666\",\"ISO 3166-2:PM\"],[\"VC\",\"VCT\",\"670\",\"ISO 3166-2:VC\"],[\"WS\",\"WSM\",\"882\",\"ISO 3166-2:WS\"],[\"SM\",\"SMR\",\"674\",\"ISO 3166-2:SM\"],[\"ST\",\"STP\",\"678\",\"ISO 3166-2:ST\"],[\"SA\",\"SAU\",\"682\",\"ISO 3166-2:SA\"],[\"SN\",\"SEN\",\"686\",\"ISO 3166-2:SN\"],[\"SC\",\"SYC\",\"690\",\"ISO 3166-2:SC\"],[\"SL\",\"SLE\",\"694\",\"ISO 3166-2:SL\"],[\"SG\",\"SGP\",\"702\",\"ISO 3166-2:SG\"],[\"SK\",\"SVK\",\"703\",\"ISO 3166-2:SK\"],[\"SI\",\"SVN\",\"705\",\"ISO 3166-2:SI\"],[\"SB\",\"SLB\",\"090\",\"ISO 3166-2:SB\"],[\"SO\",\"SOM\",\"706\",\"ISO 3166-2:SO\"],[\"ZA\",\"ZAF\",\"710\",\"ISO 3166-2:ZA\"],[\"GS\",\"SGS\",\"239\",\"ISO 3166-2:GS\"],[\"ES\",\"ESP\",\"724\",\"ISO 3166-2:ES\"],[\"LK\",\"LKA\",\"144\",\"ISO 3166-2:LK\"],[\"SD\",\"SDN\",\"729\",\"ISO 3166-2:SD\"],[\"SR\",\"SUR\",\"740\",\"ISO 3166-2:SR\"],[\"SJ\",\"SJM\",\"744\",\"ISO 3166-2:SJ\"],[\"SZ\",\"SWZ\",\"748\",\"ISO 3166-2:SZ\"],[\"SE\",\"SWE\",\"752\",\"ISO 3166-2:SE\"],[\"CH\",\"CHE\",\"756\",\"ISO 3166-2:CH\"],[\"SY\",\"SYR\",\"760\",\"ISO 3166-2:SY\"],[\"TW\",\"TWN\",\"158\",\"ISO 3166-2:TW\"],[\"TJ\",\"TJK\",\"762\",\"ISO 3166-2:TJ\"],[\"TZ\",\"TZA\",\"834\",\"ISO 3166-2:TZ\"],[\"TH\",\"THA\",\"764\",\"ISO 3166-2:TH\"],[\"TL\",\"TLS\",\"626\",\"ISO 3166-2:TL\"],[\"TG\",\"TGO\",\"768\",\"ISO 3166-2:TG\"],[\"TK\",\"TKL\",\"772\",\"ISO 3166-2:TK\"],[\"TO\",\"TON\",\"776\",\"ISO 3166-2:TO\"],[\"TT\",\"TTO\",\"780\",\"ISO 3166-2:TT\"],[\"TN\",\"TUN\",\"788\",\"ISO 3166-2:TN\"],[\"TR\",\"TUR\",\"792\",\"ISO 3166-2:TR\"],[\"TM\",\"TKM\",\"795\",\"ISO 3166-2:TM\"],[\"TC\",\"TCA\",\"796\",\"ISO 3166-2:TC\"],[\"TV\",\"TUV\",\"798\",\"ISO 3166-2:TV\"],[\"UG\",\"UGA\",\"800\",\"ISO 3166-2:UG\"],[\"UA\",\"UKR\",\"804\",\"ISO 3166-2:UA\"],[\"AE\",\"ARE\",\"784\",\"ISO 3166-2:AE\"],[\"GB\",\"GBR\",\"826\",\"ISO 3166-2:GB\"],[\"US\",\"USA\",\"840\",\"ISO 3166-2:US\"],[\"UM\",\"UMI\",\"581\",\"ISO 3166-2:UM\"],[\"UY\",\"URY\",\"858\",\"ISO 3166-2:UY\"],[\"UZ\",\"UZB\",\"860\",\"ISO 3166-2:UZ\"],[\"VU\",\"VUT\",\"548\",\"ISO 3166-2:VU\"],[\"VE\",\"VEN\",\"862\",\"ISO 3166-2:VE\"],[\"VN\",\"VNM\",\"704\",\"ISO 3166-2:VN\"],[\"VG\",\"VGB\",\"092\",\"ISO 3166-2:VG\"],[\"VI\",\"VIR\",\"850\",\"ISO 3166-2:VI\"],[\"WF\",\"WLF\",\"876\",\"ISO 3166-2:WF\"],[\"EH\",\"ESH\",\"732\",\"ISO 3166-2:EH\"],[\"YE\",\"YEM\",\"887\",\"ISO 3166-2:YE\"],[\"ZM\",\"ZMB\",\"894\",\"ISO 3166-2:ZM\"],[\"ZW\",\"ZWE\",\"716\",\"ISO 3166-2:ZW\"],[\"AX\",\"ALA\",\"248\",\"ISO 3166-2:AX\"],[\"BQ\",\"BES\",\"535\",\"ISO 3166-2:BQ\"],[\"CW\",\"CUW\",\"531\",\"ISO 3166-2:CW\"],[\"GG\",\"GGY\",\"831\",\"ISO 3166-2:GG\"],[\"IM\",\"IMN\",\"833\",\"ISO 3166-2:IM\"],[\"JE\",\"JEY\",\"832\",\"ISO 3166-2:JE\"],[\"ME\",\"MNE\",\"499\",\"ISO 3166-2:ME\"],[\"BL\",\"BLM\",\"652\",\"ISO 3166-2:BL\"],[\"MF\",\"MAF\",\"663\",\"ISO 3166-2:MF\"],[\"RS\",\"SRB\",\"688\",\"ISO 3166-2:RS\"],[\"SX\",\"SXM\",\"534\",\"ISO 3166-2:SX\"],[\"SS\",\"SSD\",\"728\",\"ISO 3166-2:SS\"],[\"XK\",\"XKX\",\"983\",\"ISO 3166-2:XK\"]]');\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_202842__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_202842__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_202842__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_202842__.o(definition, key) && !__nested_webpack_require_202842__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_202842__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_202842__(\"./Configs/personal-details-config.ts\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/personal-details-config.js\n");

/***/ }),

/***/ "../../account/dist/account/js/risk-tolerance-warning-modal.js":
/*!*********************************************************************!*\
  !*** ../../account/dist/account/js/risk-tolerance-warning-modal.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Components/trading-assessment/risk-tolerance-warning-modal.jsx\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"@deriv/components\\\");\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_components__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\\\"@deriv/translations\\\");\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_deriv_translations__WEBPACK_IMPORTED_MODULE_2__);\\n\\n\\n\\nvar RiskToleranceWarningModal = function RiskToleranceWarningModal(_ref) {\\n  var show_risk_modal = _ref.show_risk_modal,\\n    handleAcceptRisk = _ref.handleAcceptRisk,\\n    title = _ref.title,\\n    button_text = _ref.button_text,\\n    body_content = _ref.body_content,\\n    _ref$has_sub_header = _ref.has_sub_header,\\n    has_sub_header = _ref$has_sub_header === void 0 ? false : _ref$has_sub_header;\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.DesktopWrapper, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal, {\\n    width: \\\"44rem\\\",\\n    title: title,\\n    height: \\\"41rem\\\",\\n    is_open: show_risk_modal,\\n    className: \\\"center-risk-modal\\\",\\n    toggleModal: handleAcceptRisk,\\n    has_close_icon: false\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal.Body, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Icon, {\\n    icon: \\\"IcRedWarning\\\",\\n    size: \\\"63\\\"\\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Text, {\\n    as: \\\"p\\\",\\n    size: \\\"xs\\\",\\n    align: \\\"center\\\",\\n    line_height: \\\"s\\\",\\n    className: \\\"risk-acceptance__text\\\"\\n  }, body_content)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal.Footer, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Button, {\\n    type: \\\"button\\\",\\n    large: true,\\n    text: button_text || (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_2__.localize)('OK'),\\n    primary: true,\\n    onClick: handleAcceptRisk\\n  })))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.MobileWrapper, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.MobileDialog, {\\n    visible: show_risk_modal,\\n    title: has_sub_header ? (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_2__.localize)('Trading Experience Assessment') : title,\\n    portal_element_id: \\\"modal_root\\\",\\n    has_close_icon: false\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal.Body, {\\n    className: \\\"risk-tolerance-modal\\\"\\n  }, has_sub_header ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Text, {\\n    size: \\\"xs\\\",\\n    line_height: \\\"s\\\",\\n    weight: \\\"bold\\\",\\n    as: \\\"p\\\",\\n    className: \\\"risk-tolerance-modal__title\\\"\\n  }, title, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\\\"div\\\", {\\n    className: \\\"risk-tolerance-modal__title--separator\\\"\\n  })) : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\\\"div\\\", {\\n    className: \\\"risk-tolerance-modal__wrapper\\\"\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Icon, {\\n    icon: \\\"IcRedWarning\\\",\\n    size: \\\"65\\\"\\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Text, {\\n    as: \\\"p\\\",\\n    size: \\\"xs\\\",\\n    align: \\\"center\\\",\\n    line_height: \\\"l\\\",\\n    className: \\\"risk-acceptance__text\\\"\\n  }, body_content))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal.Footer, {\\n    className: \\\"risk-tolerance-modal__footer\\\"\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Button, {\\n    type: \\\"button\\\",\\n    large: true,\\n    text: button_text || (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_2__.localize)('OK'),\\n    primary: true,\\n    onClick: handleAcceptRisk\\n  })))));\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RiskToleranceWarningModal);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL3RyYWRpbmctYXNzZXNzbWVudC9yaXNrLXRvbGVyYW5jZS13YXJuaW5nLW1vZGFsLmpzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQU9BO0FBTEE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUFBO0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUtBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFPQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi9Db21wb25lbnRzL3RyYWRpbmctYXNzZXNzbWVudC9yaXNrLXRvbGVyYW5jZS13YXJuaW5nLW1vZGFsLmpzeD8zMTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCdXR0b24sIEljb24sIE1vZGFsLCBUZXh0LCBEZXNrdG9wV3JhcHBlciwgTW9iaWxlRGlhbG9nLCBNb2JpbGVXcmFwcGVyIH0gZnJvbSAnQGRlcml2L2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tICdAZGVyaXYvdHJhbnNsYXRpb25zJztcblxuY29uc3QgUmlza1RvbGVyYW5jZVdhcm5pbmdNb2RhbCA9ICh7XG4gICAgc2hvd19yaXNrX21vZGFsLFxuICAgIGhhbmRsZUFjY2VwdFJpc2ssXG4gICAgdGl0bGUsXG4gICAgYnV0dG9uX3RleHQsXG4gICAgYm9keV9jb250ZW50LFxuICAgIGhhc19zdWJfaGVhZGVyID0gZmFsc2UsXG59KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgPERlc2t0b3BXcmFwcGVyPlxuICAgICAgICAgICAgICAgIDxNb2RhbFxuICAgICAgICAgICAgICAgICAgICB3aWR0aD0nNDRyZW0nXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSc0MXJlbSdcbiAgICAgICAgICAgICAgICAgICAgaXNfb3Blbj17c2hvd19yaXNrX21vZGFsfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2NlbnRlci1yaXNrLW1vZGFsJ1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVNb2RhbD17aGFuZGxlQWNjZXB0Umlza31cbiAgICAgICAgICAgICAgICAgICAgaGFzX2Nsb3NlX2ljb249e2ZhbHNlfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBpY29uPSdJY1JlZFdhcm5pbmcnIHNpemU9JzYzJyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgYXM9J3AnIHNpemU9J3hzJyBhbGlnbj0nY2VudGVyJyBsaW5lX2hlaWdodD0ncycgY2xhc3NOYW1lPSdyaXNrLWFjY2VwdGFuY2VfX3RleHQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtib2R5X2NvbnRlbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSdidXR0b24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFyZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0PXtidXR0b25fdGV4dCB8fCBsb2NhbGl6ZSgnT0snKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQWNjZXB0Umlza31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgICAgIDwvTW9kYWw+XG4gICAgICAgICAgICA8L0Rlc2t0b3BXcmFwcGVyPlxuICAgICAgICAgICAgPE1vYmlsZVdyYXBwZXI+XG4gICAgICAgICAgICAgICAgPE1vYmlsZURpYWxvZ1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlPXtzaG93X3Jpc2tfbW9kYWx9XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXtoYXNfc3ViX2hlYWRlciA/IGxvY2FsaXplKCdUcmFkaW5nIEV4cGVyaWVuY2UgQXNzZXNzbWVudCcpIDogdGl0bGV9XG4gICAgICAgICAgICAgICAgICAgIHBvcnRhbF9lbGVtZW50X2lkPSdtb2RhbF9yb290J1xuICAgICAgICAgICAgICAgICAgICBoYXNfY2xvc2VfaWNvbj17ZmFsc2V9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8TW9kYWwuQm9keSBjbGFzc05hbWU9J3Jpc2stdG9sZXJhbmNlLW1vZGFsJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtoYXNfc3ViX2hlYWRlciA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPSd4cydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZV9oZWlnaHQ9J3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodD0nYm9sZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXM9J3AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ncmlzay10b2xlcmFuY2UtbW9kYWxfX3RpdGxlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmlzay10b2xlcmFuY2UtbW9kYWxfX3RpdGxlLS1zZXBhcmF0b3InIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmlzay10b2xlcmFuY2UtbW9kYWxfX3dyYXBwZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIGljb249J0ljUmVkV2FybmluZycgc2l6ZT0nNjUnIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgYXM9J3AnIHNpemU9J3hzJyBhbGlnbj0nY2VudGVyJyBsaW5lX2hlaWdodD0nbCcgY2xhc3NOYW1lPSdyaXNrLWFjY2VwdGFuY2VfX3RleHQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Ym9keV9jb250ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDxNb2RhbC5Gb290ZXIgY2xhc3NOYW1lPSdyaXNrLXRvbGVyYW5jZS1tb2RhbF9fZm9vdGVyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSdidXR0b24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFyZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0PXtidXR0b25fdGV4dCB8fCBsb2NhbGl6ZSgnT0snKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQWNjZXB0Umlza31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgICAgIDwvTW9iaWxlRGlhbG9nPlxuICAgICAgICAgICAgPC9Nb2JpbGVXcmFwcGVyPlxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSaXNrVG9sZXJhbmNlV2FybmluZ01vZGFsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Components/trading-assessment/risk-tolerance-warning-modal.jsx\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_13222__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_13222__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_13222__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_13222__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_13222__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_13222__.o(definition, key) && !__nested_webpack_require_13222__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_13222__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_13222__(\"./Components/trading-assessment/risk-tolerance-warning-modal.jsx\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/risk-tolerance-warning-modal.js\n");

/***/ }),

/***/ "../../account/dist/account/js/terms-of-use-config.js":
/*!************************************************************!*\
  !*** ../../account/dist/account/js/terms-of-use-config.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Configs/terms-of-use-config.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"@deriv/translations\\\");\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_translations__WEBPACK_IMPORTED_MODULE_1__);\\n\\n\\nvar terms_of_use_config = {\\n  agreed_tos: {\\n    supported_in: ['svg', 'maltainvest'],\\n    default_value: false\\n  },\\n  agreed_tnc: {\\n    supported_in: ['svg', 'maltainvest'],\\n    default_value: false\\n  }\\n};\\nvar termsOfUseConfig = function termsOfUseConfig(_ref, TermsOfUse) {\\n  var real_account_signup_target = _ref.real_account_signup_target;\\n  var active_title = (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_1__.localize)('Terms of use');\\n  return {\\n    header: {\\n      active_title: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.isDesktop)() ? active_title : null,\\n      title: active_title\\n    },\\n    body: TermsOfUse,\\n    form_value: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getDefaultFields)(real_account_signup_target, terms_of_use_config),\\n    props: {\\n      real_account_signup_target: real_account_signup_target\\n    },\\n    icon: 'IcDashboardTermsOfUse'\\n  };\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (termsOfUseConfig);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db25maWdzL3Rlcm1zLW9mLXVzZS1jb25maWcudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uL0NvbmZpZ3MvdGVybXMtb2YtdXNlLWNvbmZpZy50cz8xODkwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXREZWZhdWx0RmllbGRzLCBpc0Rlc2t0b3AsIFRTY2hlbWEgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnQGRlcml2L3RyYW5zbGF0aW9ucyc7XG5cbmNvbnN0IHRlcm1zX29mX3VzZV9jb25maWc6IFRTY2hlbWEgPSB7XG4gICAgYWdyZWVkX3Rvczoge1xuICAgICAgICBzdXBwb3J0ZWRfaW46IFsnc3ZnJywgJ21hbHRhaW52ZXN0J10sXG4gICAgICAgIGRlZmF1bHRfdmFsdWU6IGZhbHNlLFxuICAgIH0sXG4gICAgYWdyZWVkX3RuYzoge1xuICAgICAgICBzdXBwb3J0ZWRfaW46IFsnc3ZnJywgJ21hbHRhaW52ZXN0J10sXG4gICAgICAgIGRlZmF1bHRfdmFsdWU6IGZhbHNlLFxuICAgIH0sXG59O1xuXG5jb25zdCB0ZXJtc09mVXNlQ29uZmlnID0gKFxuICAgIHsgcmVhbF9hY2NvdW50X3NpZ251cF90YXJnZXQgfTogeyByZWFsX2FjY291bnRfc2lnbnVwX3RhcmdldDogc3RyaW5nIH0sXG4gICAgVGVybXNPZlVzZTogUmVhY3QuQ29tcG9uZW50XG4pID0+IHtcbiAgICBjb25zdCBhY3RpdmVfdGl0bGUgPSBsb2NhbGl6ZSgnVGVybXMgb2YgdXNlJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGVhZGVyOiB7XG4gICAgICAgICAgICBhY3RpdmVfdGl0bGU6IGlzRGVza3RvcCgpID8gYWN0aXZlX3RpdGxlIDogbnVsbCxcbiAgICAgICAgICAgIHRpdGxlOiBhY3RpdmVfdGl0bGUsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IFRlcm1zT2ZVc2UsXG4gICAgICAgIGZvcm1fdmFsdWU6IGdldERlZmF1bHRGaWVsZHMocmVhbF9hY2NvdW50X3NpZ251cF90YXJnZXQsIHRlcm1zX29mX3VzZV9jb25maWcpLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgcmVhbF9hY2NvdW50X3NpZ251cF90YXJnZXQsXG4gICAgICAgIH0sXG4gICAgICAgIGljb246ICdJY0Rhc2hib2FyZFRlcm1zT2ZVc2UnLFxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0ZXJtc09mVXNlQ29uZmlnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Configs/terms-of-use-config.ts\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_5635__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_5635__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_5635__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_5635__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_5635__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_5635__.o(definition, key) && !__nested_webpack_require_5635__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_5635__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_5635__(\"./Configs/terms-of-use-config.ts\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/terms-of-use-config.js\n");

/***/ }),

/***/ "../../account/dist/account/js/terms-of-use.js":
/*!*****************************************************!*\
  !*** ../../account/dist/account/js/terms-of-use.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.ts\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Components/terms-of-use/index.ts\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ Components_terms_of_use)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n;// CONCATENATED MODULE: ../../../node_modules/formik/node_modules/deepmerge/dist/es.js\\nvar isMergeableObject = function isMergeableObject(value) {\\n\\treturn isNonNullObject(value)\\n\\t\\t&& !isSpecial(value)\\n};\\n\\nfunction isNonNullObject(value) {\\n\\treturn !!value && typeof value === 'object'\\n}\\n\\nfunction isSpecial(value) {\\n\\tvar stringValue = Object.prototype.toString.call(value);\\n\\n\\treturn stringValue === '[object RegExp]'\\n\\t\\t|| stringValue === '[object Date]'\\n\\t\\t|| isReactElement(value)\\n}\\n\\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\\n\\nfunction isReactElement(value) {\\n\\treturn value.$$typeof === REACT_ELEMENT_TYPE\\n}\\n\\nfunction emptyTarget(val) {\\n\\treturn Array.isArray(val) ? [] : {}\\n}\\n\\nfunction cloneUnlessOtherwiseSpecified(value, options) {\\n\\treturn (options.clone !== false && options.isMergeableObject(value))\\n\\t\\t? deepmerge(emptyTarget(value), value, options)\\n\\t\\t: value\\n}\\n\\nfunction defaultArrayMerge(target, source, options) {\\n\\treturn target.concat(source).map(function(element) {\\n\\t\\treturn cloneUnlessOtherwiseSpecified(element, options)\\n\\t})\\n}\\n\\nfunction mergeObject(target, source, options) {\\n\\tvar destination = {};\\n\\tif (options.isMergeableObject(target)) {\\n\\t\\tObject.keys(target).forEach(function(key) {\\n\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\\n\\t\\t});\\n\\t}\\n\\tObject.keys(source).forEach(function(key) {\\n\\t\\tif (!options.isMergeableObject(source[key]) || !target[key]) {\\n\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\\n\\t\\t} else {\\n\\t\\t\\tdestination[key] = deepmerge(target[key], source[key], options);\\n\\t\\t}\\n\\t});\\n\\treturn destination\\n}\\n\\nfunction deepmerge(target, source, options) {\\n\\toptions = options || {};\\n\\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\\n\\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\\n\\n\\tvar sourceIsArray = Array.isArray(source);\\n\\tvar targetIsArray = Array.isArray(target);\\n\\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\\n\\n\\tif (!sourceAndTargetTypesMatch) {\\n\\t\\treturn cloneUnlessOtherwiseSpecified(source, options)\\n\\t} else if (sourceIsArray) {\\n\\t\\treturn options.arrayMerge(target, source, options)\\n\\t} else {\\n\\t\\treturn mergeObject(target, source, options)\\n\\t}\\n}\\n\\ndeepmerge.all = function deepmergeAll(array, options) {\\n\\tif (!Array.isArray(array)) {\\n\\t\\tthrow new Error('first argument should be an array')\\n\\t}\\n\\n\\treturn array.reduce(function(prev, next) {\\n\\t\\treturn deepmerge(prev, next, options)\\n\\t}, {})\\n};\\n\\nvar deepmerge_1 = deepmerge;\\n\\n/* harmony default export */ const es = (deepmerge_1);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_freeGlobal.js\\n/** Detect free variable `global` from Node.js. */\\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\\n\\n/* harmony default export */ const _freeGlobal = (freeGlobal);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_root.js\\n\\n\\n/** Detect free variable `self`. */\\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\\n\\n/** Used as a reference to the global object. */\\nvar root = _freeGlobal || freeSelf || Function('return this')();\\n\\n/* harmony default export */ const _root = (root);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Symbol.js\\n\\n\\n/** Built-in value references. */\\nvar _Symbol_Symbol = _root.Symbol;\\n\\n/* harmony default export */ const _Symbol = (_Symbol_Symbol);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getRawTag.js\\n\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _getRawTag_hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar nativeObjectToString = objectProto.toString;\\n\\n/** Built-in value references. */\\nvar symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\\n\\n/**\\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the raw `toStringTag`.\\n */\\nfunction getRawTag(value) {\\n  var isOwn = _getRawTag_hasOwnProperty.call(value, symToStringTag),\\n      tag = value[symToStringTag];\\n\\n  try {\\n    value[symToStringTag] = undefined;\\n    var unmasked = true;\\n  } catch (e) {}\\n\\n  var result = nativeObjectToString.call(value);\\n  if (unmasked) {\\n    if (isOwn) {\\n      value[symToStringTag] = tag;\\n    } else {\\n      delete value[symToStringTag];\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _getRawTag = (getRawTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_objectToString.js\\n/** Used for built-in method references. */\\nvar _objectToString_objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar _objectToString_nativeObjectToString = _objectToString_objectProto.toString;\\n\\n/**\\n * Converts `value` to a string using `Object.prototype.toString`.\\n *\\n * @private\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n */\\nfunction objectToString(value) {\\n  return _objectToString_nativeObjectToString.call(value);\\n}\\n\\n/* harmony default export */ const _objectToString = (objectToString);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseGetTag.js\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar nullTag = '[object Null]',\\n    undefinedTag = '[object Undefined]';\\n\\n/** Built-in value references. */\\nvar _baseGetTag_symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\\n\\n/**\\n * The base implementation of `getTag` without fallbacks for buggy environments.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nfunction baseGetTag(value) {\\n  if (value == null) {\\n    return value === undefined ? undefinedTag : nullTag;\\n  }\\n  return (_baseGetTag_symToStringTag && _baseGetTag_symToStringTag in Object(value))\\n    ? _getRawTag(value)\\n    : _objectToString(value);\\n}\\n\\n/* harmony default export */ const _baseGetTag = (baseGetTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_overArg.js\\n/**\\n * Creates a unary function that invokes `func` with its argument transformed.\\n *\\n * @private\\n * @param {Function} func The function to wrap.\\n * @param {Function} transform The argument transform.\\n * @returns {Function} Returns the new function.\\n */\\nfunction overArg(func, transform) {\\n  return function(arg) {\\n    return func(transform(arg));\\n  };\\n}\\n\\n/* harmony default export */ const _overArg = (overArg);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getPrototype.js\\n\\n\\n/** Built-in value references. */\\nvar getPrototype = _overArg(Object.getPrototypeOf, Object);\\n\\n/* harmony default export */ const _getPrototype = (getPrototype);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isObjectLike.js\\n/**\\n * Checks if `value` is object-like. A value is object-like if it's not `null`\\n * and has a `typeof` result of \\\"object\\\".\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\\n * @example\\n *\\n * _.isObjectLike({});\\n * // => true\\n *\\n * _.isObjectLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isObjectLike(_.noop);\\n * // => false\\n *\\n * _.isObjectLike(null);\\n * // => false\\n */\\nfunction isObjectLike(value) {\\n  return value != null && typeof value == 'object';\\n}\\n\\n/* harmony default export */ const lodash_es_isObjectLike = (isObjectLike);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isPlainObject.js\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar objectTag = '[object Object]';\\n\\n/** Used for built-in method references. */\\nvar funcProto = Function.prototype,\\n    isPlainObject_objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = funcProto.toString;\\n\\n/** Used to check objects for own properties. */\\nvar isPlainObject_hasOwnProperty = isPlainObject_objectProto.hasOwnProperty;\\n\\n/** Used to infer the `Object` constructor. */\\nvar objectCtorString = funcToString.call(Object);\\n\\n/**\\n * Checks if `value` is a plain object, that is, an object created by the\\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.8.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n * }\\n *\\n * _.isPlainObject(new Foo);\\n * // => false\\n *\\n * _.isPlainObject([1, 2, 3]);\\n * // => false\\n *\\n * _.isPlainObject({ 'x': 0, 'y': 0 });\\n * // => true\\n *\\n * _.isPlainObject(Object.create(null));\\n * // => true\\n */\\nfunction isPlainObject(value) {\\n  if (!lodash_es_isObjectLike(value) || _baseGetTag(value) != objectTag) {\\n    return false;\\n  }\\n  var proto = _getPrototype(value);\\n  if (proto === null) {\\n    return true;\\n  }\\n  var Ctor = isPlainObject_hasOwnProperty.call(proto, 'constructor') && proto.constructor;\\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\\n    funcToString.call(Ctor) == objectCtorString;\\n}\\n\\n/* harmony default export */ const lodash_es_isPlainObject = (isPlainObject);\\n\\n// EXTERNAL MODULE: ../../../node_modules/react-fast-compare/index.js\\nvar react_fast_compare = __webpack_require__(\\\"../../../node_modules/react-fast-compare/index.js\\\");\\nvar react_fast_compare_default = /*#__PURE__*/__webpack_require__.n(react_fast_compare);\\n;// CONCATENATED MODULE: ../../../node_modules/tiny-warning/dist/tiny-warning.esm.js\\nvar isProduction = \\\"production\\\" === 'production';\\nfunction warning(condition, message) {\\n  if (!isProduction) {\\n    if (condition) {\\n      return;\\n    }\\n\\n    var text = \\\"Warning: \\\" + message;\\n\\n    if (typeof console !== 'undefined') {\\n      console.warn(text);\\n    }\\n\\n    try {\\n      throw Error(text);\\n    } catch (x) {}\\n  }\\n}\\n\\n/* harmony default export */ const tiny_warning_esm = (warning);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheClear.js\\n/**\\n * Removes all key-value entries from the list cache.\\n *\\n * @private\\n * @name clear\\n * @memberOf ListCache\\n */\\nfunction listCacheClear() {\\n  this.__data__ = [];\\n  this.size = 0;\\n}\\n\\n/* harmony default export */ const _listCacheClear = (listCacheClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/eq.js\\n/**\\n * Performs a\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * comparison between two values to determine if they are equivalent.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\\n * @example\\n *\\n * var object = { 'a': 1 };\\n * var other = { 'a': 1 };\\n *\\n * _.eq(object, object);\\n * // => true\\n *\\n * _.eq(object, other);\\n * // => false\\n *\\n * _.eq('a', 'a');\\n * // => true\\n *\\n * _.eq('a', Object('a'));\\n * // => false\\n *\\n * _.eq(NaN, NaN);\\n * // => true\\n */\\nfunction eq(value, other) {\\n  return value === other || (value !== value && other !== other);\\n}\\n\\n/* harmony default export */ const lodash_es_eq = (eq);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_assocIndexOf.js\\n\\n\\n/**\\n * Gets the index at which the `key` is found in `array` of key-value pairs.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {*} key The key to search for.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction assocIndexOf(array, key) {\\n  var length = array.length;\\n  while (length--) {\\n    if (lodash_es_eq(array[length][0], key)) {\\n      return length;\\n    }\\n  }\\n  return -1;\\n}\\n\\n/* harmony default export */ const _assocIndexOf = (assocIndexOf);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheDelete.js\\n\\n\\n/** Used for built-in method references. */\\nvar arrayProto = Array.prototype;\\n\\n/** Built-in value references. */\\nvar splice = arrayProto.splice;\\n\\n/**\\n * Removes `key` and its value from the list cache.\\n *\\n * @private\\n * @name delete\\n * @memberOf ListCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction listCacheDelete(key) {\\n  var data = this.__data__,\\n      index = _assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    return false;\\n  }\\n  var lastIndex = data.length - 1;\\n  if (index == lastIndex) {\\n    data.pop();\\n  } else {\\n    splice.call(data, index, 1);\\n  }\\n  --this.size;\\n  return true;\\n}\\n\\n/* harmony default export */ const _listCacheDelete = (listCacheDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheGet.js\\n\\n\\n/**\\n * Gets the list cache value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf ListCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction listCacheGet(key) {\\n  var data = this.__data__,\\n      index = _assocIndexOf(data, key);\\n\\n  return index < 0 ? undefined : data[index][1];\\n}\\n\\n/* harmony default export */ const _listCacheGet = (listCacheGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheHas.js\\n\\n\\n/**\\n * Checks if a list cache value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf ListCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction listCacheHas(key) {\\n  return _assocIndexOf(this.__data__, key) > -1;\\n}\\n\\n/* harmony default export */ const _listCacheHas = (listCacheHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheSet.js\\n\\n\\n/**\\n * Sets the list cache `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf ListCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the list cache instance.\\n */\\nfunction listCacheSet(key, value) {\\n  var data = this.__data__,\\n      index = _assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    ++this.size;\\n    data.push([key, value]);\\n  } else {\\n    data[index][1] = value;\\n  }\\n  return this;\\n}\\n\\n/* harmony default export */ const _listCacheSet = (listCacheSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_ListCache.js\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates an list cache object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction ListCache(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `ListCache`.\\nListCache.prototype.clear = _listCacheClear;\\nListCache.prototype['delete'] = _listCacheDelete;\\nListCache.prototype.get = _listCacheGet;\\nListCache.prototype.has = _listCacheHas;\\nListCache.prototype.set = _listCacheSet;\\n\\n/* harmony default export */ const _ListCache = (ListCache);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackClear.js\\n\\n\\n/**\\n * Removes all key-value entries from the stack.\\n *\\n * @private\\n * @name clear\\n * @memberOf Stack\\n */\\nfunction stackClear() {\\n  this.__data__ = new _ListCache;\\n  this.size = 0;\\n}\\n\\n/* harmony default export */ const _stackClear = (stackClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackDelete.js\\n/**\\n * Removes `key` and its value from the stack.\\n *\\n * @private\\n * @name delete\\n * @memberOf Stack\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction stackDelete(key) {\\n  var data = this.__data__,\\n      result = data['delete'](key);\\n\\n  this.size = data.size;\\n  return result;\\n}\\n\\n/* harmony default export */ const _stackDelete = (stackDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackGet.js\\n/**\\n * Gets the stack value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Stack\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction stackGet(key) {\\n  return this.__data__.get(key);\\n}\\n\\n/* harmony default export */ const _stackGet = (stackGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackHas.js\\n/**\\n * Checks if a stack value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Stack\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction stackHas(key) {\\n  return this.__data__.has(key);\\n}\\n\\n/* harmony default export */ const _stackHas = (stackHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isObject.js\\n/**\\n * Checks if `value` is the\\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\\n * @example\\n *\\n * _.isObject({});\\n * // => true\\n *\\n * _.isObject([1, 2, 3]);\\n * // => true\\n *\\n * _.isObject(_.noop);\\n * // => true\\n *\\n * _.isObject(null);\\n * // => false\\n */\\nfunction isObject(value) {\\n  var type = typeof value;\\n  return value != null && (type == 'object' || type == 'function');\\n}\\n\\n/* harmony default export */ const lodash_es_isObject = (isObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isFunction.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar asyncTag = '[object AsyncFunction]',\\n    funcTag = '[object Function]',\\n    genTag = '[object GeneratorFunction]',\\n    proxyTag = '[object Proxy]';\\n\\n/**\\n * Checks if `value` is classified as a `Function` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\\n * @example\\n *\\n * _.isFunction(_);\\n * // => true\\n *\\n * _.isFunction(/abc/);\\n * // => false\\n */\\nfunction isFunction(value) {\\n  if (!lodash_es_isObject(value)) {\\n    return false;\\n  }\\n  // The use of `Object#toString` avoids issues with the `typeof` operator\\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\\n  var tag = _baseGetTag(value);\\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\\n}\\n\\n/* harmony default export */ const lodash_es_isFunction = (isFunction);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_coreJsData.js\\n\\n\\n/** Used to detect overreaching core-js shims. */\\nvar coreJsData = _root[\\\"__core-js_shared__\\\"];\\n\\n/* harmony default export */ const _coreJsData = (coreJsData);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isMasked.js\\n\\n\\n/** Used to detect methods masquerading as native. */\\nvar maskSrcKey = (function() {\\n  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');\\n  return uid ? ('Symbol(src)_1.' + uid) : '';\\n}());\\n\\n/**\\n * Checks if `func` has its source masked.\\n *\\n * @private\\n * @param {Function} func The function to check.\\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\\n */\\nfunction isMasked(func) {\\n  return !!maskSrcKey && (maskSrcKey in func);\\n}\\n\\n/* harmony default export */ const _isMasked = (isMasked);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_toSource.js\\n/** Used for built-in method references. */\\nvar _toSource_funcProto = Function.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar _toSource_funcToString = _toSource_funcProto.toString;\\n\\n/**\\n * Converts `func` to its source code.\\n *\\n * @private\\n * @param {Function} func The function to convert.\\n * @returns {string} Returns the source code.\\n */\\nfunction toSource(func) {\\n  if (func != null) {\\n    try {\\n      return _toSource_funcToString.call(func);\\n    } catch (e) {}\\n    try {\\n      return (func + '');\\n    } catch (e) {}\\n  }\\n  return '';\\n}\\n\\n/* harmony default export */ const _toSource = (toSource);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsNative.js\\n\\n\\n\\n\\n\\n/**\\n * Used to match `RegExp`\\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\\n */\\nvar reRegExpChar = /[\\\\\\\\^$.*+?()[\\\\]{}|]/g;\\n\\n/** Used to detect host constructors (Safari). */\\nvar reIsHostCtor = /^\\\\[object .+?Constructor\\\\]$/;\\n\\n/** Used for built-in method references. */\\nvar _baseIsNative_funcProto = Function.prototype,\\n    _baseIsNative_objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar _baseIsNative_funcToString = _baseIsNative_funcProto.toString;\\n\\n/** Used to check objects for own properties. */\\nvar _baseIsNative_hasOwnProperty = _baseIsNative_objectProto.hasOwnProperty;\\n\\n/** Used to detect if a method is native. */\\nvar reIsNative = RegExp('^' +\\n  _baseIsNative_funcToString.call(_baseIsNative_hasOwnProperty).replace(reRegExpChar, '\\\\\\\\$&')\\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\\\\\\\()| for .+?(?=\\\\\\\\\\\\])/g, '$1.*?') + '$'\\n);\\n\\n/**\\n * The base implementation of `_.isNative` without bad shim checks.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a native function,\\n *  else `false`.\\n */\\nfunction baseIsNative(value) {\\n  if (!lodash_es_isObject(value) || _isMasked(value)) {\\n    return false;\\n  }\\n  var pattern = lodash_es_isFunction(value) ? reIsNative : reIsHostCtor;\\n  return pattern.test(_toSource(value));\\n}\\n\\n/* harmony default export */ const _baseIsNative = (baseIsNative);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getValue.js\\n/**\\n * Gets the value at `key` of `object`.\\n *\\n * @private\\n * @param {Object} [object] The object to query.\\n * @param {string} key The key of the property to get.\\n * @returns {*} Returns the property value.\\n */\\nfunction getValue(object, key) {\\n  return object == null ? undefined : object[key];\\n}\\n\\n/* harmony default export */ const _getValue = (getValue);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getNative.js\\n\\n\\n\\n/**\\n * Gets the native function at `key` of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {string} key The key of the method to get.\\n * @returns {*} Returns the function if it's native, else `undefined`.\\n */\\nfunction getNative(object, key) {\\n  var value = _getValue(object, key);\\n  return _baseIsNative(value) ? value : undefined;\\n}\\n\\n/* harmony default export */ const _getNative = (getNative);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Map.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar Map = _getNative(_root, 'Map');\\n\\n/* harmony default export */ const _Map = (Map);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nativeCreate.js\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar nativeCreate = _getNative(Object, 'create');\\n\\n/* harmony default export */ const _nativeCreate = (nativeCreate);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashClear.js\\n\\n\\n/**\\n * Removes all key-value entries from the hash.\\n *\\n * @private\\n * @name clear\\n * @memberOf Hash\\n */\\nfunction hashClear() {\\n  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};\\n  this.size = 0;\\n}\\n\\n/* harmony default export */ const _hashClear = (hashClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashDelete.js\\n/**\\n * Removes `key` and its value from the hash.\\n *\\n * @private\\n * @name delete\\n * @memberOf Hash\\n * @param {Object} hash The hash to modify.\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction hashDelete(key) {\\n  var result = this.has(key) && delete this.__data__[key];\\n  this.size -= result ? 1 : 0;\\n  return result;\\n}\\n\\n/* harmony default export */ const _hashDelete = (hashDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashGet.js\\n\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/** Used for built-in method references. */\\nvar _hashGet_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _hashGet_hasOwnProperty = _hashGet_objectProto.hasOwnProperty;\\n\\n/**\\n * Gets the hash value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Hash\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction hashGet(key) {\\n  var data = this.__data__;\\n  if (_nativeCreate) {\\n    var result = data[key];\\n    return result === HASH_UNDEFINED ? undefined : result;\\n  }\\n  return _hashGet_hasOwnProperty.call(data, key) ? data[key] : undefined;\\n}\\n\\n/* harmony default export */ const _hashGet = (hashGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashHas.js\\n\\n\\n/** Used for built-in method references. */\\nvar _hashHas_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _hashHas_hasOwnProperty = _hashHas_objectProto.hasOwnProperty;\\n\\n/**\\n * Checks if a hash value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Hash\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction hashHas(key) {\\n  var data = this.__data__;\\n  return _nativeCreate ? (data[key] !== undefined) : _hashHas_hasOwnProperty.call(data, key);\\n}\\n\\n/* harmony default export */ const _hashHas = (hashHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashSet.js\\n\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar _hashSet_HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/**\\n * Sets the hash `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Hash\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the hash instance.\\n */\\nfunction hashSet(key, value) {\\n  var data = this.__data__;\\n  this.size += this.has(key) ? 0 : 1;\\n  data[key] = (_nativeCreate && value === undefined) ? _hashSet_HASH_UNDEFINED : value;\\n  return this;\\n}\\n\\n/* harmony default export */ const _hashSet = (hashSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Hash.js\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates a hash object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Hash(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `Hash`.\\nHash.prototype.clear = _hashClear;\\nHash.prototype['delete'] = _hashDelete;\\nHash.prototype.get = _hashGet;\\nHash.prototype.has = _hashHas;\\nHash.prototype.set = _hashSet;\\n\\n/* harmony default export */ const _Hash = (Hash);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheClear.js\\n\\n\\n\\n\\n/**\\n * Removes all key-value entries from the map.\\n *\\n * @private\\n * @name clear\\n * @memberOf MapCache\\n */\\nfunction mapCacheClear() {\\n  this.size = 0;\\n  this.__data__ = {\\n    'hash': new _Hash,\\n    'map': new (_Map || _ListCache),\\n    'string': new _Hash\\n  };\\n}\\n\\n/* harmony default export */ const _mapCacheClear = (mapCacheClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isKeyable.js\\n/**\\n * Checks if `value` is suitable for use as unique object key.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\\n */\\nfunction isKeyable(value) {\\n  var type = typeof value;\\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\\n    ? (value !== '__proto__')\\n    : (value === null);\\n}\\n\\n/* harmony default export */ const _isKeyable = (isKeyable);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getMapData.js\\n\\n\\n/**\\n * Gets the data for `map`.\\n *\\n * @private\\n * @param {Object} map The map to query.\\n * @param {string} key The reference key.\\n * @returns {*} Returns the map data.\\n */\\nfunction getMapData(map, key) {\\n  var data = map.__data__;\\n  return _isKeyable(key)\\n    ? data[typeof key == 'string' ? 'string' : 'hash']\\n    : data.map;\\n}\\n\\n/* harmony default export */ const _getMapData = (getMapData);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheDelete.js\\n\\n\\n/**\\n * Removes `key` and its value from the map.\\n *\\n * @private\\n * @name delete\\n * @memberOf MapCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction mapCacheDelete(key) {\\n  var result = _getMapData(this, key)['delete'](key);\\n  this.size -= result ? 1 : 0;\\n  return result;\\n}\\n\\n/* harmony default export */ const _mapCacheDelete = (mapCacheDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheGet.js\\n\\n\\n/**\\n * Gets the map value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf MapCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction mapCacheGet(key) {\\n  return _getMapData(this, key).get(key);\\n}\\n\\n/* harmony default export */ const _mapCacheGet = (mapCacheGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheHas.js\\n\\n\\n/**\\n * Checks if a map value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf MapCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction mapCacheHas(key) {\\n  return _getMapData(this, key).has(key);\\n}\\n\\n/* harmony default export */ const _mapCacheHas = (mapCacheHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheSet.js\\n\\n\\n/**\\n * Sets the map `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf MapCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the map cache instance.\\n */\\nfunction mapCacheSet(key, value) {\\n  var data = _getMapData(this, key),\\n      size = data.size;\\n\\n  data.set(key, value);\\n  this.size += data.size == size ? 0 : 1;\\n  return this;\\n}\\n\\n/* harmony default export */ const _mapCacheSet = (mapCacheSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_MapCache.js\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates a map cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction MapCache(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `MapCache`.\\nMapCache.prototype.clear = _mapCacheClear;\\nMapCache.prototype['delete'] = _mapCacheDelete;\\nMapCache.prototype.get = _mapCacheGet;\\nMapCache.prototype.has = _mapCacheHas;\\nMapCache.prototype.set = _mapCacheSet;\\n\\n/* harmony default export */ const _MapCache = (MapCache);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackSet.js\\n\\n\\n\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * Sets the stack `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Stack\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the stack cache instance.\\n */\\nfunction stackSet(key, value) {\\n  var data = this.__data__;\\n  if (data instanceof _ListCache) {\\n    var pairs = data.__data__;\\n    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\\n      pairs.push([key, value]);\\n      this.size = ++data.size;\\n      return this;\\n    }\\n    data = this.__data__ = new _MapCache(pairs);\\n  }\\n  data.set(key, value);\\n  this.size = data.size;\\n  return this;\\n}\\n\\n/* harmony default export */ const _stackSet = (stackSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Stack.js\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates a stack cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Stack(entries) {\\n  var data = this.__data__ = new _ListCache(entries);\\n  this.size = data.size;\\n}\\n\\n// Add methods to `Stack`.\\nStack.prototype.clear = _stackClear;\\nStack.prototype['delete'] = _stackDelete;\\nStack.prototype.get = _stackGet;\\nStack.prototype.has = _stackHas;\\nStack.prototype.set = _stackSet;\\n\\n/* harmony default export */ const _Stack = (Stack);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayEach.js\\n/**\\n * A specialized version of `_.forEach` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayEach(array, iteratee) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length;\\n\\n  while (++index < length) {\\n    if (iteratee(array[index], index, array) === false) {\\n      break;\\n    }\\n  }\\n  return array;\\n}\\n\\n/* harmony default export */ const _arrayEach = (arrayEach);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_defineProperty.js\\n\\n\\nvar defineProperty = (function() {\\n  try {\\n    var func = _getNative(Object, 'defineProperty');\\n    func({}, '', {});\\n    return func;\\n  } catch (e) {}\\n}());\\n\\n/* harmony default export */ const _defineProperty = (defineProperty);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseAssignValue.js\\n\\n\\n/**\\n * The base implementation of `assignValue` and `assignMergeValue` without\\n * value checks.\\n *\\n * @private\\n * @param {Object} object The object to modify.\\n * @param {string} key The key of the property to assign.\\n * @param {*} value The value to assign.\\n */\\nfunction baseAssignValue(object, key, value) {\\n  if (key == '__proto__' && _defineProperty) {\\n    _defineProperty(object, key, {\\n      'configurable': true,\\n      'enumerable': true,\\n      'value': value,\\n      'writable': true\\n    });\\n  } else {\\n    object[key] = value;\\n  }\\n}\\n\\n/* harmony default export */ const _baseAssignValue = (baseAssignValue);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_assignValue.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _assignValue_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _assignValue_hasOwnProperty = _assignValue_objectProto.hasOwnProperty;\\n\\n/**\\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * for equality comparisons.\\n *\\n * @private\\n * @param {Object} object The object to modify.\\n * @param {string} key The key of the property to assign.\\n * @param {*} value The value to assign.\\n */\\nfunction assignValue(object, key, value) {\\n  var objValue = object[key];\\n  if (!(_assignValue_hasOwnProperty.call(object, key) && lodash_es_eq(objValue, value)) ||\\n      (value === undefined && !(key in object))) {\\n    _baseAssignValue(object, key, value);\\n  }\\n}\\n\\n/* harmony default export */ const _assignValue = (assignValue);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copyObject.js\\n\\n\\n\\n/**\\n * Copies properties of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy properties from.\\n * @param {Array} props The property identifiers to copy.\\n * @param {Object} [object={}] The object to copy properties to.\\n * @param {Function} [customizer] The function to customize copied values.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copyObject(source, props, object, customizer) {\\n  var isNew = !object;\\n  object || (object = {});\\n\\n  var index = -1,\\n      length = props.length;\\n\\n  while (++index < length) {\\n    var key = props[index];\\n\\n    var newValue = customizer\\n      ? customizer(object[key], source[key], key, object, source)\\n      : undefined;\\n\\n    if (newValue === undefined) {\\n      newValue = source[key];\\n    }\\n    if (isNew) {\\n      _baseAssignValue(object, key, newValue);\\n    } else {\\n      _assignValue(object, key, newValue);\\n    }\\n  }\\n  return object;\\n}\\n\\n/* harmony default export */ const _copyObject = (copyObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseTimes.js\\n/**\\n * The base implementation of `_.times` without support for iteratee shorthands\\n * or max array length checks.\\n *\\n * @private\\n * @param {number} n The number of times to invoke `iteratee`.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the array of results.\\n */\\nfunction baseTimes(n, iteratee) {\\n  var index = -1,\\n      result = Array(n);\\n\\n  while (++index < n) {\\n    result[index] = iteratee(index);\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseTimes = (baseTimes);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsArguments.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]';\\n\\n/**\\n * The base implementation of `_.isArguments`.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\\n */\\nfunction baseIsArguments(value) {\\n  return lodash_es_isObjectLike(value) && _baseGetTag(value) == argsTag;\\n}\\n\\n/* harmony default export */ const _baseIsArguments = (baseIsArguments);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isArguments.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar isArguments_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar isArguments_hasOwnProperty = isArguments_objectProto.hasOwnProperty;\\n\\n/** Built-in value references. */\\nvar propertyIsEnumerable = isArguments_objectProto.propertyIsEnumerable;\\n\\n/**\\n * Checks if `value` is likely an `arguments` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\\n *  else `false`.\\n * @example\\n *\\n * _.isArguments(function() { return arguments; }());\\n * // => true\\n *\\n * _.isArguments([1, 2, 3]);\\n * // => false\\n */\\nvar isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {\\n  return lodash_es_isObjectLike(value) && isArguments_hasOwnProperty.call(value, 'callee') &&\\n    !propertyIsEnumerable.call(value, 'callee');\\n};\\n\\n/* harmony default export */ const lodash_es_isArguments = (isArguments);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isArray.js\\n/**\\n * Checks if `value` is classified as an `Array` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\\n * @example\\n *\\n * _.isArray([1, 2, 3]);\\n * // => true\\n *\\n * _.isArray(document.body.children);\\n * // => false\\n *\\n * _.isArray('abc');\\n * // => false\\n *\\n * _.isArray(_.noop);\\n * // => false\\n */\\nvar isArray = Array.isArray;\\n\\n/* harmony default export */ const lodash_es_isArray = (isArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/stubFalse.js\\n/**\\n * This method returns `false`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.13.0\\n * @category Util\\n * @returns {boolean} Returns `false`.\\n * @example\\n *\\n * _.times(2, _.stubFalse);\\n * // => [false, false]\\n */\\nfunction stubFalse() {\\n  return false;\\n}\\n\\n/* harmony default export */ const lodash_es_stubFalse = (stubFalse);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isBuffer.js\\n\\n\\n\\n/** Detect free variable `exports`. */\\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar moduleExports = freeModule && freeModule.exports === freeExports;\\n\\n/** Built-in value references. */\\nvar Buffer = moduleExports ? _root.Buffer : undefined;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\\n\\n/**\\n * Checks if `value` is a buffer.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\\n * @example\\n *\\n * _.isBuffer(new Buffer(2));\\n * // => true\\n *\\n * _.isBuffer(new Uint8Array(2));\\n * // => false\\n */\\nvar isBuffer = nativeIsBuffer || lodash_es_stubFalse;\\n\\n/* harmony default export */ const lodash_es_isBuffer = (isBuffer);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isIndex.js\\n/** Used as references for various `Number` constants. */\\nvar MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/** Used to detect unsigned integer values. */\\nvar reIsUint = /^(?:0|[1-9]\\\\d*)$/;\\n\\n/**\\n * Checks if `value` is a valid array-like index.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\\n */\\nfunction isIndex(value, length) {\\n  var type = typeof value;\\n  length = length == null ? MAX_SAFE_INTEGER : length;\\n\\n  return !!length &&\\n    (type == 'number' ||\\n      (type != 'symbol' && reIsUint.test(value))) &&\\n        (value > -1 && value % 1 == 0 && value < length);\\n}\\n\\n/* harmony default export */ const _isIndex = (isIndex);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isLength.js\\n/** Used as references for various `Number` constants. */\\nvar isLength_MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/**\\n * Checks if `value` is a valid array-like length.\\n *\\n * **Note:** This method is loosely based on\\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\\n * @example\\n *\\n * _.isLength(3);\\n * // => true\\n *\\n * _.isLength(Number.MIN_VALUE);\\n * // => false\\n *\\n * _.isLength(Infinity);\\n * // => false\\n *\\n * _.isLength('3');\\n * // => false\\n */\\nfunction isLength(value) {\\n  return typeof value == 'number' &&\\n    value > -1 && value % 1 == 0 && value <= isLength_MAX_SAFE_INTEGER;\\n}\\n\\n/* harmony default export */ const lodash_es_isLength = (isLength);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsTypedArray.js\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _baseIsTypedArray_argsTag = '[object Arguments]',\\n    arrayTag = '[object Array]',\\n    boolTag = '[object Boolean]',\\n    dateTag = '[object Date]',\\n    errorTag = '[object Error]',\\n    _baseIsTypedArray_funcTag = '[object Function]',\\n    mapTag = '[object Map]',\\n    numberTag = '[object Number]',\\n    _baseIsTypedArray_objectTag = '[object Object]',\\n    regexpTag = '[object RegExp]',\\n    setTag = '[object Set]',\\n    stringTag = '[object String]',\\n    weakMapTag = '[object WeakMap]';\\n\\nvar arrayBufferTag = '[object ArrayBuffer]',\\n    dataViewTag = '[object DataView]',\\n    float32Tag = '[object Float32Array]',\\n    float64Tag = '[object Float64Array]',\\n    int8Tag = '[object Int8Array]',\\n    int16Tag = '[object Int16Array]',\\n    int32Tag = '[object Int32Array]',\\n    uint8Tag = '[object Uint8Array]',\\n    uint8ClampedTag = '[object Uint8ClampedArray]',\\n    uint16Tag = '[object Uint16Array]',\\n    uint32Tag = '[object Uint32Array]';\\n\\n/** Used to identify `toStringTag` values of typed arrays. */\\nvar typedArrayTags = {};\\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\\ntypedArrayTags[uint32Tag] = true;\\ntypedArrayTags[_baseIsTypedArray_argsTag] = typedArrayTags[arrayTag] =\\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\\ntypedArrayTags[errorTag] = typedArrayTags[_baseIsTypedArray_funcTag] =\\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\\ntypedArrayTags[_baseIsTypedArray_objectTag] = typedArrayTags[regexpTag] =\\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\\ntypedArrayTags[weakMapTag] = false;\\n\\n/**\\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\\n */\\nfunction baseIsTypedArray(value) {\\n  return lodash_es_isObjectLike(value) &&\\n    lodash_es_isLength(value.length) && !!typedArrayTags[_baseGetTag(value)];\\n}\\n\\n/* harmony default export */ const _baseIsTypedArray = (baseIsTypedArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseUnary.js\\n/**\\n * The base implementation of `_.unary` without support for storing metadata.\\n *\\n * @private\\n * @param {Function} func The function to cap arguments for.\\n * @returns {Function} Returns the new capped function.\\n */\\nfunction baseUnary(func) {\\n  return function(value) {\\n    return func(value);\\n  };\\n}\\n\\n/* harmony default export */ const _baseUnary = (baseUnary);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nodeUtil.js\\n\\n\\n/** Detect free variable `exports`. */\\nvar _nodeUtil_freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar _nodeUtil_freeModule = _nodeUtil_freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar _nodeUtil_moduleExports = _nodeUtil_freeModule && _nodeUtil_freeModule.exports === _nodeUtil_freeExports;\\n\\n/** Detect free variable `process` from Node.js. */\\nvar freeProcess = _nodeUtil_moduleExports && _freeGlobal.process;\\n\\n/** Used to access faster Node.js helpers. */\\nvar nodeUtil = (function() {\\n  try {\\n    // Use `util.types` for Node.js 10+.\\n    var types = _nodeUtil_freeModule && _nodeUtil_freeModule.require && _nodeUtil_freeModule.require('util').types;\\n\\n    if (types) {\\n      return types;\\n    }\\n\\n    // Legacy `process.binding('util')` for Node.js < 10.\\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\\n  } catch (e) {}\\n}());\\n\\n/* harmony default export */ const _nodeUtil = (nodeUtil);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isTypedArray.js\\n\\n\\n\\n\\n/* Node.js helper references. */\\nvar nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;\\n\\n/**\\n * Checks if `value` is classified as a typed array.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\\n * @example\\n *\\n * _.isTypedArray(new Uint8Array);\\n * // => true\\n *\\n * _.isTypedArray([]);\\n * // => false\\n */\\nvar isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;\\n\\n/* harmony default export */ const lodash_es_isTypedArray = (isTypedArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayLikeKeys.js\\n\\n\\n\\n\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _arrayLikeKeys_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _arrayLikeKeys_hasOwnProperty = _arrayLikeKeys_objectProto.hasOwnProperty;\\n\\n/**\\n * Creates an array of the enumerable property names of the array-like `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @param {boolean} inherited Specify returning inherited property names.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction arrayLikeKeys(value, inherited) {\\n  var isArr = lodash_es_isArray(value),\\n      isArg = !isArr && lodash_es_isArguments(value),\\n      isBuff = !isArr && !isArg && lodash_es_isBuffer(value),\\n      isType = !isArr && !isArg && !isBuff && lodash_es_isTypedArray(value),\\n      skipIndexes = isArr || isArg || isBuff || isType,\\n      result = skipIndexes ? _baseTimes(value.length, String) : [],\\n      length = result.length;\\n\\n  for (var key in value) {\\n    if ((inherited || _arrayLikeKeys_hasOwnProperty.call(value, key)) &&\\n        !(skipIndexes && (\\n           // Safari 9 has enumerable `arguments.length` in strict mode.\\n           key == 'length' ||\\n           // Node.js 0.10 has enumerable non-index properties on buffers.\\n           (isBuff && (key == 'offset' || key == 'parent')) ||\\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\\n           // Skip index properties.\\n           _isIndex(key, length)\\n        ))) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _arrayLikeKeys = (arrayLikeKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isPrototype.js\\n/** Used for built-in method references. */\\nvar _isPrototype_objectProto = Object.prototype;\\n\\n/**\\n * Checks if `value` is likely a prototype object.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\\n */\\nfunction isPrototype(value) {\\n  var Ctor = value && value.constructor,\\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || _isPrototype_objectProto;\\n\\n  return value === proto;\\n}\\n\\n/* harmony default export */ const _isPrototype = (isPrototype);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nativeKeys.js\\n\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeKeys = _overArg(Object.keys, Object);\\n\\n/* harmony default export */ const _nativeKeys = (nativeKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseKeys.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _baseKeys_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _baseKeys_hasOwnProperty = _baseKeys_objectProto.hasOwnProperty;\\n\\n/**\\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction baseKeys(object) {\\n  if (!_isPrototype(object)) {\\n    return _nativeKeys(object);\\n  }\\n  var result = [];\\n  for (var key in Object(object)) {\\n    if (_baseKeys_hasOwnProperty.call(object, key) && key != 'constructor') {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseKeys = (baseKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isArrayLike.js\\n\\n\\n\\n/**\\n * Checks if `value` is array-like. A value is considered array-like if it's\\n * not a function and has a `value.length` that's an integer greater than or\\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\\n * @example\\n *\\n * _.isArrayLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isArrayLike(document.body.children);\\n * // => true\\n *\\n * _.isArrayLike('abc');\\n * // => true\\n *\\n * _.isArrayLike(_.noop);\\n * // => false\\n */\\nfunction isArrayLike(value) {\\n  return value != null && lodash_es_isLength(value.length) && !lodash_es_isFunction(value);\\n}\\n\\n/* harmony default export */ const lodash_es_isArrayLike = (isArrayLike);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/keys.js\\n\\n\\n\\n\\n/**\\n * Creates an array of the own enumerable property names of `object`.\\n *\\n * **Note:** Non-object values are coerced to objects. See the\\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\\n * for more details.\\n *\\n * @static\\n * @since 0.1.0\\n * @memberOf _\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.keys(new Foo);\\n * // => ['a', 'b'] (iteration order is not guaranteed)\\n *\\n * _.keys('hi');\\n * // => ['0', '1']\\n */\\nfunction keys(object) {\\n  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object) : _baseKeys(object);\\n}\\n\\n/* harmony default export */ const lodash_es_keys = (keys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseAssign.js\\n\\n\\n\\n/**\\n * The base implementation of `_.assign` without support for multiple sources\\n * or `customizer` functions.\\n *\\n * @private\\n * @param {Object} object The destination object.\\n * @param {Object} source The source object.\\n * @returns {Object} Returns `object`.\\n */\\nfunction baseAssign(object, source) {\\n  return object && _copyObject(source, lodash_es_keys(source), object);\\n}\\n\\n/* harmony default export */ const _baseAssign = (baseAssign);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nativeKeysIn.js\\n/**\\n * This function is like\\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\\n * except that it includes inherited enumerable properties.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction nativeKeysIn(object) {\\n  var result = [];\\n  if (object != null) {\\n    for (var key in Object(object)) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _nativeKeysIn = (nativeKeysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseKeysIn.js\\n\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _baseKeysIn_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _baseKeysIn_hasOwnProperty = _baseKeysIn_objectProto.hasOwnProperty;\\n\\n/**\\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction baseKeysIn(object) {\\n  if (!lodash_es_isObject(object)) {\\n    return _nativeKeysIn(object);\\n  }\\n  var isProto = _isPrototype(object),\\n      result = [];\\n\\n  for (var key in object) {\\n    if (!(key == 'constructor' && (isProto || !_baseKeysIn_hasOwnProperty.call(object, key)))) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseKeysIn = (baseKeysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/keysIn.js\\n\\n\\n\\n\\n/**\\n * Creates an array of the own and inherited enumerable property names of `object`.\\n *\\n * **Note:** Non-object values are coerced to objects.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.keysIn(new Foo);\\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\\n */\\nfunction keysIn(object) {\\n  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);\\n}\\n\\n/* harmony default export */ const lodash_es_keysIn = (keysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseAssignIn.js\\n\\n\\n\\n/**\\n * The base implementation of `_.assignIn` without support for multiple sources\\n * or `customizer` functions.\\n *\\n * @private\\n * @param {Object} object The destination object.\\n * @param {Object} source The source object.\\n * @returns {Object} Returns `object`.\\n */\\nfunction baseAssignIn(object, source) {\\n  return object && _copyObject(source, lodash_es_keysIn(source), object);\\n}\\n\\n/* harmony default export */ const _baseAssignIn = (baseAssignIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneBuffer.js\\n\\n\\n/** Detect free variable `exports`. */\\nvar _cloneBuffer_freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar _cloneBuffer_freeModule = _cloneBuffer_freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar _cloneBuffer_moduleExports = _cloneBuffer_freeModule && _cloneBuffer_freeModule.exports === _cloneBuffer_freeExports;\\n\\n/** Built-in value references. */\\nvar _cloneBuffer_Buffer = _cloneBuffer_moduleExports ? _root.Buffer : undefined,\\n    allocUnsafe = _cloneBuffer_Buffer ? _cloneBuffer_Buffer.allocUnsafe : undefined;\\n\\n/**\\n * Creates a clone of  `buffer`.\\n *\\n * @private\\n * @param {Buffer} buffer The buffer to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Buffer} Returns the cloned buffer.\\n */\\nfunction cloneBuffer(buffer, isDeep) {\\n  if (isDeep) {\\n    return buffer.slice();\\n  }\\n  var length = buffer.length,\\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\\n\\n  buffer.copy(result);\\n  return result;\\n}\\n\\n/* harmony default export */ const _cloneBuffer = (cloneBuffer);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copyArray.js\\n/**\\n * Copies the values of `source` to `array`.\\n *\\n * @private\\n * @param {Array} source The array to copy values from.\\n * @param {Array} [array=[]] The array to copy values to.\\n * @returns {Array} Returns `array`.\\n */\\nfunction copyArray(source, array) {\\n  var index = -1,\\n      length = source.length;\\n\\n  array || (array = Array(length));\\n  while (++index < length) {\\n    array[index] = source[index];\\n  }\\n  return array;\\n}\\n\\n/* harmony default export */ const _copyArray = (copyArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayFilter.js\\n/**\\n * A specialized version of `_.filter` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} predicate The function invoked per iteration.\\n * @returns {Array} Returns the new filtered array.\\n */\\nfunction arrayFilter(array, predicate) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length,\\n      resIndex = 0,\\n      result = [];\\n\\n  while (++index < length) {\\n    var value = array[index];\\n    if (predicate(value, index, array)) {\\n      result[resIndex++] = value;\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _arrayFilter = (arrayFilter);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/stubArray.js\\n/**\\n * This method returns a new empty array.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.13.0\\n * @category Util\\n * @returns {Array} Returns the new empty array.\\n * @example\\n *\\n * var arrays = _.times(2, _.stubArray);\\n *\\n * console.log(arrays);\\n * // => [[], []]\\n *\\n * console.log(arrays[0] === arrays[1]);\\n * // => false\\n */\\nfunction stubArray() {\\n  return [];\\n}\\n\\n/* harmony default export */ const lodash_es_stubArray = (stubArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getSymbols.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _getSymbols_objectProto = Object.prototype;\\n\\n/** Built-in value references. */\\nvar _getSymbols_propertyIsEnumerable = _getSymbols_objectProto.propertyIsEnumerable;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\\n\\n/**\\n * Creates an array of the own enumerable symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of symbols.\\n */\\nvar getSymbols = !nativeGetSymbols ? lodash_es_stubArray : function(object) {\\n  if (object == null) {\\n    return [];\\n  }\\n  object = Object(object);\\n  return _arrayFilter(nativeGetSymbols(object), function(symbol) {\\n    return _getSymbols_propertyIsEnumerable.call(object, symbol);\\n  });\\n};\\n\\n/* harmony default export */ const _getSymbols = (getSymbols);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copySymbols.js\\n\\n\\n\\n/**\\n * Copies own symbols of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy symbols from.\\n * @param {Object} [object={}] The object to copy symbols to.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copySymbols(source, object) {\\n  return _copyObject(source, _getSymbols(source), object);\\n}\\n\\n/* harmony default export */ const _copySymbols = (copySymbols);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayPush.js\\n/**\\n * Appends the elements of `values` to `array`.\\n *\\n * @private\\n * @param {Array} array The array to modify.\\n * @param {Array} values The values to append.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayPush(array, values) {\\n  var index = -1,\\n      length = values.length,\\n      offset = array.length;\\n\\n  while (++index < length) {\\n    array[offset + index] = values[index];\\n  }\\n  return array;\\n}\\n\\n/* harmony default export */ const _arrayPush = (arrayPush);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getSymbolsIn.js\\n\\n\\n\\n\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar _getSymbolsIn_nativeGetSymbols = Object.getOwnPropertySymbols;\\n\\n/**\\n * Creates an array of the own and inherited enumerable symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of symbols.\\n */\\nvar getSymbolsIn = !_getSymbolsIn_nativeGetSymbols ? lodash_es_stubArray : function(object) {\\n  var result = [];\\n  while (object) {\\n    _arrayPush(result, _getSymbols(object));\\n    object = _getPrototype(object);\\n  }\\n  return result;\\n};\\n\\n/* harmony default export */ const _getSymbolsIn = (getSymbolsIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copySymbolsIn.js\\n\\n\\n\\n/**\\n * Copies own and inherited symbols of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy symbols from.\\n * @param {Object} [object={}] The object to copy symbols to.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copySymbolsIn(source, object) {\\n  return _copyObject(source, _getSymbolsIn(source), object);\\n}\\n\\n/* harmony default export */ const _copySymbolsIn = (copySymbolsIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseGetAllKeys.js\\n\\n\\n\\n/**\\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\\n * symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Function} keysFunc The function to get the keys of `object`.\\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\\n  var result = keysFunc(object);\\n  return lodash_es_isArray(object) ? result : _arrayPush(result, symbolsFunc(object));\\n}\\n\\n/* harmony default export */ const _baseGetAllKeys = (baseGetAllKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getAllKeys.js\\n\\n\\n\\n\\n/**\\n * Creates an array of own enumerable property names and symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction getAllKeys(object) {\\n  return _baseGetAllKeys(object, lodash_es_keys, _getSymbols);\\n}\\n\\n/* harmony default export */ const _getAllKeys = (getAllKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getAllKeysIn.js\\n\\n\\n\\n\\n/**\\n * Creates an array of own and inherited enumerable property names and\\n * symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction getAllKeysIn(object) {\\n  return _baseGetAllKeys(object, lodash_es_keysIn, _getSymbolsIn);\\n}\\n\\n/* harmony default export */ const _getAllKeysIn = (getAllKeysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_DataView.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar DataView = _getNative(_root, 'DataView');\\n\\n/* harmony default export */ const _DataView = (DataView);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Promise.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar _Promise_Promise = _getNative(_root, 'Promise');\\n\\n/* harmony default export */ const _Promise = (_Promise_Promise);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Set.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar Set = _getNative(_root, 'Set');\\n\\n/* harmony default export */ const _Set = (Set);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_WeakMap.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar _WeakMap_WeakMap = _getNative(_root, 'WeakMap');\\n\\n/* harmony default export */ const _WeakMap = (_WeakMap_WeakMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getTag.js\\n\\n\\n\\n\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _getTag_mapTag = '[object Map]',\\n    _getTag_objectTag = '[object Object]',\\n    promiseTag = '[object Promise]',\\n    _getTag_setTag = '[object Set]',\\n    _getTag_weakMapTag = '[object WeakMap]';\\n\\nvar _getTag_dataViewTag = '[object DataView]';\\n\\n/** Used to detect maps, sets, and weakmaps. */\\nvar dataViewCtorString = _toSource(_DataView),\\n    mapCtorString = _toSource(_Map),\\n    promiseCtorString = _toSource(_Promise),\\n    setCtorString = _toSource(_Set),\\n    weakMapCtorString = _toSource(_WeakMap);\\n\\n/**\\n * Gets the `toStringTag` of `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nvar getTag = _baseGetTag;\\n\\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\\nif ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != _getTag_dataViewTag) ||\\n    (_Map && getTag(new _Map) != _getTag_mapTag) ||\\n    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||\\n    (_Set && getTag(new _Set) != _getTag_setTag) ||\\n    (_WeakMap && getTag(new _WeakMap) != _getTag_weakMapTag)) {\\n  getTag = function(value) {\\n    var result = _baseGetTag(value),\\n        Ctor = result == _getTag_objectTag ? value.constructor : undefined,\\n        ctorString = Ctor ? _toSource(Ctor) : '';\\n\\n    if (ctorString) {\\n      switch (ctorString) {\\n        case dataViewCtorString: return _getTag_dataViewTag;\\n        case mapCtorString: return _getTag_mapTag;\\n        case promiseCtorString: return promiseTag;\\n        case setCtorString: return _getTag_setTag;\\n        case weakMapCtorString: return _getTag_weakMapTag;\\n      }\\n    }\\n    return result;\\n  };\\n}\\n\\n/* harmony default export */ const _getTag = (getTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_initCloneArray.js\\n/** Used for built-in method references. */\\nvar _initCloneArray_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _initCloneArray_hasOwnProperty = _initCloneArray_objectProto.hasOwnProperty;\\n\\n/**\\n * Initializes an array clone.\\n *\\n * @private\\n * @param {Array} array The array to clone.\\n * @returns {Array} Returns the initialized clone.\\n */\\nfunction initCloneArray(array) {\\n  var length = array.length,\\n      result = new array.constructor(length);\\n\\n  // Add properties assigned by `RegExp#exec`.\\n  if (length && typeof array[0] == 'string' && _initCloneArray_hasOwnProperty.call(array, 'index')) {\\n    result.index = array.index;\\n    result.input = array.input;\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _initCloneArray = (initCloneArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Uint8Array.js\\n\\n\\n/** Built-in value references. */\\nvar Uint8Array = _root.Uint8Array;\\n\\n/* harmony default export */ const _Uint8Array = (Uint8Array);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneArrayBuffer.js\\n\\n\\n/**\\n * Creates a clone of `arrayBuffer`.\\n *\\n * @private\\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\\n * @returns {ArrayBuffer} Returns the cloned array buffer.\\n */\\nfunction cloneArrayBuffer(arrayBuffer) {\\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\\n  new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));\\n  return result;\\n}\\n\\n/* harmony default export */ const _cloneArrayBuffer = (cloneArrayBuffer);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneDataView.js\\n\\n\\n/**\\n * Creates a clone of `dataView`.\\n *\\n * @private\\n * @param {Object} dataView The data view to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned data view.\\n */\\nfunction cloneDataView(dataView, isDeep) {\\n  var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;\\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\\n}\\n\\n/* harmony default export */ const _cloneDataView = (cloneDataView);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneRegExp.js\\n/** Used to match `RegExp` flags from their coerced string values. */\\nvar reFlags = /\\\\w*$/;\\n\\n/**\\n * Creates a clone of `regexp`.\\n *\\n * @private\\n * @param {Object} regexp The regexp to clone.\\n * @returns {Object} Returns the cloned regexp.\\n */\\nfunction cloneRegExp(regexp) {\\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\\n  result.lastIndex = regexp.lastIndex;\\n  return result;\\n}\\n\\n/* harmony default export */ const _cloneRegExp = (cloneRegExp);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneSymbol.js\\n\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = _Symbol ? _Symbol.prototype : undefined,\\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\\n\\n/**\\n * Creates a clone of the `symbol` object.\\n *\\n * @private\\n * @param {Object} symbol The symbol object to clone.\\n * @returns {Object} Returns the cloned symbol object.\\n */\\nfunction cloneSymbol(symbol) {\\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\\n}\\n\\n/* harmony default export */ const _cloneSymbol = (cloneSymbol);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneTypedArray.js\\n\\n\\n/**\\n * Creates a clone of `typedArray`.\\n *\\n * @private\\n * @param {Object} typedArray The typed array to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned typed array.\\n */\\nfunction cloneTypedArray(typedArray, isDeep) {\\n  var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n}\\n\\n/* harmony default export */ const _cloneTypedArray = (cloneTypedArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_initCloneByTag.js\\n\\n\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _initCloneByTag_boolTag = '[object Boolean]',\\n    _initCloneByTag_dateTag = '[object Date]',\\n    _initCloneByTag_mapTag = '[object Map]',\\n    _initCloneByTag_numberTag = '[object Number]',\\n    _initCloneByTag_regexpTag = '[object RegExp]',\\n    _initCloneByTag_setTag = '[object Set]',\\n    _initCloneByTag_stringTag = '[object String]',\\n    symbolTag = '[object Symbol]';\\n\\nvar _initCloneByTag_arrayBufferTag = '[object ArrayBuffer]',\\n    _initCloneByTag_dataViewTag = '[object DataView]',\\n    _initCloneByTag_float32Tag = '[object Float32Array]',\\n    _initCloneByTag_float64Tag = '[object Float64Array]',\\n    _initCloneByTag_int8Tag = '[object Int8Array]',\\n    _initCloneByTag_int16Tag = '[object Int16Array]',\\n    _initCloneByTag_int32Tag = '[object Int32Array]',\\n    _initCloneByTag_uint8Tag = '[object Uint8Array]',\\n    _initCloneByTag_uint8ClampedTag = '[object Uint8ClampedArray]',\\n    _initCloneByTag_uint16Tag = '[object Uint16Array]',\\n    _initCloneByTag_uint32Tag = '[object Uint32Array]';\\n\\n/**\\n * Initializes an object clone based on its `toStringTag`.\\n *\\n * **Note:** This function only supports cloning values with tags of\\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\\n *\\n * @private\\n * @param {Object} object The object to clone.\\n * @param {string} tag The `toStringTag` of the object to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the initialized clone.\\n */\\nfunction initCloneByTag(object, tag, isDeep) {\\n  var Ctor = object.constructor;\\n  switch (tag) {\\n    case _initCloneByTag_arrayBufferTag:\\n      return _cloneArrayBuffer(object);\\n\\n    case _initCloneByTag_boolTag:\\n    case _initCloneByTag_dateTag:\\n      return new Ctor(+object);\\n\\n    case _initCloneByTag_dataViewTag:\\n      return _cloneDataView(object, isDeep);\\n\\n    case _initCloneByTag_float32Tag: case _initCloneByTag_float64Tag:\\n    case _initCloneByTag_int8Tag: case _initCloneByTag_int16Tag: case _initCloneByTag_int32Tag:\\n    case _initCloneByTag_uint8Tag: case _initCloneByTag_uint8ClampedTag: case _initCloneByTag_uint16Tag: case _initCloneByTag_uint32Tag:\\n      return _cloneTypedArray(object, isDeep);\\n\\n    case _initCloneByTag_mapTag:\\n      return new Ctor;\\n\\n    case _initCloneByTag_numberTag:\\n    case _initCloneByTag_stringTag:\\n      return new Ctor(object);\\n\\n    case _initCloneByTag_regexpTag:\\n      return _cloneRegExp(object);\\n\\n    case _initCloneByTag_setTag:\\n      return new Ctor;\\n\\n    case symbolTag:\\n      return _cloneSymbol(object);\\n  }\\n}\\n\\n/* harmony default export */ const _initCloneByTag = (initCloneByTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseCreate.js\\n\\n\\n/** Built-in value references. */\\nvar objectCreate = Object.create;\\n\\n/**\\n * The base implementation of `_.create` without support for assigning\\n * properties to the created object.\\n *\\n * @private\\n * @param {Object} proto The object to inherit from.\\n * @returns {Object} Returns the new object.\\n */\\nvar baseCreate = (function() {\\n  function object() {}\\n  return function(proto) {\\n    if (!lodash_es_isObject(proto)) {\\n      return {};\\n    }\\n    if (objectCreate) {\\n      return objectCreate(proto);\\n    }\\n    object.prototype = proto;\\n    var result = new object;\\n    object.prototype = undefined;\\n    return result;\\n  };\\n}());\\n\\n/* harmony default export */ const _baseCreate = (baseCreate);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_initCloneObject.js\\n\\n\\n\\n\\n/**\\n * Initializes an object clone.\\n *\\n * @private\\n * @param {Object} object The object to clone.\\n * @returns {Object} Returns the initialized clone.\\n */\\nfunction initCloneObject(object) {\\n  return (typeof object.constructor == 'function' && !_isPrototype(object))\\n    ? _baseCreate(_getPrototype(object))\\n    : {};\\n}\\n\\n/* harmony default export */ const _initCloneObject = (initCloneObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsMap.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _baseIsMap_mapTag = '[object Map]';\\n\\n/**\\n * The base implementation of `_.isMap` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\\n */\\nfunction baseIsMap(value) {\\n  return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsMap_mapTag;\\n}\\n\\n/* harmony default export */ const _baseIsMap = (baseIsMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isMap.js\\n\\n\\n\\n\\n/* Node.js helper references. */\\nvar nodeIsMap = _nodeUtil && _nodeUtil.isMap;\\n\\n/**\\n * Checks if `value` is classified as a `Map` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\\n * @example\\n *\\n * _.isMap(new Map);\\n * // => true\\n *\\n * _.isMap(new WeakMap);\\n * // => false\\n */\\nvar isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;\\n\\n/* harmony default export */ const lodash_es_isMap = (isMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsSet.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _baseIsSet_setTag = '[object Set]';\\n\\n/**\\n * The base implementation of `_.isSet` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\\n */\\nfunction baseIsSet(value) {\\n  return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsSet_setTag;\\n}\\n\\n/* harmony default export */ const _baseIsSet = (baseIsSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isSet.js\\n\\n\\n\\n\\n/* Node.js helper references. */\\nvar nodeIsSet = _nodeUtil && _nodeUtil.isSet;\\n\\n/**\\n * Checks if `value` is classified as a `Set` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\\n * @example\\n *\\n * _.isSet(new Set);\\n * // => true\\n *\\n * _.isSet(new WeakSet);\\n * // => false\\n */\\nvar isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;\\n\\n/* harmony default export */ const lodash_es_isSet = (isSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseClone.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/** Used to compose bitmasks for cloning. */\\nvar CLONE_DEEP_FLAG = 1,\\n    CLONE_FLAT_FLAG = 2,\\n    CLONE_SYMBOLS_FLAG = 4;\\n\\n/** `Object#toString` result references. */\\nvar _baseClone_argsTag = '[object Arguments]',\\n    _baseClone_arrayTag = '[object Array]',\\n    _baseClone_boolTag = '[object Boolean]',\\n    _baseClone_dateTag = '[object Date]',\\n    _baseClone_errorTag = '[object Error]',\\n    _baseClone_funcTag = '[object Function]',\\n    _baseClone_genTag = '[object GeneratorFunction]',\\n    _baseClone_mapTag = '[object Map]',\\n    _baseClone_numberTag = '[object Number]',\\n    _baseClone_objectTag = '[object Object]',\\n    _baseClone_regexpTag = '[object RegExp]',\\n    _baseClone_setTag = '[object Set]',\\n    _baseClone_stringTag = '[object String]',\\n    _baseClone_symbolTag = '[object Symbol]',\\n    _baseClone_weakMapTag = '[object WeakMap]';\\n\\nvar _baseClone_arrayBufferTag = '[object ArrayBuffer]',\\n    _baseClone_dataViewTag = '[object DataView]',\\n    _baseClone_float32Tag = '[object Float32Array]',\\n    _baseClone_float64Tag = '[object Float64Array]',\\n    _baseClone_int8Tag = '[object Int8Array]',\\n    _baseClone_int16Tag = '[object Int16Array]',\\n    _baseClone_int32Tag = '[object Int32Array]',\\n    _baseClone_uint8Tag = '[object Uint8Array]',\\n    _baseClone_uint8ClampedTag = '[object Uint8ClampedArray]',\\n    _baseClone_uint16Tag = '[object Uint16Array]',\\n    _baseClone_uint32Tag = '[object Uint32Array]';\\n\\n/** Used to identify `toStringTag` values supported by `_.clone`. */\\nvar cloneableTags = {};\\ncloneableTags[_baseClone_argsTag] = cloneableTags[_baseClone_arrayTag] =\\ncloneableTags[_baseClone_arrayBufferTag] = cloneableTags[_baseClone_dataViewTag] =\\ncloneableTags[_baseClone_boolTag] = cloneableTags[_baseClone_dateTag] =\\ncloneableTags[_baseClone_float32Tag] = cloneableTags[_baseClone_float64Tag] =\\ncloneableTags[_baseClone_int8Tag] = cloneableTags[_baseClone_int16Tag] =\\ncloneableTags[_baseClone_int32Tag] = cloneableTags[_baseClone_mapTag] =\\ncloneableTags[_baseClone_numberTag] = cloneableTags[_baseClone_objectTag] =\\ncloneableTags[_baseClone_regexpTag] = cloneableTags[_baseClone_setTag] =\\ncloneableTags[_baseClone_stringTag] = cloneableTags[_baseClone_symbolTag] =\\ncloneableTags[_baseClone_uint8Tag] = cloneableTags[_baseClone_uint8ClampedTag] =\\ncloneableTags[_baseClone_uint16Tag] = cloneableTags[_baseClone_uint32Tag] = true;\\ncloneableTags[_baseClone_errorTag] = cloneableTags[_baseClone_funcTag] =\\ncloneableTags[_baseClone_weakMapTag] = false;\\n\\n/**\\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\\n * traversed objects.\\n *\\n * @private\\n * @param {*} value The value to clone.\\n * @param {boolean} bitmask The bitmask flags.\\n *  1 - Deep clone\\n *  2 - Flatten inherited properties\\n *  4 - Clone symbols\\n * @param {Function} [customizer] The function to customize cloning.\\n * @param {string} [key] The key of `value`.\\n * @param {Object} [object] The parent object of `value`.\\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\\n * @returns {*} Returns the cloned value.\\n */\\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\\n  var result,\\n      isDeep = bitmask & CLONE_DEEP_FLAG,\\n      isFlat = bitmask & CLONE_FLAT_FLAG,\\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\\n\\n  if (customizer) {\\n    result = object ? customizer(value, key, object, stack) : customizer(value);\\n  }\\n  if (result !== undefined) {\\n    return result;\\n  }\\n  if (!lodash_es_isObject(value)) {\\n    return value;\\n  }\\n  var isArr = lodash_es_isArray(value);\\n  if (isArr) {\\n    result = _initCloneArray(value);\\n    if (!isDeep) {\\n      return _copyArray(value, result);\\n    }\\n  } else {\\n    var tag = _getTag(value),\\n        isFunc = tag == _baseClone_funcTag || tag == _baseClone_genTag;\\n\\n    if (lodash_es_isBuffer(value)) {\\n      return _cloneBuffer(value, isDeep);\\n    }\\n    if (tag == _baseClone_objectTag || tag == _baseClone_argsTag || (isFunc && !object)) {\\n      result = (isFlat || isFunc) ? {} : _initCloneObject(value);\\n      if (!isDeep) {\\n        return isFlat\\n          ? _copySymbolsIn(value, _baseAssignIn(result, value))\\n          : _copySymbols(value, _baseAssign(result, value));\\n      }\\n    } else {\\n      if (!cloneableTags[tag]) {\\n        return object ? value : {};\\n      }\\n      result = _initCloneByTag(value, tag, isDeep);\\n    }\\n  }\\n  // Check for circular references and return its corresponding clone.\\n  stack || (stack = new _Stack);\\n  var stacked = stack.get(value);\\n  if (stacked) {\\n    return stacked;\\n  }\\n  stack.set(value, result);\\n\\n  if (lodash_es_isSet(value)) {\\n    value.forEach(function(subValue) {\\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n    });\\n  } else if (lodash_es_isMap(value)) {\\n    value.forEach(function(subValue, key) {\\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\\n    });\\n  }\\n\\n  var keysFunc = isFull\\n    ? (isFlat ? _getAllKeysIn : _getAllKeys)\\n    : (isFlat ? lodash_es_keysIn : lodash_es_keys);\\n\\n  var props = isArr ? undefined : keysFunc(value);\\n  _arrayEach(props || value, function(subValue, key) {\\n    if (props) {\\n      key = subValue;\\n      subValue = value[key];\\n    }\\n    // Recursively populate clone (susceptible to call stack limits).\\n    _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\\n  });\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseClone = (baseClone);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/clone.js\\n\\n\\n/** Used to compose bitmasks for cloning. */\\nvar clone_CLONE_SYMBOLS_FLAG = 4;\\n\\n/**\\n * Creates a shallow clone of `value`.\\n *\\n * **Note:** This method is loosely based on the\\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\\n * arrays. The own enumerable properties of `arguments` objects are cloned\\n * as plain objects. An empty object is returned for uncloneable values such\\n * as error objects, functions, DOM nodes, and WeakMaps.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to clone.\\n * @returns {*} Returns the cloned value.\\n * @see _.cloneDeep\\n * @example\\n *\\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\\n *\\n * var shallow = _.clone(objects);\\n * console.log(shallow[0] === objects[0]);\\n * // => true\\n */\\nfunction clone(value) {\\n  return _baseClone(value, clone_CLONE_SYMBOLS_FLAG);\\n}\\n\\n/* harmony default export */ const lodash_es_clone = (clone);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayMap.js\\n/**\\n * A specialized version of `_.map` for arrays without support for iteratee\\n * shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the new mapped array.\\n */\\nfunction arrayMap(array, iteratee) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length,\\n      result = Array(length);\\n\\n  while (++index < length) {\\n    result[index] = iteratee(array[index], index, array);\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _arrayMap = (arrayMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isSymbol.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar isSymbol_symbolTag = '[object Symbol]';\\n\\n/**\\n * Checks if `value` is classified as a `Symbol` primitive or object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\\n * @example\\n *\\n * _.isSymbol(Symbol.iterator);\\n * // => true\\n *\\n * _.isSymbol('abc');\\n * // => false\\n */\\nfunction isSymbol(value) {\\n  return typeof value == 'symbol' ||\\n    (lodash_es_isObjectLike(value) && _baseGetTag(value) == isSymbol_symbolTag);\\n}\\n\\n/* harmony default export */ const lodash_es_isSymbol = (isSymbol);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/memoize.js\\n\\n\\n/** Error message constants. */\\nvar FUNC_ERROR_TEXT = 'Expected a function';\\n\\n/**\\n * Creates a function that memoizes the result of `func`. If `resolver` is\\n * provided, it determines the cache key for storing the result based on the\\n * arguments provided to the memoized function. By default, the first argument\\n * provided to the memoized function is used as the map cache key. The `func`\\n * is invoked with the `this` binding of the memoized function.\\n *\\n * **Note:** The cache is exposed as the `cache` property on the memoized\\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\\n * constructor with one whose instances implement the\\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to have its output memoized.\\n * @param {Function} [resolver] The function to resolve the cache key.\\n * @returns {Function} Returns the new memoized function.\\n * @example\\n *\\n * var object = { 'a': 1, 'b': 2 };\\n * var other = { 'c': 3, 'd': 4 };\\n *\\n * var values = _.memoize(_.values);\\n * values(object);\\n * // => [1, 2]\\n *\\n * values(other);\\n * // => [3, 4]\\n *\\n * object.a = 2;\\n * values(object);\\n * // => [1, 2]\\n *\\n * // Modify the result cache.\\n * values.cache.set(object, ['a', 'b']);\\n * values(object);\\n * // => ['a', 'b']\\n *\\n * // Replace `_.memoize.Cache`.\\n * _.memoize.Cache = WeakMap;\\n */\\nfunction memoize(func, resolver) {\\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\\n    throw new TypeError(FUNC_ERROR_TEXT);\\n  }\\n  var memoized = function() {\\n    var args = arguments,\\n        key = resolver ? resolver.apply(this, args) : args[0],\\n        cache = memoized.cache;\\n\\n    if (cache.has(key)) {\\n      return cache.get(key);\\n    }\\n    var result = func.apply(this, args);\\n    memoized.cache = cache.set(key, result) || cache;\\n    return result;\\n  };\\n  memoized.cache = new (memoize.Cache || _MapCache);\\n  return memoized;\\n}\\n\\n// Expose `MapCache`.\\nmemoize.Cache = _MapCache;\\n\\n/* harmony default export */ const lodash_es_memoize = (memoize);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_memoizeCapped.js\\n\\n\\n/** Used as the maximum memoize cache size. */\\nvar MAX_MEMOIZE_SIZE = 500;\\n\\n/**\\n * A specialized version of `_.memoize` which clears the memoized function's\\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\\n *\\n * @private\\n * @param {Function} func The function to have its output memoized.\\n * @returns {Function} Returns the new memoized function.\\n */\\nfunction memoizeCapped(func) {\\n  var result = lodash_es_memoize(func, function(key) {\\n    if (cache.size === MAX_MEMOIZE_SIZE) {\\n      cache.clear();\\n    }\\n    return key;\\n  });\\n\\n  var cache = result.cache;\\n  return result;\\n}\\n\\n/* harmony default export */ const _memoizeCapped = (memoizeCapped);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stringToPath.js\\n\\n\\n/** Used to match property names within property paths. */\\nvar rePropName = /[^.[\\\\]]+|\\\\[(?:(-?\\\\d+(?:\\\\.\\\\d+)?)|([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2)\\\\]|(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))/g;\\n\\n/** Used to match backslashes in property paths. */\\nvar reEscapeChar = /\\\\\\\\(\\\\\\\\)?/g;\\n\\n/**\\n * Converts `string` to a property path array.\\n *\\n * @private\\n * @param {string} string The string to convert.\\n * @returns {Array} Returns the property path array.\\n */\\nvar stringToPath = _memoizeCapped(function(string) {\\n  var result = [];\\n  if (string.charCodeAt(0) === 46 /* . */) {\\n    result.push('');\\n  }\\n  string.replace(rePropName, function(match, number, quote, subString) {\\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\\n  });\\n  return result;\\n});\\n\\n/* harmony default export */ const _stringToPath = (stringToPath);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_toKey.js\\n\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/**\\n * Converts `value` to a string key if it's not a string or symbol.\\n *\\n * @private\\n * @param {*} value The value to inspect.\\n * @returns {string|symbol} Returns the key.\\n */\\nfunction toKey(value) {\\n  if (typeof value == 'string' || lodash_es_isSymbol(value)) {\\n    return value;\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\\n}\\n\\n/* harmony default export */ const _toKey = (toKey);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseToString.js\\n\\n\\n\\n\\n\\n/** Used as references for various `Number` constants. */\\nvar _baseToString_INFINITY = 1 / 0;\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar _baseToString_symbolProto = _Symbol ? _Symbol.prototype : undefined,\\n    symbolToString = _baseToString_symbolProto ? _baseToString_symbolProto.toString : undefined;\\n\\n/**\\n * The base implementation of `_.toString` which doesn't convert nullish\\n * values to empty strings.\\n *\\n * @private\\n * @param {*} value The value to process.\\n * @returns {string} Returns the string.\\n */\\nfunction baseToString(value) {\\n  // Exit early for strings to avoid a performance hit in some environments.\\n  if (typeof value == 'string') {\\n    return value;\\n  }\\n  if (lodash_es_isArray(value)) {\\n    // Recursively convert values (susceptible to call stack limits).\\n    return _arrayMap(value, baseToString) + '';\\n  }\\n  if (lodash_es_isSymbol(value)) {\\n    return symbolToString ? symbolToString.call(value) : '';\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -_baseToString_INFINITY) ? '-0' : result;\\n}\\n\\n/* harmony default export */ const _baseToString = (baseToString);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/toString.js\\n\\n\\n/**\\n * Converts `value` to a string. An empty string is returned for `null`\\n * and `undefined` values. The sign of `-0` is preserved.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n * @example\\n *\\n * _.toString(null);\\n * // => ''\\n *\\n * _.toString(-0);\\n * // => '-0'\\n *\\n * _.toString([1, 2, 3]);\\n * // => '1,2,3'\\n */\\nfunction toString_toString(value) {\\n  return value == null ? '' : _baseToString(value);\\n}\\n\\n/* harmony default export */ const lodash_es_toString = (toString_toString);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/toPath.js\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Converts `value` to a property path array.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Util\\n * @param {*} value The value to convert.\\n * @returns {Array} Returns the new property path array.\\n * @example\\n *\\n * _.toPath('a.b.c');\\n * // => ['a', 'b', 'c']\\n *\\n * _.toPath('a[0].b.c');\\n * // => ['a', '0', 'b', 'c']\\n */\\nfunction toPath(value) {\\n  if (lodash_es_isArray(value)) {\\n    return _arrayMap(value, _toKey);\\n  }\\n  return lodash_es_isSymbol(value) ? [value] : _copyArray(_stringToPath(lodash_es_toString(value)));\\n}\\n\\n/* harmony default export */ const lodash_es_toPath = (toPath);\\n\\n// EXTERNAL MODULE: ../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\\nvar hoist_non_react_statics_cjs = __webpack_require__(\\\"../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\\\");\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/cloneDeep.js\\n\\n\\n/** Used to compose bitmasks for cloning. */\\nvar cloneDeep_CLONE_DEEP_FLAG = 1,\\n    cloneDeep_CLONE_SYMBOLS_FLAG = 4;\\n\\n/**\\n * This method is like `_.clone` except that it recursively clones `value`.\\n *\\n * @static\\n * @memberOf _\\n * @since 1.0.0\\n * @category Lang\\n * @param {*} value The value to recursively clone.\\n * @returns {*} Returns the deep cloned value.\\n * @see _.clone\\n * @example\\n *\\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\\n *\\n * var deep = _.cloneDeep(objects);\\n * console.log(deep[0] === objects[0]);\\n * // => false\\n */\\nfunction cloneDeep(value) {\\n  return _baseClone(value, cloneDeep_CLONE_DEEP_FLAG | cloneDeep_CLONE_SYMBOLS_FLAG);\\n}\\n\\n/* harmony default export */ const lodash_es_cloneDeep = (cloneDeep);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/formik/dist/formik.esm.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction _extends() {\\n  _extends = Object.assign || function (target) {\\n    for (var i = 1; i < arguments.length; i++) {\\n      var source = arguments[i];\\n\\n      for (var key in source) {\\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\\n          target[key] = source[key];\\n        }\\n      }\\n    }\\n\\n    return target;\\n  };\\n\\n  return _extends.apply(this, arguments);\\n}\\n\\nfunction _inheritsLoose(subClass, superClass) {\\n  subClass.prototype = Object.create(superClass.prototype);\\n  subClass.prototype.constructor = subClass;\\n  subClass.__proto__ = superClass;\\n}\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) {\\n  if (source == null) return {};\\n  var target = {};\\n  var sourceKeys = Object.keys(source);\\n  var key, i;\\n\\n  for (i = 0; i < sourceKeys.length; i++) {\\n    key = sourceKeys[i];\\n    if (excluded.indexOf(key) >= 0) continue;\\n    target[key] = source[key];\\n  }\\n\\n  return target;\\n}\\n\\nfunction _assertThisInitialized(self) {\\n  if (self === void 0) {\\n    throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\");\\n  }\\n\\n  return self;\\n}\\n\\nvar FormikContext = /*#__PURE__*/(0,external_react_.createContext)(undefined);\\nFormikContext.displayName = 'FormikContext';\\nvar FormikProvider = FormikContext.Provider;\\nvar FormikConsumer = FormikContext.Consumer;\\nfunction useFormikContext() {\\n  var formik = (0,external_react_.useContext)(FormikContext);\\n  !!!formik ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n  return formik;\\n}\\n\\n/** @private is the value an empty array? */\\n\\nvar isEmptyArray = function isEmptyArray(value) {\\n  return Array.isArray(value) && value.length === 0;\\n};\\n/** @private is the given object a Function? */\\n\\nvar formik_esm_isFunction = function isFunction(obj) {\\n  return typeof obj === 'function';\\n};\\n/** @private is the given object an Object? */\\n\\nvar formik_esm_isObject = function isObject(obj) {\\n  return obj !== null && typeof obj === 'object';\\n};\\n/** @private is the given object an integer? */\\n\\nvar isInteger = function isInteger(obj) {\\n  return String(Math.floor(Number(obj))) === obj;\\n};\\n/** @private is the given object a string? */\\n\\nvar isString = function isString(obj) {\\n  return Object.prototype.toString.call(obj) === '[object String]';\\n};\\n/** @private is the given object a NaN? */\\n// eslint-disable-next-line no-self-compare\\n\\nvar isNaN$1 = function isNaN(obj) {\\n  return obj !== obj;\\n};\\n/** @private Does a React component have exactly 0 children? */\\n\\nvar isEmptyChildren = function isEmptyChildren(children) {\\n  return external_react_.Children.count(children) === 0;\\n};\\n/** @private is the given object/value a promise? */\\n\\nvar isPromise = function isPromise(value) {\\n  return formik_esm_isObject(value) && formik_esm_isFunction(value.then);\\n};\\n/** @private is the given object/value a type of synthetic event? */\\n\\nvar isInputEvent = function isInputEvent(value) {\\n  return value && formik_esm_isObject(value) && formik_esm_isObject(value.target);\\n};\\n/**\\r\\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\\r\\n * not safe to call document.activeElement if there is nothing focused.\\r\\n *\\r\\n * The activeElement will be null only if the document or document body is not\\r\\n * yet defined.\\r\\n *\\r\\n * @param {?Document} doc Defaults to current document.\\r\\n * @return {Element | null}\\r\\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\\r\\n */\\n\\nfunction getActiveElement(doc) {\\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\\n\\n  if (typeof doc === 'undefined') {\\n    return null;\\n  }\\n\\n  try {\\n    return doc.activeElement || doc.body;\\n  } catch (e) {\\n    return doc.body;\\n  }\\n}\\n/**\\r\\n * Deeply get a value from an object via its path.\\r\\n */\\n\\nfunction getIn(obj, key, def, p) {\\n  if (p === void 0) {\\n    p = 0;\\n  }\\n\\n  var path = lodash_es_toPath(key);\\n\\n  while (obj && p < path.length) {\\n    obj = obj[path[p++]];\\n  } // check if path is not in the end\\n\\n\\n  if (p !== path.length && !obj) {\\n    return def;\\n  }\\n\\n  return obj === undefined ? def : obj;\\n}\\n/**\\r\\n * Deeply set a value from in object via it's path. If the value at `path`\\r\\n * has changed, return a shallow copy of obj with `value` set at `path`.\\r\\n * If `value` has not changed, return the original `obj`.\\r\\n *\\r\\n * Existing objects / arrays along `path` are also shallow copied. Sibling\\r\\n * objects along path retain the same internal js reference. Since new\\r\\n * objects / arrays are only created along `path`, we can test if anything\\r\\n * changed in a nested structure by comparing the object's reference in\\r\\n * the old and new object, similar to how russian doll cache invalidation\\r\\n * works.\\r\\n *\\r\\n * In earlier versions of this function, which used cloneDeep, there were\\r\\n * issues whereby settings a nested value would mutate the parent\\r\\n * instead of creating a new object. `clone` avoids that bug making a\\r\\n * shallow copy of the objects along the update path\\r\\n * so no object is mutated in place.\\r\\n *\\r\\n * Before changing this function, please read through the following\\r\\n * discussions.\\r\\n *\\r\\n * @see https://github.com/developit/linkstate\\r\\n * @see https://github.com/jaredpalmer/formik/pull/123\\r\\n */\\n\\nfunction setIn(obj, path, value) {\\n  var res = lodash_es_clone(obj); // this keeps inheritance when obj is a class\\n\\n  var resVal = res;\\n  var i = 0;\\n  var pathArray = lodash_es_toPath(path);\\n\\n  for (; i < pathArray.length - 1; i++) {\\n    var currentPath = pathArray[i];\\n    var currentObj = getIn(obj, pathArray.slice(0, i + 1));\\n\\n    if (currentObj && (formik_esm_isObject(currentObj) || Array.isArray(currentObj))) {\\n      resVal = resVal[currentPath] = lodash_es_clone(currentObj);\\n    } else {\\n      var nextPath = pathArray[i + 1];\\n      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\\n    }\\n  } // Return original object if new value is the same as current\\n\\n\\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\\n    return obj;\\n  }\\n\\n  if (value === undefined) {\\n    delete resVal[pathArray[i]];\\n  } else {\\n    resVal[pathArray[i]] = value;\\n  } // If the path array has a single element, the loop did not run.\\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\\n\\n\\n  if (i === 0 && value === undefined) {\\n    delete res[pathArray[i]];\\n  }\\n\\n  return res;\\n}\\n/**\\r\\n * Recursively a set the same value for all keys and arrays nested object, cloning\\r\\n * @param object\\r\\n * @param value\\r\\n * @param visited\\r\\n * @param response\\r\\n */\\n\\nfunction setNestedObjectValues(object, value, visited, response) {\\n  if (visited === void 0) {\\n    visited = new WeakMap();\\n  }\\n\\n  if (response === void 0) {\\n    response = {};\\n  }\\n\\n  for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {\\n    var k = _Object$keys[_i];\\n    var val = object[k];\\n\\n    if (formik_esm_isObject(val)) {\\n      if (!visited.get(val)) {\\n        visited.set(val, true); // In order to keep array values consistent for both dot path  and\\n        // bracket syntax, we need to check if this is an array so that\\n        // this will output  { friends: [true] } and not { friends: { \\\"0\\\": true } }\\n\\n        response[k] = Array.isArray(val) ? [] : {};\\n        setNestedObjectValues(val, value, visited, response[k]);\\n      }\\n    } else {\\n      response[k] = value;\\n    }\\n  }\\n\\n  return response;\\n}\\n\\nfunction formikReducer(state, msg) {\\n  switch (msg.type) {\\n    case 'SET_VALUES':\\n      return _extends({}, state, {\\n        values: msg.payload\\n      });\\n\\n    case 'SET_TOUCHED':\\n      return _extends({}, state, {\\n        touched: msg.payload\\n      });\\n\\n    case 'SET_ERRORS':\\n      if (react_fast_compare_default()(state.errors, msg.payload)) {\\n        return state;\\n      }\\n\\n      return _extends({}, state, {\\n        errors: msg.payload\\n      });\\n\\n    case 'SET_STATUS':\\n      return _extends({}, state, {\\n        status: msg.payload\\n      });\\n\\n    case 'SET_ISSUBMITTING':\\n      return _extends({}, state, {\\n        isSubmitting: msg.payload\\n      });\\n\\n    case 'SET_ISVALIDATING':\\n      return _extends({}, state, {\\n        isValidating: msg.payload\\n      });\\n\\n    case 'SET_FIELD_VALUE':\\n      return _extends({}, state, {\\n        values: setIn(state.values, msg.payload.field, msg.payload.value)\\n      });\\n\\n    case 'SET_FIELD_TOUCHED':\\n      return _extends({}, state, {\\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value)\\n      });\\n\\n    case 'SET_FIELD_ERROR':\\n      return _extends({}, state, {\\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value)\\n      });\\n\\n    case 'RESET_FORM':\\n      return _extends({}, state, msg.payload);\\n\\n    case 'SET_FORMIK_STATE':\\n      return msg.payload(state);\\n\\n    case 'SUBMIT_ATTEMPT':\\n      return _extends({}, state, {\\n        touched: setNestedObjectValues(state.values, true),\\n        isSubmitting: true,\\n        submitCount: state.submitCount + 1\\n      });\\n\\n    case 'SUBMIT_FAILURE':\\n      return _extends({}, state, {\\n        isSubmitting: false\\n      });\\n\\n    case 'SUBMIT_SUCCESS':\\n      return _extends({}, state, {\\n        isSubmitting: false\\n      });\\n\\n    default:\\n      return state;\\n  }\\n} // Initial empty states // objects\\n\\n\\nvar emptyErrors = {};\\nvar emptyTouched = {};\\nfunction useFormik(_ref) {\\n  var _ref$validateOnChange = _ref.validateOnChange,\\n      validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange,\\n      _ref$validateOnBlur = _ref.validateOnBlur,\\n      validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur,\\n      _ref$validateOnMount = _ref.validateOnMount,\\n      validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount,\\n      isInitialValid = _ref.isInitialValid,\\n      _ref$enableReinitiali = _ref.enableReinitialize,\\n      enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali,\\n      onSubmit = _ref.onSubmit,\\n      rest = _objectWithoutPropertiesLoose(_ref, [\\\"validateOnChange\\\", \\\"validateOnBlur\\\", \\\"validateOnMount\\\", \\\"isInitialValid\\\", \\\"enableReinitialize\\\", \\\"onSubmit\\\"]);\\n\\n  var props = _extends({\\n    validateOnChange: validateOnChange,\\n    validateOnBlur: validateOnBlur,\\n    validateOnMount: validateOnMount,\\n    onSubmit: onSubmit\\n  }, rest);\\n\\n  var initialValues = (0,external_react_.useRef)(props.initialValues);\\n  var initialErrors = (0,external_react_.useRef)(props.initialErrors || emptyErrors);\\n  var initialTouched = (0,external_react_.useRef)(props.initialTouched || emptyTouched);\\n  var initialStatus = (0,external_react_.useRef)(props.initialStatus);\\n  var isMounted = (0,external_react_.useRef)(false);\\n  var fieldRegistry = (0,external_react_.useRef)({});\\n\\n  if (false) {}\\n\\n  (0,external_react_.useEffect)(function () {\\n    isMounted.current = true;\\n    return function () {\\n      isMounted.current = false;\\n    };\\n  }, []);\\n\\n  var _React$useState = (0,external_react_.useState)(0),\\n      setIteration = _React$useState[1];\\n\\n  var stateRef = (0,external_react_.useRef)({\\n    values: props.initialValues,\\n    errors: props.initialErrors || emptyErrors,\\n    touched: props.initialTouched || emptyTouched,\\n    status: props.initialStatus,\\n    isSubmitting: false,\\n    isValidating: false,\\n    submitCount: 0\\n  });\\n  var state = stateRef.current;\\n  var dispatch = (0,external_react_.useCallback)(function (action) {\\n    var prev = stateRef.current;\\n    stateRef.current = formikReducer(prev, action); // force rerender\\n\\n    if (prev !== stateRef.current) setIteration(function (x) {\\n      return x + 1;\\n    });\\n  }, []);\\n  var runValidateHandler = (0,external_react_.useCallback)(function (values, field) {\\n    return new Promise(function (resolve, reject) {\\n      var maybePromisedErrors = props.validate(values, field);\\n\\n      if (maybePromisedErrors == null) {\\n        // use loose null check here on purpose\\n        resolve(emptyErrors);\\n      } else if (isPromise(maybePromisedErrors)) {\\n        maybePromisedErrors.then(function (errors) {\\n          resolve(errors || emptyErrors);\\n        }, function (actualException) {\\n          if (false) {}\\n\\n          reject(actualException);\\n        });\\n      } else {\\n        resolve(maybePromisedErrors);\\n      }\\n    });\\n  }, [props.validate]);\\n  /**\\r\\n   * Run validation against a Yup schema and optionally run a function if successful\\r\\n   */\\n\\n  var runValidationSchema = (0,external_react_.useCallback)(function (values, field) {\\n    var validationSchema = props.validationSchema;\\n    var schema = formik_esm_isFunction(validationSchema) ? validationSchema(field) : validationSchema;\\n    var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);\\n    return new Promise(function (resolve, reject) {\\n      promise.then(function () {\\n        resolve(emptyErrors);\\n      }, function (err) {\\n        // Yup will throw a validation error if validation fails. We catch those and\\n        // resolve them into Formik errors. We can sniff if something is a Yup error\\n        // by checking error.name.\\n        // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\\n        if (err.name === 'ValidationError') {\\n          resolve(yupToFormErrors(err));\\n        } else {\\n          // We throw any other errors\\n          if (false) {}\\n\\n          reject(err);\\n        }\\n      });\\n    });\\n  }, [props.validationSchema]);\\n  var runSingleFieldLevelValidation = (0,external_react_.useCallback)(function (field, value) {\\n    return new Promise(function (resolve) {\\n      return resolve(fieldRegistry.current[field].validate(value));\\n    });\\n  }, []);\\n  var runFieldLevelValidations = (0,external_react_.useCallback)(function (values) {\\n    var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function (f) {\\n      return formik_esm_isFunction(fieldRegistry.current[f].validate);\\n    }); // Construct an array with all of the field validation functions\\n\\n    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function (f) {\\n      return runSingleFieldLevelValidation(f, getIn(values, f));\\n    }) : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\\n\\n    return Promise.all(fieldValidations).then(function (fieldErrorsList) {\\n      return fieldErrorsList.reduce(function (prev, curr, index) {\\n        if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\\n          return prev;\\n        }\\n\\n        if (curr) {\\n          prev = setIn(prev, fieldKeysWithValidation[index], curr);\\n        }\\n\\n        return prev;\\n      }, {});\\n    });\\n  }, [runSingleFieldLevelValidation]); // Run all validations and return the result\\n\\n  var runAllValidations = (0,external_react_.useCallback)(function (values) {\\n    return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function (_ref2) {\\n      var fieldErrors = _ref2[0],\\n          schemaErrors = _ref2[1],\\n          validateErrors = _ref2[2];\\n      var combinedErrors = es.all([fieldErrors, schemaErrors, validateErrors], {\\n        arrayMerge: arrayMerge\\n      });\\n      return combinedErrors;\\n    });\\n  }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]); // Run all validations methods and update state accordingly\\n\\n  var validateFormWithHighPriority = useEventCallback(function (values) {\\n    if (values === void 0) {\\n      values = state.values;\\n    }\\n\\n    dispatch({\\n      type: 'SET_ISVALIDATING',\\n      payload: true\\n    });\\n    return runAllValidations(values).then(function (combinedErrors) {\\n      if (!!isMounted.current) {\\n        dispatch({\\n          type: 'SET_ISVALIDATING',\\n          payload: false\\n        });\\n        dispatch({\\n          type: 'SET_ERRORS',\\n          payload: combinedErrors\\n        });\\n      }\\n\\n      return combinedErrors;\\n    });\\n  });\\n  (0,external_react_.useEffect)(function () {\\n    if (validateOnMount && isMounted.current === true && react_fast_compare_default()(initialValues.current, props.initialValues)) {\\n      validateFormWithHighPriority(initialValues.current);\\n    }\\n  }, [validateOnMount, validateFormWithHighPriority]);\\n  var resetForm = (0,external_react_.useCallback)(function (nextState) {\\n    var values = nextState && nextState.values ? nextState.values : initialValues.current;\\n    var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};\\n    var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};\\n    var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;\\n    initialValues.current = values;\\n    initialErrors.current = errors;\\n    initialTouched.current = touched;\\n    initialStatus.current = status;\\n\\n    var dispatchFn = function dispatchFn() {\\n      dispatch({\\n        type: 'RESET_FORM',\\n        payload: {\\n          isSubmitting: !!nextState && !!nextState.isSubmitting,\\n          errors: errors,\\n          touched: touched,\\n          status: status,\\n          values: values,\\n          isValidating: !!nextState && !!nextState.isValidating,\\n          submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === 'number' ? nextState.submitCount : 0\\n        }\\n      });\\n    };\\n\\n    if (props.onReset) {\\n      var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);\\n\\n      if (isPromise(maybePromisedOnReset)) {\\n        maybePromisedOnReset.then(dispatchFn);\\n      } else {\\n        dispatchFn();\\n      }\\n    } else {\\n      dispatchFn();\\n    }\\n  }, [props.initialErrors, props.initialStatus, props.initialTouched, props.onReset]);\\n  (0,external_react_.useEffect)(function () {\\n    if (isMounted.current === true && !react_fast_compare_default()(initialValues.current, props.initialValues)) {\\n      if (enableReinitialize) {\\n        initialValues.current = props.initialValues;\\n        resetForm();\\n\\n        if (validateOnMount) {\\n          validateFormWithHighPriority(initialValues.current);\\n        }\\n      }\\n    }\\n  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);\\n  (0,external_react_.useEffect)(function () {\\n    if (enableReinitialize && isMounted.current === true && !react_fast_compare_default()(initialErrors.current, props.initialErrors)) {\\n      initialErrors.current = props.initialErrors || emptyErrors;\\n      dispatch({\\n        type: 'SET_ERRORS',\\n        payload: props.initialErrors || emptyErrors\\n      });\\n    }\\n  }, [enableReinitialize, props.initialErrors]);\\n  (0,external_react_.useEffect)(function () {\\n    if (enableReinitialize && isMounted.current === true && !react_fast_compare_default()(initialTouched.current, props.initialTouched)) {\\n      initialTouched.current = props.initialTouched || emptyTouched;\\n      dispatch({\\n        type: 'SET_TOUCHED',\\n        payload: props.initialTouched || emptyTouched\\n      });\\n    }\\n  }, [enableReinitialize, props.initialTouched]);\\n  (0,external_react_.useEffect)(function () {\\n    if (enableReinitialize && isMounted.current === true && !react_fast_compare_default()(initialStatus.current, props.initialStatus)) {\\n      initialStatus.current = props.initialStatus;\\n      dispatch({\\n        type: 'SET_STATUS',\\n        payload: props.initialStatus\\n      });\\n    }\\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\\n  var validateField = useEventCallback(function (name) {\\n    // This will efficiently validate a single field by avoiding state\\n    // changes if the validation function is synchronous. It's different from\\n    // what is called when using validateForm.\\n    if (fieldRegistry.current[name] && formik_esm_isFunction(fieldRegistry.current[name].validate)) {\\n      var value = getIn(state.values, name);\\n      var maybePromise = fieldRegistry.current[name].validate(value);\\n\\n      if (isPromise(maybePromise)) {\\n        // Only flip isValidating if the function is async.\\n        dispatch({\\n          type: 'SET_ISVALIDATING',\\n          payload: true\\n        });\\n        return maybePromise.then(function (x) {\\n          return x;\\n        }).then(function (error) {\\n          dispatch({\\n            type: 'SET_FIELD_ERROR',\\n            payload: {\\n              field: name,\\n              value: error\\n            }\\n          });\\n          dispatch({\\n            type: 'SET_ISVALIDATING',\\n            payload: false\\n          });\\n        });\\n      } else {\\n        dispatch({\\n          type: 'SET_FIELD_ERROR',\\n          payload: {\\n            field: name,\\n            value: maybePromise\\n          }\\n        });\\n        return Promise.resolve(maybePromise);\\n      }\\n    } else if (props.validationSchema) {\\n      dispatch({\\n        type: 'SET_ISVALIDATING',\\n        payload: true\\n      });\\n      return runValidationSchema(state.values, name).then(function (x) {\\n        return x;\\n      }).then(function (error) {\\n        dispatch({\\n          type: 'SET_FIELD_ERROR',\\n          payload: {\\n            field: name,\\n            value: getIn(error, name)\\n          }\\n        });\\n        dispatch({\\n          type: 'SET_ISVALIDATING',\\n          payload: false\\n        });\\n      });\\n    }\\n\\n    return Promise.resolve();\\n  });\\n  var registerField = (0,external_react_.useCallback)(function (name, _ref3) {\\n    var validate = _ref3.validate;\\n    fieldRegistry.current[name] = {\\n      validate: validate\\n    };\\n  }, []);\\n  var unregisterField = (0,external_react_.useCallback)(function (name) {\\n    delete fieldRegistry.current[name];\\n  }, []);\\n  var setTouched = useEventCallback(function (touched, shouldValidate) {\\n    dispatch({\\n      type: 'SET_TOUCHED',\\n      payload: touched\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();\\n  });\\n  var setErrors = (0,external_react_.useCallback)(function (errors) {\\n    dispatch({\\n      type: 'SET_ERRORS',\\n      payload: errors\\n    });\\n  }, []);\\n  var setValues = useEventCallback(function (values, shouldValidate) {\\n    var resolvedValues = formik_esm_isFunction(values) ? values(state.values) : values;\\n    dispatch({\\n      type: 'SET_VALUES',\\n      payload: resolvedValues\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();\\n  });\\n  var setFieldError = (0,external_react_.useCallback)(function (field, value) {\\n    dispatch({\\n      type: 'SET_FIELD_ERROR',\\n      payload: {\\n        field: field,\\n        value: value\\n      }\\n    });\\n  }, []);\\n  var setFieldValue = useEventCallback(function (field, value, shouldValidate) {\\n    dispatch({\\n      type: 'SET_FIELD_VALUE',\\n      payload: {\\n        field: field,\\n        value: value\\n      }\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value)) : Promise.resolve();\\n  });\\n  var executeChange = (0,external_react_.useCallback)(function (eventOrTextValue, maybePath) {\\n    // By default, assume that the first argument is a string. This allows us to use\\n    // handleChange with React Native and React Native Web's onChangeText prop which\\n    // provides just the value of the input.\\n    var field = maybePath;\\n    var val = eventOrTextValue;\\n    var parsed; // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\\n    // so we handle like we would a normal HTML change event.\\n\\n    if (!isString(eventOrTextValue)) {\\n      // If we can, persist the event\\n      // @see https://reactjs.org/docs/events.html#event-pooling\\n      if (eventOrTextValue.persist) {\\n        eventOrTextValue.persist();\\n      }\\n\\n      var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;\\n      var type = target.type,\\n          name = target.name,\\n          id = target.id,\\n          value = target.value,\\n          checked = target.checked,\\n          outerHTML = target.outerHTML,\\n          options = target.options,\\n          multiple = target.multiple;\\n      field = maybePath ? maybePath : name ? name : id;\\n\\n      if (!field && \\\"production\\\" !== \\\"production\\\") {}\\n\\n      val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? '' : parsed) : /checkbox/.test(type) // checkboxes\\n      ? getValueForCheckbox(getIn(state.values, field), checked, value) : options && multiple // <select multiple>\\n      ? getSelectedValues(options) : value;\\n    }\\n\\n    if (field) {\\n      // Set form fields by name\\n      setFieldValue(field, val);\\n    }\\n  }, [setFieldValue, state.values]);\\n  var handleChange = useEventCallback(function (eventOrPath) {\\n    if (isString(eventOrPath)) {\\n      return function (event) {\\n        return executeChange(event, eventOrPath);\\n      };\\n    } else {\\n      executeChange(eventOrPath);\\n    }\\n  });\\n  var setFieldTouched = useEventCallback(function (field, touched, shouldValidate) {\\n    if (touched === void 0) {\\n      touched = true;\\n    }\\n\\n    dispatch({\\n      type: 'SET_FIELD_TOUCHED',\\n      payload: {\\n        field: field,\\n        value: touched\\n      }\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();\\n  });\\n  var executeBlur = (0,external_react_.useCallback)(function (e, path) {\\n    if (e.persist) {\\n      e.persist();\\n    }\\n\\n    var _e$target = e.target,\\n        name = _e$target.name,\\n        id = _e$target.id,\\n        outerHTML = _e$target.outerHTML;\\n    var field = path ? path : name ? name : id;\\n\\n    if (!field && \\\"production\\\" !== \\\"production\\\") {}\\n\\n    setFieldTouched(field, true);\\n  }, [setFieldTouched]);\\n  var handleBlur = useEventCallback(function (eventOrString) {\\n    if (isString(eventOrString)) {\\n      return function (event) {\\n        return executeBlur(event, eventOrString);\\n      };\\n    } else {\\n      executeBlur(eventOrString);\\n    }\\n  });\\n  var setFormikState = (0,external_react_.useCallback)(function (stateOrCb) {\\n    if (formik_esm_isFunction(stateOrCb)) {\\n      dispatch({\\n        type: 'SET_FORMIK_STATE',\\n        payload: stateOrCb\\n      });\\n    } else {\\n      dispatch({\\n        type: 'SET_FORMIK_STATE',\\n        payload: function payload() {\\n          return stateOrCb;\\n        }\\n      });\\n    }\\n  }, []);\\n  var setStatus = (0,external_react_.useCallback)(function (status) {\\n    dispatch({\\n      type: 'SET_STATUS',\\n      payload: status\\n    });\\n  }, []);\\n  var setSubmitting = (0,external_react_.useCallback)(function (isSubmitting) {\\n    dispatch({\\n      type: 'SET_ISSUBMITTING',\\n      payload: isSubmitting\\n    });\\n  }, []);\\n  var submitForm = useEventCallback(function () {\\n    dispatch({\\n      type: 'SUBMIT_ATTEMPT'\\n    });\\n    return validateFormWithHighPriority().then(function (combinedErrors) {\\n      // In case an error was thrown and passed to the resolved Promise,\\n      // `combinedErrors` can be an instance of an Error. We need to check\\n      // that and abort the submit.\\n      // If we don't do that, calling `Object.keys(new Error())` yields an\\n      // empty array, which causes the validation to pass and the form\\n      // to be submitted.\\n      var isInstanceOfError = combinedErrors instanceof Error;\\n      var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;\\n\\n      if (isActuallyValid) {\\n        // Proceed with submit...\\n        //\\n        // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\\n        // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\\n        // This would be fine in simple cases, but make it impossible to disable submit\\n        // buttons where people use callbacks or promises as side effects (which is basically\\n        // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\\n        //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\\n        // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\\n        // cleanup of isSubmitting on behalf of the consumer.\\n        var promiseOrUndefined;\\n\\n        try {\\n          promiseOrUndefined = executeSubmit(); // Bail if it's sync, consumer is responsible for cleaning up\\n          // via setSubmitting(false)\\n\\n          if (promiseOrUndefined === undefined) {\\n            return;\\n          }\\n        } catch (error) {\\n          throw error;\\n        }\\n\\n        return Promise.resolve(promiseOrUndefined).then(function (result) {\\n          if (!!isMounted.current) {\\n            dispatch({\\n              type: 'SUBMIT_SUCCESS'\\n            });\\n          }\\n\\n          return result;\\n        })[\\\"catch\\\"](function (_errors) {\\n          if (!!isMounted.current) {\\n            dispatch({\\n              type: 'SUBMIT_FAILURE'\\n            }); // This is a legit error rejected by the onSubmit fn\\n            // so we don't want to break the promise chain\\n\\n            throw _errors;\\n          }\\n        });\\n      } else if (!!isMounted.current) {\\n        // ^^^ Make sure Formik is still mounted before updating state\\n        dispatch({\\n          type: 'SUBMIT_FAILURE'\\n        }); // throw combinedErrors;\\n\\n        if (isInstanceOfError) {\\n          throw combinedErrors;\\n        }\\n      }\\n\\n      return;\\n    });\\n  });\\n  var handleSubmit = useEventCallback(function (e) {\\n    if (e && e.preventDefault && formik_esm_isFunction(e.preventDefault)) {\\n      e.preventDefault();\\n    }\\n\\n    if (e && e.stopPropagation && formik_esm_isFunction(e.stopPropagation)) {\\n      e.stopPropagation();\\n    } // Warn if form submission is triggered by a <button> without a\\n    // specified `type` attribute during development. This mitigates\\n    // a common gotcha in forms with both reset and submit buttons,\\n    // where the dev forgets to add type=\\\"button\\\" to the reset button.\\n\\n\\n    if (false) { var activeElement; }\\n\\n    submitForm()[\\\"catch\\\"](function (reason) {\\n      console.warn(\\\"Warning: An unhandled error was caught from submitForm()\\\", reason);\\n    });\\n  });\\n  var imperativeMethods = {\\n    resetForm: resetForm,\\n    validateForm: validateFormWithHighPriority,\\n    validateField: validateField,\\n    setErrors: setErrors,\\n    setFieldError: setFieldError,\\n    setFieldTouched: setFieldTouched,\\n    setFieldValue: setFieldValue,\\n    setStatus: setStatus,\\n    setSubmitting: setSubmitting,\\n    setTouched: setTouched,\\n    setValues: setValues,\\n    setFormikState: setFormikState,\\n    submitForm: submitForm\\n  };\\n  var executeSubmit = useEventCallback(function () {\\n    return onSubmit(state.values, imperativeMethods);\\n  });\\n  var handleReset = useEventCallback(function (e) {\\n    if (e && e.preventDefault && formik_esm_isFunction(e.preventDefault)) {\\n      e.preventDefault();\\n    }\\n\\n    if (e && e.stopPropagation && formik_esm_isFunction(e.stopPropagation)) {\\n      e.stopPropagation();\\n    }\\n\\n    resetForm();\\n  });\\n  var getFieldMeta = (0,external_react_.useCallback)(function (name) {\\n    return {\\n      value: getIn(state.values, name),\\n      error: getIn(state.errors, name),\\n      touched: !!getIn(state.touched, name),\\n      initialValue: getIn(initialValues.current, name),\\n      initialTouched: !!getIn(initialTouched.current, name),\\n      initialError: getIn(initialErrors.current, name)\\n    };\\n  }, [state.errors, state.touched, state.values]);\\n  var getFieldHelpers = (0,external_react_.useCallback)(function (name) {\\n    return {\\n      setValue: function setValue(value, shouldValidate) {\\n        return setFieldValue(name, value, shouldValidate);\\n      },\\n      setTouched: function setTouched(value, shouldValidate) {\\n        return setFieldTouched(name, value, shouldValidate);\\n      },\\n      setError: function setError(value) {\\n        return setFieldError(name, value);\\n      }\\n    };\\n  }, [setFieldValue, setFieldTouched, setFieldError]);\\n  var getFieldProps = (0,external_react_.useCallback)(function (nameOrOptions) {\\n    var isAnObject = formik_esm_isObject(nameOrOptions);\\n    var name = isAnObject ? nameOrOptions.name : nameOrOptions;\\n    var valueState = getIn(state.values, name);\\n    var field = {\\n      name: name,\\n      value: valueState,\\n      onChange: handleChange,\\n      onBlur: handleBlur\\n    };\\n\\n    if (isAnObject) {\\n      var type = nameOrOptions.type,\\n          valueProp = nameOrOptions.value,\\n          is = nameOrOptions.as,\\n          multiple = nameOrOptions.multiple;\\n\\n      if (type === 'checkbox') {\\n        if (valueProp === undefined) {\\n          field.checked = !!valueState;\\n        } else {\\n          field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));\\n          field.value = valueProp;\\n        }\\n      } else if (type === 'radio') {\\n        field.checked = valueState === valueProp;\\n        field.value = valueProp;\\n      } else if (is === 'select' && multiple) {\\n        field.value = field.value || [];\\n        field.multiple = true;\\n      }\\n    }\\n\\n    return field;\\n  }, [handleBlur, handleChange, state.values]);\\n  var dirty = (0,external_react_.useMemo)(function () {\\n    return !react_fast_compare_default()(initialValues.current, state.values);\\n  }, [initialValues.current, state.values]);\\n  var isValid = (0,external_react_.useMemo)(function () {\\n    return typeof isInitialValid !== 'undefined' ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && formik_esm_isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;\\n  }, [isInitialValid, dirty, state.errors, props]);\\n\\n  var ctx = _extends({}, state, {\\n    initialValues: initialValues.current,\\n    initialErrors: initialErrors.current,\\n    initialTouched: initialTouched.current,\\n    initialStatus: initialStatus.current,\\n    handleBlur: handleBlur,\\n    handleChange: handleChange,\\n    handleReset: handleReset,\\n    handleSubmit: handleSubmit,\\n    resetForm: resetForm,\\n    setErrors: setErrors,\\n    setFormikState: setFormikState,\\n    setFieldTouched: setFieldTouched,\\n    setFieldValue: setFieldValue,\\n    setFieldError: setFieldError,\\n    setStatus: setStatus,\\n    setSubmitting: setSubmitting,\\n    setTouched: setTouched,\\n    setValues: setValues,\\n    submitForm: submitForm,\\n    validateForm: validateFormWithHighPriority,\\n    validateField: validateField,\\n    isValid: isValid,\\n    dirty: dirty,\\n    unregisterField: unregisterField,\\n    registerField: registerField,\\n    getFieldProps: getFieldProps,\\n    getFieldMeta: getFieldMeta,\\n    getFieldHelpers: getFieldHelpers,\\n    validateOnBlur: validateOnBlur,\\n    validateOnChange: validateOnChange,\\n    validateOnMount: validateOnMount\\n  });\\n\\n  return ctx;\\n}\\nfunction Formik(props) {\\n  var formikbag = useFormik(props);\\n  var component = props.component,\\n      children = props.children,\\n      render = props.render,\\n      innerRef = props.innerRef; // This allows folks to pass a ref to <Formik />\\n\\n  (0,external_react_.useImperativeHandle)(innerRef, function () {\\n    return formikbag;\\n  });\\n\\n  if (false) {}\\n\\n  return (0,external_react_.createElement)(FormikProvider, {\\n    value: formikbag\\n  }, component ? (0,external_react_.createElement)(component, formikbag) : render ? render(formikbag) : children // children come last, always called\\n  ? formik_esm_isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? external_react_.Children.only(children) : null : null);\\n}\\n\\nfunction warnAboutMissingIdentifier(_ref4) {\\n  var htmlContent = _ref4.htmlContent,\\n      documentationAnchorLink = _ref4.documentationAnchorLink,\\n      handlerName = _ref4.handlerName;\\n  console.warn(\\\"Warning: Formik called `\\\" + handlerName + \\\"`, but you forgot to pass an `id` or `name` attribute to your input:\\\\n    \\\" + htmlContent + \\\"\\\\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#\\\" + documentationAnchorLink + \\\"\\\\n  \\\");\\n}\\n/**\\r\\n * Transform Yup ValidationError to a more usable object\\r\\n */\\n\\n\\nfunction yupToFormErrors(yupError) {\\n  var errors = {};\\n\\n  if (yupError.inner) {\\n    if (yupError.inner.length === 0) {\\n      return setIn(errors, yupError.path, yupError.message);\\n    }\\n\\n    for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\\n      var _ref5;\\n\\n      if (_isArray) {\\n        if (_i >= _iterator.length) break;\\n        _ref5 = _iterator[_i++];\\n      } else {\\n        _i = _iterator.next();\\n        if (_i.done) break;\\n        _ref5 = _i.value;\\n      }\\n\\n      var err = _ref5;\\n\\n      if (!getIn(errors, err.path)) {\\n        errors = setIn(errors, err.path, err.message);\\n      }\\n    }\\n  }\\n\\n  return errors;\\n}\\n/**\\r\\n * Validate a yup schema.\\r\\n */\\n\\nfunction validateYupSchema(values, schema, sync, context) {\\n  if (sync === void 0) {\\n    sync = false;\\n  }\\n\\n  var normalizedValues = prepareDataForValidation(values);\\n  return schema[sync ? 'validateSync' : 'validate'](normalizedValues, {\\n    abortEarly: false,\\n    context: context || normalizedValues\\n  });\\n}\\n/**\\r\\n * Recursively prepare values.\\r\\n */\\n\\nfunction prepareDataForValidation(values) {\\n  var data = Array.isArray(values) ? [] : {};\\n\\n  for (var k in values) {\\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\\n      var key = String(k);\\n\\n      if (Array.isArray(values[key]) === true) {\\n        data[key] = values[key].map(function (value) {\\n          if (Array.isArray(value) === true || lodash_es_isPlainObject(value)) {\\n            return prepareDataForValidation(value);\\n          } else {\\n            return value !== '' ? value : undefined;\\n          }\\n        });\\n      } else if (lodash_es_isPlainObject(values[key])) {\\n        data[key] = prepareDataForValidation(values[key]);\\n      } else {\\n        data[key] = values[key] !== '' ? values[key] : undefined;\\n      }\\n    }\\n  }\\n\\n  return data;\\n}\\n/**\\r\\n * deepmerge array merging algorithm\\r\\n * https://github.com/KyleAMathews/deepmerge#combine-array\\r\\n */\\n\\nfunction arrayMerge(target, source, options) {\\n  var destination = target.slice();\\n  source.forEach(function merge(e, i) {\\n    if (typeof destination[i] === 'undefined') {\\n      var cloneRequested = options.clone !== false;\\n      var shouldClone = cloneRequested && options.isMergeableObject(e);\\n      destination[i] = shouldClone ? es(Array.isArray(e) ? [] : {}, e, options) : e;\\n    } else if (options.isMergeableObject(e)) {\\n      destination[i] = es(target[i], e, options);\\n    } else if (target.indexOf(e) === -1) {\\n      destination.push(e);\\n    }\\n  });\\n  return destination;\\n}\\n/** Return multi select values based on an array of options */\\n\\n\\nfunction getSelectedValues(options) {\\n  return Array.from(options).filter(function (el) {\\n    return el.selected;\\n  }).map(function (el) {\\n    return el.value;\\n  });\\n}\\n/** Return the next value for a checkbox */\\n\\n\\nfunction getValueForCheckbox(currentValue, checked, valueProp) {\\n  // If the current value was a boolean, return a boolean\\n  if (typeof currentValue === 'boolean') {\\n    return Boolean(checked);\\n  } // If the currentValue was not a boolean we want to return an array\\n\\n\\n  var currentArrayOfValues = [];\\n  var isValueInArray = false;\\n  var index = -1;\\n\\n  if (!Array.isArray(currentValue)) {\\n    // eslint-disable-next-line eqeqeq\\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\\n      return Boolean(checked);\\n    }\\n  } else {\\n    // If the current value is already an array, use it\\n    currentArrayOfValues = currentValue;\\n    index = currentValue.indexOf(valueProp);\\n    isValueInArray = index >= 0;\\n  } // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\\n\\n\\n  if (checked && valueProp && !isValueInArray) {\\n    return currentArrayOfValues.concat(valueProp);\\n  } // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\\n\\n\\n  if (!isValueInArray) {\\n    return currentArrayOfValues;\\n  } // If the checkbox was unchecked and the value is in the array, remove the value and return the array\\n\\n\\n  return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));\\n} // React currently throws a warning when using useLayoutEffect on the server.\\n// To get around it, we can conditionally useEffect on the server (no-op) and\\n// useLayoutEffect in the browser.\\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\\n\\n\\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? external_react_.useLayoutEffect : external_react_.useEffect;\\n\\nfunction useEventCallback(fn) {\\n  var ref = (0,external_react_.useRef)(fn); // we copy a ref to the callback scoped to the current state/props on each render\\n\\n  useIsomorphicLayoutEffect(function () {\\n    ref.current = fn;\\n  });\\n  return (0,external_react_.useCallback)(function () {\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    return ref.current.apply(void 0, args);\\n  }, []);\\n}\\n\\nfunction useField(propsOrFieldName) {\\n  var formik = useFormikContext();\\n  var getFieldProps = formik.getFieldProps,\\n      getFieldMeta = formik.getFieldMeta,\\n      getFieldHelpers = formik.getFieldHelpers,\\n      registerField = formik.registerField,\\n      unregisterField = formik.unregisterField;\\n  var isAnObject = formik_esm_isObject(propsOrFieldName); // Normalize propsOrFieldName to FieldHookConfig<Val>\\n\\n  var props = isAnObject ? propsOrFieldName : {\\n    name: propsOrFieldName\\n  };\\n  var fieldName = props.name,\\n      validateFn = props.validate;\\n  useEffect(function () {\\n    if (fieldName) {\\n      registerField(fieldName, {\\n        validate: validateFn\\n      });\\n    }\\n\\n    return function () {\\n      if (fieldName) {\\n        unregisterField(fieldName);\\n      }\\n    };\\n  }, [registerField, unregisterField, fieldName, validateFn]);\\n\\n  if (false) {}\\n\\n  !fieldName ?  false ? 0 : invariant(false) : void 0;\\n  var fieldHelpers = useMemo(function () {\\n    return getFieldHelpers(fieldName);\\n  }, [getFieldHelpers, fieldName]);\\n  return [getFieldProps(props), getFieldMeta(fieldName), fieldHelpers];\\n}\\nfunction Field(_ref) {\\n  var validate = _ref.validate,\\n      name = _ref.name,\\n      render = _ref.render,\\n      children = _ref.children,\\n      is = _ref.as,\\n      component = _ref.component,\\n      className = _ref.className,\\n      props = _objectWithoutPropertiesLoose(_ref, [\\\"validate\\\", \\\"name\\\", \\\"render\\\", \\\"children\\\", \\\"as\\\", \\\"component\\\", \\\"className\\\"]);\\n\\n  var _useFormikContext = useFormikContext(),\\n      formik = _objectWithoutPropertiesLoose(_useFormikContext, [\\\"validate\\\", \\\"validationSchema\\\"]);\\n\\n  if (false) {} // Register field and field-level validation with parent <Formik>\\n\\n\\n  var registerField = formik.registerField,\\n      unregisterField = formik.unregisterField;\\n  (0,external_react_.useEffect)(function () {\\n    registerField(name, {\\n      validate: validate\\n    });\\n    return function () {\\n      unregisterField(name);\\n    };\\n  }, [registerField, unregisterField, name, validate]);\\n  var field = formik.getFieldProps(_extends({\\n    name: name\\n  }, props));\\n  var meta = formik.getFieldMeta(name);\\n  var legacyBag = {\\n    field: field,\\n    form: formik\\n  };\\n\\n  if (render) {\\n    return render(_extends({}, legacyBag, {\\n      meta: meta\\n    }));\\n  }\\n\\n  if (formik_esm_isFunction(children)) {\\n    return children(_extends({}, legacyBag, {\\n      meta: meta\\n    }));\\n  }\\n\\n  if (component) {\\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\\n    if (typeof component === 'string') {\\n      var innerRef = props.innerRef,\\n          rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n      return (0,external_react_.createElement)(component, _extends({\\n        ref: innerRef\\n      }, field, rest, {\\n        className: className\\n      }), children);\\n    } // We don't pass `meta` for backwards compat\\n\\n\\n    return (0,external_react_.createElement)(component, _extends({\\n      field: field,\\n      form: formik\\n    }, props, {\\n      className: className\\n    }), children);\\n  } // default to input here so we can check for both `as` and `children` above\\n\\n\\n  var asElement = is || 'input';\\n\\n  if (typeof asElement === 'string') {\\n    var _innerRef = props.innerRef,\\n        _rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n    return (0,external_react_.createElement)(asElement, _extends({\\n      ref: _innerRef\\n    }, field, _rest, {\\n      className: className\\n    }), children);\\n  }\\n\\n  return (0,external_react_.createElement)(asElement, _extends({}, field, props, {\\n    className: className\\n  }), children);\\n}\\n\\nvar Form = /*#__PURE__*/(0,external_react_.forwardRef)(function (props, ref) {\\n  // iOS needs an \\\"action\\\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\\n  // We default the action to \\\"#\\\" in case the preventDefault fails (just updates the URL hash)\\n  var action = props.action,\\n      rest = _objectWithoutPropertiesLoose(props, [\\\"action\\\"]);\\n\\n  var _action = action != null ? action : '#';\\n\\n  var _useFormikContext = useFormikContext(),\\n      handleReset = _useFormikContext.handleReset,\\n      handleSubmit = _useFormikContext.handleSubmit;\\n\\n  return (0,external_react_.createElement)(\\\"form\\\", _extends({\\n    onSubmit: handleSubmit,\\n    ref: ref,\\n    onReset: handleReset,\\n    action: _action\\n  }, rest));\\n});\\nForm.displayName = 'Form';\\n\\n/**\\r\\n * A public higher-order component to access the imperative API\\r\\n */\\n\\nfunction withFormik(_ref) {\\n  var _ref$mapPropsToValues = _ref.mapPropsToValues,\\n      mapPropsToValues = _ref$mapPropsToValues === void 0 ? function (vanillaProps) {\\n    var val = {};\\n\\n    for (var k in vanillaProps) {\\n      if (vanillaProps.hasOwnProperty(k) && typeof vanillaProps[k] !== 'function') {\\n        // @todo TypeScript fix\\n        val[k] = vanillaProps[k];\\n      }\\n    }\\n\\n    return val;\\n  } : _ref$mapPropsToValues,\\n      config = _objectWithoutPropertiesLoose(_ref, [\\\"mapPropsToValues\\\"]);\\n\\n  return function createFormik(Component$1) {\\n    var componentDisplayName = Component$1.displayName || Component$1.name || Component$1.constructor && Component$1.constructor.name || 'Component';\\n    /**\\r\\n     * We need to use closures here for to provide the wrapped component's props to\\r\\n     * the respective withFormik config methods.\\r\\n     */\\n\\n    var C = /*#__PURE__*/function (_React$Component) {\\n      _inheritsLoose(C, _React$Component);\\n\\n      function C() {\\n        var _this;\\n\\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n          args[_key] = arguments[_key];\\n        }\\n\\n        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\\n\\n        _this.validate = function (values) {\\n          return config.validate(values, _this.props);\\n        };\\n\\n        _this.validationSchema = function () {\\n          return formik_esm_isFunction(config.validationSchema) ? config.validationSchema(_this.props) : config.validationSchema;\\n        };\\n\\n        _this.handleSubmit = function (values, actions) {\\n          return config.handleSubmit(values, _extends({}, actions, {\\n            props: _this.props\\n          }));\\n        };\\n\\n        _this.renderFormComponent = function (formikProps) {\\n          return createElement(Component$1, _extends({}, _this.props, formikProps));\\n        };\\n\\n        return _this;\\n      }\\n\\n      var _proto = C.prototype;\\n\\n      _proto.render = function render() {\\n        var _this$props = this.props,\\n            props = _objectWithoutPropertiesLoose(_this$props, [\\\"children\\\"]);\\n\\n        return createElement(Formik, _extends({}, props, config, {\\n          validate: config.validate && this.validate,\\n          validationSchema: config.validationSchema && this.validationSchema,\\n          initialValues: mapPropsToValues(this.props),\\n          initialStatus: config.mapPropsToStatus && config.mapPropsToStatus(this.props),\\n          initialErrors: config.mapPropsToErrors && config.mapPropsToErrors(this.props),\\n          initialTouched: config.mapPropsToTouched && config.mapPropsToTouched(this.props),\\n          onSubmit: this.handleSubmit,\\n          children: this.renderFormComponent\\n        }));\\n      };\\n\\n      return C;\\n    }(Component);\\n\\n    C.displayName = \\\"WithFormik(\\\" + componentDisplayName + \\\")\\\";\\n    return hoistNonReactStatics(C, Component$1 // cast type to ComponentClass (even if SFC)\\n    );\\n  };\\n}\\n\\n/**\\r\\n * Connect any component to Formik context, and inject as a prop called `formik`;\\r\\n * @param Comp React Component\\r\\n */\\n\\nfunction connect(Comp) {\\n  var C = function C(props) {\\n    return createElement(FormikConsumer, null, function (formik) {\\n      !!!formik ?  false ? 0 : invariant(false) : void 0;\\n      return createElement(Comp, _extends({}, props, {\\n        formik: formik\\n      }));\\n    });\\n  };\\n\\n  var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component'; // Assign Comp to C.WrappedComponent so we can access the inner component in tests\\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\\n\\n  C.WrappedComponent = Comp;\\n  C.displayName = \\\"FormikConnect(\\\" + componentDisplayName + \\\")\\\";\\n  return hoistNonReactStatics(C, Comp // cast type to ComponentClass (even if SFC)\\n  );\\n}\\n\\n/**\\r\\n * Some array helpers!\\r\\n */\\n\\nvar move = function move(array, from, to) {\\n  var copy = copyArrayLike(array);\\n  var value = copy[from];\\n  copy.splice(from, 1);\\n  copy.splice(to, 0, value);\\n  return copy;\\n};\\nvar swap = function swap(arrayLike, indexA, indexB) {\\n  var copy = copyArrayLike(arrayLike);\\n  var a = copy[indexA];\\n  copy[indexA] = copy[indexB];\\n  copy[indexB] = a;\\n  return copy;\\n};\\nvar insert = function insert(arrayLike, index, value) {\\n  var copy = copyArrayLike(arrayLike);\\n  copy.splice(index, 0, value);\\n  return copy;\\n};\\nvar replace = function replace(arrayLike, index, value) {\\n  var copy = copyArrayLike(arrayLike);\\n  copy[index] = value;\\n  return copy;\\n};\\n\\nvar copyArrayLike = function copyArrayLike(arrayLike) {\\n  if (!arrayLike) {\\n    return [];\\n  } else if (Array.isArray(arrayLike)) {\\n    return [].concat(arrayLike);\\n  } else {\\n    var maxIndex = Object.keys(arrayLike).map(function (key) {\\n      return parseInt(key);\\n    }).reduce(function (max, el) {\\n      return el > max ? el : max;\\n    }, 0);\\n    return Array.from(_extends({}, arrayLike, {\\n      length: maxIndex + 1\\n    }));\\n  }\\n};\\n\\nvar createAlterationHandler = function createAlterationHandler(alteration, defaultFunction) {\\n  var fn = typeof alteration === 'function' ? alteration : defaultFunction;\\n  return function (data) {\\n    if (Array.isArray(data) || formik_esm_isObject(data)) {\\n      var clone = copyArrayLike(data);\\n      return fn(clone);\\n    } // This can be assumed to be a primitive, which\\n    // is a case for top level validation errors\\n\\n\\n    return data;\\n  };\\n};\\n\\nvar FieldArrayInner = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(FieldArrayInner, _React$Component);\\n\\n  function FieldArrayInner(props) {\\n    var _this;\\n\\n    _this = _React$Component.call(this, props) || this; // We need TypeScript generics on these, so we'll bind them in the constructor\\n    // @todo Fix TS 3.2.1\\n\\n    _this.updateArrayField = function (fn, alterTouched, alterErrors) {\\n      var _this$props = _this.props,\\n          name = _this$props.name,\\n          setFormikState = _this$props.formik.setFormikState;\\n      setFormikState(function (prevState) {\\n        var updateErrors = createAlterationHandler(alterErrors, fn);\\n        var updateTouched = createAlterationHandler(alterTouched, fn); // values fn should be executed before updateErrors and updateTouched,\\n        // otherwise it causes an error with unshift.\\n\\n        var values = setIn(prevState.values, name, fn(getIn(prevState.values, name)));\\n        var fieldError = alterErrors ? updateErrors(getIn(prevState.errors, name)) : undefined;\\n        var fieldTouched = alterTouched ? updateTouched(getIn(prevState.touched, name)) : undefined;\\n\\n        if (isEmptyArray(fieldError)) {\\n          fieldError = undefined;\\n        }\\n\\n        if (isEmptyArray(fieldTouched)) {\\n          fieldTouched = undefined;\\n        }\\n\\n        return _extends({}, prevState, {\\n          values: values,\\n          errors: alterErrors ? setIn(prevState.errors, name, fieldError) : prevState.errors,\\n          touched: alterTouched ? setIn(prevState.touched, name, fieldTouched) : prevState.touched\\n        });\\n      });\\n    };\\n\\n    _this.push = function (value) {\\n      return _this.updateArrayField(function (arrayLike) {\\n        return [].concat(copyArrayLike(arrayLike), [lodash_es_cloneDeep(value)]);\\n      }, false, false);\\n    };\\n\\n    _this.handlePush = function (value) {\\n      return function () {\\n        return _this.push(value);\\n      };\\n    };\\n\\n    _this.swap = function (indexA, indexB) {\\n      return _this.updateArrayField(function (array) {\\n        return swap(array, indexA, indexB);\\n      }, true, true);\\n    };\\n\\n    _this.handleSwap = function (indexA, indexB) {\\n      return function () {\\n        return _this.swap(indexA, indexB);\\n      };\\n    };\\n\\n    _this.move = function (from, to) {\\n      return _this.updateArrayField(function (array) {\\n        return move(array, from, to);\\n      }, true, true);\\n    };\\n\\n    _this.handleMove = function (from, to) {\\n      return function () {\\n        return _this.move(from, to);\\n      };\\n    };\\n\\n    _this.insert = function (index, value) {\\n      return _this.updateArrayField(function (array) {\\n        return insert(array, index, value);\\n      }, function (array) {\\n        return insert(array, index, null);\\n      }, function (array) {\\n        return insert(array, index, null);\\n      });\\n    };\\n\\n    _this.handleInsert = function (index, value) {\\n      return function () {\\n        return _this.insert(index, value);\\n      };\\n    };\\n\\n    _this.replace = function (index, value) {\\n      return _this.updateArrayField(function (array) {\\n        return replace(array, index, value);\\n      }, false, false);\\n    };\\n\\n    _this.handleReplace = function (index, value) {\\n      return function () {\\n        return _this.replace(index, value);\\n      };\\n    };\\n\\n    _this.unshift = function (value) {\\n      var length = -1;\\n\\n      _this.updateArrayField(function (array) {\\n        var arr = array ? [value].concat(array) : [value];\\n        length = arr.length;\\n        return arr;\\n      }, function (array) {\\n        return array ? [null].concat(array) : [null];\\n      }, function (array) {\\n        return array ? [null].concat(array) : [null];\\n      });\\n\\n      return length;\\n    };\\n\\n    _this.handleUnshift = function (value) {\\n      return function () {\\n        return _this.unshift(value);\\n      };\\n    };\\n\\n    _this.handleRemove = function (index) {\\n      return function () {\\n        return _this.remove(index);\\n      };\\n    };\\n\\n    _this.handlePop = function () {\\n      return function () {\\n        return _this.pop();\\n      };\\n    };\\n\\n    _this.remove = _this.remove.bind(_assertThisInitialized(_this));\\n    _this.pop = _this.pop.bind(_assertThisInitialized(_this));\\n    return _this;\\n  }\\n\\n  var _proto = FieldArrayInner.prototype;\\n\\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\\n    if (this.props.validateOnChange && this.props.formik.validateOnChange && !react_fast_compare_default()(getIn(prevProps.formik.values, prevProps.name), getIn(this.props.formik.values, this.props.name))) {\\n      this.props.formik.validateForm(this.props.formik.values);\\n    }\\n  };\\n\\n  _proto.remove = function remove(index) {\\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\\n    var result;\\n    this.updateArrayField( // so this gets call 3 times\\n    function (array) {\\n      var copy = array ? copyArrayLike(array) : [];\\n\\n      if (!result) {\\n        result = copy[index];\\n      }\\n\\n      if (formik_esm_isFunction(copy.splice)) {\\n        copy.splice(index, 1);\\n      } // if the array only includes undefined values we have to return an empty array\\n\\n\\n      return formik_esm_isFunction(copy.every) ? copy.every(function (v) {\\n        return v === undefined;\\n      }) ? [] : copy : copy;\\n    }, true, true);\\n    return result;\\n  };\\n\\n  _proto.pop = function pop() {\\n    // Remove relevant pieces of `touched` and `errors` too!\\n    var result;\\n    this.updateArrayField( // so this gets call 3 times\\n    function (array) {\\n      var tmp = array.slice();\\n\\n      if (!result) {\\n        result = tmp && tmp.pop && tmp.pop();\\n      }\\n\\n      return tmp;\\n    }, true, true);\\n    return result;\\n  };\\n\\n  _proto.render = function render() {\\n    var arrayHelpers = {\\n      push: this.push,\\n      pop: this.pop,\\n      swap: this.swap,\\n      move: this.move,\\n      insert: this.insert,\\n      replace: this.replace,\\n      unshift: this.unshift,\\n      remove: this.remove,\\n      handlePush: this.handlePush,\\n      handlePop: this.handlePop,\\n      handleSwap: this.handleSwap,\\n      handleMove: this.handleMove,\\n      handleInsert: this.handleInsert,\\n      handleReplace: this.handleReplace,\\n      handleUnshift: this.handleUnshift,\\n      handleRemove: this.handleRemove\\n    };\\n\\n    var _this$props2 = this.props,\\n        component = _this$props2.component,\\n        render = _this$props2.render,\\n        children = _this$props2.children,\\n        name = _this$props2.name,\\n        _this$props2$formik = _this$props2.formik,\\n        restOfFormik = _objectWithoutPropertiesLoose(_this$props2$formik, [\\\"validate\\\", \\\"validationSchema\\\"]);\\n\\n    var props = _extends({}, arrayHelpers, {\\n      form: restOfFormik,\\n      name: name\\n    });\\n\\n    return component ? (0,external_react_.createElement)(component, props) : render ? render(props) : children // children come last, always called\\n    ? typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? external_react_.Children.only(children) : null : null;\\n  };\\n\\n  return FieldArrayInner;\\n}(external_react_.Component);\\n\\nFieldArrayInner.defaultProps = {\\n  validateOnChange: true\\n};\\nvar FieldArray = /*#__PURE__*/(/* unused pure expression or super */ null && (connect(FieldArrayInner)));\\n\\nvar ErrorMessageImpl = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(ErrorMessageImpl, _React$Component);\\n\\n  function ErrorMessageImpl() {\\n    return _React$Component.apply(this, arguments) || this;\\n  }\\n\\n  var _proto = ErrorMessageImpl.prototype;\\n\\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {\\n    if (getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n\\n  _proto.render = function render() {\\n    var _this$props = this.props,\\n        component = _this$props.component,\\n        formik = _this$props.formik,\\n        render = _this$props.render,\\n        children = _this$props.children,\\n        name = _this$props.name,\\n        rest = _objectWithoutPropertiesLoose(_this$props, [\\\"component\\\", \\\"formik\\\", \\\"render\\\", \\\"children\\\", \\\"name\\\"]);\\n\\n    var touch = getIn(formik.touched, name);\\n    var error = getIn(formik.errors, name);\\n    return !!touch && !!error ? render ? formik_esm_isFunction(render) ? render(error) : null : children ? formik_esm_isFunction(children) ? children(error) : null : component ? (0,external_react_.createElement)(component, rest, error) : error : null;\\n  };\\n\\n  return ErrorMessageImpl;\\n}(external_react_.Component);\\n\\nvar ErrorMessage = /*#__PURE__*/(/* unused pure expression or super */ null && (connect(ErrorMessageImpl)));\\n\\n/**\\r\\n * Custom Field component for quickly hooking into Formik\\r\\n * context and wiring up forms.\\r\\n */\\n\\nvar FastFieldInner = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(FastFieldInner, _React$Component);\\n\\n  function FastFieldInner(props) {\\n    var _this;\\n\\n    _this = _React$Component.call(this, props) || this;\\n    var render = props.render,\\n        children = props.children,\\n        component = props.component,\\n        is = props.as,\\n        name = props.name;\\n    !!render ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(component && render) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(is && children && formik_esm_isFunction(children)) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(component && children && formik_esm_isFunction(children)) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(render && children && !isEmptyChildren(children)) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    return _this;\\n  }\\n\\n  var _proto = FastFieldInner.prototype;\\n\\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {\\n    if (this.props.shouldUpdate) {\\n      return this.props.shouldUpdate(props, this.props);\\n    } else if (props.name !== this.props.name || getIn(props.formik.values, this.props.name) !== getIn(this.props.formik.values, this.props.name) || getIn(props.formik.errors, this.props.name) !== getIn(this.props.formik.errors, this.props.name) || getIn(props.formik.touched, this.props.name) !== getIn(this.props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || props.formik.isSubmitting !== this.props.formik.isSubmitting) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n\\n  _proto.componentDidMount = function componentDidMount() {\\n    // Register the Field with the parent Formik. Parent will cycle through\\n    // registered Field's validate fns right prior to submit\\n    this.props.formik.registerField(this.props.name, {\\n      validate: this.props.validate\\n    });\\n  };\\n\\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\\n    if (this.props.name !== prevProps.name) {\\n      this.props.formik.unregisterField(prevProps.name);\\n      this.props.formik.registerField(this.props.name, {\\n        validate: this.props.validate\\n      });\\n    }\\n\\n    if (this.props.validate !== prevProps.validate) {\\n      this.props.formik.registerField(this.props.name, {\\n        validate: this.props.validate\\n      });\\n    }\\n  };\\n\\n  _proto.componentWillUnmount = function componentWillUnmount() {\\n    this.props.formik.unregisterField(this.props.name);\\n  };\\n\\n  _proto.render = function render() {\\n    var _this$props = this.props,\\n        name = _this$props.name,\\n        render = _this$props.render,\\n        is = _this$props.as,\\n        children = _this$props.children,\\n        component = _this$props.component,\\n        formik = _this$props.formik,\\n        props = _objectWithoutPropertiesLoose(_this$props, [\\\"validate\\\", \\\"name\\\", \\\"render\\\", \\\"as\\\", \\\"children\\\", \\\"component\\\", \\\"shouldUpdate\\\", \\\"formik\\\"]);\\n\\n    var restOfFormik = _objectWithoutPropertiesLoose(formik, [\\\"validate\\\", \\\"validationSchema\\\"]);\\n\\n    var field = formik.getFieldProps(_extends({\\n      name: name\\n    }, props));\\n    var meta = {\\n      value: getIn(formik.values, name),\\n      error: getIn(formik.errors, name),\\n      touched: !!getIn(formik.touched, name),\\n      initialValue: getIn(formik.initialValues, name),\\n      initialTouched: !!getIn(formik.initialTouched, name),\\n      initialError: getIn(formik.initialErrors, name)\\n    };\\n    var bag = {\\n      field: field,\\n      meta: meta,\\n      form: restOfFormik\\n    };\\n\\n    if (render) {\\n      return render(bag);\\n    }\\n\\n    if (formik_esm_isFunction(children)) {\\n      return children(bag);\\n    }\\n\\n    if (component) {\\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\\n      if (typeof component === 'string') {\\n        var innerRef = props.innerRef,\\n            rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n        return (0,external_react_.createElement)(component, _extends({\\n          ref: innerRef\\n        }, field, rest), children);\\n      } // We don't pass `meta` for backwards compat\\n\\n\\n      return (0,external_react_.createElement)(component, _extends({\\n        field: field,\\n        form: formik\\n      }, props), children);\\n    } // default to input here so we can check for both `as` and `children` above\\n\\n\\n    var asElement = is || 'input';\\n\\n    if (typeof asElement === 'string') {\\n      var _innerRef = props.innerRef,\\n          _rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n      return (0,external_react_.createElement)(asElement, _extends({\\n        ref: _innerRef\\n      }, field, _rest), children);\\n    }\\n\\n    return (0,external_react_.createElement)(asElement, _extends({}, field, props), children);\\n  };\\n\\n  return FastFieldInner;\\n}(external_react_.Component);\\n\\nvar FastField = /*#__PURE__*/(/* unused pure expression or super */ null && (connect(FastFieldInner)));\\n\\n\\n//# sourceMappingURL=formik.esm.js.map\\n\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n;// CONCATENATED MODULE: ./Components/terms-of-use/checkbox-field.tsx\\nvar _excluded = [\\\"field\\\", \\\"id\\\", \\\"label\\\", \\\"className\\\"];\\nfunction checkbox_field_extends() { checkbox_field_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return checkbox_field_extends.apply(this, arguments); }\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = checkbox_field_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\nfunction checkbox_field_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n\\n/**\\n * This component is used with Formik's Field component.\\n * @param {FieldInputProps<boolean>} field - Formik's field props\\n * @param {string} id - Checkbox id\\n * @param {string} className - Class name for styling\\n * @param {string} label - Checkbox label\\n * @param {object} props - Other props\\n * @returns {React.ReactNode} - React node\\n */\\nvar CheckboxField = function CheckboxField(_ref) {\\n  var _ref$field = _ref.field,\\n    name = _ref$field.name,\\n    value = _ref$field.value,\\n    onChange = _ref$field.onChange,\\n    id = _ref.id,\\n    label = _ref.label,\\n    className = _ref.className,\\n    props = _objectWithoutProperties(_ref, _excluded);\\n  return /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: className\\n  }, /*#__PURE__*/external_react_default().createElement(components_.Checkbox, checkbox_field_extends({\\n    value: value,\\n    name: name,\\n    label: label,\\n    onChange: onChange\\n  }, props)));\\n};\\n/* harmony default export */ const checkbox_field = (CheckboxField);\\n;// CONCATENATED MODULE: ./Components/terms-of-use/terms-of-use-messages.tsx\\n\\n\\n\\n\\n\\n/**\\n * Renders a horizontal line\\n * @name Hr\\n * @returns JSX.Element\\n */\\nvar Hr = function Hr() {\\n  return /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"terms-of-use__hr\\\"\\n  });\\n};\\n\\n/**\\n * Renders the broker specific message based on the broker code\\n * @name BrokerSpecificMessage\\n * @param target - Broker code\\n * @returns JSX.Element\\n */\\nvar BrokerSpecificMessage = function BrokerSpecificMessage(_ref) {\\n  var target = _ref.target;\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    as: \\\"h4\\\",\\n    size: \\\"xs\\\",\\n    weight: \\\"bold\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: 'Jurisdiction and choice of law'\\n  })), /*#__PURE__*/external_react_default().createElement(\\\"p\\\", null, target === shared_.Jurisdiction.SVG ? /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: 'Your account will be opened with {{legal_entity_name}}, and will be subject to the laws of Saint Vincent and the Grenadines.',\\n    values: {\\n      legal_entity_name: (0,shared_.getLegalEntityName)(shared_.Jurisdiction.SVG)\\n    }\\n  }) : /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: 'Your account will be opened with {{legal_entity_name}}, regulated by the Malta Financial Services Authority (MFSA), and will be subject to the laws of Malta.',\\n    values: {\\n      legal_entity_name: (0,shared_.getLegalEntityName)(shared_.Jurisdiction.MALTA_INVEST)\\n    }\\n  })), /*#__PURE__*/external_react_default().createElement(Hr, null), /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    as: \\\"h4\\\",\\n    size: \\\"xs\\\",\\n    weight: \\\"bold\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: 'Risk warning'\\n  })), /*#__PURE__*/external_react_default().createElement(\\\"p\\\", null, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: 'The financial trading services offered on this site are only suitable for customers who accept the possibility of losing all the money they invest and who understand and have experience of the risk involved in the purchase of financial contracts. Transactions in financial contracts carry a high degree of risk. If the contracts you purchased expire as worthless, you will lose all your investment, which includes the contract premium.'\\n  })));\\n};\\n\\n/**\\n * Returns the generic terms of use message\\n * @name SVGDescription\\n * @returns JSX.Element\\n */\\nvar SharedMessage = function SharedMessage() {\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    as: \\\"h4\\\",\\n    size: \\\"xs\\\",\\n    weight: \\\"bold\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Real accounts are not available to politically exposed persons (PEPs).\\\"\\n  })), /*#__PURE__*/external_react_default().createElement(\\\"p\\\", null, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"A politically exposed person (PEP) is someone appointed with a prominent public position. Close associates and family members of a PEP are also considered to be PEPs.\\\"\\n  })));\\n};\\n;// CONCATENATED MODULE: ./Components/terms-of-use/terms-of-use.tsx\\nvar terms_of_use_excluded = [\\\"getCurrentStep\\\", \\\"onCancel\\\", \\\"goToPreviousStep\\\", \\\"goToNextStep\\\", \\\"onSubmit\\\", \\\"value\\\", \\\"real_account_signup_target\\\"];\\nfunction terms_of_use_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = terms_of_use_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\nfunction terms_of_use_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Terms of use component for account signup\\n * @name TermsOfUse\\n * @param getCurrentStep - function to get current step\\n * @param onCancel - function to cancel account signup\\n * @param goToPreviousStep - function to go to previous step\\n * @param goToNextStep - function to go to next step\\n * @param onSubmit - function to submit form\\n * @param value - form values\\n * @param real_account_signup_target - broker code\\n * @param form_error - form error\\n * @param props - other props\\n * @returns React node\\n */\\nvar TermsOfUse = function TermsOfUse(_ref) {\\n  var getCurrentStep = _ref.getCurrentStep,\\n    onCancel = _ref.onCancel,\\n    goToPreviousStep = _ref.goToPreviousStep,\\n    goToNextStep = _ref.goToNextStep,\\n    _onSubmit = _ref.onSubmit,\\n    value = _ref.value,\\n    real_account_signup_target = _ref.real_account_signup_target,\\n    props = terms_of_use_objectWithoutProperties(_ref, terms_of_use_excluded);\\n  var _React$useContext = external_react_default().useContext(shared_.PlatformContext),\\n    is_appstore = _React$useContext.is_appstore;\\n  var handleCancel = function handleCancel() {\\n    var current_step = getCurrentStep() - 1;\\n    onCancel(current_step, goToPreviousStep);\\n  };\\n  var getSubmitButtonLabel = function getSubmitButtonLabel() {\\n    if (is_appstore) {\\n      return (0,translations_.localize)('Finish');\\n    }\\n    return (0,translations_.localize)('Add account');\\n  };\\n  return /*#__PURE__*/external_react_default().createElement(Formik, {\\n    initialValues: value,\\n    onSubmit: function onSubmit(values, actions) {\\n      _onSubmit(getCurrentStep() - 1, values, actions.setSubmitting, goToNextStep);\\n    }\\n  }, function (_ref2) {\\n    var handleSubmit = _ref2.handleSubmit,\\n      values = _ref2.values,\\n      isSubmitting = _ref2.isSubmitting;\\n    return /*#__PURE__*/external_react_default().createElement(components_.AutoHeightWrapper, {\\n      default_height: 380,\\n      height_offset: (0,shared_.isDesktop)() ? 81 : null\\n    }, function (_ref3) {\\n      var setRef = _ref3.setRef;\\n      return /*#__PURE__*/external_react_default().createElement(\\\"form\\\", {\\n        ref: setRef,\\n        onSubmit: handleSubmit\\n      }, /*#__PURE__*/external_react_default().createElement(components_.Div100vhContainer, {\\n        className: \\\"details-form\\\",\\n        height_offset: is_appstore ? '242px' : '110px',\\n        is_disabled: (0,shared_.isDesktop)()\\n      }, /*#__PURE__*/external_react_default().createElement(components_.ThemedScrollbars, null, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n        className: classnames_default()('details-form__elements', 'terms-of-use')\\n      }, /*#__PURE__*/external_react_default().createElement(BrokerSpecificMessage, {\\n        target: real_account_signup_target\\n      }), /*#__PURE__*/external_react_default().createElement(Hr, null), /*#__PURE__*/external_react_default().createElement(SharedMessage, null), /*#__PURE__*/external_react_default().createElement(Field, {\\n        component: checkbox_field,\\n        className: \\\"terms-of-use__checkbox\\\",\\n        name: \\\"agreed_tos\\\",\\n        id: \\\"agreed_tos\\\",\\n        label: (0,translations_.localize)('I am not a PEP, and I have not been a PEP in the last 12 months.')\\n      }), /*#__PURE__*/external_react_default().createElement(Hr, null), /*#__PURE__*/external_react_default().createElement(Field, {\\n        component: checkbox_field,\\n        className: \\\"terms-of-use__checkbox\\\",\\n        name: \\\"agreed_tnc\\\",\\n        id: \\\"agreed_tnc\\\",\\n        label: /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n          i18n_default_text: \\\"I agree to the <0>terms and conditions</0>.\\\",\\n          components: [/*#__PURE__*/external_react_default().createElement(components_.StaticUrl, {\\n            key: 0,\\n            className: \\\"link\\\",\\n            href: \\\"/terms-and-conditions\\\"\\n          })]\\n        })\\n      })))), /*#__PURE__*/external_react_default().createElement(components_.Modal.Footer, {\\n        has_separator: true,\\n        is_bypassed: (0,shared_.isMobile)()\\n      }, /*#__PURE__*/external_react_default().createElement(components_.FormSubmitButton, {\\n        is_disabled: isSubmitting || !values.agreed_tos || !values.agreed_tnc,\\n        label: getSubmitButtonLabel(),\\n        has_cancel: true,\\n        is_absolute: (0,shared_.isMobile)(),\\n        onCancel: function onCancel() {\\n          return handleCancel();\\n        },\\n        cancel_label: (0,translations_.localize)('Previous'),\\n        form_error: props.form_error\\n      })));\\n    });\\n  });\\n};\\n/* harmony default export */ const terms_of_use = (TermsOfUse);\\n;// CONCATENATED MODULE: ./Components/terms-of-use/index.ts\\n\\n/* harmony default export */ const Components_terms_of_use = (terms_of_use);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Components/terms-of-use/index.ts\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/classnames/index.js\":\n/***/ ((module, exports) => {\n\neval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n\\tCopyright (c) 2018 Jed Watson.\\n\\tLicensed under the MIT License (MIT), see\\n\\thttp://jedwatson.github.io/classnames\\n*/\\n/* global define */\\n\\n(function () {\\n\\t'use strict';\\n\\n\\tvar hasOwn = {}.hasOwnProperty;\\n\\tvar nativeCodeString = '[native code]';\\n\\n\\tfunction classNames() {\\n\\t\\tvar classes = [];\\n\\n\\t\\tfor (var i = 0; i < arguments.length; i++) {\\n\\t\\t\\tvar arg = arguments[i];\\n\\t\\t\\tif (!arg) continue;\\n\\n\\t\\t\\tvar argType = typeof arg;\\n\\n\\t\\t\\tif (argType === 'string' || argType === 'number') {\\n\\t\\t\\t\\tclasses.push(arg);\\n\\t\\t\\t} else if (Array.isArray(arg)) {\\n\\t\\t\\t\\tif (arg.length) {\\n\\t\\t\\t\\t\\tvar inner = classNames.apply(null, arg);\\n\\t\\t\\t\\t\\tif (inner) {\\n\\t\\t\\t\\t\\t\\tclasses.push(inner);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (argType === 'object') {\\n\\t\\t\\t\\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\\n\\t\\t\\t\\t\\tclasses.push(arg.toString());\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor (var key in arg) {\\n\\t\\t\\t\\t\\tif (hasOwn.call(arg, key) && arg[key]) {\\n\\t\\t\\t\\t\\t\\tclasses.push(key);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn classes.join(' ');\\n\\t}\\n\\n\\tif ( true && module.exports) {\\n\\t\\tclassNames.default = classNames;\\n\\t\\tmodule.exports = classNames;\\n\\t} else if (true) {\\n\\t\\t// register as 'classnames', consistent with npm package name\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn classNames;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else {}\\n}());\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4uLy4uLy4uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzNkY2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/classnames/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n\\nvar reactIs = __webpack_require__(\\\"../../../node_modules/react-is/index.js\\\");\\n\\n/**\\n * Copyright 2015, Yahoo! Inc.\\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\\n */\\nvar REACT_STATICS = {\\n  childContextTypes: true,\\n  contextType: true,\\n  contextTypes: true,\\n  defaultProps: true,\\n  displayName: true,\\n  getDefaultProps: true,\\n  getDerivedStateFromError: true,\\n  getDerivedStateFromProps: true,\\n  mixins: true,\\n  propTypes: true,\\n  type: true\\n};\\nvar KNOWN_STATICS = {\\n  name: true,\\n  length: true,\\n  prototype: true,\\n  caller: true,\\n  callee: true,\\n  arguments: true,\\n  arity: true\\n};\\nvar FORWARD_REF_STATICS = {\\n  '$$typeof': true,\\n  render: true,\\n  defaultProps: true,\\n  displayName: true,\\n  propTypes: true\\n};\\nvar MEMO_STATICS = {\\n  '$$typeof': true,\\n  compare: true,\\n  defaultProps: true,\\n  displayName: true,\\n  propTypes: true,\\n  type: true\\n};\\nvar TYPE_STATICS = {};\\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\\n\\nfunction getStatics(component) {\\n  // React v16.11 and below\\n  if (reactIs.isMemo(component)) {\\n    return MEMO_STATICS;\\n  } // React v16.12 and above\\n\\n\\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\\n}\\n\\nvar defineProperty = Object.defineProperty;\\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\\nvar getPrototypeOf = Object.getPrototypeOf;\\nvar objectPrototype = Object.prototype;\\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\\n  if (typeof sourceComponent !== 'string') {\\n    // don't hoist over string (html) components\\n    if (objectPrototype) {\\n      var inheritedComponent = getPrototypeOf(sourceComponent);\\n\\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\\n      }\\n    }\\n\\n    var keys = getOwnPropertyNames(sourceComponent);\\n\\n    if (getOwnPropertySymbols) {\\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\\n    }\\n\\n    var targetStatics = getStatics(targetComponent);\\n    var sourceStatics = getStatics(sourceComponent);\\n\\n    for (var i = 0; i < keys.length; ++i) {\\n      var key = keys[i];\\n\\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\\n\\n        try {\\n          // Avoid failures from read-only properties\\n          defineProperty(targetComponent, key, descriptor);\\n        } catch (e) {}\\n      }\\n    }\\n  }\\n\\n  return targetComponent;\\n}\\n\\nmodule.exports = hoistNonReactStatics;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzPzkwY2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react-fast-compare/index.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"\\n\\nvar isArray = Array.isArray;\\nvar keyList = Object.keys;\\nvar hasProp = Object.prototype.hasOwnProperty;\\nvar hasElementType = typeof Element !== 'undefined';\\n\\nfunction equal(a, b) {\\n  // fast-deep-equal index.js 2.0.1\\n  if (a === b) return true;\\n\\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\\n    var arrA = isArray(a)\\n      , arrB = isArray(b)\\n      , i\\n      , length\\n      , key;\\n\\n    if (arrA && arrB) {\\n      length = a.length;\\n      if (length != b.length) return false;\\n      for (i = length; i-- !== 0;)\\n        if (!equal(a[i], b[i])) return false;\\n      return true;\\n    }\\n\\n    if (arrA != arrB) return false;\\n\\n    var dateA = a instanceof Date\\n      , dateB = b instanceof Date;\\n    if (dateA != dateB) return false;\\n    if (dateA && dateB) return a.getTime() == b.getTime();\\n\\n    var regexpA = a instanceof RegExp\\n      , regexpB = b instanceof RegExp;\\n    if (regexpA != regexpB) return false;\\n    if (regexpA && regexpB) return a.toString() == b.toString();\\n\\n    var keys = keyList(a);\\n    length = keys.length;\\n\\n    if (length !== keyList(b).length)\\n      return false;\\n\\n    for (i = length; i-- !== 0;)\\n      if (!hasProp.call(b, keys[i])) return false;\\n    // end fast-deep-equal\\n\\n    // start react-fast-compare\\n    // custom handling for DOM elements\\n    if (hasElementType && a instanceof Element && b instanceof Element)\\n      return a === b;\\n\\n    // custom handling for React\\n    for (i = length; i-- !== 0;) {\\n      key = keys[i];\\n      if (key === '_owner' && a.$$typeof) {\\n        // React-specific: avoid traversing React elements' _owner.\\n        //  _owner contains circular references\\n        // and is not needed when comparing the actual elements (and not their owners)\\n        // .$$typeof and ._store on just reasonable markers of a react element\\n        continue;\\n      } else {\\n        // all other properties should be traversed as usual\\n        if (!equal(a[key], b[key])) return false;\\n      }\\n    }\\n    // end react-fast-compare\\n\\n    // fast-deep-equal index.js 2.0.1\\n    return true;\\n  }\\n\\n  return a !== a && b !== b;\\n}\\n// end fast-deep-equal\\n\\nmodule.exports = function exportedEqual(a, b) {\\n  try {\\n    return equal(a, b);\\n  } catch (error) {\\n    if ((error.message && error.message.match(/stack|recursion/i)) || (error.number === -2146828260)) {\\n      // warn on circular references, don't crash\\n      // browsers give this different errors name and messages:\\n      // chrome/safari: \\\"RangeError\\\", \\\"Maximum call stack size exceeded\\\"\\n      // firefox: \\\"InternalError\\\", too much recursion\\\"\\n      // edge: \\\"Error\\\", \\\"Out of stack space\\\"\\n      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);\\n      return false;\\n    }\\n    // some other error. we should definitely know about these\\n    throw error;\\n  }\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWZhc3QtY29tcGFyZS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1mYXN0LWNvbXBhcmUvaW5kZXguanM/NjZmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBrZXlMaXN0ID0gT2JqZWN0LmtleXM7XG52YXIgaGFzUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaGFzRWxlbWVudFR5cGUgPSB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbmZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgLy8gZmFzdC1kZWVwLWVxdWFsIGluZGV4LmpzIDIuMC4xXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFyckEgPSBpc0FycmF5KGEpXG4gICAgICAsIGFyckIgPSBpc0FycmF5KGIpXG4gICAgICAsIGlcbiAgICAgICwgbGVuZ3RoXG4gICAgICAsIGtleTtcblxuICAgIGlmIChhcnJBICYmIGFyckIpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYXJyQSAhPSBhcnJCKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgZGF0ZUEgPSBhIGluc3RhbmNlb2YgRGF0ZVxuICAgICAgLCBkYXRlQiA9IGIgaW5zdGFuY2VvZiBEYXRlO1xuICAgIGlmIChkYXRlQSAhPSBkYXRlQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChkYXRlQSAmJiBkYXRlQikgcmV0dXJuIGEuZ2V0VGltZSgpID09IGIuZ2V0VGltZSgpO1xuXG4gICAgdmFyIHJlZ2V4cEEgPSBhIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgICAsIHJlZ2V4cEIgPSBiIGluc3RhbmNlb2YgUmVnRXhwO1xuICAgIGlmIChyZWdleHBBICE9IHJlZ2V4cEIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocmVnZXhwQSAmJiByZWdleHBCKSByZXR1cm4gYS50b1N0cmluZygpID09IGIudG9TdHJpbmcoKTtcblxuICAgIHZhciBrZXlzID0ga2V5TGlzdChhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGggIT09IGtleUxpc3QoYikubGVuZ3RoKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgaWYgKCFoYXNQcm9wLmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICAvLyBlbmQgZmFzdC1kZWVwLWVxdWFsXG5cbiAgICAvLyBzdGFydCByZWFjdC1mYXN0LWNvbXBhcmVcbiAgICAvLyBjdXN0b20gaGFuZGxpbmcgZm9yIERPTSBlbGVtZW50c1xuICAgIGlmIChoYXNFbGVtZW50VHlwZSAmJiBhIGluc3RhbmNlb2YgRWxlbWVudCAmJiBiIGluc3RhbmNlb2YgRWxlbWVudClcbiAgICAgIHJldHVybiBhID09PSBiO1xuXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBSZWFjdFxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChrZXkgPT09ICdfb3duZXInICYmIGEuJCR0eXBlb2YpIHtcbiAgICAgICAgLy8gUmVhY3Qtc3BlY2lmaWM6IGF2b2lkIHRyYXZlcnNpbmcgUmVhY3QgZWxlbWVudHMnIF9vd25lci5cbiAgICAgICAgLy8gIF9vd25lciBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgICAgIC8vIGFuZCBpcyBub3QgbmVlZGVkIHdoZW4gY29tcGFyaW5nIHRoZSBhY3R1YWwgZWxlbWVudHMgKGFuZCBub3QgdGhlaXIgb3duZXJzKVxuICAgICAgICAvLyAuJCR0eXBlb2YgYW5kIC5fc3RvcmUgb24ganVzdCByZWFzb25hYmxlIG1hcmtlcnMgb2YgYSByZWFjdCBlbGVtZW50XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYWxsIG90aGVyIHByb3BlcnRpZXMgc2hvdWxkIGJlIHRyYXZlcnNlZCBhcyB1c3VhbFxuICAgICAgICBpZiAoIWVxdWFsKGFba2V5XSwgYltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBlbmQgcmVhY3QtZmFzdC1jb21wYXJlXG5cbiAgICAvLyBmYXN0LWRlZXAtZXF1YWwgaW5kZXguanMgMi4wLjFcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhICE9PSBhICYmIGIgIT09IGI7XG59XG4vLyBlbmQgZmFzdC1kZWVwLWVxdWFsXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXhwb3J0ZWRFcXVhbChhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVxdWFsKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICgoZXJyb3IubWVzc2FnZSAmJiBlcnJvci5tZXNzYWdlLm1hdGNoKC9zdGFja3xyZWN1cnNpb24vaSkpIHx8IChlcnJvci5udW1iZXIgPT09IC0yMTQ2ODI4MjYwKSkge1xuICAgICAgLy8gd2FybiBvbiBjaXJjdWxhciByZWZlcmVuY2VzLCBkb24ndCBjcmFzaFxuICAgICAgLy8gYnJvd3NlcnMgZ2l2ZSB0aGlzIGRpZmZlcmVudCBlcnJvcnMgbmFtZSBhbmQgbWVzc2FnZXM6XG4gICAgICAvLyBjaHJvbWUvc2FmYXJpOiBcIlJhbmdlRXJyb3JcIiwgXCJNYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiXG4gICAgICAvLyBmaXJlZm94OiBcIkludGVybmFsRXJyb3JcIiwgdG9vIG11Y2ggcmVjdXJzaW9uXCJcbiAgICAgIC8vIGVkZ2U6IFwiRXJyb3JcIiwgXCJPdXQgb2Ygc3RhY2sgc3BhY2VcIlxuICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nOiByZWFjdC1mYXN0LWNvbXBhcmUgZG9lcyBub3QgaGFuZGxlIGNpcmN1bGFyIHJlZmVyZW5jZXMuJywgZXJyb3IubmFtZSwgZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIHNvbWUgb3RoZXIgZXJyb3IuIHdlIHNob3VsZCBkZWZpbml0ZWx5IGtub3cgYWJvdXQgdGhlc2VcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/react-fast-compare/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react-is/cjs/react-is.production.min.js\":\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\neval(\"/** @license React v16.13.1\\n * react-is.production.min.js\\n *\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nvar b=\\\"function\\\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\\\"react.element\\\"):60103,d=b?Symbol.for(\\\"react.portal\\\"):60106,e=b?Symbol.for(\\\"react.fragment\\\"):60107,f=b?Symbol.for(\\\"react.strict_mode\\\"):60108,g=b?Symbol.for(\\\"react.profiler\\\"):60114,h=b?Symbol.for(\\\"react.provider\\\"):60109,k=b?Symbol.for(\\\"react.context\\\"):60110,l=b?Symbol.for(\\\"react.async_mode\\\"):60111,m=b?Symbol.for(\\\"react.concurrent_mode\\\"):60111,n=b?Symbol.for(\\\"react.forward_ref\\\"):60112,p=b?Symbol.for(\\\"react.suspense\\\"):60113,q=b?\\nSymbol.for(\\\"react.suspense_list\\\"):60120,r=b?Symbol.for(\\\"react.memo\\\"):60115,t=b?Symbol.for(\\\"react.lazy\\\"):60116,v=b?Symbol.for(\\\"react.block\\\"):60121,w=b?Symbol.for(\\\"react.fundamental\\\"):60117,x=b?Symbol.for(\\\"react.responder\\\"):60118,y=b?Symbol.for(\\\"react.scope\\\"):60119;\\nfunction z(a){if(\\\"object\\\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\\\"object\\\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\\nexports.isValidElementType=function(a){return\\\"string\\\"===typeof a||\\\"function\\\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\\\"object\\\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzPzBhOTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/react-is/cjs/react-is.production.min.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react-is/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n\\nif (true) {\\n  module.exports = __webpack_require__(\\\"../../../node_modules/react-is/cjs/react-is.production.min.js\\\");\\n} else {}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/NzZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/react-is/index.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_483488__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_483488__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_483488__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_483488__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_483488__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_483488__.o(definition, key) && !__nested_webpack_require_483488__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_483488__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_483488__(\"./Components/terms-of-use/index.ts\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/terms-of-use.js\n");

/***/ }),

/***/ "../../account/dist/account/js/test-warning-modal.js":
/*!***********************************************************!*\
  !*** ../../account/dist/account/js/test-warning-modal.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Components/trading-assessment/test-warning-modal.jsx\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"@deriv/components\\\");\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_components__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\\\"@deriv/translations\\\");\\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_deriv_translations__WEBPACK_IMPORTED_MODULE_2__);\\n\\n\\n\\nvar TestWarningModal = function TestWarningModal(_ref) {\\n  var show_risk_modal = _ref.show_risk_modal,\\n    body_content = _ref.body_content,\\n    footer_content = _ref.footer_content;\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.MobileWrapper, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.MobileDialog, {\\n    wrapper_classname: \\\"test-warning\\\",\\n    portal_element_id: \\\"modal_root\\\",\\n    visible: show_risk_modal,\\n    title: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_2__.localize)('Appropriateness Test Warning'),\\n    has_close_icon: false\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal.Body, null, body_content), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal.Footer, null, footer_content))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.DesktopWrapper, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal, {\\n    width: \\\"44rem\\\",\\n    has_close_icon: false,\\n    title: (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_2__.localize)('Appropriateness Test Warning'),\\n    is_open: show_risk_modal\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal.Body, null, body_content), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_1__.Modal.Footer, null, footer_content))));\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TestWarningModal);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL3RyYWRpbmctYXNzZXNzbWVudC90ZXN0LXdhcm5pbmctbW9kYWwuanN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBTUE7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy90cmFkaW5nLWFzc2Vzc21lbnQvdGVzdC13YXJuaW5nLW1vZGFsLmpzeD9mZmJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEZXNrdG9wV3JhcHBlciwgTW9iaWxlRGlhbG9nLCBNb2JpbGVXcmFwcGVyLCBNb2RhbCB9IGZyb20gJ0BkZXJpdi9jb21wb25lbnRzJztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnQGRlcml2L3RyYW5zbGF0aW9ucyc7XG5cbmNvbnN0IFRlc3RXYXJuaW5nTW9kYWwgPSAoeyBzaG93X3Jpc2tfbW9kYWwsIGJvZHlfY29udGVudCwgZm9vdGVyX2NvbnRlbnQgfSkgPT4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPE1vYmlsZVdyYXBwZXI+XG4gICAgICAgICAgICA8TW9iaWxlRGlhbG9nXG4gICAgICAgICAgICAgICAgd3JhcHBlcl9jbGFzc25hbWU9J3Rlc3Qtd2FybmluZydcbiAgICAgICAgICAgICAgICBwb3J0YWxfZWxlbWVudF9pZD0nbW9kYWxfcm9vdCdcbiAgICAgICAgICAgICAgICB2aXNpYmxlPXtzaG93X3Jpc2tfbW9kYWx9XG4gICAgICAgICAgICAgICAgdGl0bGU9e2xvY2FsaXplKCdBcHByb3ByaWF0ZW5lc3MgVGVzdCBXYXJuaW5nJyl9XG4gICAgICAgICAgICAgICAgaGFzX2Nsb3NlX2ljb249e2ZhbHNlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxNb2RhbC5Cb2R5Pntib2R5X2NvbnRlbnR9PC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICAgIDxNb2RhbC5Gb290ZXI+e2Zvb3Rlcl9jb250ZW50fTwvTW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPC9Nb2JpbGVEaWFsb2c+XG4gICAgICAgIDwvTW9iaWxlV3JhcHBlcj5cbiAgICAgICAgPERlc2t0b3BXcmFwcGVyPlxuICAgICAgICAgICAgPE1vZGFsXG4gICAgICAgICAgICAgICAgd2lkdGg9JzQ0cmVtJ1xuICAgICAgICAgICAgICAgIGhhc19jbG9zZV9pY29uPXtmYWxzZX1cbiAgICAgICAgICAgICAgICB0aXRsZT17bG9jYWxpemUoJ0FwcHJvcHJpYXRlbmVzcyBUZXN0IFdhcm5pbmcnKX1cbiAgICAgICAgICAgICAgICBpc19vcGVuPXtzaG93X3Jpc2tfbW9kYWx9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkJvZHk+e2JvZHlfY29udGVudH08L01vZGFsLkJvZHk+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj57Zm9vdGVyX2NvbnRlbnR9PC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICA8L01vZGFsPlxuICAgICAgICA8L0Rlc2t0b3BXcmFwcGVyPlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBUZXN0V2FybmluZ01vZGFsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Components/trading-assessment/test-warning-modal.jsx\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_7499__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_7499__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_7499__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_7499__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_7499__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_7499__.o(definition, key) && !__nested_webpack_require_7499__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_7499__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_7499__(\"./Components/trading-assessment/test-warning-modal.jsx\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/test-warning-modal.js\n");

/***/ }),

/***/ "./Utils/Datadog/index.ts":
/*!********************************!*\
  !*** ./Utils/Datadog/index.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _datadog_browser_rum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @datadog/browser-rum */ \"../../../node_modules/@datadog/browser-rum/esm/entries/main.js\");\nvar _process$env$DATADOG_, _process$env$DATADOG_2;\n\nvar DATADOG_APP_ID = (_process$env$DATADOG_ = undefined) !== null && _process$env$DATADOG_ !== void 0 ? _process$env$DATADOG_ : '';\nvar DATADOG_CLIENT_TOKEN = (_process$env$DATADOG_2 = undefined) !== null && _process$env$DATADOG_2 !== void 0 ? _process$env$DATADOG_2 : '';\nvar isProduction = undefined === 'production';\nvar isStaging = undefined === 'staging';\nfunction getAcct1Value(url) {\n  var start = url.indexOf('acct1=') + 6; // 6 is the length of 'acct1='\n  var end = url.indexOf('&', start); // Find the end of the parameter value\n  if (end === -1) {\n    return url.substring(start); // If there's no '&' after acct1, get the substring from start to the end\n  }\n\n  return url.substring(start, end); // Get the substring between 'acct1=' and the '&'\n}\n\nvar dataDogSessionSampleRate = 0;\nvar dataDogSessionReplaySampleRate = 0;\nvar dataDogVersion = '';\nvar dataDogEnv = '';\nvar serviceName = '';\nif (isProduction) {\n  var _ref, _ref2;\n  serviceName = 'app.deriv.com';\n  dataDogVersion = \"deriv-app-\".concat(undefined);\n  dataDogSessionReplaySampleRate = (_ref = +undefined) !== null && _ref !== void 0 ? _ref : 1;\n  dataDogSessionSampleRate = (_ref2 = +undefined) !== null && _ref2 !== void 0 ? _ref2 : 10;\n  dataDogEnv = 'production';\n} else if (isStaging) {\n  serviceName = 'staging-app.deriv.com';\n  dataDogVersion = \"deriv-app-staging-v\".concat(undefined);\n  dataDogSessionReplaySampleRate = 100;\n  dataDogSessionSampleRate = 100;\n  dataDogEnv = 'staging';\n}\n// we do it in order avoid error \"application id is not configured, no RUM data will be collected\"\n// for test-links where application ID has not been configured and therefore RUM data will not be collected\nif (isProduction || isStaging) {\n  _datadog_browser_rum__WEBPACK_IMPORTED_MODULE_0__.datadogRum.init({\n    applicationId: isStaging || isProduction ? DATADOG_APP_ID : '',\n    clientToken: isStaging || isProduction ? DATADOG_CLIENT_TOKEN : '',\n    site: 'datadoghq.com',\n    service: serviceName,\n    env: dataDogEnv,\n    sessionSampleRate: dataDogSessionSampleRate,\n    sessionReplaySampleRate: dataDogSessionReplaySampleRate,\n    trackUserInteractions: true,\n    trackResources: true,\n    trackLongTasks: true,\n    defaultPrivacyLevel: 'mask-user-input',\n    version: dataDogVersion,\n    trackFrustrations: true,\n    enableExperimentalFeatures: ['clickmap'],\n    beforeSend: function beforeSend(event) {\n      if (event.type === 'resource') {\n        event.resource.url = event.resource.url.replace(/^https:\\/\\/api.telegram.org.*$/, 'telegram token=REDACTED');\n        if (event.resource.url.match(/^ https:\\/\\/eu.deriv.com\\/ctrader-login.*$/)) {\n          var url = event.resource.url;\n          var accnt = getAcct1Value(url);\n          event.resource.url = event.resource.url.replace(/^ https:\\/\\/eu.deriv.com\\/ctrader-login.*$/, \"https://eu.deriv.com/ctrader-login?acct1=\".concat(accnt, \"&token1=redacted\"));\n        }\n      }\n    }\n  });\n  _datadog_browser_rum__WEBPACK_IMPORTED_MODULE_0__.datadogRum.startSessionReplayRecording();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9VdGlscy9EYXRhZG9nL2luZGV4LnRzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vVXRpbHMvRGF0YWRvZy9pbmRleC50cz8yMGFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRhdGFkb2dSdW0gfSBmcm9tICdAZGF0YWRvZy9icm93c2VyLXJ1bSc7XG5cbmNvbnN0IERBVEFET0dfQVBQX0lEID0gcHJvY2Vzcy5lbnYuREFUQURPR19BUFBMSUNBVElPTl9JRCA/PyAnJztcbmNvbnN0IERBVEFET0dfQ0xJRU5UX1RPS0VOID0gcHJvY2Vzcy5lbnYuREFUQURPR19DTElFTlRfVE9LRU4gPz8gJyc7XG5jb25zdCBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuY29uc3QgaXNTdGFnaW5nID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdzdGFnaW5nJztcblxuZnVuY3Rpb24gZ2V0QWNjdDFWYWx1ZSh1cmw6IHN0cmluZykge1xuICAgIGNvbnN0IHN0YXJ0ID0gdXJsLmluZGV4T2YoJ2FjY3QxPScpICsgNjsgLy8gNiBpcyB0aGUgbGVuZ3RoIG9mICdhY2N0MT0nXG4gICAgY29uc3QgZW5kID0gdXJsLmluZGV4T2YoJyYnLCBzdGFydCk7IC8vIEZpbmQgdGhlIGVuZCBvZiB0aGUgcGFyYW1ldGVyIHZhbHVlXG4gICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHVybC5zdWJzdHJpbmcoc3RhcnQpOyAvLyBJZiB0aGVyZSdzIG5vICcmJyBhZnRlciBhY2N0MSwgZ2V0IHRoZSBzdWJzdHJpbmcgZnJvbSBzdGFydCB0byB0aGUgZW5kXG4gICAgfVxuICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpOyAvLyBHZXQgdGhlIHN1YnN0cmluZyBiZXR3ZWVuICdhY2N0MT0nIGFuZCB0aGUgJyYnXG59XG5cbmxldCBkYXRhRG9nU2Vzc2lvblNhbXBsZVJhdGUgPSAwO1xubGV0IGRhdGFEb2dTZXNzaW9uUmVwbGF5U2FtcGxlUmF0ZSA9IDA7XG5sZXQgZGF0YURvZ1ZlcnNpb24gPSAnJztcbmxldCBkYXRhRG9nRW52ID0gJyc7XG5sZXQgc2VydmljZU5hbWUgPSAnJztcblxuaWYgKGlzUHJvZHVjdGlvbikge1xuICAgIHNlcnZpY2VOYW1lID0gJ2FwcC5kZXJpdi5jb20nO1xuICAgIGRhdGFEb2dWZXJzaW9uID0gYGRlcml2LWFwcC0ke3Byb2Nlc3MuZW52LlJFRl9OQU1FfWA7XG4gICAgZGF0YURvZ1Nlc3Npb25SZXBsYXlTYW1wbGVSYXRlID0gK3Byb2Nlc3MuZW52LkRBVEFET0dfU0VTU0lPTl9SRVBMQVlfU0FNUExFX1JBVEUhID8/IDE7XG4gICAgZGF0YURvZ1Nlc3Npb25TYW1wbGVSYXRlID0gK3Byb2Nlc3MuZW52LkRBVEFET0dfU0VTU0lPTl9TQU1QTEVfUkFURSEgPz8gMTA7XG4gICAgZGF0YURvZ0VudiA9ICdwcm9kdWN0aW9uJztcbn0gZWxzZSBpZiAoaXNTdGFnaW5nKSB7XG4gICAgc2VydmljZU5hbWUgPSAnc3RhZ2luZy1hcHAuZGVyaXYuY29tJztcbiAgICBkYXRhRG9nVmVyc2lvbiA9IGBkZXJpdi1hcHAtc3RhZ2luZy12JHtwcm9jZXNzLmVudi5SRUZfTkFNRX1gO1xuICAgIGRhdGFEb2dTZXNzaW9uUmVwbGF5U2FtcGxlUmF0ZSA9IDEwMDtcbiAgICBkYXRhRG9nU2Vzc2lvblNhbXBsZVJhdGUgPSAxMDA7XG4gICAgZGF0YURvZ0VudiA9ICdzdGFnaW5nJztcbn1cbi8vIHdlIGRvIGl0IGluIG9yZGVyIGF2b2lkIGVycm9yIFwiYXBwbGljYXRpb24gaWQgaXMgbm90IGNvbmZpZ3VyZWQsIG5vIFJVTSBkYXRhIHdpbGwgYmUgY29sbGVjdGVkXCJcbi8vIGZvciB0ZXN0LWxpbmtzIHdoZXJlIGFwcGxpY2F0aW9uIElEIGhhcyBub3QgYmVlbiBjb25maWd1cmVkIGFuZCB0aGVyZWZvcmUgUlVNIGRhdGEgd2lsbCBub3QgYmUgY29sbGVjdGVkXG5pZiAoaXNQcm9kdWN0aW9uIHx8IGlzU3RhZ2luZykge1xuICAgIGRhdGFkb2dSdW0uaW5pdCh7XG4gICAgICAgIGFwcGxpY2F0aW9uSWQ6IGlzU3RhZ2luZyB8fCBpc1Byb2R1Y3Rpb24gPyBEQVRBRE9HX0FQUF9JRCA6ICcnLFxuICAgICAgICBjbGllbnRUb2tlbjogaXNTdGFnaW5nIHx8IGlzUHJvZHVjdGlvbiA/IERBVEFET0dfQ0xJRU5UX1RPS0VOIDogJycsXG4gICAgICAgIHNpdGU6ICdkYXRhZG9naHEuY29tJyxcbiAgICAgICAgc2VydmljZTogc2VydmljZU5hbWUsXG4gICAgICAgIGVudjogZGF0YURvZ0VudixcbiAgICAgICAgc2Vzc2lvblNhbXBsZVJhdGU6IGRhdGFEb2dTZXNzaW9uU2FtcGxlUmF0ZSxcbiAgICAgICAgc2Vzc2lvblJlcGxheVNhbXBsZVJhdGU6IGRhdGFEb2dTZXNzaW9uUmVwbGF5U2FtcGxlUmF0ZSxcbiAgICAgICAgdHJhY2tVc2VySW50ZXJhY3Rpb25zOiB0cnVlLFxuICAgICAgICB0cmFja1Jlc291cmNlczogdHJ1ZSxcbiAgICAgICAgdHJhY2tMb25nVGFza3M6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcml2YWN5TGV2ZWw6ICdtYXNrLXVzZXItaW5wdXQnLFxuICAgICAgICB2ZXJzaW9uOiBkYXRhRG9nVmVyc2lvbixcbiAgICAgICAgdHJhY2tGcnVzdHJhdGlvbnM6IHRydWUsXG4gICAgICAgIGVuYWJsZUV4cGVyaW1lbnRhbEZlYXR1cmVzOiBbJ2NsaWNrbWFwJ10sXG4gICAgICAgIGJlZm9yZVNlbmQ6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncmVzb3VyY2UnKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucmVzb3VyY2UudXJsID0gZXZlbnQucmVzb3VyY2UudXJsLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgIC9eaHR0cHM6XFwvXFwvYXBpLnRlbGVncmFtLm9yZy4qJC8sXG4gICAgICAgICAgICAgICAgICAgICd0ZWxlZ3JhbSB0b2tlbj1SRURBQ1RFRCdcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnJlc291cmNlLnVybC5tYXRjaCgvXiBodHRwczpcXC9cXC9ldS5kZXJpdi5jb21cXC9jdHJhZGVyLWxvZ2luLiokLykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gZXZlbnQucmVzb3VyY2UudXJsO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NudCA9IGdldEFjY3QxVmFsdWUodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucmVzb3VyY2UudXJsID0gZXZlbnQucmVzb3VyY2UudXJsLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAvXiBodHRwczpcXC9cXC9ldS5kZXJpdi5jb21cXC9jdHJhZGVyLWxvZ2luLiokLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGBodHRwczovL2V1LmRlcml2LmNvbS9jdHJhZGVyLWxvZ2luP2FjY3QxPSR7YWNjbnR9JnRva2VuMT1yZWRhY3RlZGBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBkYXRhZG9nUnVtLnN0YXJ0U2Vzc2lvblJlcGxheVJlY29yZGluZygpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Utils/Datadog/index.ts\n");

/***/ }),

/***/ "./Utils/Hotjar/index.ts":
/*!*******************************!*\
  !*** ./Utils/Hotjar/index.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\");\n\nvar isProduction = undefined === 'production';\nvar initHotjar = function initHotjar(client) {\n  // To initialize only on licensed domains.\n  if (!isProduction) return;\n\n  /**\n   * Inject: External Script - Hotjar\n   */\n  (function (h, o, t, j) {\n    /* eslint-disable */\n    h.hj = h.hj || function () {\n      (h.hj.q = h.hj.q || []).push(arguments);\n    };\n    /* eslint-enable */\n    h._hjSettings = {\n      hjid: 3050531,\n      hjsv: 6\n    };\n    var a = o.getElementsByTagName('head')[0];\n    var r = o.createElement('script');\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    r.async = 1;\n    r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;\n    a.appendChild(r);\n\n    // Hotjar attribution code for user segmentation\n    var user_id = client.loginid;\n    var account_type = client.is_virtual ? 'Demo' : 'Real';\n    var account_open_date = client.account_open_date ? (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.epochToMoment)(client.account_open_date) : undefined;\n    window.hj('identify', user_id, {\n      'Account created': account_open_date ? (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.toMoment)(account_open_date).format('YYYY-MM-DD') : '',\n      'Account type': account_type,\n      'User country': client.clients_country,\n      'Beta chart': client.is_beta_chart\n    });\n  })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initHotjar);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9VdGlscy9Ib3RqYXIvaW5kZXgudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUdBO0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9VdGlscy9Ib3RqYXIvaW5kZXgudHM/ZDZkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcG9jaFRvTW9tZW50LCB0b01vbWVudCB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuaW1wb3J0IHsgVENvcmVTdG9yZXMgfSBmcm9tICdAZGVyaXYvc3RvcmVzL3R5cGVzJztcblxuY29uc3QgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcblxuY29uc3QgaW5pdEhvdGphciA9IChjbGllbnQ6IFRDb3JlU3RvcmVzWydjbGllbnQnXSkgPT4ge1xuICAgIC8vIFRvIGluaXRpYWxpemUgb25seSBvbiBsaWNlbnNlZCBkb21haW5zLlxuICAgIGlmICghaXNQcm9kdWN0aW9uKSByZXR1cm47XG5cbiAgICAvKipcbiAgICAgKiBJbmplY3Q6IEV4dGVybmFsIFNjcmlwdCAtIEhvdGphclxuICAgICAqL1xuICAgIChmdW5jdGlvbiAoaDogYW55LCBvLCB0LCBqKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAgIGguaGogPVxuICAgICAgICAgICAgaC5oaiB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIChoLmhqLnEgPSBoLmhqLnEgfHwgW10pLnB1c2goYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICAgICAgaC5faGpTZXR0aW5ncyA9IHsgaGppZDogMzA1MDUzMSwgaGpzdjogNiB9O1xuICAgICAgICBjb25zdCBhID0gby5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgICBjb25zdCByID0gby5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgci5hc3luYyA9IDE7XG4gICAgICAgIHIuc3JjID0gdCArIGguX2hqU2V0dGluZ3MuaGppZCArIGogKyBoLl9oalNldHRpbmdzLmhqc3Y7XG4gICAgICAgIGEuYXBwZW5kQ2hpbGQocik7XG5cbiAgICAgICAgLy8gSG90amFyIGF0dHJpYnV0aW9uIGNvZGUgZm9yIHVzZXIgc2VnbWVudGF0aW9uXG4gICAgICAgIGNvbnN0IHVzZXJfaWQgPSBjbGllbnQubG9naW5pZDtcbiAgICAgICAgY29uc3QgYWNjb3VudF90eXBlID0gY2xpZW50LmlzX3ZpcnR1YWwgPyAnRGVtbycgOiAnUmVhbCc7XG4gICAgICAgIGNvbnN0IGFjY291bnRfb3Blbl9kYXRlID0gY2xpZW50LmFjY291bnRfb3Blbl9kYXRlID8gZXBvY2hUb01vbWVudChjbGllbnQuYWNjb3VudF9vcGVuX2RhdGUpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5oaignaWRlbnRpZnknLCB1c2VyX2lkLCB7XG4gICAgICAgICAgICAnQWNjb3VudCBjcmVhdGVkJzogYWNjb3VudF9vcGVuX2RhdGUgPyB0b01vbWVudChhY2NvdW50X29wZW5fZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREJykgOiAnJyxcbiAgICAgICAgICAgICdBY2NvdW50IHR5cGUnOiBhY2NvdW50X3R5cGUsXG4gICAgICAgICAgICAnVXNlciBjb3VudHJ5JzogY2xpZW50LmNsaWVudHNfY291bnRyeSxcbiAgICAgICAgICAgICdCZXRhIGNoYXJ0JzogY2xpZW50LmlzX2JldGFfY2hhcnQsXG4gICAgICAgIH0pO1xuICAgIH0pKHdpbmRvdywgZG9jdW1lbnQsICdodHRwczovL3N0YXRpYy5ob3RqYXIuY29tL2MvaG90amFyLScsICcuanM/c3Y9Jyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbml0SG90amFyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Utils/Hotjar/index.ts\n");

/***/ }),

/***/ "./Utils/Language/index.js":
/*!*********************************!*\
  !*** ./Utils/Language/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "changeLanguage": () => (/* reexport safe */ _language__WEBPACK_IMPORTED_MODULE_0__.changeLanguage),
/* harmony export */   "currentLanguage": () => (/* reexport safe */ _language__WEBPACK_IMPORTED_MODULE_0__.currentLanguage),
/* harmony export */   "getURL": () => (/* reexport safe */ _language__WEBPACK_IMPORTED_MODULE_0__.getURL)
/* harmony export */ });
/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./language */ "./Utils/Language/language.js");


/***/ }),

/***/ "./Utils/Language/language.js":
/*!************************************!*\
  !*** ./Utils/Language/language.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"changeLanguage\": () => (/* binding */ changeLanguage),\n/* harmony export */   \"currentLanguage\": () => (/* binding */ currentLanguage),\n/* harmony export */   \"getURL\": () => (/* binding */ getURL)\n/* harmony export */ });\n/* harmony import */ var Services_ws_methods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Services/ws-methods */ \"./Services/ws-methods.js\");\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\");\n/* harmony import */ var _deriv_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\");\n/* harmony import */ var _common_base_socket_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! _common/base/socket_cache */ \"./_common/base/socket_cache.js\");\n/* harmony import */ var _common_base_socket_cache__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_common_base_socket_cache__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _common_base_socket_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! _common/base/socket_base */ \"./_common/base/socket_base.js\");\n/* harmony import */ var _common_base_socket_base__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_common_base_socket_base__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nvar currentLanguage = (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_2__.getLanguage)();\nvar getURL = function getURL(lang) {\n  return (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.urlForLanguage)(lang);\n};\nvar changeLanguage = function changeLanguage(key, changeCurrentLanguage) {\n  _common_base_socket_cache__WEBPACK_IMPORTED_MODULE_3__.clear();\n  if (key === 'EN') {\n    window.localStorage.setItem('i18n_language', key);\n  }\n  Services_ws_methods__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setSettings({\n    set_settings: 1,\n    preferred_language: key\n  }).then(function () {\n    var new_url = new URL(window.location.href);\n    if (key === 'EN') {\n      new_url.searchParams[\"delete\"]('lang');\n    } else {\n      new_url.searchParams.set('lang', key);\n    }\n    window.history.pushState({\n      path: new_url.toString()\n    }, '', new_url.toString());\n    (0,_deriv_translations__WEBPACK_IMPORTED_MODULE_2__.changeLanguage)(key, function () {\n      changeCurrentLanguage(key);\n      _common_base_socket_base__WEBPACK_IMPORTED_MODULE_4___default().closeAndOpenNewConnection(key);\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9VdGlscy9MYW5ndWFnZS9sYW5ndWFnZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vVXRpbHMvTGFuZ3VhZ2UvbGFuZ3VhZ2UuanM/Zjk2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV1MgZnJvbSAnU2VydmljZXMvd3MtbWV0aG9kcyc7XG5pbXBvcnQgeyB1cmxGb3JMYW5ndWFnZSB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuaW1wb3J0IHsgZ2V0TGFuZ3VhZ2UsIGNoYW5nZUxhbmd1YWdlIGFzIGNoYW5nZUxhbmd1YWdlVHJhbnNsYXRpb24gfSBmcm9tICdAZGVyaXYvdHJhbnNsYXRpb25zJztcbmltcG9ydCAqIGFzIFNvY2tldENhY2hlIGZyb20gJ19jb21tb24vYmFzZS9zb2NrZXRfY2FjaGUnO1xuaW1wb3J0IEJpbmFyeVNvY2tldCBmcm9tICdfY29tbW9uL2Jhc2Uvc29ja2V0X2Jhc2UnO1xuXG5leHBvcnQgY29uc3QgY3VycmVudExhbmd1YWdlID0gZ2V0TGFuZ3VhZ2UoKTtcblxuZXhwb3J0IGNvbnN0IGdldFVSTCA9IGxhbmcgPT4gdXJsRm9yTGFuZ3VhZ2UobGFuZyk7XG5cbmV4cG9ydCBjb25zdCBjaGFuZ2VMYW5ndWFnZSA9IChrZXksIGNoYW5nZUN1cnJlbnRMYW5ndWFnZSkgPT4ge1xuICAgIFNvY2tldENhY2hlLmNsZWFyKCk7XG4gICAgaWYgKGtleSA9PT0gJ0VOJykge1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2kxOG5fbGFuZ3VhZ2UnLCBrZXkpO1xuICAgIH1cblxuICAgIFdTLnNldFNldHRpbmdzKHtcbiAgICAgICAgc2V0X3NldHRpbmdzOiAxLFxuICAgICAgICBwcmVmZXJyZWRfbGFuZ3VhZ2U6IGtleSxcbiAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3X3VybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBpZiAoa2V5ID09PSAnRU4nKSB7XG4gICAgICAgICAgICBuZXdfdXJsLnNlYXJjaFBhcmFtcy5kZWxldGUoJ2xhbmcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld191cmwuc2VhcmNoUGFyYW1zLnNldCgnbGFuZycsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgcGF0aDogbmV3X3VybC50b1N0cmluZygpIH0sICcnLCBuZXdfdXJsLnRvU3RyaW5nKCkpO1xuICAgICAgICBjaGFuZ2VMYW5ndWFnZVRyYW5zbGF0aW9uKGtleSwgKCkgPT4ge1xuICAgICAgICAgICAgY2hhbmdlQ3VycmVudExhbmd1YWdlKGtleSk7XG4gICAgICAgICAgICBCaW5hcnlTb2NrZXQuY2xvc2VBbmRPcGVuTmV3Q29ubmVjdGlvbihrZXkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Utils/Language/language.js\n");

/***/ }),

/***/ "./Utils/pwa/index.js":
/*!****************************!*\
  !*** ./Utils/pwa/index.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"unregister\": () => (/* reexport safe */ _register_service_worker__WEBPACK_IMPORTED_MODULE_0__.unregister)\n/* harmony export */ });\n/* harmony import */ var _register_service_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./register-service-worker */ \"./Utils/pwa/register-service-worker.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_register_service_worker__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9VdGlscy9wd2EvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL1V0aWxzL3B3YS9pbmRleC5qcz9hMzNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZWdpc3RlciBmcm9tICcuL3JlZ2lzdGVyLXNlcnZpY2Utd29ya2VyJztcblxuZXhwb3J0IGRlZmF1bHQgcmVnaXN0ZXI7XG5leHBvcnQgeyB1bnJlZ2lzdGVyIH0gZnJvbSAnLi9yZWdpc3Rlci1zZXJ2aWNlLXdvcmtlcic7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Utils/pwa/index.js\n");

/***/ }),

/***/ "./Utils/pwa/register-service-worker.js":
/*!**********************************************!*\
  !*** ./Utils/pwa/register-service-worker.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ register),\n/* harmony export */   \"unregister\": () => (/* binding */ unregister)\n/* harmony export */ });\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\");\n\nvar EVERY_HOUR = 3600000; // 1000 * 60 * 60\n\nvar interval_id;\nfunction refreshOnUpdate() {\n  return function (swRegistrationObject) {\n    swRegistrationObject.onupdatefound = function () {\n      var updatingWorker = swRegistrationObject.installing;\n      updatingWorker.onstatechange = function () {\n        if (updatingWorker.state === 'installed' && navigator.serviceWorker.controller) {\n          // eslint-disable-next-line no-console\n          console.log('New version is found, refreshing the page...');\n          clearInterval(interval_id);\n        }\n      };\n    };\n  };\n}\nfunction register() {\n  // Register the service worker\n  if ( /* process.env.NODE_ENV === 'production' && */'serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n      var sw_url = \"\".concat(window.location.origin).concat((0,_deriv_shared__WEBPACK_IMPORTED_MODULE_0__.getUrlBase)('/service-worker.js'));\n      navigator.serviceWorker.register(sw_url).then(function (registration) {\n        interval_id = setInterval(function () {\n          registration.update().then(refreshOnUpdate)[\"catch\"](function (error) {\n            console.error('Error during service worker update:', error); // eslint-disable-line no-console\n          });\n        }, EVERY_HOUR);\n        registration.onupdatefound = function () {\n          var installingWorker = registration.installing;\n          installingWorker.onstatechange = function () {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller && performance.now() > EVERY_HOUR) {\n                // User's first visit:\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                var new_version_received = new Event('UpdateAvailable');\n                document.dispatchEvent(new_version_received);\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n              }\n            }\n          };\n        };\n      })[\"catch\"](function (error) {\n        console.error('Error during service worker registration:', error, sw_url); // eslint-disable-line no-console\n      });\n    });\n  }\n}\n\nfunction unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9VdGlscy9wd2EvcmVnaXN0ZXItc2VydmljZS13b3JrZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL1V0aWxzL3B3YS9yZWdpc3Rlci1zZXJ2aWNlLXdvcmtlci5qcz84YTdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFVybEJhc2UgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcblxuY29uc3QgRVZFUllfSE9VUiA9IDM2MDAwMDA7IC8vIDEwMDAgKiA2MCAqIDYwXG5cbmxldCBpbnRlcnZhbF9pZDtcblxuZnVuY3Rpb24gcmVmcmVzaE9uVXBkYXRlKCkge1xuICAgIHJldHVybiBzd1JlZ2lzdHJhdGlvbk9iamVjdCA9PiB7XG4gICAgICAgIHN3UmVnaXN0cmF0aW9uT2JqZWN0Lm9udXBkYXRlZm91bmQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGluZ1dvcmtlciA9IHN3UmVnaXN0cmF0aW9uT2JqZWN0Lmluc3RhbGxpbmc7XG4gICAgICAgICAgICB1cGRhdGluZ1dvcmtlci5vbnN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1cGRhdGluZ1dvcmtlci5zdGF0ZSA9PT0gJ2luc3RhbGxlZCcgJiYgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTmV3IHZlcnNpb24gaXMgZm91bmQsIHJlZnJlc2hpbmcgdGhlIHBhZ2UuLi4nKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbF9pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgICAvLyBSZWdpc3RlciB0aGUgc2VydmljZSB3b3JrZXJcbiAgICBpZiAoLyogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiAqLyAnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3dfdXJsID0gYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0ke2dldFVybEJhc2UoJy9zZXJ2aWNlLXdvcmtlci5qcycpfWA7XG4gICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlclxuICAgICAgICAgICAgICAgIC5yZWdpc3Rlcihzd191cmwpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWxfaWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZWZyZXNoT25VcGRhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIHNlcnZpY2Ugd29ya2VyIHVwZGF0ZTonLCBlcnJvcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LCBFVkVSWV9IT1VSKTtcblxuICAgICAgICAgICAgICAgICAgICByZWdpc3RyYXRpb24ub251cGRhdGVmb3VuZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbGxpbmdXb3JrZXIgPSByZWdpc3RyYXRpb24uaW5zdGFsbGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxpbmdXb3JrZXIub25zdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFsbGluZ1dvcmtlci5zdGF0ZSA9PT0gJ2luc3RhbGxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIgJiYgcGVyZm9ybWFuY2Uubm93KCkgPiBFVkVSWV9IT1VSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2VyJ3MgZmlyc3QgdmlzaXQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgb2xkIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gcHVyZ2VkIGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZyZXNoIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyB0aGUgcGVyZmVjdCB0aW1lIHRvIGRpc3BsYXkgYSBcIk5ldyBjb250ZW50IGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhdmFpbGFibGU7IHBsZWFzZSByZWZyZXNoLlwiIG1lc3NhZ2UgaW4geW91ciB3ZWIgYXBwLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3X3ZlcnNpb25fcmVjZWl2ZWQgPSBuZXcgRXZlbnQoJ1VwZGF0ZUF2YWlsYWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXdfdmVyc2lvbl9yZWNlaXZlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCBldmVyeXRoaW5nIGhhcyBiZWVuIHByZWNhY2hlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHBlcmZlY3QgdGltZSB0byBkaXNwbGF5IGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFwiQ29udGVudCBpcyBjYWNoZWQgZm9yIG9mZmxpbmUgdXNlLlwiIG1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbjonLCBlcnJvciwgc3dfdXJsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXIoKSB7XG4gICAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHkudGhlbihyZWdpc3RyYXRpb24gPT4ge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uLnVucmVnaXN0ZXIoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Utils/pwa/register-service-worker.js\n");

/***/ }),

/***/ "./_common/base/api_middleware.js":
/*!****************************************!*\
  !*** ./_common/base/api_middleware.js ***!
  \****************************************/
/***/ ((module) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar APIMiddleware = /*#__PURE__*/function () {\n  function APIMiddleware(config) {\n    var session_id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    _classCallCheck(this, APIMiddleware);\n    this.session_id = void 0;\n    this.config = config;\n    this.debounced_calls = {};\n    this.session_id = session_id;\n  }\n  _createClass(APIMiddleware, [{\n    key: \"requestDataTransformer\",\n    value: function requestDataTransformer(request) {\n      return this.session_id ? _objectSpread(_objectSpread({}, request), {}, {\n        session_id: this.session_id\n      }) : request;\n    }\n  }, {\n    key: \"sendWillBeCalled\",\n    value: function sendWillBeCalled(_ref) {\n      var _ref$args = _slicedToArray(_ref.args, 1),\n        request = _ref$args[0];\n      this.config.wsEvent('send');\n      var key = requestToKey(request);\n      if (key in this.debounced_calls) {\n        return this.debounced_calls[key];\n      }\n      return undefined;\n    }\n  }, {\n    key: \"sendIsCalled\",\n    value: function sendIsCalled(_ref2) {\n      var _this = this;\n      var response_promise = _ref2.response_promise,\n        _ref2$args = _slicedToArray(_ref2.args, 2),\n        request = _ref2$args[0],\n        _ref2$args$ = _ref2$args[1],\n        options = _ref2$args$ === void 0 ? {} : _ref2$args$;\n      var promise = promiseRejectToResolve(response_promise);\n      var key = requestToKey(request);\n      if (options.callback) {\n        promise.then(options.callback);\n      }\n      this.debounced_calls[key] = promise;\n      promise.then(function () {\n        delete _this.debounced_calls[key];\n      });\n      return promise;\n    }\n  }]);\n  return APIMiddleware;\n}(); // Delegate error handling to the callback\nfunction promiseRejectToResolve(promise) {\n  return new Promise(function (r) {\n    promise.then(r, r);\n  });\n}\nfunction requestToKey(request) {\n  var request_copy = _objectSpread({}, request);\n  delete request_copy.passthrough;\n  delete request_copy.req_id;\n  delete request_copy.subscribe;\n  return JSON.stringify(request_copy);\n}\nmodule.exports = APIMiddleware;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBUElNaWRkbGV3YXJlIiwiY29uZmlnIiwic2Vzc2lvbl9pZCIsImRlYm91bmNlZF9jYWxscyIsInJlcXVlc3QiLCJhcmdzIiwid3NFdmVudCIsImtleSIsInJlcXVlc3RUb0tleSIsInVuZGVmaW5lZCIsInJlc3BvbnNlX3Byb21pc2UiLCJvcHRpb25zIiwicHJvbWlzZSIsInByb21pc2VSZWplY3RUb1Jlc29sdmUiLCJjYWxsYmFjayIsInRoZW4iLCJQcm9taXNlIiwiciIsInJlcXVlc3RfY29weSIsInBhc3N0aHJvdWdoIiwicmVxX2lkIiwic3Vic2NyaWJlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vX2NvbW1vbi9iYXNlL2FwaV9taWRkbGV3YXJlLmpzPzM2MzgiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQVBJTWlkZGxld2FyZSB7XG4gICAgc2Vzc2lvbl9pZDtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZywgc2Vzc2lvbl9pZCA9ICcnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmRlYm91bmNlZF9jYWxscyA9IHt9O1xuICAgICAgICB0aGlzLnNlc3Npb25faWQgPSBzZXNzaW9uX2lkO1xuICAgIH1cblxuICAgIHJlcXVlc3REYXRhVHJhbnNmb3JtZXIocmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uX2lkID8geyAuLi5yZXF1ZXN0LCBzZXNzaW9uX2lkOiB0aGlzLnNlc3Npb25faWQgfSA6IHJlcXVlc3Q7XG4gICAgfVxuXG4gICAgc2VuZFdpbGxCZUNhbGxlZCh7IGFyZ3M6IFtyZXF1ZXN0XSB9KSB7XG4gICAgICAgIHRoaXMuY29uZmlnLndzRXZlbnQoJ3NlbmQnKTtcblxuICAgICAgICBjb25zdCBrZXkgPSByZXF1ZXN0VG9LZXkocmVxdWVzdCk7XG5cbiAgICAgICAgaWYgKGtleSBpbiB0aGlzLmRlYm91bmNlZF9jYWxscykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVib3VuY2VkX2NhbGxzW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHNlbmRJc0NhbGxlZCh7IHJlc3BvbnNlX3Byb21pc2UsIGFyZ3M6IFtyZXF1ZXN0LCBvcHRpb25zID0ge31dIH0pIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHByb21pc2VSZWplY3RUb1Jlc29sdmUocmVzcG9uc2VfcHJvbWlzZSk7XG5cbiAgICAgICAgY29uc3Qga2V5ID0gcmVxdWVzdFRvS2V5KHJlcXVlc3QpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICBwcm9taXNlLnRoZW4ob3B0aW9ucy5jYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlYm91bmNlZF9jYWxsc1trZXldID0gcHJvbWlzZTtcblxuICAgICAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGVib3VuY2VkX2NhbGxzW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbn1cblxuLy8gRGVsZWdhdGUgZXJyb3IgaGFuZGxpbmcgdG8gdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBwcm9taXNlUmVqZWN0VG9SZXNvbHZlKHByb21pc2UpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UociA9PiB7XG4gICAgICAgIHByb21pc2UudGhlbihyLCByKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdFRvS2V5KHJlcXVlc3QpIHtcbiAgICBjb25zdCByZXF1ZXN0X2NvcHkgPSB7IC4uLnJlcXVlc3QgfTtcblxuICAgIGRlbGV0ZSByZXF1ZXN0X2NvcHkucGFzc3Rocm91Z2g7XG4gICAgZGVsZXRlIHJlcXVlc3RfY29weS5yZXFfaWQ7XG4gICAgZGVsZXRlIHJlcXVlc3RfY29weS5zdWJzY3JpYmU7XG5cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVxdWVzdF9jb3B5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBUElNaWRkbGV3YXJlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7SUFBTUEsYUFBYTtFQUdmLHVCQUFZQyxNQUFNLEVBQW1CO0lBQUEsSUFBakJDLFVBQVUsdUVBQUcsRUFBRTtJQUFBO0lBQUEsS0FGbkNBLFVBQVU7SUFHTixJQUFJLENBQUNELE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNFLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDekIsSUFBSSxDQUFDRCxVQUFVLEdBQUdBLFVBQVU7RUFDaEM7RUFBQztJQUFBO0lBQUEsT0FFRCxnQ0FBdUJFLE9BQU8sRUFBRTtNQUM1QixPQUFPLElBQUksQ0FBQ0YsVUFBVSxtQ0FBUUUsT0FBTztRQUFFRixVQUFVLEVBQUUsSUFBSSxDQUFDQTtNQUFVLEtBQUtFLE9BQU87SUFDbEY7RUFBQztJQUFBO0lBQUEsT0FFRCxnQ0FBc0M7TUFBQSxvQ0FBbkJDLElBQUk7UUFBR0QsT0FBTztNQUM3QixJQUFJLENBQUNILE1BQU0sQ0FBQ0ssT0FBTyxDQUFDLE1BQU0sQ0FBQztNQUUzQixJQUFNQyxHQUFHLEdBQUdDLFlBQVksQ0FBQ0osT0FBTyxDQUFDO01BRWpDLElBQUlHLEdBQUcsSUFBSSxJQUFJLENBQUNKLGVBQWUsRUFBRTtRQUM3QixPQUFPLElBQUksQ0FBQ0EsZUFBZSxDQUFDSSxHQUFHLENBQUM7TUFDcEM7TUFFQSxPQUFPRSxTQUFTO0lBQ3BCO0VBQUM7SUFBQTtJQUFBLE9BRUQsNkJBQWtFO01BQUE7TUFBQSxJQUFuREMsZ0JBQWdCLFNBQWhCQSxnQkFBZ0I7UUFBQSxrQ0FBRUwsSUFBSTtRQUFHRCxPQUFPO1FBQUE7UUFBRU8sT0FBTyw0QkFBRyxDQUFDLENBQUM7TUFDekQsSUFBTUMsT0FBTyxHQUFHQyxzQkFBc0IsQ0FBQ0gsZ0JBQWdCLENBQUM7TUFFeEQsSUFBTUgsR0FBRyxHQUFHQyxZQUFZLENBQUNKLE9BQU8sQ0FBQztNQUVqQyxJQUFJTyxPQUFPLENBQUNHLFFBQVEsRUFBRTtRQUNsQkYsT0FBTyxDQUFDRyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0csUUFBUSxDQUFDO01BQ2xDO01BRUEsSUFBSSxDQUFDWCxlQUFlLENBQUNJLEdBQUcsQ0FBQyxHQUFHSyxPQUFPO01BRW5DQSxPQUFPLENBQUNHLElBQUksQ0FBQyxZQUFNO1FBQ2YsT0FBTyxLQUFJLENBQUNaLGVBQWUsQ0FBQ0ksR0FBRyxDQUFDO01BQ3BDLENBQUMsQ0FBQztNQUVGLE9BQU9LLE9BQU87SUFDbEI7RUFBQztFQUFBO0FBQUEsS0FHTDtBQUNBLFNBQVNDLHNCQUFzQixDQUFDRCxPQUFPLEVBQUU7RUFDckMsT0FBTyxJQUFJSSxPQUFPLENBQUMsVUFBQUMsQ0FBQyxFQUFJO0lBQ3BCTCxPQUFPLENBQUNHLElBQUksQ0FBQ0UsQ0FBQyxFQUFFQSxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDO0FBQ047QUFFQSxTQUFTVCxZQUFZLENBQUNKLE9BQU8sRUFBRTtFQUMzQixJQUFNYyxZQUFZLHFCQUFRZCxPQUFPLENBQUU7RUFFbkMsT0FBT2MsWUFBWSxDQUFDQyxXQUFXO0VBQy9CLE9BQU9ELFlBQVksQ0FBQ0UsTUFBTTtFQUMxQixPQUFPRixZQUFZLENBQUNHLFNBQVM7RUFFN0IsT0FBT0MsSUFBSSxDQUFDQyxTQUFTLENBQUNMLFlBQVksQ0FBQztBQUN2QztBQUVBTSxNQUFNLENBQUNDLE9BQU8sR0FBR3pCLGFBQWEiLCJmaWxlIjoiLi9fY29tbW9uL2Jhc2UvYXBpX21pZGRsZXdhcmUuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./_common/base/api_middleware.js\n");

/***/ }),

/***/ "./_common/base/network_monitor_base.js":
/*!**********************************************!*\
  !*** ./_common/base/network_monitor_base.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar _require = __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"),\n  localize = _require.localize;\nvar BinarySocket = __webpack_require__(/*! ./socket_base */ \"./_common/base/socket_base.js\");\n\n/*\n * Monitors the network status and initialises the WebSocket connection\n * 1. online : check the WS status (init/send: blink after timeout, open/message: online)\n * 2. offline: it is offline\n */\nvar NetworkMonitorBase = function () {\n  var status_config = {\n    online: {\n      \"class\": 'online',\n      tooltip: localize('Online')\n    },\n    offline: {\n      \"class\": 'offline',\n      tooltip: localize('Offline')\n    },\n    blinking: {\n      \"class\": 'blinker',\n      tooltip: localize('Connecting to server')\n    }\n  };\n  var setNetworkStatus;\n  var init = function init(socket_general_functions, fncUpdateUI, client_store) {\n    var last_status, last_is_online;\n    setNetworkStatus = function setNetworkStatus(status) {\n      var is_online = isOnline();\n      if (status !== last_status || is_online !== last_is_online) {\n        last_status = status;\n        last_is_online = is_online;\n        fncUpdateUI(status_config[status], is_online);\n      }\n    };\n    if ('onLine' in navigator) {\n      window.addEventListener('online', function () {\n        setNetworkStatus('blinking');\n        reconnectAfter({\n          timeout: 500\n        });\n      });\n      window.addEventListener('offline', function () {\n        BinarySocket.close();\n        setNetworkStatus('offline');\n      });\n    } else {\n      // default to always online and fallback to WS checks\n      navigator.onLine = true;\n    }\n    if (isOnline()) {\n      var ws_config = _objectSpread({\n        wsEvent: wsEvent,\n        isOnline: isOnline\n      }, socket_general_functions);\n      BinarySocket.init({\n        options: ws_config,\n        client: client_store\n      });\n      BinarySocket.openNewConnection();\n    }\n    setNetworkStatus(isOnline() ? 'blinking' : 'offline');\n  };\n  var isOnline = function isOnline() {\n    return navigator.onLine;\n  };\n\n  // reconnect after timout,\n  // if the network status is online\n  // and the connection is closed or closing.\n  var reconnect_timeout = null;\n  function reconnectAfter(_ref) {\n    var timeout = _ref.timeout;\n    clearTimeout(reconnect_timeout);\n    reconnect_timeout = setTimeout(function () {\n      reconnect_timeout = null;\n      if (isOnline() && BinarySocket.hasReadyState(2, 3)) {\n        BinarySocket.openNewConnection();\n      } else {\n        BinarySocket.send({\n          ping: 1\n        }); // get stable status sooner\n      }\n    }, timeout);\n  }\n  var events = {\n    init: function init() {\n      return setNetworkStatus(isOnline() ? 'blinking' : 'offline');\n    },\n    open: function open() {\n      return setNetworkStatus(isOnline() ? 'online' : 'offline');\n    },\n    send: function send() {},\n    message: function message() {\n      return setNetworkStatus('online');\n    },\n    close: function close() {\n      setNetworkStatus(isOnline() ? 'blinking' : 'offline');\n      reconnectAfter({\n        timeout: 5000\n      });\n    }\n  };\n  var wsEvent = function wsEvent(event) {\n    events[event] && events[event](); // eslint-disable-line\n  };\n\n  return {\n    init: init,\n    wsEvent: wsEvent\n  };\n}();\nmodule.exports = NetworkMonitorBase;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9fY29tbW9uL2Jhc2UvbmV0d29ya19tb25pdG9yX2Jhc2UuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL19jb21tb24vYmFzZS9uZXR3b3JrX21vbml0b3JfYmFzZS5qcz8xMWE1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgbG9jYWxpemUgfSA9IHJlcXVpcmUoJ0BkZXJpdi90cmFuc2xhdGlvbnMnKTtcbmNvbnN0IEJpbmFyeVNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0X2Jhc2UnKTtcblxuLypcbiAqIE1vbml0b3JzIHRoZSBuZXR3b3JrIHN0YXR1cyBhbmQgaW5pdGlhbGlzZXMgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uXG4gKiAxLiBvbmxpbmUgOiBjaGVjayB0aGUgV1Mgc3RhdHVzIChpbml0L3NlbmQ6IGJsaW5rIGFmdGVyIHRpbWVvdXQsIG9wZW4vbWVzc2FnZTogb25saW5lKVxuICogMi4gb2ZmbGluZTogaXQgaXMgb2ZmbGluZVxuICovXG5jb25zdCBOZXR3b3JrTW9uaXRvckJhc2UgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHN0YXR1c19jb25maWcgPSB7XG4gICAgICAgIG9ubGluZTogeyBjbGFzczogJ29ubGluZScsIHRvb2x0aXA6IGxvY2FsaXplKCdPbmxpbmUnKSB9LFxuICAgICAgICBvZmZsaW5lOiB7IGNsYXNzOiAnb2ZmbGluZScsIHRvb2x0aXA6IGxvY2FsaXplKCdPZmZsaW5lJykgfSxcbiAgICAgICAgYmxpbmtpbmc6IHsgY2xhc3M6ICdibGlua2VyJywgdG9vbHRpcDogbG9jYWxpemUoJ0Nvbm5lY3RpbmcgdG8gc2VydmVyJykgfSxcbiAgICB9O1xuXG4gICAgbGV0IHNldE5ldHdvcmtTdGF0dXM7XG5cbiAgICBjb25zdCBpbml0ID0gKHNvY2tldF9nZW5lcmFsX2Z1bmN0aW9ucywgZm5jVXBkYXRlVUksIGNsaWVudF9zdG9yZSkgPT4ge1xuICAgICAgICBsZXQgbGFzdF9zdGF0dXMsIGxhc3RfaXNfb25saW5lO1xuICAgICAgICBzZXROZXR3b3JrU3RhdHVzID0gc3RhdHVzID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzX29ubGluZSA9IGlzT25saW5lKCk7XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSBsYXN0X3N0YXR1cyB8fCBpc19vbmxpbmUgIT09IGxhc3RfaXNfb25saW5lKSB7XG4gICAgICAgICAgICAgICAgbGFzdF9zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgICAgICAgICAgbGFzdF9pc19vbmxpbmUgPSBpc19vbmxpbmU7XG4gICAgICAgICAgICAgICAgZm5jVXBkYXRlVUkoc3RhdHVzX2NvbmZpZ1tzdGF0dXNdLCBpc19vbmxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgnb25MaW5lJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0TmV0d29ya1N0YXR1cygnYmxpbmtpbmcnKTtcbiAgICAgICAgICAgICAgICByZWNvbm5lY3RBZnRlcih7IHRpbWVvdXQ6IDUwMCB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgQmluYXJ5U29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgc2V0TmV0d29ya1N0YXR1cygnb2ZmbGluZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGFsd2F5cyBvbmxpbmUgYW5kIGZhbGxiYWNrIHRvIFdTIGNoZWNrc1xuICAgICAgICAgICAgbmF2aWdhdG9yLm9uTGluZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNPbmxpbmUoKSkge1xuICAgICAgICAgICAgY29uc3Qgd3NfY29uZmlnID0geyB3c0V2ZW50LCBpc09ubGluZSwgLi4uc29ja2V0X2dlbmVyYWxfZnVuY3Rpb25zIH07XG4gICAgICAgICAgICBCaW5hcnlTb2NrZXQuaW5pdCh7IG9wdGlvbnM6IHdzX2NvbmZpZywgY2xpZW50OiBjbGllbnRfc3RvcmUgfSk7XG4gICAgICAgICAgICBCaW5hcnlTb2NrZXQub3Blbk5ld0Nvbm5lY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldE5ldHdvcmtTdGF0dXMoaXNPbmxpbmUoKSA/ICdibGlua2luZycgOiAnb2ZmbGluZScpO1xuICAgIH07XG5cbiAgICBjb25zdCBpc09ubGluZSA9ICgpID0+IG5hdmlnYXRvci5vbkxpbmU7XG5cbiAgICAvLyByZWNvbm5lY3QgYWZ0ZXIgdGltb3V0LFxuICAgIC8vIGlmIHRoZSBuZXR3b3JrIHN0YXR1cyBpcyBvbmxpbmVcbiAgICAvLyBhbmQgdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2VkIG9yIGNsb3NpbmcuXG4gICAgbGV0IHJlY29ubmVjdF90aW1lb3V0ID0gbnVsbDtcbiAgICBmdW5jdGlvbiByZWNvbm5lY3RBZnRlcih7IHRpbWVvdXQgfSkge1xuICAgICAgICBjbGVhclRpbWVvdXQocmVjb25uZWN0X3RpbWVvdXQpO1xuICAgICAgICByZWNvbm5lY3RfdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcmVjb25uZWN0X3RpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzT25saW5lKCkgJiYgQmluYXJ5U29ja2V0Lmhhc1JlYWR5U3RhdGUoMiwgMykpIHtcbiAgICAgICAgICAgICAgICBCaW5hcnlTb2NrZXQub3Blbk5ld0Nvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgQmluYXJ5U29ja2V0LnNlbmQoeyBwaW5nOiAxIH0pOyAvLyBnZXQgc3RhYmxlIHN0YXR1cyBzb29uZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50cyA9IHtcbiAgICAgICAgaW5pdDogKCkgPT4gc2V0TmV0d29ya1N0YXR1cyhpc09ubGluZSgpID8gJ2JsaW5raW5nJyA6ICdvZmZsaW5lJyksXG4gICAgICAgIG9wZW46ICgpID0+IHNldE5ldHdvcmtTdGF0dXMoaXNPbmxpbmUoKSA/ICdvbmxpbmUnIDogJ29mZmxpbmUnKSxcbiAgICAgICAgc2VuZDogKCkgPT4ge30sXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IHNldE5ldHdvcmtTdGF0dXMoJ29ubGluZScpLFxuICAgICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgc2V0TmV0d29ya1N0YXR1cyhpc09ubGluZSgpID8gJ2JsaW5raW5nJyA6ICdvZmZsaW5lJyk7XG4gICAgICAgICAgICByZWNvbm5lY3RBZnRlcih7IHRpbWVvdXQ6IDUwMDAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IHdzRXZlbnQgPSBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50c1tldmVudF0gJiYgZXZlbnRzW2V2ZW50XSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQsXG4gICAgICAgIHdzRXZlbnQsXG4gICAgfTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTmV0d29ya01vbml0b3JCYXNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./_common/base/network_monitor_base.js\n");

/***/ }),

/***/ "./_common/base/server_time.js":
/*!*************************************!*\
  !*** ./_common/base/server_time.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var moment = __webpack_require__(/*! moment */ \"../../../node_modules/moment/moment.js\");\nvar BinarySocket = __webpack_require__(/*! ./socket_base */ \"./_common/base/socket_base.js\");\nvar PromiseClass = (__webpack_require__(/*! ../utility */ \"./_common/utility.js\").PromiseClass);\nvar ServerTime = function () {\n  var clock_started = false;\n  var pending = new PromiseClass();\n  var server_time, performance_request_time, get_time_interval, update_time_interval, onTimeUpdated;\n  var init = function init(fncTimeUpdated) {\n    if (!clock_started) {\n      onTimeUpdated = fncTimeUpdated;\n      requestTime();\n      clearInterval(get_time_interval);\n      get_time_interval = setInterval(requestTime, 30000);\n      clock_started = true;\n    }\n  };\n  var requestTime = function requestTime() {\n    performance_request_time = performance.now();\n    BinarySocket.send({\n      time: 1\n    }).then(timeCounter);\n  };\n  var timeCounter = function timeCounter(response) {\n    if (response.error) return;\n    if (!clock_started) {\n      init();\n      return;\n    }\n    clearInterval(update_time_interval);\n    var start_timestamp = response.time;\n    var performance_response_time = performance.now();\n    var time_taken = performance_response_time - performance_request_time;\n    var server_time_at_response = start_timestamp * 1000 + time_taken;\n    var updateTime = function updateTime() {\n      var time_since_response = performance.now() - performance_response_time;\n      server_time = moment(server_time_at_response + time_since_response).utc();\n      if (typeof onTimeUpdated === 'function') {\n        onTimeUpdated();\n      }\n    };\n    updateTime();\n    pending.resolve();\n    update_time_interval = setInterval(updateTime, 1000);\n  };\n  var get = function get() {\n    return server_time ? server_time.clone() : undefined;\n  };\n  return {\n    init: init,\n    get: get,\n    timePromise: pending.promise\n  };\n}();\nmodule.exports = ServerTime;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9fY29tbW9uL2Jhc2Uvc2VydmVyX3RpbWUuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vX2NvbW1vbi9iYXNlL3NlcnZlcl90aW1lLmpzP2QyODkiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5jb25zdCBCaW5hcnlTb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldF9iYXNlJyk7XG5jb25zdCBQcm9taXNlQ2xhc3MgPSByZXF1aXJlKCcuLi91dGlsaXR5JykuUHJvbWlzZUNsYXNzO1xuXG5jb25zdCBTZXJ2ZXJUaW1lID0gKCgpID0+IHtcbiAgICBsZXQgY2xvY2tfc3RhcnRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHBlbmRpbmcgPSBuZXcgUHJvbWlzZUNsYXNzKCk7XG4gICAgbGV0IHNlcnZlcl90aW1lLCBwZXJmb3JtYW5jZV9yZXF1ZXN0X3RpbWUsIGdldF90aW1lX2ludGVydmFsLCB1cGRhdGVfdGltZV9pbnRlcnZhbCwgb25UaW1lVXBkYXRlZDtcblxuICAgIGNvbnN0IGluaXQgPSBmbmNUaW1lVXBkYXRlZCA9PiB7XG4gICAgICAgIGlmICghY2xvY2tfc3RhcnRlZCkge1xuICAgICAgICAgICAgb25UaW1lVXBkYXRlZCA9IGZuY1RpbWVVcGRhdGVkO1xuICAgICAgICAgICAgcmVxdWVzdFRpbWUoKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoZ2V0X3RpbWVfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgZ2V0X3RpbWVfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChyZXF1ZXN0VGltZSwgMzAwMDApO1xuICAgICAgICAgICAgY2xvY2tfc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgcmVxdWVzdFRpbWUgPSAoKSA9PiB7XG4gICAgICAgIHBlcmZvcm1hbmNlX3JlcXVlc3RfdGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBCaW5hcnlTb2NrZXQuc2VuZCh7IHRpbWU6IDEgfSkudGhlbih0aW1lQ291bnRlcik7XG4gICAgfTtcblxuICAgIGNvbnN0IHRpbWVDb3VudGVyID0gcmVzcG9uc2UgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHJldHVybjtcblxuICAgICAgICBpZiAoIWNsb2NrX3N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGluaXQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodXBkYXRlX3RpbWVfaW50ZXJ2YWwpO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0X3RpbWVzdGFtcCA9IHJlc3BvbnNlLnRpbWU7XG4gICAgICAgIGNvbnN0IHBlcmZvcm1hbmNlX3Jlc3BvbnNlX3RpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgY29uc3QgdGltZV90YWtlbiA9IHBlcmZvcm1hbmNlX3Jlc3BvbnNlX3RpbWUgLSBwZXJmb3JtYW5jZV9yZXF1ZXN0X3RpbWU7XG4gICAgICAgIGNvbnN0IHNlcnZlcl90aW1lX2F0X3Jlc3BvbnNlID0gc3RhcnRfdGltZXN0YW1wICogMTAwMCArIHRpbWVfdGFrZW47XG5cbiAgICAgICAgY29uc3QgdXBkYXRlVGltZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVfc2luY2VfcmVzcG9uc2UgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHBlcmZvcm1hbmNlX3Jlc3BvbnNlX3RpbWU7XG4gICAgICAgICAgICBzZXJ2ZXJfdGltZSA9IG1vbWVudChzZXJ2ZXJfdGltZV9hdF9yZXNwb25zZSArIHRpbWVfc2luY2VfcmVzcG9uc2UpLnV0YygpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9uVGltZVVwZGF0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBvblRpbWVVcGRhdGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICAgICAgcGVuZGluZy5yZXNvbHZlKCk7XG4gICAgICAgIHVwZGF0ZV90aW1lX2ludGVydmFsID0gc2V0SW50ZXJ2YWwodXBkYXRlVGltZSwgMTAwMCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldCA9ICgpID0+IChzZXJ2ZXJfdGltZSA/IHNlcnZlcl90aW1lLmNsb25lKCkgOiB1bmRlZmluZWQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdCxcbiAgICAgICAgZ2V0LFxuICAgICAgICB0aW1lUHJvbWlzZTogcGVuZGluZy5wcm9taXNlLFxuICAgIH07XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZlclRpbWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./_common/base/server_time.js\n");

/***/ }),

/***/ "./_common/base/socket_base.js":
/*!*************************************!*\
  !*** ./_common/base/socket_base.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nvar DerivAPIBasic = __webpack_require__(/*! @deriv/deriv-api/dist/DerivAPIBasic */ \"../../../node_modules/@deriv/deriv-api/dist/DerivAPIBasic.js\");\nvar getAppId = (__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\").getAppId);\nvar getSocketURL = (__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\").getSocketURL);\nvar cloneObject = (__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\").cloneObject);\nvar getPropertyValue = (__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\").getPropertyValue);\nvar State = (__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\").State);\nvar _require = __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"),\n  getLanguage = _require.getLanguage;\nvar website_name = (__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\").website_name);\nvar SocketCache = __webpack_require__(/*! ./socket_cache */ \"./_common/base/socket_cache.js\");\nvar APIMiddleware = __webpack_require__(/*! ./api_middleware */ \"./_common/base/api_middleware.js\");\n\n/*\n * An abstraction layer over native javascript WebSocket,\n * which provides additional functionality like\n * reopen the closed connection and process the buffered requests\n */\nvar BinarySocketBase = function () {\n  var deriv_api, binary_socket, client_store;\n  var config = {};\n  var wrong_app_id = 0;\n  var is_disconnect_called = false;\n  var is_connected_before = false;\n  var is_switching_socket = false;\n  var availability = {\n    is_up: true,\n    is_updating: false,\n    is_down: false\n  };\n  var getSocketUrl = function getSocketUrl(language) {\n    var is_mock_server = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (is_mock_server) {\n      return 'ws://127.0.0.1:42069';\n    }\n    return \"wss://\".concat(getSocketURL(), \"/websockets/v3?app_id=\").concat(getAppId(), \"&l=\").concat(language, \"&brand=\").concat(website_name.toLowerCase());\n  };\n  var isReady = function isReady() {\n    return hasReadyState(1);\n  };\n  var isClose = function isClose() {\n    return !binary_socket || hasReadyState(2, 3);\n  };\n  var close = function close() {\n    binary_socket.close();\n  };\n  var closeAndOpenNewConnection = function closeAndOpenNewConnection() {\n    var language = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLanguage();\n    var session_id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    close();\n    is_switching_socket = true;\n    openNewConnection(language, session_id);\n  };\n  var hasReadyState = function hasReadyState() {\n    for (var _len = arguments.length, states = new Array(_len), _key = 0; _key < _len; _key++) {\n      states[_key] = arguments[_key];\n    }\n    return binary_socket && states.some(function (s) {\n      return binary_socket.readyState === s;\n    });\n  };\n  var init = function init(_ref) {\n    var options = _ref.options,\n      client = _ref.client;\n    if (_typeof(options) === 'object' && config !== options) {\n      config = options;\n    }\n    client_store = client;\n  };\n  var getMockServerConfig = function getMockServerConfig() {\n    var mock_server_config = localStorage.getItem('mock_server_data');\n    return mock_server_config ? JSON.parse(mock_server_config) : {\n      session_id: '',\n      is_mockserver_enabled: false\n    };\n  };\n  var openNewConnection = function openNewConnection() {\n    var language = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLanguage();\n    var mock_server_config = getMockServerConfig();\n    var session_id = (mock_server_config === null || mock_server_config === void 0 ? void 0 : mock_server_config.session_id) || '';\n    if (wrong_app_id === getAppId()) return;\n    if (!is_switching_socket) config.wsEvent('init');\n    if (isClose()) {\n      is_disconnect_called = false;\n      binary_socket = new WebSocket(getSocketUrl(language, session_id));\n      deriv_api = new DerivAPIBasic({\n        connection: binary_socket,\n        storage: SocketCache,\n        middleware: new APIMiddleware(config, session_id)\n      });\n    }\n    deriv_api.onOpen().subscribe(function () {\n      config.wsEvent('open');\n      wait('website_status');\n      if (client_store.is_logged_in) {\n        var authorize_token = client_store.getToken();\n        deriv_api.authorize(authorize_token);\n      }\n      if (typeof config.onOpen === 'function') {\n        config.onOpen(isReady());\n      }\n      if (typeof config.onReconnect === 'function' && is_connected_before) {\n        config.onReconnect();\n      }\n      if (!is_connected_before) {\n        is_connected_before = true;\n      }\n    });\n    deriv_api.onMessage().subscribe(function (_ref2) {\n      var response = _ref2.data;\n      var msg_type = response.msg_type;\n      State.set(['response', msg_type], cloneObject(response));\n      config.wsEvent('message');\n      if (getPropertyValue(response, ['error', 'code']) === 'InvalidAppID') {\n        wrong_app_id = getAppId();\n      }\n      if (typeof config.onMessage === 'function') {\n        config.onMessage(response);\n      }\n    });\n    deriv_api.onClose().subscribe(function () {\n      if (!is_switching_socket) {\n        config.wsEvent('close');\n      } else {\n        is_switching_socket = false;\n      }\n      if (wrong_app_id !== getAppId() && typeof config.onDisconnect === 'function' && !is_disconnect_called) {\n        config.onDisconnect();\n        is_disconnect_called = true;\n      }\n    });\n  };\n  var isSiteUp = function isSiteUp(status) {\n    return /^up$/i.test(status);\n  };\n  var isSiteUpdating = function isSiteUpdating(status) {\n    return /^updating$/i.test(status);\n  };\n  var isSiteDown = function isSiteDown(status) {\n    return /^down$/i.test(status);\n  };\n\n  // if status is up or updating, consider site available\n  // if status is down, consider site unavailable\n  var setAvailability = function setAvailability(status) {\n    availability.is_up = isSiteUp(status);\n    availability.is_updating = isSiteUpdating(status);\n    availability.is_down = isSiteDown(status);\n  };\n  var excludeAuthorize = function excludeAuthorize(type) {\n    return !(type === 'authorize' && !client_store.is_logged_in);\n  };\n  var wait = function wait() {\n    var _deriv_api;\n    for (var _len2 = arguments.length, responses = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      responses[_key2] = arguments[_key2];\n    }\n    return (_deriv_api = deriv_api) === null || _deriv_api === void 0 ? void 0 : _deriv_api.expectResponse.apply(_deriv_api, _toConsumableArray(responses.filter(excludeAuthorize)));\n  };\n  var subscribe = function subscribe(request, cb) {\n    return deriv_api.subscribe(request).subscribe(cb, cb);\n  }; // Delegate error handling to the callback\n\n  var balanceAll = function balanceAll() {\n    return deriv_api.send({\n      balance: 1,\n      account: 'all'\n    });\n  };\n  var subscribeBalanceAll = function subscribeBalanceAll(cb) {\n    return subscribe({\n      balance: 1,\n      account: 'all'\n    }, cb);\n  };\n  var subscribeBalanceActiveAccount = function subscribeBalanceActiveAccount(cb, account) {\n    return subscribe({\n      balance: 1,\n      account: account\n    }, cb);\n  };\n  var subscribeProposal = function subscribeProposal(req, cb) {\n    return subscribe(_objectSpread({\n      proposal: 1\n    }, req), cb);\n  };\n  var subscribeProposalOpenContract = function subscribeProposalOpenContract() {\n    var contract_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var cb = arguments.length > 1 ? arguments[1] : undefined;\n    return subscribe(_objectSpread({\n      proposal_open_contract: 1\n    }, contract_id && {\n      contract_id: contract_id\n    }), cb);\n  };\n  var subscribeTicks = function subscribeTicks(symbol, cb) {\n    return subscribe({\n      ticks: symbol\n    }, cb);\n  };\n  var subscribeTicksHistory = function subscribeTicksHistory(request_object, cb) {\n    return subscribe(request_object, cb);\n  };\n  var subscribeTransaction = function subscribeTransaction(cb) {\n    return subscribe({\n      transaction: 1\n    }, cb);\n  };\n  var subscribeWebsiteStatus = function subscribeWebsiteStatus(cb) {\n    return subscribe({\n      website_status: 1\n    }, cb);\n  };\n  var buyAndSubscribe = function buyAndSubscribe(request) {\n    return new Promise(function (resolve) {\n      var called = false;\n      var subscriber = subscribe(request, function (response) {\n        if (!called) {\n          called = true;\n          subscriber.unsubscribe();\n          resolve(response);\n        }\n      });\n    });\n  };\n  var buy = function buy(_ref3) {\n    var proposal_id = _ref3.proposal_id,\n      price = _ref3.price;\n    return deriv_api.send({\n      buy: proposal_id,\n      price: price\n    });\n  };\n  var sell = function sell(contract_id, bid_price) {\n    return deriv_api.send({\n      sell: contract_id,\n      price: bid_price\n    });\n  };\n  var cashier = function cashier(action) {\n    var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return deriv_api.send(_objectSpread({\n      cashier: action\n    }, parameters));\n  };\n  var cancelCryptoTransaction = function cancelCryptoTransaction(transaction_id) {\n    return deriv_api.send({\n      cashier_withdrawal_cancel: 1,\n      id: transaction_id\n    });\n  };\n  var newAccountVirtual = function newAccountVirtual(verification_code, client_password, residence, device_data) {\n    return deriv_api.send(_objectSpread({\n      new_account_virtual: 1,\n      verification_code: verification_code,\n      client_password: client_password,\n      residence: residence\n    }, device_data));\n  };\n  var setAccountCurrency = function setAccountCurrency(currency, passthrough) {\n    return deriv_api.send(_objectSpread({\n      set_account_currency: currency\n    }, passthrough && {\n      passthrough: passthrough\n    }));\n  };\n  var newAccountReal = function newAccountReal(values) {\n    return deriv_api.send(_objectSpread({\n      new_account_real: 1\n    }, values));\n  };\n  var newAccountRealMaltaInvest = function newAccountRealMaltaInvest(values) {\n    return deriv_api.send(_objectSpread({\n      new_account_maltainvest: 1\n    }, values));\n  };\n  var mt5NewAccount = function mt5NewAccount(values) {\n    return deriv_api.send(_objectSpread({\n      mt5_new_account: 1\n    }, values));\n  };\n  var getFinancialAssessment = function getFinancialAssessment() {\n    return deriv_api.send({\n      get_financial_assessment: 1\n    });\n  };\n  var setFinancialAndTradingAssessment = function setFinancialAndTradingAssessment(payload) {\n    return deriv_api.send(_objectSpread({\n      set_financial_assessment: 1\n    }, payload));\n  };\n  var profitTable = function profitTable(limit, offset, date_boundaries) {\n    return deriv_api.send(_objectSpread({\n      profit_table: 1,\n      description: 1,\n      limit: limit,\n      offset: offset\n    }, date_boundaries));\n  };\n  var statement = function statement(limit, offset, other_properties) {\n    return deriv_api.send(_objectSpread({\n      statement: 1,\n      description: 1,\n      limit: limit,\n      offset: offset\n    }, other_properties));\n  };\n  var verifyEmail = function verifyEmail(email, type) {\n    var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return deriv_api.send(_objectSpread({\n      verify_email: email,\n      type: type\n    }, payload));\n  };\n  var tradingPlatformPasswordChange = function tradingPlatformPasswordChange(payload) {\n    return deriv_api.send(_objectSpread({\n      trading_platform_password_change: 1\n    }, payload));\n  };\n  var tradingPlatformInvestorPasswordChange = function tradingPlatformInvestorPasswordChange(payload) {\n    return deriv_api.send(_objectSpread({\n      trading_platform_investor_password_change: 1\n    }, payload));\n  };\n  var tradingPlatformInvestorPasswordReset = function tradingPlatformInvestorPasswordReset(payload) {\n    return deriv_api.send(_objectSpread({\n      trading_platform_investor_password_reset: 1\n    }, payload));\n  };\n  var tradingPlatformPasswordReset = function tradingPlatformPasswordReset(payload) {\n    return deriv_api.send(_objectSpread({\n      trading_platform_password_reset: 1\n    }, payload));\n  };\n  var tradingPlatformAvailableAccounts = function tradingPlatformAvailableAccounts(platform) {\n    return deriv_api.send({\n      trading_platform_available_accounts: 1,\n      platform: platform\n    });\n  };\n  var paymentAgentList = function paymentAgentList(country, currency) {\n    return deriv_api.send(_objectSpread({\n      paymentagent_list: country\n    }, currency && {\n      currency: currency\n    }));\n  };\n  var allPaymentAgentList = function allPaymentAgentList(country) {\n    return deriv_api.send({\n      paymentagent_list: country\n    });\n  };\n  var paymentAgentDetails = function paymentAgentDetails(passthrough, req_id) {\n    return deriv_api.send({\n      paymentagent_details: 1,\n      passthrough: passthrough,\n      req_id: req_id\n    });\n  };\n  var paymentAgentWithdraw = function paymentAgentWithdraw(_ref4) {\n    var amount = _ref4.amount,\n      currency = _ref4.currency,\n      _ref4$dry_run = _ref4.dry_run,\n      dry_run = _ref4$dry_run === void 0 ? 0 : _ref4$dry_run,\n      loginid = _ref4.loginid,\n      verification_code = _ref4.verification_code;\n    return deriv_api.send({\n      amount: amount,\n      currency: currency,\n      dry_run: dry_run,\n      paymentagent_loginid: loginid,\n      paymentagent_withdraw: 1,\n      verification_code: verification_code\n    });\n  };\n  var cryptoWithdraw = function cryptoWithdraw(_ref5) {\n    var address = _ref5.address,\n      amount = _ref5.amount,\n      verification_code = _ref5.verification_code,\n      _ref5$dry_run = _ref5.dry_run,\n      dry_run = _ref5$dry_run === void 0 ? 0 : _ref5$dry_run;\n    return deriv_api.send({\n      cashier: 'withdraw',\n      provider: 'crypto',\n      type: 'api',\n      address: address,\n      amount: amount,\n      verification_code: verification_code,\n      dry_run: dry_run\n    });\n  };\n  var cryptoConfig = function cryptoConfig() {\n    return deriv_api.send({\n      crypto_config: 1\n    });\n  };\n  var paymentAgentTransfer = function paymentAgentTransfer(_ref6) {\n    var amount = _ref6.amount,\n      currency = _ref6.currency,\n      description = _ref6.description,\n      transfer_to = _ref6.transfer_to,\n      _ref6$dry_run = _ref6.dry_run,\n      dry_run = _ref6$dry_run === void 0 ? 0 : _ref6$dry_run;\n    return deriv_api.send({\n      amount: amount,\n      currency: currency,\n      description: description,\n      transfer_to: transfer_to,\n      paymentagent_transfer: 1,\n      dry_run: dry_run\n    });\n  };\n  var activeSymbols = function activeSymbols() {\n    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'brief';\n    return deriv_api.activeSymbols(mode);\n  };\n  var transferBetweenAccounts = function transferBetweenAccounts(account_from, account_to, currency, amount) {\n    return deriv_api.send(_objectSpread({\n      transfer_between_accounts: 1,\n      accounts: 'all'\n    }, account_from && {\n      account_from: account_from,\n      account_to: account_to,\n      currency: currency,\n      amount: amount\n    }));\n  };\n  var forgetStream = function forgetStream(id) {\n    return deriv_api.forget(id);\n  };\n  var tncApproval = function tncApproval() {\n    return deriv_api.send({\n      tnc_approval: '1'\n    });\n  };\n  var contractUpdate = function contractUpdate(contract_id, limit_order) {\n    return deriv_api.send({\n      contract_update: 1,\n      contract_id: contract_id,\n      limit_order: limit_order\n    });\n  };\n  var contractUpdateHistory = function contractUpdateHistory(contract_id) {\n    return deriv_api.send({\n      contract_update_history: 1,\n      contract_id: contract_id\n    });\n  };\n  var cancelContract = function cancelContract(contract_id) {\n    return deriv_api.send({\n      cancel: contract_id\n    });\n  };\n  var fetchLoginHistory = function fetchLoginHistory(limit) {\n    return deriv_api.send({\n      login_history: 1,\n      limit: limit\n    });\n  };\n\n  // subscribe method export for P2P use only\n  // so that subscribe remains private\n  var p2pSubscribe = function p2pSubscribe(request, cb) {\n    return subscribe(request, cb);\n  };\n  var accountStatistics = function accountStatistics() {\n    return deriv_api.send({\n      account_statistics: 1\n    });\n  };\n  var realityCheck = function realityCheck() {\n    return deriv_api.send({\n      reality_check: 1\n    });\n  };\n  var tradingServers = function tradingServers(platform) {\n    return deriv_api.send({\n      platform: platform,\n      trading_servers: 1\n    });\n  };\n  var tradingPlatformAccountsList = function tradingPlatformAccountsList(platform) {\n    return deriv_api.send({\n      trading_platform_accounts: 1,\n      platform: platform\n    });\n  };\n  var tradingPlatformNewAccount = function tradingPlatformNewAccount(values) {\n    return deriv_api.send(_objectSpread({\n      trading_platform_new_account: 1\n    }, values));\n  };\n  var triggerMt5DryRun = function triggerMt5DryRun(_ref7) {\n    var email = _ref7.email;\n    return deriv_api.send({\n      account_type: 'financial',\n      dry_run: 1,\n      email: email,\n      leverage: 100,\n      mainPassword: 'Test1234',\n      mt5_account_type: 'financial_stp',\n      mt5_new_account: 1,\n      name: 'test real labuan financial stp'\n    });\n  };\n  var getServiceToken = function getServiceToken(platform, server) {\n    var temp_service = platform;\n    return deriv_api.send({\n      service_token: 1,\n      service: temp_service,\n      server: server\n    });\n  };\n  var changeEmail = function changeEmail(api_request) {\n    return deriv_api.send(api_request);\n  };\n  return {\n    init: init,\n    openNewConnection: openNewConnection,\n    forgetStream: forgetStream,\n    wait: wait,\n    availability: availability,\n    hasReadyState: hasReadyState,\n    isSiteDown: isSiteDown,\n    isSiteUpdating: isSiteUpdating,\n    clear: function clear() {\n      // do nothing.\n    },\n    sendBuffered: function sendBuffered() {\n      // do nothing.\n    },\n    getSocket: function getSocket() {\n      return binary_socket;\n    },\n    get: function get() {\n      return deriv_api;\n    },\n    getAvailability: function getAvailability() {\n      return availability;\n    },\n    setOnDisconnect: function setOnDisconnect(onDisconnect) {\n      config.onDisconnect = onDisconnect;\n    },\n    setOnReconnect: function setOnReconnect(onReconnect) {\n      config.onReconnect = onReconnect;\n    },\n    removeOnReconnect: function removeOnReconnect() {\n      delete config.onReconnect;\n    },\n    removeOnDisconnect: function removeOnDisconnect() {\n      delete config.onDisconnect;\n    },\n    cache: delegateToObject({}, function () {\n      return deriv_api.cache;\n    }),\n    storage: delegateToObject({}, function () {\n      return deriv_api.storage;\n    }),\n    buy: buy,\n    buyAndSubscribe: buyAndSubscribe,\n    sell: sell,\n    cashier: cashier,\n    cancelCryptoTransaction: cancelCryptoTransaction,\n    cancelContract: cancelContract,\n    close: close,\n    cryptoWithdraw: cryptoWithdraw,\n    cryptoConfig: cryptoConfig,\n    contractUpdate: contractUpdate,\n    contractUpdateHistory: contractUpdateHistory,\n    getFinancialAssessment: getFinancialAssessment,\n    setFinancialAndTradingAssessment: setFinancialAndTradingAssessment,\n    mt5NewAccount: mt5NewAccount,\n    newAccountVirtual: newAccountVirtual,\n    newAccountReal: newAccountReal,\n    newAccountRealMaltaInvest: newAccountRealMaltaInvest,\n    p2pSubscribe: p2pSubscribe,\n    profitTable: profitTable,\n    statement: statement,\n    verifyEmail: verifyEmail,\n    tradingPlatformPasswordChange: tradingPlatformPasswordChange,\n    tradingPlatformPasswordReset: tradingPlatformPasswordReset,\n    tradingPlatformAvailableAccounts: tradingPlatformAvailableAccounts,\n    tradingPlatformInvestorPasswordChange: tradingPlatformInvestorPasswordChange,\n    tradingPlatformInvestorPasswordReset: tradingPlatformInvestorPasswordReset,\n    activeSymbols: activeSymbols,\n    paymentAgentList: paymentAgentList,\n    allPaymentAgentList: allPaymentAgentList,\n    paymentAgentDetails: paymentAgentDetails,\n    paymentAgentWithdraw: paymentAgentWithdraw,\n    paymentAgentTransfer: paymentAgentTransfer,\n    setAccountCurrency: setAccountCurrency,\n    balanceAll: balanceAll,\n    setAvailability: setAvailability,\n    subscribeBalanceAll: subscribeBalanceAll,\n    subscribeBalanceActiveAccount: subscribeBalanceActiveAccount,\n    subscribeProposal: subscribeProposal,\n    subscribeProposalOpenContract: subscribeProposalOpenContract,\n    subscribeTicks: subscribeTicks,\n    subscribeTicksHistory: subscribeTicksHistory,\n    subscribeTransaction: subscribeTransaction,\n    subscribeWebsiteStatus: subscribeWebsiteStatus,\n    tncApproval: tncApproval,\n    transferBetweenAccounts: transferBetweenAccounts,\n    fetchLoginHistory: fetchLoginHistory,\n    closeAndOpenNewConnection: closeAndOpenNewConnection,\n    accountStatistics: accountStatistics,\n    realityCheck: realityCheck,\n    tradingServers: tradingServers,\n    tradingPlatformAccountsList: tradingPlatformAccountsList,\n    tradingPlatformNewAccount: tradingPlatformNewAccount,\n    triggerMt5DryRun: triggerMt5DryRun,\n    getServiceToken: getServiceToken,\n    changeEmail: changeEmail\n  };\n}();\nfunction delegateToObject(base_obj, extending_obj_getter) {\n  return new Proxy(base_obj, {\n    get: function get(target, field) {\n      if (target[field]) return target[field];\n      var extending_obj = typeof extending_obj_getter === 'function' ? extending_obj_getter() : extending_obj_getter;\n      if (!extending_obj) return undefined;\n      var value = extending_obj[field];\n      if (value) {\n        if (typeof value === 'function') {\n          return value.bind(extending_obj);\n        }\n        return value;\n      }\n      return undefined;\n    }\n  });\n}\nvar proxied_socket_base = delegateToObject(BinarySocketBase, function () {\n  return BinarySocketBase.get();\n});\nvar proxyForAuthorize = function proxyForAuthorize(obj) {\n  return new Proxy(obj, {\n    get: function get(target, field) {\n      if (target[field] && typeof target[field] !== 'function') {\n        return proxyForAuthorize(target[field]);\n      }\n      return function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        return BinarySocketBase === null || BinarySocketBase === void 0 ? void 0 : BinarySocketBase.wait('authorize').then(function () {\n          return target[field].apply(target, args);\n        });\n      };\n    }\n  });\n};\nBinarySocketBase.authorized = proxyForAuthorize(proxied_socket_base);\nmodule.exports = proxied_socket_base;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./_common/base/socket_base.js\n");

/***/ }),

/***/ "./_common/base/socket_cache.js":
/*!**************************************!*\
  !*** ./_common/base/socket_cache.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nvar moment = __webpack_require__(/*! moment */ \"../../../node_modules/moment/moment.js\");\nvar isEmptyObject = (__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\").isEmptyObject);\nvar getPropertyValue = (__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\").getPropertyValue);\nvar getStaticHash = (__webpack_require__(/*! _common/utility */ \"./_common/utility.js\").getStaticHash);\nvar LocalStore = (__webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\").LocalStore);\n\n/*\n * Caches WS responses to reduce delay time and number of requests\n * Stores data in LocalStore which is the first one available in: localStorage, sessionStorage, InScriptStore\n *\n * 1. It caches only the response of those calls which determined in `config`\n * 2. It doesn't cache responses which returned error\n * 3. The value is requested by BinarySocket,\n *    if this returns a value according to the logic here, socket code take it as response\n *    but also triggers an async `send` request, to keep the cache updated for next time\n * 4. Uses client's time to set and check for expiry, as the expire durations are not so long to need a more precise one\n *    (And doesn't worth to wait for the response of time call)\n * 5. Some responses should be cached by a particular value from request (e.g. contracts_for_frxAUDJPY)\n *    so there can be more than one value for a particular call\n * 6. Clears the whole cache regardless their expire time on the following events:\n *    6.1. Client changes: login / logout / switch loginid\n *    6.2. Detect a new release (static hash changed)\n */\nvar SocketCache = function () {\n  // keys are msg_type\n  // expire: how long to keep the value (in minutes)\n  var config = {\n    payout_currencies: {\n      expire: 120\n    },\n    proposal_open_contract: {\n      expire: 10\n    },\n    contracts_for: {\n      expire: 10\n    },\n    exchange_rates: {\n      expire: 60\n    },\n    trading_times: {\n      expire: 120\n    }\n    // TODO: Enable statement and trade table caching once we have UI design for handling\n    // transitions between cached table and newly added data to table\n    // statement             : { expire: 10 },\n    // profit_table          : { expire: 10 },\n  };\n\n  var storage_key = 'ws_cache';\n  var data_obj = {};\n  var msg_type_mapping = {\n    history: 'ticks_history',\n    candles: 'ticks_history'\n  };\n  var set = function set(key, response) {\n    var msg_type = msg_type_mapping[response.msg_type] || response.msg_type;\n    // check if response has subscription, since we only want to cache non-streaming responses\n    // sold proposal_open_contract response can be cached\n    if (response.subscription) {\n      var can_cache = msg_type === 'proposal_open_contract' && response.proposal_open_contract.is_sold;\n      if (!can_cache) return;\n    }\n    if (response.echo_req.end === 'latest') return;\n    if (!config[msg_type]) return;\n    // prevent unwanted page behaviour\n    // if a cached version already exists but it gives an error after being called for updating the cache\n    var cached_response = get(response.echo_req) || {};\n    var cached_message = cached_response[msg_type];\n    var new_message = response[msg_type];\n    var has_error_or_missing = response.error; // || !(msg_type in response);\n    var has_new_value = cached_message && isEmptyValue(cached_message) && !isEmptyValue(new_message);\n    var has_old_cache = cached_message && isEmptyValue(new_message) && !isEmptyValue(cached_message);\n    var has_valid_cache = !isEmptyValue(cached_response) && !cached_response.error;\n    if ((has_error_or_missing || has_new_value || has_old_cache) && has_valid_cache) {\n      clear();\n      return;\n    }\n    var expires = moment().add(config[msg_type].expire, 'm').valueOf();\n    if (!data_obj.static_hash) {\n      data_obj.static_hash = getStaticHash();\n    }\n    data_obj[key] = {\n      value: response,\n      expires: expires,\n      msg_type: msg_type\n    };\n    LocalStore.setObject(storage_key, data_obj);\n  };\n  var isEmptyValue = function isEmptyValue(data) {\n    var is_empty_data = false;\n    if (Array.isArray(data)) {\n      if (!data.length) {\n        is_empty_data = true;\n      }\n    } else if ((typeof response_data === \"undefined\" ? \"undefined\" : _typeof(response_data)) === 'object') {\n      if (!Object.keys(data).length) {\n        is_empty_data = true;\n      }\n    }\n    return is_empty_data;\n  };\n  var reloadDataObj = function reloadDataObj() {\n    if (isEmptyObject(data_obj)) {\n      data_obj = LocalStore.getObject(storage_key);\n      if (isEmptyObject(data_obj)) return;\n    }\n    if (data_obj.static_hash !== getStaticHash()) {\n      // new release\n      clear();\n    }\n  };\n  var getData = function getData(key) {\n    return getPropertyValue(data_obj, key) || {};\n  };\n  var get = function get(key) {\n    reloadDataObj();\n    var response_obj = getData(key);\n    var response;\n    if (moment().isBefore(response_obj.expires)) {\n      response = response_obj.value;\n    } else {\n      // remove if expired\n      remove(key);\n    }\n    return response;\n  };\n  var getByMsgType = function getByMsgType(msg_type) {\n    reloadDataObj();\n    var key = Object.keys(data_obj).find(function (k) {\n      return getData(k).msg_type === msg_type;\n    });\n    if (!key) return undefined;\n    var response_obj = getData(key);\n    var response;\n    if (moment().isBefore(response_obj.expires)) {\n      response = response_obj.value;\n    } else {\n      // remove if expired\n      remove(key);\n    }\n    return response;\n  };\n  var has = function has(key) {\n    return !!get(key);\n  };\n  var remove = function remove(key, should_match_all) {\n    if (should_match_all) {\n      Object.keys(data_obj).forEach(function (data_key) {\n        if (data_key.indexOf(key) !== -1) {\n          delete data_obj[data_key];\n        }\n      });\n    } else if (key in data_obj) {\n      delete data_obj[key];\n    }\n    LocalStore.setObject(storage_key, data_obj);\n  };\n  var clear = function clear() {\n    LocalStore.remove(storage_key);\n    data_obj = {};\n  };\n  return {\n    set: set,\n    get: get,\n    getByMsgType: getByMsgType,\n    has: has,\n    remove: remove,\n    clear: clear\n  };\n}();\nmodule.exports = SocketCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./_common/base/socket_cache.js\n");

/***/ }),

/***/ "./_common/utility.js":
/*!****************************!*\
  !*** ./_common/utility.js ***!
  \****************************/
/***/ ((module) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nvar createElement = function createElement(tag_name) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var el = document.createElement(tag_name);\n  Object.keys(attributes).forEach(function (attr) {\n    var value = attributes[attr];\n    if (attr === 'text') {\n      el.textContent = value;\n    } else if (attr === 'html') {\n      el.html(value);\n    } else {\n      el.setAttribute(attr, value);\n    }\n  });\n  return el;\n};\nvar static_hash;\nvar getStaticHash = function getStaticHash() {\n  static_hash = static_hash || (document.querySelector('script[src*=\"main\"]').getAttribute('src') || '').split('.')[1];\n  return static_hash;\n};\nvar PromiseClass = /*#__PURE__*/_createClass(function PromiseClass() {\n  var _this = this;\n  _classCallCheck(this, PromiseClass);\n  this.promise = new Promise(function (resolve, reject) {\n    _this.reject = reject;\n    _this.resolve = resolve;\n  });\n}); // TODO: [duplicate_code] - Move this to shared package\n// eu countries to support\nvar eu_countries = ['it', 'de', 'fr', 'lu', 'gr', 'mf', 'es', 'sk', 'lt', 'nl', 'at', 'bg', 'si', 'cy', 'be', 'ro', 'hr', 'pt', 'pl', 'lv', 'ee', 'cz', 'fi', 'hu', 'dk', 'se', 'ie', 'im', 'gb', 'mt'];\n// TODO: [duplicate_code] - Move this to shared package\n// check if client is from EU\nvar isEuCountry = function isEuCountry(country) {\n  return eu_countries.includes(country);\n};\n// countries where synthetics are not offered\nvar countries_without_synthetics = ['sg', 'de', 'gr', 'es', 'au', 'it', 'lu'];\n// check if synthetics are offered based on country\nvar isSyntheticsUnavailable = function isSyntheticsUnavailable(country) {\n  return countries_without_synthetics.includes(country);\n};\n// countries where binary options are blocked\nvar blocked_options_countries = ['au', 'fr'];\nvar isOptionsBlocked = function isOptionsBlocked(country) {\n  return blocked_options_countries.includes(country);\n};\n// countries where only multipliers are offered\nvar multipliers_only_countries = ['de', 'es', 'it', 'lu', 'gr', 'au', 'fr'];\nvar isMultipliersOnly = function isMultipliersOnly(country) {\n  return multipliers_only_countries.includes(country);\n};\nvar getRegion = function getRegion(landing_company_shortcode, residence) {\n  if (landing_company_shortcode === 'virtual') {\n    return isEuCountry(residence) ? 'eu' : 'row';\n  }\n  return landing_company_shortcode === 'svg' ? 'row' : 'eu';\n};\nmodule.exports = {\n  createElement: createElement,\n  getStaticHash: getStaticHash,\n  PromiseClass: PromiseClass,\n  isEuCountry: isEuCountry,\n  isOptionsBlocked: isOptionsBlocked,\n  isSyntheticsUnavailable: isSyntheticsUnavailable,\n  isMultipliersOnly: isMultipliersOnly,\n  getRegion: getRegion\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVFbGVtZW50IiwidGFnX25hbWUiLCJhdHRyaWJ1dGVzIiwiZWwiLCJkb2N1bWVudCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiYXR0ciIsInZhbHVlIiwidGV4dENvbnRlbnQiLCJodG1sIiwic2V0QXR0cmlidXRlIiwic3RhdGljX2hhc2giLCJnZXRTdGF0aWNIYXNoIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsInNwbGl0IiwiUHJvbWlzZUNsYXNzIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXVfY291bnRyaWVzIiwiaXNFdUNvdW50cnkiLCJjb3VudHJ5IiwiaW5jbHVkZXMiLCJjb3VudHJpZXNfd2l0aG91dF9zeW50aGV0aWNzIiwiaXNTeW50aGV0aWNzVW5hdmFpbGFibGUiLCJibG9ja2VkX29wdGlvbnNfY291bnRyaWVzIiwiaXNPcHRpb25zQmxvY2tlZCIsIm11bHRpcGxpZXJzX29ubHlfY291bnRyaWVzIiwiaXNNdWx0aXBsaWVyc09ubHkiLCJnZXRSZWdpb24iLCJsYW5kaW5nX2NvbXBhbnlfc2hvcnRjb2RlIiwicmVzaWRlbmNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fY29tbW9uL3V0aWxpdHkuanM/YjRiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZXMgYSBET00gZWxlbWVudCBhbmQgYWRkcyBhbnkgYXR0cmlidXRlcyB0byBpdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGFnX25hbWU6IHRoZSB0YWcgdG8gY3JlYXRlLCBlLmcuICdkaXYnLCAnYScsIGV0Y1xuICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXM6IGFsbCB0aGUgYXR0cmlidXRlcyB0byBhc3NpZ24sIGUuZy4geyBpZDogJy4uLicsIGNsYXNzOiAnLi4uJywgaHRtbDogJy4uLicsIC4uLiB9XG4gKiBAcmV0dXJuIHRoZSBjcmVhdGVkIERPTSBlbGVtZW50XG4gKi9cbmNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAodGFnX25hbWUsIGF0dHJpYnV0ZXMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdfbmFtZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChhdHRyID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW2F0dHJdO1xuICAgICAgICBpZiAoYXR0ciA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGF0dHIgPT09ICdodG1sJykge1xuICAgICAgICAgICAgZWwuaHRtbCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGVsO1xufTtcblxubGV0IHN0YXRpY19oYXNoO1xuY29uc3QgZ2V0U3RhdGljSGFzaCA9ICgpID0+IHtcbiAgICBzdGF0aWNfaGFzaCA9XG4gICAgICAgIHN0YXRpY19oYXNoIHx8IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzY3JpcHRbc3JjKj1cIm1haW5cIl0nKS5nZXRBdHRyaWJ1dGUoJ3NyYycpIHx8ICcnKS5zcGxpdCgnLicpWzFdO1xuICAgIHJldHVybiBzdGF0aWNfaGFzaDtcbn07XG5cbmNsYXNzIFByb21pc2VDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vLyBUT0RPOiBbZHVwbGljYXRlX2NvZGVdIC0gTW92ZSB0aGlzIHRvIHNoYXJlZCBwYWNrYWdlXG4vLyBldSBjb3VudHJpZXMgdG8gc3VwcG9ydFxuY29uc3QgZXVfY291bnRyaWVzID0gW1xuICAgICdpdCcsXG4gICAgJ2RlJyxcbiAgICAnZnInLFxuICAgICdsdScsXG4gICAgJ2dyJyxcbiAgICAnbWYnLFxuICAgICdlcycsXG4gICAgJ3NrJyxcbiAgICAnbHQnLFxuICAgICdubCcsXG4gICAgJ2F0JyxcbiAgICAnYmcnLFxuICAgICdzaScsXG4gICAgJ2N5JyxcbiAgICAnYmUnLFxuICAgICdybycsXG4gICAgJ2hyJyxcbiAgICAncHQnLFxuICAgICdwbCcsXG4gICAgJ2x2JyxcbiAgICAnZWUnLFxuICAgICdjeicsXG4gICAgJ2ZpJyxcbiAgICAnaHUnLFxuICAgICdkaycsXG4gICAgJ3NlJyxcbiAgICAnaWUnLFxuICAgICdpbScsXG4gICAgJ2diJyxcbiAgICAnbXQnLFxuXTtcbi8vIFRPRE86IFtkdXBsaWNhdGVfY29kZV0gLSBNb3ZlIHRoaXMgdG8gc2hhcmVkIHBhY2thZ2Vcbi8vIGNoZWNrIGlmIGNsaWVudCBpcyBmcm9tIEVVXG5jb25zdCBpc0V1Q291bnRyeSA9IGNvdW50cnkgPT4gZXVfY291bnRyaWVzLmluY2x1ZGVzKGNvdW50cnkpO1xuLy8gY291bnRyaWVzIHdoZXJlIHN5bnRoZXRpY3MgYXJlIG5vdCBvZmZlcmVkXG5jb25zdCBjb3VudHJpZXNfd2l0aG91dF9zeW50aGV0aWNzID0gWydzZycsICdkZScsICdncicsICdlcycsICdhdScsICdpdCcsICdsdSddO1xuLy8gY2hlY2sgaWYgc3ludGhldGljcyBhcmUgb2ZmZXJlZCBiYXNlZCBvbiBjb3VudHJ5XG5jb25zdCBpc1N5bnRoZXRpY3NVbmF2YWlsYWJsZSA9IGNvdW50cnkgPT4gY291bnRyaWVzX3dpdGhvdXRfc3ludGhldGljcy5pbmNsdWRlcyhjb3VudHJ5KTtcbi8vIGNvdW50cmllcyB3aGVyZSBiaW5hcnkgb3B0aW9ucyBhcmUgYmxvY2tlZFxuY29uc3QgYmxvY2tlZF9vcHRpb25zX2NvdW50cmllcyA9IFsnYXUnLCAnZnInXTtcbmNvbnN0IGlzT3B0aW9uc0Jsb2NrZWQgPSBjb3VudHJ5ID0+IGJsb2NrZWRfb3B0aW9uc19jb3VudHJpZXMuaW5jbHVkZXMoY291bnRyeSk7XG4vLyBjb3VudHJpZXMgd2hlcmUgb25seSBtdWx0aXBsaWVycyBhcmUgb2ZmZXJlZFxuY29uc3QgbXVsdGlwbGllcnNfb25seV9jb3VudHJpZXMgPSBbJ2RlJywgJ2VzJywgJ2l0JywgJ2x1JywgJ2dyJywgJ2F1JywgJ2ZyJ107XG5jb25zdCBpc011bHRpcGxpZXJzT25seSA9IGNvdW50cnkgPT4gbXVsdGlwbGllcnNfb25seV9jb3VudHJpZXMuaW5jbHVkZXMoY291bnRyeSk7XG5cbmNvbnN0IGdldFJlZ2lvbiA9IChsYW5kaW5nX2NvbXBhbnlfc2hvcnRjb2RlLCByZXNpZGVuY2UpID0+IHtcbiAgICBpZiAobGFuZGluZ19jb21wYW55X3Nob3J0Y29kZSA9PT0gJ3ZpcnR1YWwnKSB7XG4gICAgICAgIHJldHVybiBpc0V1Q291bnRyeShyZXNpZGVuY2UpID8gJ2V1JyA6ICdyb3cnO1xuICAgIH1cbiAgICByZXR1cm4gbGFuZGluZ19jb21wYW55X3Nob3J0Y29kZSA9PT0gJ3N2ZycgPyAncm93JyA6ICdldSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjcmVhdGVFbGVtZW50LFxuICAgIGdldFN0YXRpY0hhc2gsXG4gICAgUHJvbWlzZUNsYXNzLFxuICAgIGlzRXVDb3VudHJ5LFxuICAgIGlzT3B0aW9uc0Jsb2NrZWQsXG4gICAgaXNTeW50aGV0aWNzVW5hdmFpbGFibGUsXG4gICAgaXNNdWx0aXBsaWVyc09ubHksXG4gICAgZ2V0UmVnaW9uLFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxhQUFhLEdBQUcsU0FBaEJBLGFBQWEsQ0FBSUMsUUFBUSxFQUFzQjtFQUFBLElBQXBCQyxVQUFVLHVFQUFHLENBQUMsQ0FBQztFQUM1QyxJQUFNQyxFQUFFLEdBQUdDLFFBQVEsQ0FBQ0osYUFBYSxDQUFDQyxRQUFRLENBQUM7RUFDM0NJLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSixVQUFVLENBQUMsQ0FBQ0ssT0FBTyxDQUFDLFVBQUFDLElBQUksRUFBSTtJQUNwQyxJQUFNQyxLQUFLLEdBQUdQLFVBQVUsQ0FBQ00sSUFBSSxDQUFDO0lBQzlCLElBQUlBLElBQUksS0FBSyxNQUFNLEVBQUU7TUFDakJMLEVBQUUsQ0FBQ08sV0FBVyxHQUFHRCxLQUFLO0lBQzFCLENBQUMsTUFBTSxJQUFJRCxJQUFJLEtBQUssTUFBTSxFQUFFO01BQ3hCTCxFQUFFLENBQUNRLElBQUksQ0FBQ0YsS0FBSyxDQUFDO0lBQ2xCLENBQUMsTUFBTTtNQUNITixFQUFFLENBQUNTLFlBQVksQ0FBQ0osSUFBSSxFQUFFQyxLQUFLLENBQUM7SUFDaEM7RUFDSixDQUFDLENBQUM7RUFDRixPQUFPTixFQUFFO0FBQ2IsQ0FBQztBQUVELElBQUlVLFdBQVc7QUFDZixJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWEsR0FBUztFQUN4QkQsV0FBVyxHQUNQQSxXQUFXLElBQUksQ0FBQ1QsUUFBUSxDQUFDVyxhQUFhLENBQUMscUJBQXFCLENBQUMsQ0FBQ0MsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMxRyxPQUFPSixXQUFXO0FBQ3RCLENBQUM7QUFBQyxJQUVJSyxZQUFZLDZCQUNkLHdCQUFjO0VBQUE7RUFBQTtFQUNWLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDLE9BQU8sQ0FBQyxVQUFDQyxPQUFPLEVBQUVDLE1BQU0sRUFBSztJQUM1QyxLQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixLQUFJLENBQUNELE9BQU8sR0FBR0EsT0FBTztFQUMxQixDQUFDLENBQUM7QUFDTixDQUFDLEdBR0w7QUFDQTtBQUNBLElBQU1FLFlBQVksR0FBRyxDQUNqQixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksQ0FDUDtBQUNEO0FBQ0E7QUFDQSxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBVyxDQUFHQyxPQUFPO0VBQUEsT0FBSUYsWUFBWSxDQUFDRyxRQUFRLENBQUNELE9BQU8sQ0FBQztBQUFBO0FBQzdEO0FBQ0EsSUFBTUUsNEJBQTRCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7QUFDL0U7QUFDQSxJQUFNQyx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQXVCLENBQUdILE9BQU87RUFBQSxPQUFJRSw0QkFBNEIsQ0FBQ0QsUUFBUSxDQUFDRCxPQUFPLENBQUM7QUFBQTtBQUN6RjtBQUNBLElBQU1JLHlCQUF5QixHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztBQUM5QyxJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCLENBQUdMLE9BQU87RUFBQSxPQUFJSSx5QkFBeUIsQ0FBQ0gsUUFBUSxDQUFDRCxPQUFPLENBQUM7QUFBQTtBQUMvRTtBQUNBLElBQU1NLDBCQUEwQixHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0FBQzdFLElBQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUIsQ0FBR1AsT0FBTztFQUFBLE9BQUlNLDBCQUEwQixDQUFDTCxRQUFRLENBQUNELE9BQU8sQ0FBQztBQUFBO0FBRWpGLElBQU1RLFNBQVMsR0FBRyxTQUFaQSxTQUFTLENBQUlDLHlCQUF5QixFQUFFQyxTQUFTLEVBQUs7RUFDeEQsSUFBSUQseUJBQXlCLEtBQUssU0FBUyxFQUFFO0lBQ3pDLE9BQU9WLFdBQVcsQ0FBQ1csU0FBUyxDQUFDLEdBQUcsSUFBSSxHQUFHLEtBQUs7RUFDaEQ7RUFDQSxPQUFPRCx5QkFBeUIsS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUk7QUFDN0QsQ0FBQztBQUVERSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNickMsYUFBYSxFQUFiQSxhQUFhO0VBQ2JjLGFBQWEsRUFBYkEsYUFBYTtFQUNiSSxZQUFZLEVBQVpBLFlBQVk7RUFDWk0sV0FBVyxFQUFYQSxXQUFXO0VBQ1hNLGdCQUFnQixFQUFoQkEsZ0JBQWdCO0VBQ2hCRix1QkFBdUIsRUFBdkJBLHVCQUF1QjtFQUN2QkksaUJBQWlCLEVBQWpCQSxpQkFBaUI7RUFDakJDLFNBQVMsRUFBVEE7QUFDSixDQUFDIiwiZmlsZSI6Ii4vX2NvbW1vbi91dGlsaXR5LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./_common/utility.js\n");

/***/ })

}]);