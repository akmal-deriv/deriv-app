{"version":3,"file":"js/core.main~dd894ead.ff660f26e3bd388626d7.js","mappings":"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","sources":["webpack:///../../api/src/APIProvider.tsx","webpack:///../../api/src/useAPI.ts","webpack:///../../api/src/utils/query-utils.ts","webpack:///../../api/src/useInfiniteQuery.ts","webpack:///../../api/src/useMutation.ts","webpack:///../../api/src/useQuery.ts","webpack:///../../api/src/useInvalidateQuery.ts","webpack:///../../api/src/hooks/useAuthorize.ts","webpack:///../../api/src/useSubscription.ts","webpack:///../../api/src/hooks/useSettings.ts"],"sourcesContent":["import React, { PropsWithChildren, createContext, useContext, useEffect, useRef, useState } from 'react';\n// @ts-expect-error `@deriv/deriv-api` is not in TypeScript, Hence we ignore the TS error.\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic';\nimport { getAppId, getSocketURL, useWS } from '@deriv/shared';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\ntype APIContextData = {\n    derivAPI: DerivAPIBasic | null;\n    switchEnvironment: (loginid: string | null | undefined) => void;\n};\n\nconst APIContext = createContext<APIContextData | null>(null);\n\ndeclare global {\n    interface Window {\n        ReactQueryClient?: QueryClient;\n        DerivAPI?: Record<string, DerivAPIBasic>;\n        WSConnections?: Record<string, WebSocket>;\n    }\n}\n\n// This is a temporary workaround to share a single `QueryClient` instance between all the packages.\nconst getSharedQueryClientContext = (): QueryClient => {\n    if (!window.ReactQueryClient) {\n        window.ReactQueryClient = new QueryClient({\n            logger: {\n                log: console.log, // eslint-disable-line no-console\n                warn: console.warn, // eslint-disable-line no-console\n                error: () => null,\n            },\n        });\n    }\n\n    return window.ReactQueryClient;\n};\n\n/**\n * Retrieves the WebSocket URL based on the current environment.\n * @returns {string} The WebSocket URL.\n */\nconst getWebSocketURL = () => {\n    const endpoint = getSocketURL();\n    const app_id = getAppId();\n    const language = localStorage.getItem('i18n_language');\n    const brand = 'deriv';\n    const wss_url = `wss://${endpoint}/websockets/v3?app_id=${app_id}&l=${language}&brand=${brand}`;\n\n    return wss_url;\n};\n\n/**\n * Retrieves or initializes a WebSocket instance based on the provided URL.\n * @param {string} wss_url - The WebSocket URL.\n * @returns {WebSocket} The WebSocket instance associated with the provided URL.\n */\nconst getWebsocketInstance = (wss_url: string, onWSClose: () => void) => {\n    if (!window.WSConnections) {\n        window.WSConnections = {};\n    }\n\n    const existingWebsocketInstance = window.WSConnections[wss_url];\n    if (\n        !existingWebsocketInstance ||\n        !(existingWebsocketInstance instanceof WebSocket) ||\n        [2, 3].includes(existingWebsocketInstance.readyState)\n    ) {\n        window.WSConnections[wss_url] = new WebSocket(wss_url);\n        window.WSConnections[wss_url].addEventListener('close', () => {\n            if (typeof onWSClose === 'function') onWSClose();\n        });\n    }\n\n    return window.WSConnections[wss_url];\n};\n\n/**\n * Retrieves the active WebSocket instance.\n * @returns {WebSocket} The WebSocket instance associated with the provided URL.\n */\nexport const getActiveWebsocket = () => {\n    const wss_url = getWebSocketURL();\n\n    return window?.WSConnections?.[wss_url];\n};\n\n/**\n * Initializes a DerivAPI instance for the global window. This enables a standalone connection\n * without causing race conditions with deriv-app core stores.\n * @returns {DerivAPIBasic} The initialized DerivAPI instance.\n */\nconst initializeDerivAPI = (onWSClose: () => void): DerivAPIBasic => {\n    if (!window.DerivAPI) {\n        window.DerivAPI = {};\n    }\n\n    const wss_url = getWebSocketURL();\n    const websocketConnection = getWebsocketInstance(wss_url, onWSClose);\n\n    if (!window.DerivAPI?.[wss_url] || window.DerivAPI?.[wss_url].isConnectionClosed()) {\n        window.DerivAPI[wss_url] = new DerivAPIBasic({ connection: websocketConnection });\n    }\n\n    return window.DerivAPI?.[wss_url];\n};\n\nconst queryClient = getSharedQueryClientContext();\n\n/**\n * Determines the WS environment based on the login ID and custom server URL.\n * @param {string | null | undefined} loginid - The login ID (can be a string, null, or undefined).\n * @returns {string} Returns the WS environment: 'custom', 'real', or 'demo'.\n */\nconst getEnvironment = (loginid: string | null | undefined) => {\n    const customServerURL = window.localStorage.getItem('config.server_url');\n    if (customServerURL) return 'custom';\n\n    if (loginid && !/^(VRT|VRW)/.test(loginid)) return 'real';\n    return 'demo';\n};\n\ntype TAPIProviderProps = {\n    /** If set to true, the APIProvider will instantiate it's own socket connection. */\n    standalone?: boolean;\n};\n\nconst APIProvider = ({ children, standalone = false }: PropsWithChildren<TAPIProviderProps>) => {\n    const WS = useWS();\n    const [reconnect, setReconnect] = useState(false);\n    const activeLoginid = window.localStorage.getItem('active_loginid');\n    const [environment, setEnvironment] = useState(getEnvironment(activeLoginid));\n    const standaloneDerivAPI = useRef(standalone ? initializeDerivAPI(() => setReconnect(true)) : null);\n\n    const switchEnvironment = (loginid: string | null | undefined) => {\n        if (!standalone) return;\n        const currentEnvironment = getEnvironment(loginid);\n        if (currentEnvironment !== 'custom' && currentEnvironment !== environment) {\n            setEnvironment(currentEnvironment);\n        }\n    };\n\n    useEffect(() => {\n        let interval_id: NodeJS.Timer;\n\n        if (standalone) {\n            interval_id = setInterval(() => standaloneDerivAPI.current?.send({ ping: 1 }), 10000);\n        }\n\n        return () => clearInterval(interval_id);\n    }, [standalone]);\n\n    useEffect(() => {\n        let reconnectTimerId: NodeJS.Timeout;\n        if (standalone || reconnect) {\n            standaloneDerivAPI.current = initializeDerivAPI(() => {\n                reconnectTimerId = setTimeout(() => setReconnect(true), 500);\n            });\n            setReconnect(false);\n        }\n\n        return () => clearTimeout(reconnectTimerId);\n    }, [environment, reconnect, standalone]);\n\n    return (\n        <APIContext.Provider value={{ derivAPI: standalone ? standaloneDerivAPI.current : WS, switchEnvironment }}>\n            <QueryClientProvider client={queryClient}>\n                {children}\n                {/* <ReactQueryDevtools /> */}\n            </QueryClientProvider>\n        </APIContext.Provider>\n    );\n};\n\nexport const useAPIContext = () => {\n    const context = useContext(APIContext);\n    if (!context) {\n        throw new Error('useAPIContext must be used within APIProvider');\n    }\n    return context;\n};\n\nexport default APIProvider;\n","import { useCallback } from 'react';\n\nimport type {\n    TSocketEndpointNames,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\nimport { useAPIContext } from './APIProvider';\n\nconst useAPI = () => {\n    const { derivAPI } = useAPIContext();\n\n    const send = useCallback(\n        async <T extends TSocketEndpointNames | TSocketPaginateableEndpointNames = TSocketEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): Promise<TSocketResponseData<T>> => {\n            const response = await derivAPI?.send({ [name]: 1, ...(payload || {}) });\n\n            if (response.error) {\n                throw response.error;\n            }\n\n            return response;\n        },\n        [derivAPI]\n    );\n\n    const subscribe = useCallback(\n        <T extends TSocketSubscribableEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): {\n            subscribe: (\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onData: (response: any) => void,\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onError: (response: any) => void\n            ) => { unsubscribe?: VoidFunction };\n        } => derivAPI?.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }),\n        [derivAPI]\n    );\n\n    return {\n        send,\n        subscribe,\n    };\n};\n\nexport default useAPI;\n","export const getQueryKeys = (name: string, props?: Record<string, unknown>) => {\n    if (!props) return [name];\n\n    delete props.req_id;\n    if (name && props[name] === 1) delete props[name];\n\n    if (Object.keys(props).length === 0) return [name];\n\n    const ordered_props = Object.keys(props)\n        .sort((a, b) => a.localeCompare(b))\n        .reduce((obj, key) => {\n            obj[key] = props[key];\n\n            return obj;\n        }, {} as { [k: string]: unknown });\n\n    const query_props = JSON.stringify(ordered_props);\n\n    return [name, query_props];\n};\n","import { useInfiniteQuery as _useInfiniteQuery } from '@tanstack/react-query';\n\nimport type {\n    TSocketAcceptableProps,\n    TSocketError,\n    TSocketPaginatateableRequestCleaned,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestInfiniteQueryOptions,\n    TSocketRequestPayload,\n    TSocketResponseData,\n} from '../types';\n\nimport useAPI from './useAPI';\nimport { getQueryKeys } from './utils';\n\nconst useInfiniteQuery = <T extends TSocketPaginateableEndpointNames>(\n    name: T,\n    ...props: TSocketAcceptableProps<T, true, 'useInfiniteQuery'>\n) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketPaginatateableRequestCleaned<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestInfiniteQueryOptions<T>) : undefined;\n    const { send } = useAPI();\n\n    const initial_offset = payload?.offset || 0;\n    const limit = payload?.limit || 50;\n\n    return _useInfiniteQuery<TSocketResponseData<T>, TSocketError<T>>(\n        getQueryKeys(name, payload),\n\n        ({ pageParam = 0 }) =>\n            send(name, {\n                ...payload,\n                limit,\n                offset: pageParam * limit + initial_offset,\n            } as unknown as TSocketRequestPayload<T>),\n        {\n            ...options,\n            getNextPageParam: options?.getNextPageParam ? options.getNextPageParam : (_lastPage, pages) => pages.length,\n        }\n    );\n};\n\nexport default useInfiniteQuery;\n","import { useCallback } from 'react';\nimport { useMutation as _useMutation } from '@tanstack/react-query';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketEndpointNames,\n    TSocketError,\n    TSocketRequestMutationOptions,\n    TSocketRequestPayload,\n    TSocketResponseData,\n} from '../types';\n\nconst useMutation = <T extends TSocketEndpointNames>(name: T, options?: TSocketRequestMutationOptions<T>) => {\n    const { send } = useAPI();\n    const {\n        mutate: _mutate,\n        mutateAsync: _mutateAsync,\n        ...rest\n    } = _useMutation<TSocketResponseData<T>, TSocketError<T>, TSocketAcceptableProps<T>>(props => {\n        const prop = props?.[0];\n        const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n        return send(name, payload);\n    }, options);\n\n    const mutate = useCallback((...payload: TSocketAcceptableProps<T>) => _mutate(payload), [_mutate]);\n    const mutateAsync = useCallback((...payload: TSocketAcceptableProps<T>) => _mutateAsync(payload), [_mutateAsync]);\n\n    return {\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useMutation;\n","import { useQuery as _useQuery } from '@tanstack/react-query';\nimport type {\n    TSocketAcceptableProps,\n    TSocketEndpointNames,\n    TSocketError,\n    TSocketRequestPayload,\n    TSocketRequestQueryOptions,\n    TSocketResponseData,\n} from '../types';\nimport useAPI from './useAPI';\nimport { getQueryKeys } from './utils';\n\nconst useQuery = <T extends TSocketEndpointNames>(name: T, ...props: TSocketAcceptableProps<T, true>) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestQueryOptions<T>) : undefined;\n    const { send } = useAPI();\n\n    return _useQuery<TSocketResponseData<T>, TSocketError<T>>(\n        getQueryKeys(name, payload),\n        () => send(name, payload),\n        options\n    );\n};\n\nexport default useQuery;\n","import { useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { TSocketEndpointNames } from '../types';\n\ntype TOptions = Parameters<ReturnType<typeof useQueryClient>['invalidateQueries']>[1];\n\nconst useInvalidateQuery = () => {\n    const queryClient = useQueryClient();\n\n    const invalidate = useCallback(\n        <T extends TSocketEndpointNames>(name: T | T[], options?: TOptions) => {\n            return queryClient.invalidateQueries(Array.isArray(name) ? name : [name], options);\n        },\n        [queryClient]\n    );\n\n    return invalidate;\n};\n\nexport default useInvalidateQuery;\n","import { useCallback, useMemo } from 'react';\nimport { getActiveAuthTokenIDFromLocalStorage, getActiveLoginIDFromLocalStorage } from '@deriv/utils';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useQuery from '../useQuery';\nimport { useAPIContext } from '../APIProvider';\n\n/** A custom hook that authorize the user with the given token. If no token is given,\n * it will use the current token from localStorage.\n */\nconst useAuthorize = () => {\n    const current_token = getActiveAuthTokenIDFromLocalStorage();\n    const invalidate = useInvalidateQuery();\n    const { switchEnvironment } = useAPIContext();\n\n    const { data, ...rest } = useQuery('authorize', {\n        payload: { authorize: current_token || '' },\n        options: { enabled: Boolean(current_token) },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    const switchAccount = useCallback(\n        (loginid: string) => {\n            const active_loginid = getActiveLoginIDFromLocalStorage();\n            if (active_loginid !== loginid) {\n                localStorage.setItem('active_loginid', loginid);\n                switchEnvironment(active_loginid);\n                invalidate('authorize');\n            }\n        },\n        [invalidate, switchEnvironment]\n    );\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        /** Function to switch to another account */\n        switchAccount,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketError,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSubscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<TSocketError<T>>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const { subscribe: _subscribe } = useAPI();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            try {\n                subscriber.current = _subscribe(name, payload).subscribe(\n                    response => {\n                        setData(response);\n                        setIsLoading(false);\n                    },\n                    response => {\n                        setError(response.error);\n                        setIsLoading(false);\n                    }\n                );\n            } catch (e) {\n                setError(e as TSocketError<T>);\n            }\n        },\n        [_subscribe, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return {\n        subscribe,\n        unsubscribe,\n        isLoading,\n        isSubscribed,\n        error,\n        data,\n    };\n};\n\nexport default useSubscription;\n","import { useCallback, useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useMutation from '../useMutation';\n\ntype TSetSettingsPayload = NonNullable<\n    NonNullable<NonNullable<Parameters<ReturnType<typeof useMutation<'set_settings'>>['mutate']>>[0]>['payload']\n>;\n\n/** A custom hook to get and update the user settings. */\nconst useSettings = () => {\n    const { data, ...rest } = useQuery('get_settings');\n    const { mutate, ...mutate_rest } = useMutation('set_settings', { onSuccess: () => invalidate('get_settings') });\n    const invalidate = useInvalidateQuery();\n\n    const update = useCallback((payload: TSetSettingsPayload) => mutate({ payload }), [mutate]);\n\n    // Add additional information to the settings response.\n    const modified_settings = useMemo(() => {\n        const citizenship = data?.get_settings?.citizen ?? '';\n        const account = data?.get_settings?.account_opening_reason ?? '';\n        const placeofbirth = data?.get_settings?.place_of_birth ?? '';\n        const taxResidence = data?.get_settings?.tax_residence ?? '';\n        const taxIdentificationnumber = data?.get_settings?.tax_identification_number ?? '';\n\n        return {\n            ...data?.get_settings,\n            has_submitted_personal_details: Boolean(\n                citizenship && account && placeofbirth && taxResidence && taxIdentificationnumber\n            ),\n        };\n    }, [data?.get_settings]);\n\n    return {\n        /** The settings response. */\n        data: modified_settings,\n        /** Function to update user settings */\n        update,\n        /** The mutation related information */\n        mutation: mutate_rest,\n        ...rest,\n    };\n};\n\nexport default useSettings;\n"],"names":["APIContext","createContext","getWebSocketURL","endpoint","getSocketURL","app_id","getAppId","language","localStorage","getItem","initializeDerivAPI","onWSClose","window","DerivAPI","wss_url","websocketConnection","WSConnections","existingWebsocketInstance","WebSocket","includes","readyState","addEventListener","getWebsocketInstance","isConnectionClosed","DerivAPIBasic","connection","queryClient","ReactQueryClient","QueryClient","logger","log","console","warn","error","getEnvironment","loginid","test","useAPIContext","context","useContext","Error","children","standalone","WS","useWS","useState","reconnect","setReconnect","activeLoginid","environment","setEnvironment","standaloneDerivAPI","useRef","useEffect","interval_id","setInterval","current","send","ping","clearInterval","reconnectTimerId","setTimeout","clearTimeout","Provider","value","derivAPI","switchEnvironment","currentEnvironment","QueryClientProvider","client","useCallback","name","payload","response","subscribe","getQueryKeys","props","req_id","Object","keys","length","ordered_props","sort","a","b","localeCompare","reduce","obj","key","JSON","stringify","prop","undefined","options","useAPI","initial_offset","offset","limit","_useInfiniteQuery","pageParam","getNextPageParam","_lastPage","pages","_useMutation","_mutate","mutate","_mutateAsync","mutateAsync","rest","_useQuery","useQueryClient","invalidateQueries","Array","isArray","current_token","getActiveAuthTokenIDFromLocalStorage","invalidate","useInvalidateQuery","useQuery","authorize","enabled","Boolean","data","modified_authorize","useMemo","switchAccount","active_loginid","getActiveLoginIDFromLocalStorage","setItem","isLoading","setIsLoading","isSubscribed","setSubscribed","setError","setData","subscriber","_subscribe","e","unsubscribe","useMutation","onSuccess","mutate_rest","update","modified_settings","citizenship","get_settings","citizen","account","account_opening_reason","placeofbirth","place_of_birth","taxResidence","tax_residence","taxIdentificationnumber","tax_identification_number","has_submitted_personal_details","mutation"],"sourceRoot":""}