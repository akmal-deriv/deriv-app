{"version":3,"file":"js/core.main~acf22cc3.a3b86fe8db82a354fb06.js","mappings":";wMA+BA,IAhBY,QAAP,EAACA,cAAM,OAAsB,QAAtB,GAAN,IAAQC,cAAaC,eAAO,OAA5B,SAA+B,0BAC/BF,OAAOG,SAASC,SAASC,WAAW,eAAiB,aAAaC,KAAKN,OAAOG,SAASC,WAC5D,wBAA7BJ,OAAOG,SAASC,YAEhBG,EAAAA,EAAAA,KAMAP,OAAOC,aAAaC,QAAQ,mBAC5BF,OAAOC,aAAaO,WAAW,oBAEVC,EAAAA,EAAAA,8BAGF,CACnB,IAAMC,GAAaC,EAAAA,EAAAA,GAAUC,EAAAA,GAEvBC,EAAUC,SAASC,eAAe,aACpCF,GACAG,EAAAA,OAAgB,gBAAC,IAAG,CAACC,aAAa,EAAOP,WAAYA,IAAgBG,EAE7E,4qEC1BA,QAViC,WAO7B,OANmBK,EAAAA,EAAAA,YAAXC,OACAC,gBACyCC,MAC7C,SAAAC,GAAO,MAA0C,gBAAtCA,EAAQC,yBAA2C,GAItE,ECGA,QAVkC,WAC9B,IAAQJ,GAAWD,EAAAA,EAAAA,YAAXC,OACAI,EAAyCJ,EAAzCI,0BAA2BC,EAAcL,EAAdK,UAC7BC,EAA2BC,IAIjC,MAFkB,OAAdF,IAAqD,UAA9BD,GAAyCE,EAGxE,moDCcA,QApBqB,SAACE,GAAmB,MAC7BR,GAAWD,EAAAA,EAAAA,YAAXC,OACAS,EAA2BT,EAA3BS,SAAQ,EAAmBT,EAAjBU,QACZC,EAAuC,QAA1B,EAAGF,QADG,IAAG,KAAE,IACY,WAAG,aAAvB,EAAyBD,MAE/C,GAA0BI,EAAAA,EAAAA,UAAS,YAAa,CAC5CC,QAAS,CAAEC,UAAWN,QAAAA,EAASG,GAC/BI,QAAS,CAAEC,QAASC,QAAQT,QAAAA,EAASG,MAFjCO,EAAI,EAAJA,KAASC,EAAI,OAMfC,GAAqBC,EAAAA,EAAAA,UAAQ,uBAAYH,aAAI,EAAJA,EAAMJ,UAAS,GAAK,CAACI,aAAI,EAAJA,EAAMJ,YAE1E,OAAO,EAAP,CAEII,KAAME,GACHD,EAEX,ymDCiEA,QApF0B,WAAM,QACdG,GAAwBV,EAAAA,EAAAA,UAAS,kBAAvCM,KACR,GAA8CN,EAAAA,EAAAA,UAAS,iBAAzCW,EAAkB,EAAxBL,KAA6BC,EAAI,OAEnCK,GAAoBH,EAAAA,EAAAA,UAAQ,WAAM,MACpC,GAAKC,SAAmC,QAAhB,EAAnBA,EAAqBG,sBAAc,OAAnC,EAAqCD,kBAA1C,CAEA,IAAME,EAAmCJ,EAAoBG,eAAeD,kBA4D5E,OA1DmCG,OAAOC,KAAKF,GAAkCG,KAAI,SAAAC,GAAY,MACvFC,EAAkBL,EAAiCI,GACnDE,EAAgBT,SAAiC,QAAf,EAAlBA,EAAoBS,qBAAa,WAAf,EAAlB,EAAmCR,kBAAkBM,GAE3E,OAAO,SACAC,GACAC,GAAa,IAEhBC,UAAqC,YAA1BF,aAAe,EAAfA,EAAiBG,MAE5BC,QAAmC,UAA1BJ,aAAe,EAAfA,EAAiBG,MAE1BE,OAAqB,QAAbN,EAERO,OAAqB,QAAbP,EAERQ,OAAqB,QAAbR,EAERS,OAAqB,QAAbT,EAERU,OAAqB,QAAbV,EAERW,OAAqB,QAAbX,EAERY,OAAqB,QAAbZ,EAERa,OAAqB,QAAbb,EAERc,OAAqB,QAAbd,EAERe,OAAqB,QAAbf,EAERgB,OAAqB,QAAbhB,EAERiB,QAAsB,QAAbjB,EAETkB,QAAsB,SAAblB,EAETmB,QAAsB,SAAbnB,EAEToB,QAAsB,SAAbpB,EAETqB,SAAuB,UAAbrB,EAEVsB,SAAuB,UAAbtB,EAEVuB,QAAsB,SAAbvB,EAETwB,QAAsB,SAAbxB,EAETyB,KAAMzB,EAEN0B,aAA2B,QAAb1B,EAAqB,OAASA,EAE5C2B,KAAM,aAAF,OAAe3B,EAAS,GAAG4B,cAAgB5B,EAAS6B,MAAM,GAAGC,gBAEzE,IAEkCC,QAC9B,SAACC,EAAUC,GAAO,cAAWD,GAAQ,QAAGC,EAAQR,KAAOQ,GAAO,GAC9D,CAAC,EAhEwE,CAkEjF,GAAG,CAACxC,SAAiC,QAAf,EAAlBA,EAAoBS,qBAAa,WAAf,EAAlB,EAAmCR,kBAAmBF,SAAmC,QAAhB,EAAnBA,EAAqBG,sBAAc,WAAhB,EAAnB,EAAqCD,oBAI/F,OAAO,GAEHwC,WAJcC,EAAAA,EAAAA,cAAY,SAACnC,GAAgB,OAAKN,aAAiB,EAAjBA,EAAoBM,EAAS,GAAE,CAACN,IAMhFA,kBAAAA,GACGL,EAEX,k3EChFA,IAAM+C,EAA4E,CAC9EC,KAAM,CACFC,KAAM,wBACNC,MAAO,0BAEXC,IAAK,CACDF,KAAM,sBACNC,MAAO,uBAEXE,IAAK,CACDH,KAAM,sBACNC,MAAO,uBAEXG,IAAK,CACDJ,KAAM,sBACNC,MAAO,uBAEXI,IAAK,CACDL,KAAM,sBACNC,MAAO,uBAEXK,IAAK,CACDN,KAAM,sBACNC,MAAO,wBAEXM,IAAK,CACDP,KAAM,uBACNC,MAAO,yBAEXO,KAAM,CACFR,KAAM,qBACNC,MAAO,uBAEXQ,MAAO,CACHT,KAAM,qBACNC,MAAO,uBAEXS,MAAO,CACHV,KAAM,qBACNC,MAAO,uBAEXU,IAAK,CACDX,KAAM,qBACNC,MAAO,uBAEXW,IAAK,CACDZ,KAAM,uBACNC,MAAO,yBAEXY,KAAM,CACFb,KAAM,sBACNC,MAAO,yBA2Ff,QAtFuB,WAAM,MACzB,GAAuBtE,EAAAA,EAAAA,YAAfmF,EAAE,EAAFA,GAAIlF,EAAM,EAANA,OACJmF,EAAoBD,EAApBC,gBACAC,EAAiBpF,EAAjBoF,aACApB,EAAcqB,IAAdrB,UAER,EAAqDsB,IAAvCC,EAAc,EAApBrE,KAAsBsE,EAAS,EAATA,UAAcrE,EAAI,OAClCsE,GAAiB7E,EAAAA,EAAAA,UAAS,UAAW,CAC/CC,QAAS,CAAEV,QAAS,OACpBY,QAAS,CAAEC,QAASoE,GAAgBI,KAFhCtE,KAMFwE,GAAUrE,EAAAA,EAAAA,UACZ,wBAAMkE,SAA4B,QAAd,EAAdA,EAAgBI,oBAAY,WAAd,EAAd,EAA8BC,QAAO,SAAAzF,GAAO,MAAiC,WAA7BA,EAAQ0F,gBAA6B,GAAC,GAC5F,CAACN,aAAc,EAAdA,EAAgBI,eAIfG,GAAuBzE,EAAAA,EAAAA,UACzB,kBACIqE,aAAO,EAAPA,EAAS7D,KAAI,SAAAkE,GAAM,wBACZA,GAAM,IAETC,SAASP,SAAqB,QAAT,EAAZA,EAAcO,eAAO,OAAU,QAAV,EAArB,EAAuBvF,gBAAQ,OAAwB,QAAxB,EAA/B,EAAkCsF,EAAOrF,SAAW,WAAG,WAA3C,EAAZ,EAAyDsF,UAAW,GAAC,GAC/E,GACP,CAACP,SAAqB,QAAT,EAAZA,EAAcO,eAAO,WAAT,EAAZ,EAAuBvF,SAAUiF,IAIhCO,GAAmB5E,EAAAA,EAAAA,UAAQ,WAC7B,OAAOyE,aAAoB,EAApBA,EAAsBjE,KAAI,SAAAkE,GAAU,MACjCG,EAA6C,IAAtBH,EAAOI,WAAmB,OAASJ,EAAOjE,UAAY,GAC7EsE,EAA6B,GAAH,OAAMF,EAAqBtC,cAAa,cACpEuB,EAAkB,SAAW,IAE3BkB,EAAcnC,EAAwBgC,GAE5C,OAAO,OACAH,GAAM,IAETO,YAAaP,EAAOrF,WAAY6E,aAAc,EAAdA,EAAgB7E,SAEhD6F,QAA+B,IAAtBR,EAAOI,WAEhBD,qBAAAA,EAEAM,qBAAiD,QAA7B,EAAET,EAAOS,4BAAoB,aAA3B,EAA6BC,QAAQ,cAAe,SAE1EC,gBAAiD,UAAhCX,EAAOS,qBAExBG,sBAAuB,kBAAF,OAAoBP,GAEzCQ,oBAAqB,gBAAF,OAAkBR,GAErCrE,gBAAiBgE,EAAOjE,SAAWkC,EAAU+B,EAAOjE,eAAY+E,EAEhEpD,KAAM0B,EAAkBkB,EAAYjC,KAAOiC,EAAYhC,OAE/D,GACJ,GAAG,CAACL,EAAWmB,EAAiBI,aAAc,EAAdA,EAAgB7E,QAASoF,IAGnDgB,GAAiBzF,EAAAA,EAAAA,UAAQ,WAC3B,OAAK4E,EAEE,EAAIA,GAAkBc,MAAK,SAACC,EAAGC,GAAM,QAGkC,EAF1E,OAAID,EAAEb,aAAec,EAAEd,WACZa,EAAEb,WAAa,GAAK,GACH,QAAjB,EAAAa,EAAEjF,uBAAe,aAAjB,EAAmBE,cAA+B,QAAtB,EAAKgF,EAAElF,uBAAe,aAAjB,EAAmBE,WACnC,QAAjB,EAAA+E,EAAEjF,uBAAe,OAAjB,EAAmBE,UAAY,GAAK,GAGvC+E,EAAElF,UAAY,OAAOoF,cAAcD,EAAEnF,UAAY,MAC7D,IAV8B,EAWlC,GAAG,CAACmE,IAEJ,OAAO,GAEH/E,KAAM4F,EAENK,WAAYL,GAAkBA,EAAeM,OAAS,GACnDjG,EAEX,ECtIA,QARwB,WACpB,IAAQD,EAASmG,IAATnG,KAIR,OAHsBG,EAAAA,EAAAA,UAAQ,kBAAMH,aAAI,EAAJA,EAAMoG,MAAK,SAAAvB,GAAM,OAAIA,EAAOO,WAAW,GAAC,GAAE,CAACpF,GAInF,s2ECiEA,QArE4B,WACxB,OAAuBnB,EAAAA,EAAAA,YAAfC,EAAM,EAANA,OACAmF,EADU,EAAFD,GACRC,gBACAlD,EAAcjC,EAAdiC,UACAf,EAASoE,IAATpE,KAER,GAA6CN,EAAAA,EAAAA,UAAS,oBAAqB,CACvEC,QAAS,CAAE0G,QAAwC,aAA/BrG,aAAI,EAAJA,EAAMsF,sBAAqC,MAAQtF,aAAI,EAAJA,EAAMsF,sBAC7EzF,QAAS,CAAEC,QAASC,QAAQC,aAAI,EAAJA,EAAMsF,yBAFxBgB,EAAiB,EAAvBtG,KAA4BC,EAAI,OAK1BsG,EAAkBJ,IAAxBnG,KAEFwG,EAAgBC,EAAAA,SAAc,WAAM,MACtC,IAAKH,EAAmB,OAAO,KAC/B,OAA8BA,SAAoC,QAAnB,EAAjBA,EAAmBI,yBAAiB,WAAnB,EAAjB,EAAsC7B,SAAU,CAAC,EAAvE8B,EAAM,EAANA,OAAQC,EAAS,EAATA,UACVC,EAAoBF,aAAM,EAANA,EAAQG,WAC5BC,EAAkBH,aAAS,EAATA,EAAWE,WAEnC,IAAKD,IAAsBE,EAAiB,OAAO,KACnD,IAAMC,EAAuB,GAAH,SAAOD,GAAe,EAAKF,IAC/CI,EAAsBV,aAAa,EAAbA,EAAe7B,QAAO,SAAAG,GAAM,OAAKA,EAAOI,UAAU,IAExEF,EAAmBkC,aAAmB,EAAnBA,EAAqBtG,KAAI,SAAAkE,GAAM,MAAK,CACzDjE,SAAUiE,EAAOjE,SACjB0E,qBAAsBT,EAAOS,qBAC7B4B,UAAU,EACVxB,oBAAqBb,EAAOa,oBAC/B,IAEKyB,EAAoBH,EACrBtC,QAAO,SAAA9D,GAAQ,QAAKmE,SAAAA,EAAkB/F,MAAK,SAAA6F,GAAM,OAAIA,EAAOjE,WAAaA,CAAQ,IAAC,IAClFD,KAAI,SAAAC,GAAQ,MAAK,CACdA,SAAAA,EACA0E,qBAAqD,aAA/BtF,aAAI,EAAJA,EAAMsF,sBAAqC,MAAQtF,aAAI,EAAJA,EAAMsF,qBAC/E4B,UAAU,EACVxB,oBAAqB,gBAAF,OAAkB9E,EAAS8B,cAAa,cAAMuB,EAAkB,SAAW,IACjG,IAYL,OATAkD,SAAAA,EAAmBtB,MAAK,SAACC,EAAGC,GACxB,OAAIhF,EAAU+E,EAAElF,YAAcG,EAAUgF,EAAEnF,UAC/BG,EAAU+E,EAAElF,UAAY,GAAK,GAGhCkF,EAAElF,UAAY,OAAOoF,cAAcD,EAAEnF,UAAY,MAC7D,IAGIwG,MAAMC,QAAQtC,IACdA,SAAAA,EAAkBc,MAAK,SAACC,EAAGC,GACvB,OAAIhF,EAAU+E,EAAElF,YAAcG,EAAUgF,EAAEnF,UAC/BG,EAAU+E,EAAElF,UAAY,GAAK,GAGhCkF,EAAElF,UAAY,OAAOoF,cAAcD,EAAEnF,UAAY,MAC7D,IACO,GAAP,SAAWuG,GAAiB,EAAKpC,KAG9B,EAAIoC,EACf,GAAG,CAACZ,EAAeD,EAAmBtG,aAAI,EAAJA,EAAMsF,qBAAsBrB,EAAiBlD,IAEnF,OAAO,OACAd,GAAI,IACPD,KAAMwG,GAEd,+vBCpDA,QAlB0B,WACtB,IAAQ1H,GAAWD,EAAAA,EAAAA,YAAXC,OACAwI,EAAiExI,EAAjEwI,sBAAuBC,EAA0CzI,EAA1CyI,eAAgBC,EAA0B1I,EAA1B0I,sBAE3CC,EAAsC,GAW1C,OAVIL,MAAMC,QAAQE,KACdE,EAAe,GAAH,SAAOA,GAAY,EAAKF,KAEpCH,MAAMC,QAAQC,KACdG,EAAe,GAAH,SAAOA,GAAY,EAAKH,KAEpCF,MAAMC,QAAQG,KACdC,EAAe,GAAH,SAAOA,GAAY,EAAKD,KAGjCC,CACX,ECLA,QAR2B,WAKvB,OAJqBC,IAEkBhD,QAAO,SAAAzF,GAAO,MAA6B,SAAzBA,EAAQ0I,YAAuB,GAG5F,ECaA,QAlB2B,WACvB,IACQC,GADgB/I,EAAAA,EAAAA,YAAhBgJ,YACAD,WAaR,OAZqBF,IAEkBhD,QAAO,SAAAzF,GAC1C,IAAMoG,EAAmC,SAAzBpG,EAAQ0I,aAClBG,EAAmD,gBAAlC7I,EAAQ8I,sBAE/B,OAAI1C,IACCuC,EAEEE,GAFkBA,EAG7B,GAGJ,ECFA,QAZuB,WAKnB,MAAO,CACHE,IALqBN,IAMrBO,KALsBC,IAMtBC,KALsBC,IAO9B,iBCOA,QApBkC,WAC9B,IACcC,GACVxJ,EAAAA,EAAAA,YADAC,OAAUuJ,oCAERC,EAA+BD,EAAoC3D,QACrE,SAAA6D,GAAiB,MAAsC,cAAlCA,EAAkBC,WAA2B,IAGhEC,EAA+BJ,EAAoC3D,QACrE,SAAA6D,GAAiB,MAAsC,WAAlCA,EAAkBC,WAAwB,IAGnE,OAC4C,IAAxCF,EAA6BpC,QAC7BoC,EAA6BI,OAAM,SAAAC,GAAG,MAAsB,QAAlBA,EAAIC,SAAmB,KACzB,IAAxCH,EAA6BvC,QAC7BuC,EAA6BC,OAAM,SAAAC,GAAG,MAAsB,QAAlBA,EAAIC,SAAmB,GAEzE,ECpBA,IAAMC,EAAgB,CAAC,YAAa,YAAa,OA+BjD,QAzBoC,WAChC,OAIIhK,EAAAA,EAAAA,YAHUiK,EAAwB,EAAlChK,OAAUgK,yBAAwB,IAClCjB,YAAeD,EAAU,EAAVA,WAAYmB,EAAO,EAAPA,QAChBC,EAAG,EAAdC,QAAWD,IAETE,EAA8BC,IAUpC,OACIJ,IACCnB,GACDiB,EAAc7J,MAAK,SAAAgC,GAAI,OARL,SAACA,GAEnB,OAD0BP,OAAOC,KAAKsI,EAAII,cACjBpK,MAAK,SAAAqK,GAAG,OAAIA,EAAIrL,WAAW,GAAD,OAAIsL,EAAAA,cAAAA,IAAiB,iBAAStI,GAAO,GAC5F,CAK+BuI,CAAcvI,EAAK,KAC9C6H,EAAc7J,MAAK,SAAAgC,GAAI,OAAI8H,EAAyB9H,EAAK,MACxDkI,CAET,ECtBA,QATyB,WAAM,MAM3B,OAF+C,QAArB,GAHPrK,EAAAA,EAAAA,YAAXC,OACA0K,eAEiCC,cAAM,aAArB,EAAuBzK,MAAK,SAAAyK,GAAM,MAAe,mBAAXA,CAA2B,OAAK,CAGpG,ECQA,QAduB,WACnB,IAAQ5B,GAAgBhJ,EAAAA,EAAAA,YAAhBgJ,YACF6B,EAAe7B,aAAW,EAAXA,EAAa6B,aAElC,MAAO,CACHC,sBAAuBD,IAAiBE,EAAAA,YAAAA,mBACxCC,kBAAmBH,IAAiBE,EAAAA,YAAAA,eACpCE,gBAAiBJ,IAAiBE,EAAAA,YAAAA,aAClCG,WAAYL,IAAiBE,EAAAA,YAAAA,QAC7BI,WAAYN,IAAiBE,EAAAA,YAAAA,QAC7BK,WAAYP,IAAiBE,EAAAA,YAAAA,QAErC,qiCCoCA,SAzCqB,SAAH,GAA+D,IAAzDM,EAAI,EAAJA,KAAI,IAAEC,GAAAA,OAAE,IAAG,IAAC,MAAEC,UAAAA,OAAS,IAAG,GAAK,EACX,MAAdC,EAAAA,EAAAA,UAASH,GAAK,GAAjCI,EAAK,KAAEC,EAAQ,KAC4B,MAAfF,EAAAA,EAAAA,WAAS,GAAM,GAA3CG,EAAU,KAAEC,EAAY,MAE/BC,EAAAA,EAAAA,YAAU,WACN,IAAIC,EAYJ,OAVIH,IACAG,EAAQC,YAAW,WACXN,IAAUH,EACVU,IAEAN,GAAS,SAAAO,GAAG,OAAKV,EAAYU,EAAM,EAAIA,EAAM,CAAC,GAEtD,GAtBO,MAyBJ,kBAAMC,aAAaJ,EAAM,CACpC,GAAG,CAACL,EAAOE,EAAYL,EAAIC,IAE3B,IAEMS,EAAQ,WAAH,OAASJ,GAAa,EAAM,EAEjCO,EAAQ,WAAH,OAAST,EAASL,EAAK,EAOlC,MAAO,CACHI,MAAAA,EACAE,WAAAA,EACAS,MAdU,WAAH,OAASR,GAAa,EAAK,EAelCI,MAAAA,EACAG,MAAAA,EACAE,KAXS,WACTL,IACAG,GACJ,EAUJ,4gGCoDA,SA/E8B,WAAM,MAChC,GAAqCG,EAAAA,EAAAA,iBAAgB,oBAA7CC,EAAS,EAATA,UAAWpL,EAAI,EAAJA,KAASC,EAAI,SAC0C,MAAlCoK,EAAAA,EAAAA,YAAkC,GAAnEgB,EAAY,KAAEC,EAAe,MAEpCZ,EAAAA,EAAAA,YAAU,WACNU,GACJ,GAAG,CAACA,KAEJV,EAAAA,EAAAA,YAAU,WACNY,GAAgB,SAAAC,GAAoB,MAE1BC,EAAmBxL,SAAsB,QAAlB,EAAJA,EAAMyL,wBAAgB,WAAlB,EAAJ,EAAwB9E,OAGjD,IAAK6E,EAAkB,OAAOD,EAG9B,IAAKA,EAAkB,OAAOC,EAG9B,IAAME,EAAuB,GAAIH,GAkBjC,OAfAC,EAAiBG,SAAQ,SAAAC,GAErB,IAAMC,EAAQH,EAAqBI,WAC/B,SAAAC,GAAe,OAAIA,EAAgBC,KAAOJ,EAAgBI,EAAE,KAIjD,IAAXH,EACAH,EAAqBO,KAAKL,GAE1BF,EAAqBG,GAASD,CAEtC,IAGOF,CACX,GACJ,GAAG,CAAC1L,SAAsB,QAAlB,EAAJA,EAAMyL,wBAAgB,WAAlB,EAAJ,EAAwB9E,SAG5B,IAAMuF,GAAwB/L,EAAAA,EAAAA,UAC1B,kBACIkL,aAAY,EAAZA,EAAc1K,KAAI,SAAAwL,GAAW,gBACtBA,GAAW,IAEdC,WAA6C,YAAjCD,EAAYE,iBAExBC,cAAgD,eAAjCH,EAAYE,kBAAiC,GAC7D,GACP,CAAChB,IAICkB,GAAsBpM,EAAAA,EAAAA,UACxB,kBAAM+L,aAAqB,EAArBA,EAAuBrG,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAEyG,YAAc1G,EAAE0G,WAAW,GAAC,GAC1E,CAACN,IAICO,EAAmBP,GAAyBA,EAAsBhG,OAAS,EAKjF,OAAO,IAEHlG,KAAMuM,EAENG,iBANqBR,aAAqB,EAArBA,EAAwB,GAQ7CO,iBAAAA,EACArB,UAAAA,GACGnL,EAEX,EC1FA,SAPiC,WAC7B,IAAQnB,GAAWD,EAAAA,EAAAA,YAAXC,OACA2F,EAA0B3F,EAA1B2F,aAAcjF,EAAYV,EAAZU,QAEtB,OAAOiF,EAAa2B,MAAK,SAAAnH,GAAO,OAAIO,IAAYP,EAAQO,OAAO,GACnE,ECSA,SAZiC,WAC7B,IACQoB,GADW/B,EAAAA,EAAAA,YAAXC,OACA8B,SAOR,OALwBkC,EADFqB,IAAdrB,WAC0BlC,EAMtC,goDCSA,SApBgC,WAAM,QAClC,GAAkC+L,EAAAA,EAAAA,YAAW,WAArC3M,EAAI,EAAJA,KAAM4M,EAAM,EAANA,OAAW3M,EAAI,SACvB4M,EAA2C,iBAAlB7M,aAAI,EAAJA,EAAM8M,SAAuB9M,SAAa,QAAT,EAAJA,EAAM8M,eAAO,OAAS,QAAT,EAAb,EAAeC,eAAO,WAAlB,EAAJ,EAAwBC,aAAUrH,EAExFsH,GAAOlK,EAAAA,EAAAA,cACT,kBAAM6J,EAAO,CAAEjN,QAAS,CAAEmN,QAAS,UAAWI,SAAU,SAAUlM,KAAM,QAAU,GAClF,CAAC4L,IAOL,OAJAlC,EAAAA,EAAAA,YAAU,WACNuC,GACJ,GAAG,CAACA,IAEG,SACAhN,GAAI,IACPkN,OAAQF,EACRjN,KAAM6M,GAEd,goDCGA,SApB8B,WAC1B,IACQ5I,GADOpF,EAAAA,EAAAA,YAAPmF,GACAC,gBACR,GAAkC0I,EAAAA,EAAAA,YAAW,WAArC3M,EAAI,EAAJA,KAAM4M,EAAM,EAANA,OAAW3M,EAAI,SACvBmN,EAAYnJ,EAAkB,KAAO,MACrCoJ,EAA8C,iBAAlBrN,aAAI,EAAJA,EAAM8M,SAAuB,GAAH,OAAM9M,aAAI,EAAJA,EAAM8M,QAAO,qBAAaM,QAAczH,EAEpGsH,GAAOlK,EAAAA,EAAAA,cAAY,kBAAM6J,EAAO,CAAEjN,QAAS,CAAEmN,QAAS,UAAWI,SAAU,cAAgB,GAAE,CAACN,IAMpG,OAJAlC,EAAAA,EAAAA,YAAU,WACNuC,GACJ,GAAG,CAACA,IAEG,SACAhN,GAAI,IACPkN,OAAQF,EACRjN,KAAMqN,GAEd,ECXA,SAT8B,WAC1B,OAAgCxO,EAAAA,EAAAA,YAAxBC,EAAM,EAANA,OAAQ+I,EAAW,EAAXA,YACRyF,EAA6BxO,EAA7BwO,yBACAC,EAA2B1F,EAA3B0F,uBAGR,OAF+BD,GAA4BC,CAG/D,ECEA,SATmC,WAC/B,IAAQzO,GAAWD,EAAAA,EAAAA,YAAXC,OACA0O,EAAgG1O,EAAhG0O,qBAAsBC,EAA0E3O,EAA1E2O,oCAAqCC,EAAqC5O,EAArC4O,iCAInE,OAFIF,IAAyBC,GAAuCC,EAGxE,ECGA,SAV0B,WAOtB,OANmB7O,EAAAA,EAAAA,YAAXC,OACAyI,eACoCvI,MACxC,SAAA2O,GAAI,MAA0B,SAAtBA,EAAKhG,cAAqD,kBAA1BgG,EAAKC,gBAAoC,GAIzF,ECEA,SATmB,WACf,IAAQ9O,GAAWD,EAAAA,EAAAA,YAAXC,OACA+O,EAAyB/O,EAAzB+O,MAAOC,EAAkBhP,EAAlBgP,cACTC,EAAuBC,KAG7B,OAFqBH,GAASE,IAAyBD,CAG3D,ECeA,SApByB,WACrB,IAAQhP,GAAWD,EAAAA,EAAAA,YAAXC,OACAmP,EAAiFnP,EAAjFmP,gBAAiBP,EAAgE5O,EAAhE4O,iCAAkCxO,EAA8BJ,EAA9BI,0BACrDgP,EAAyBC,KACzBC,EAAcC,KACdC,EAA+BC,KAYrC,OALIN,GACAC,GACAE,IARkD,gBAA9BlP,EAElBwO,EACAY,EASV,ECnBO,IAAME,GAAkB,WAC3B,IAAMC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,sBAE3B,IAAKF,EACD,MAAM,IAAIG,MAAM,+DAEpB,OAAOH,CACX,EAEA,6oDCAA,IAAMI,GAAiB,SAAH,GAA4C,IAAtCC,EAAQ,EAARA,SAAUtG,EAAW,EAAXA,YAChC,OAAQsG,GACJ,IAAK,MACD,OAAQtG,GACJ,IAAK,YACD,MAAO,oCACX,IAAK,YACD,MAAO,kCACX,IAAK,MACD,MAAO,0BACX,QACI,MAAO,4BAGnB,IAAK,UACD,MAAO,qBACX,QACI,MAAO,GAEnB,EA6DA,SAxD+B,WAC3B,IACQuG,GADgBlQ,EAAAA,EAAAA,YAAhBgJ,YACAkH,0BACFlK,EAASmK,IACf,GAAmCtP,EAAAA,EAAAA,UAAS,kBAA9BuP,EAAG,EAATjP,KAAckP,EAAQ,SAC9B,GAA2CxP,EAAAA,EAAAA,UAAS,4BAA6B,CAC7EC,QAAS,CAAEwP,SAAU,aADXC,EAAO,EAAbpP,KAAkBqP,EAAY,SAQhCC,GAAwBnP,EAAAA,EAAAA,UAAQ,WAAM,MAYxC,OAAO8O,SAAmB,QAAhB,EAAHA,EAAK1H,sBAAc,WAAhB,EAAH,EAAqB5G,KAAI,SAAA1B,GAAO,mBAChCA,IAZiBsQ,EAaFtQ,EAAQsQ,MAZnB,CACHJ,SAAUtK,SAAiB,QAAX,EAANA,EAAQ2K,iBAAS,OAA0C,QAA1C,EAAjB,EAAmBpJ,MAAK,SAAAqJ,GAAM,OAAIA,EAAOjQ,UAAY+P,CAAK,WAAC,WAArD,EAAN,EAA6DJ,SACvE5M,KAAMwM,SAA2D,QAAlC,EAAzBA,EAA2B3I,MAAK,SAAA4C,GAAG,OAAIA,EAAIuG,QAAUA,CAAK,WAAC,WAAlC,EAAzB,EAA6DhN,KACnEmN,YAAaX,SAA2D,QAAlC,EAAzBA,EAA2B3I,MAAK,SAAA4C,GAAG,OAAIA,EAAIuG,QAAUA,CAAK,WAAC,WAAlC,EAAzB,EAA6DG,YAC1EC,KAAMZ,SAA2D,QAAlC,EAAzBA,EAA2B3I,MAAK,SAAA4C,GAAG,OAAIA,EAAIuG,QAAUA,CAAK,WAAC,WAAlC,EAAzB,EAA6DI,KACnEC,UAAWb,SAA2D,QAAlC,EAAzBA,EAA2B3I,MAAK,SAAA4C,GAAG,OAAIA,EAAIuG,QAAUA,CAAK,WAAC,WAAlC,EAAzB,EAA6DK,UACxEC,YAAa,kBAMe,IAChCrQ,QAASP,EAAQsQ,MACjBO,cAAejB,GAAe,IAAEC,SAAU,OAAU7P,MAfjC,IAACsQ,EAAmB,WAeuB,GAEtE,GAAG,CAACN,aAAG,EAAHA,EAAK1H,eAAgB1C,aAAM,EAANA,EAAQ2K,UAAWT,IAEtCgB,GAA4B5P,EAAAA,EAAAA,UAC9B,wBACIiP,SAAkC,QAA3B,EAAPA,EAASY,iCAAyB,WAA3B,EAAP,EAAoCrP,KAAI,SAAA1B,GAAO,gBACxCA,GAAO,IACVO,QAASP,EAAQgR,WACjBH,cAAejB,GAAe,CAAEC,SAAU,aAAY,GACvD,GACP,CAACM,aAAO,EAAPA,EAASY,4BAUd,MAAO,CACHhQ,MATSG,EAAAA,EAAAA,UACT,iBAAO,CACH+P,aAAcZ,GAAyB,GACvCa,iBAAkBJ,GAA6B,GAClD,GACD,CAACT,EAAuBS,IAKxBzL,UAAW,CAAC4K,EAAS5K,UAAW+K,EAAa/K,WAAWoE,MAAM3I,SAEtE,kvCCpEA,SApBwB,WACpB,IAAQqQ,GAAkBvR,EAAAA,EAAAA,YAAlBuR,cAiBR,OAfejQ,EAAAA,EAAAA,UAAQ,WAGnB,IAAMkQ,EAAQD,EAAcpQ,KAE5B,OAAOS,OAAOC,KAAK2P,GAAO1N,QACtB,SAACC,EAAUC,GAAO,gBACXD,GAAQ,sBAEJC,EAAO,YAAa9C,QAAQsQ,EAAMxN,KAAS,GAEtD,CAAC,EAET,GAAG,CAACuN,EAAcpQ,MAGtB,ECXA,SAT2B,WACvB,IAAQlB,GAAWD,EAAAA,EAAAA,YAAXC,OACA2F,EAA4B3F,EAA5B2F,aAAc1D,EAAcjC,EAAdiC,UAItB,OAF0B0D,EAAaC,QAAO,SAAAzF,GAAO,OAAKA,EAAQgG,aAAelE,EAAU9B,EAAQqR,OAAS,GAAG,GAGnH,oRCRA,gmGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,olBAAAA,GAAA,gEAAAA,GAAA,0JAAAA,EAAA,6FAAAA,GAAA,mIAAAA,IAAA,8SAAAA,IAAA,4OAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SAwBA,IAAMC,GAAuB,SAACC,GAC1B,MAAO,uBAAP,OAA8BA,EAClC,EAsEA,SAjEwB,WACpB,IAAiD,MAAvBpG,EAAAA,EAAAA,UAAkB,MAAK,GAA1CqG,EAAK,KAAEC,EAAQ,KAChBC,GAAoBzQ,EAAAA,EAAAA,UAAQ,kBAAM,IAAI0Q,KAAJ,CAAqB,CAAEC,WAAYC,EAAAA,GAAAA,aAAiB,GAAE,IAExFC,GAASjO,EAAAA,EAAAA,aAAW,+BACtB,WAAOkO,EAAeC,EAA6BC,GAAoB,qEAC9DF,SAAAA,EAAO/K,OAAQ,CAAF,wCAASkL,QAAQC,OAAO,IAAIzC,MAAM,uBAAqB,gCAElE,IAAIwC,SAIR,SAACE,EAASD,GACT,IAAIE,GAAoB,EACpBC,EAA4B,KAEhC,cAAC,qHAE8CC,EAAAA,EAAAA,oBAAmBR,GAAM,OAAlC,OAAxBS,EAA2B,EAAH,eACSC,EAAAA,EAAAA,WACnCD,EACAlB,GACAU,QAAAA,EAAY,CAAC,GAChB,OAOE,IAXGU,EAA2B,EAAH,MAKdjG,SAAQ,SAAAkG,GAChBA,GAAQ,YAAaA,IACrBN,GAAoB,EACpBC,EAAaK,EAAKC,QAClBT,EAAOQ,EAAKC,SAEpB,KACIP,GAAsBK,EAAgB1L,OAAM,iBAChC,OAAZiL,SAAAA,IAAY,kBACLE,EAAO,IAAIzC,MAAgB,QAAX,EAAC4C,SAAU,QAAI,2BAAyB,yBAIzBZ,EAAkBI,OAAOY,EAAgB,IAAG,QAAhFG,EAA8B,EAAH,KACjCT,EAAQS,GAAU,kDAElBpB,EAAS,EAAD,IACRU,EAAO,EAAD,IAAQ,yDAzBtB,EA4BJ,KAAE,2CACL,uDAzCqB,GA0CtB,CAACT,IAGL,MAAO,CAIHF,MAAAA,EAIAM,OAAAA,EAIAJ,kBAAAA,EAER,EC9CA,SA/C8B,WAAM,kBAExBpH,GADW3K,EAAAA,EAAAA,YAAXC,OACA0K,eACFwI,EAAiBxI,aAAc,EAAdA,EAAgBwI,eAEjCC,EAAgBD,SAAwB,QAAV,EAAdA,EAAgBE,gBAAQ,OAAU,QAAV,EAAxB,EAA0BC,gBAAQ,OAAQ,QAAR,EAAlC,EAAoCC,cAAM,WAA5B,EAAd,EAA4C3I,OAC5D4I,EAAgBL,SAAwB,QAAV,EAAdA,EAAgBE,gBAAQ,OAAU,QAAV,EAAxB,EAA0BC,gBAAQ,OAAQ,QAAR,EAAlC,EAAoCG,cAAM,WAA5B,EAAd,EAA4C7I,OAC5D8I,EAAaP,SAAwB,QAAV,EAAdA,EAAgBvT,gBAAQ,WAAV,EAAd,EAA0BgL,OAEvC+I,EACI,OADJA,EAEQ,WAFRA,EAGO,UAQPC,EAAwBF,GAHT,CAJP,WACD,UACE,aAK0CG,SAASH,GAC5DI,EAAcJ,IAAeC,EAC7BI,EAAoBL,IAAeC,EAEnCK,EAAmC,CAACZ,EAAeI,GAAeK,SAASF,GAC3EM,EACF,CAACb,EAAeI,GAAeK,SAASF,KAAoBK,EAE1DE,EAAwC,CAACd,EAAeI,GAAe3J,OACzE,SAAAe,GAAM,OAAIA,IAAW+I,CAAW,IAMpC,GAAID,GAAcN,GAAiBI,EAAe,CAC9C,IAHCS,IAAoCC,IAA0CF,GAG9BJ,EAC7C,MAAO,SACJ,GAAIM,GAAyCH,EAChD,MAAO,qBACJ,GAAIE,GAAmCH,EAC1C,MAAO,SAEf,CACA,OAAO,IACX,ECpCA,SATgC,WAM5B,OALmB9T,EAAAA,EAAAA,YAAXC,OACAC,gBAEwCC,MAAK,SAAAC,GAAO,OAA2B,IAAvBA,EAAQgG,UAAgB,GAG5F,ECEA,SAT6B,WACzB,IAAQnG,GAAWD,EAAAA,EAAAA,YAAXC,OACA2F,EAA4B3F,EAA5B2F,aAAc1D,EAAcjC,EAAdiC,UAItB,OAF4B0D,EAAazF,MAAK,SAAAC,GAAO,OAAI8B,EAAU9B,EAAQqR,OAAS,MAAM,GAG9F,ECMA,SAZ2B,WACvB,IACQ7L,GADW5F,EAAAA,EAAAA,YAAXC,OACA2F,aACA3B,EAAcqB,IAAdrB,UAMR,OAJ0B2B,EAAazF,MACnC,SAAAC,GAAO,YAAsB,SAAlBA,EAAQqR,QAAkD,QAAlC,EAAIxN,EAAU7D,EAAQqR,OAAS,WAAG,aAA9B,EAAgCrP,QAAO,GAItF,unDCuBA,SAhCiC,WAK7B,IAAM+R,GAAejQ,EAAAA,EAAAA,cAAY,SAAC0G,GAAsB,MAC9CwJ,EAAkB,CAAC,oBAAqB,kBAC9C,OAA+D,QAA/D,EAAOxJ,aAAM,EAANA,EAAQzK,MAAK,SAAAyK,GAAM,OAAIwJ,EAAgBP,SAASjJ,EAAO,WAAC,QACnE,GAAG,IACH,GAA0ByJ,EAAAA,EAAAA,UAAS,qBAAsB,CACrDrT,QAAS,CAILsT,gBAAiB,SAAApB,GAAQ,aAAKiB,EAAajB,SAA4B,QAApB,EAARA,EAAUqB,0BAAkB,WAApB,EAAR,EAA8B3J,SAAkB,GAAI,KAL/FzJ,EAAI,EAAJA,KAASC,EAAI,SAQfoT,GAA0BlT,EAAAA,EAAAA,UAAQ,WAAM,QAC1C,GAAKH,SAAwB,QAApB,EAAJA,EAAMoT,0BAAkB,OAAxB,EAA0B3J,OAA/B,CACA,IAAM6J,EAA2BN,EAAahT,SAAwB,QAApB,EAAJA,EAAMoT,0BAAkB,WAApB,EAAJ,EAA0B3J,QACxE,OAAO,SACAzJ,EAAKoT,oBAAkB,IAC1BE,yBAAAA,GAJyC,CAMjD,GAAG,CAACtT,aAAI,EAAJA,EAAMoT,mBAAoBJ,IAC9B,OAAO,IACHhT,KAAMqT,EACNC,yBAA0BD,aAAuB,EAAvBA,EAAyBC,0BAChDrT,EAEX,unDCEA,SA7BqB,WAAM,MACfnB,GAAWD,EAAAA,EAAAA,YAAXC,OACAoF,EAA0BpF,EAA1BoF,aAAc1E,EAAYV,EAAZU,QACtB,GAA0BE,EAAAA,EAAAA,UAAS,iBAAkB,CAAEG,QAAS,CAAEC,QAASoE,KAAnElE,EAAI,EAAJA,KAASC,EAAI,SACfsT,GAAaC,EAAAA,EAAAA,sBAGbC,EAAsBhN,EAAAA,SAAc,WAAM,MACtCiN,EAAa1T,SAAoB,QAAhB,EAAJA,EAAMO,sBAAc,WAAhB,EAAJ,EAAsBmT,WAEzC,GAAKA,EACL,OAAO,SACAA,GAAU,IAEbC,2BAA4B5T,QAAQ2T,aAAU,EAAVA,EAAYE,0BAExD,GAAG,CAAC5T,SAAoB,QAAhB,EAAJA,EAAMO,sBAAc,WAAhB,EAAJ,EAAsBmT,aAM1B,OAJAjN,EAAAA,WAAgB,WACZ8M,EAAW,iBACf,GAAG,CAACA,EAAY/T,IAET,IAEHQ,KAAMyT,GACHxT,EAEX,unDCZA,SAnBqC,WACjC,IACQlB,GADWF,EAAAA,EAAAA,YAAXC,OACAC,gBACR,EAA0B8U,KAAlB7T,EAAI,EAAJA,KAASC,EAAI,SAEf6T,EAA+B/U,EAChC2F,QAAO,SAAAzF,GAAO,OAAKA,EAAQgG,UAAU,IACrCtE,KAAI,SAAA1B,GAAO,aAAoB,QAApB,EAAIA,EAAQ2B,gBAAQ,aAAhB,EAAkB8B,aAAa,IAE7CqR,EAA+BhU,QACjCC,aAAI,EAAJA,EAAMgU,qBAAqBhV,MAAK,SAAC4B,GAAgB,OAAKkT,EAA6BpB,SAAS9R,EAAS,KAGzG,OAAO,SACAX,GAAI,IACPD,KAAM+T,GAEd,ECHA,SAd0B,WACtB,IACQtP,GADW5F,EAAAA,EAAAA,YAAXC,OACA2F,aACFwP,EAA0BC,KAQhC,OANyBzP,EACpBC,QAAO,SAAAzF,GAAO,OAAKA,EAAQgG,UAAU,IACrCjG,MAAK,SAAAC,GAAO,MAAsB,SAAlBA,EAAQqR,OAAsC,eAAlBrR,EAAQqR,KAAsB,MAEjC2D,CAGlD,ECLA,SARyB,WAKrB,OAJmBpV,EAAAA,EAAAA,YAAXC,OACAC,gBACgCC,MAAK,SAAAC,GAAO,MAA0C,QAAtCA,EAAQC,yBAAmC,GAGvG,ECQA,SAV8B,WAO1B,OANmBL,EAAAA,EAAAA,YAAXC,OACAuJ,oCAC0DrJ,MAC9D,SAAAuJ,GAAiB,MAAsC,QAAlCA,EAAkBC,WAAqB,GAIpE,ECHA,SAT0B,WAMtB,OALmB3J,EAAAA,EAAAA,YAAXC,OACA2F,aAE8BzF,MAAK,SAAAC,GAAO,MAAsB,QAAlBA,EAAQqR,KAAe,GAGjF,qjCC4EA,SApDiC,SAAC6D,EAAkBtU,GAChD,IAAsC,MAAZwK,EAAAA,EAAAA,UAAS,IAAG,GAA/B+J,EAAK,KAAEC,EAAQ,KACtB,EAAmDxU,GAAW,CAAC,EAAC,IAAxDyU,gBAAAA,OAAe,IAAG,IAAC,MAAEC,UAAAA,OAAS,IAAG,GAAK,EAExCC,GAAWzR,EAAAA,EAAAA,cACb,SAAC0R,GACGJ,GAAS,SAAAK,GAAa,QACZC,EAA4B,QAAnB,EAAGF,SAAS,QAAR,EAADA,EAAGG,cAAM,WAAR,EAAD,EAAWR,aAAK,QAAI,GAItC,GAH8B,KAAdO,EAGH,OAAOA,EAEpB,IACME,GADON,EAAYI,EAAYA,EAAUG,WAAW,QAAS,KAC/CC,MAAM,KAE1B,GA1CA,SAACF,GACb,IAAMG,EAAOH,EAAO,GACdI,EAAQJ,EAAO3O,OAAS,EAAI2O,EAAO,GAAK,KACxCK,EAAsB,OAAVD,GAA4B,KAAVA,EAIpC,MAAO,CAAC,IAAK,IAAK,KAAKvC,SAASsC,KAAUE,CAC9C,CAkCoBC,CAAQN,GAAS,OAAOF,EAO5B,GALoBE,EAAO3O,OAAS,IAnBnC,SAACkO,GAAa,OAAMgB,MAAMC,OAAOjB,GAAO,CAwBrBkB,CAASX,GAAY,OAAOD,EAIhD,GA3CQ,SAACG,EAAkBT,GACvC,IACMmB,EADOV,EAAO,GACEC,WAAW,QAAS,IACpCU,EAAcpB,EAAM1B,SAAS,KAEnC,OAAO6C,EAASvX,WAAW,MAA4B,IAApBuX,EAASrP,SAAiBsP,CACjE,CAqCoBC,CAAgBZ,EAAQF,GAAY,OAAOD,EAI/C,GAvCc,SAACG,EAAkBP,GAC7C,IAAMW,EAAQJ,EAAO3O,OAAS,EAAI2O,EAAO,GAAK,KAG9C,OAF4B,OAAVI,GAA4B,KAAVA,GAEhBA,EAAM/O,OAASoO,CACvC,CAkCoBoB,CAAsBb,EAAQP,GAAkB,CAChD,IAAMU,EAAOH,EAAO,GAEdc,EADQd,EAAO,GACGe,UAAU,EAAGtB,GAErC,MAAO,GAAP,OAAUU,EAAI,YAAIW,EACtB,CAEA,OAAOhB,CACX,GACJ,GACA,CAACL,EAAiBC,IAOtB,OAJA7J,EAAAA,EAAAA,YAAU,WACFyJ,GAASK,EAAS,CAAEI,OAAQ,CAAER,MAAO,GAAF,OAAKD,KAChD,GAAG,CAACA,EAASK,IAEN,CAAEJ,MAAAA,EAAOI,SAAAA,EACpB,ECOA,SAjF6B,SAACL,EAAkBtU,GAC5C,IAAMgW,GAAaC,EAAAA,EAAAA,SAAO,GAC1B,EAA6CC,QAAyBpQ,EAAW9F,GAAzEuU,EAAK,EAALA,MAAiB4B,EAAe,EAAzBxB,SACf,EAAwC3U,GAAW,CAAC,EAA5CoW,EAAM,EAANA,OAAM,IAAE3B,gBAAAA,OAAe,IAAG,IAAC,EAE7B4B,GAAkB/V,EAAAA,EAAAA,UACpB,2BAASkV,OAAOjB,GAAO+B,eAAeF,EAAQ,CAAEG,sBAAuB9B,IAAkB,GACzF,CAACA,EAAiB2B,EAAQ7B,IAGxBI,GAAWzR,EAAAA,EAAAA,cACb,SAAC0R,GAA8F,UACrFE,GAAYF,SAAS,QAAR,EAADA,EAAGG,cAAM,WAAR,EAAD,EAAWR,QAAS,GAChCiC,GAAcC,EAAAA,GAAAA,IAAqB3B,EAAWsB,GAE9CM,EAAUC,KAAKC,OAAqB,GAAdJ,GAAkBK,QAAQpC,GAEhDqC,EAAaH,KAAKC,OAAOJ,EAAc,IAAIK,QAAQpC,GACnDsC,GAA6C,QAAtB,EAAAP,EAAYtB,MAAM,YAAI,OAAK,QAAL,EAAtB,EAAyB,UAAE,WAAL,EAAtB,EAA6B7O,SAAUoO,EAIpE,OAAIuB,EAAWhT,SACXgT,EAAWhT,SAAU,EACdmT,EAAgB,CAAEpB,OAAQ,CAAER,MAAOiC,MAMnCL,EADPY,EAAuB,IAAMtC,EACN,CAAEM,OAAQ,CAAER,MAAOmC,IAK1CK,EAAuB,IAAMtC,EACN,CAAEM,OAAQ,CAAER,MAAOuC,IAMnB,CAAE/B,OAAQ,CAAER,MAAOiC,IAgBlD,GACA,CAACJ,EAAQ3B,EAAiB0B,IAGxBa,GAAyD9T,EAAAA,EAAAA,cAC3D,SAAA0R,GAAC,OAAKoB,EAAWhT,QAAqB,UAAX4R,EAAEzT,IAAgB,GAC7C,IAcJ,OAXA0J,EAAAA,EAAAA,YAAU,WACFyJ,IACA0B,EAAWhT,SAAU,EACrB2R,EAAS,CACLI,OAAQ,CACJR,MAAO,GAAF,OAAKiB,OAAOlB,GAASgC,eAAeF,EAAQ,CAAEG,sBAAuB9B,QAI1F,GAAG,CAACA,EAAiBH,EAAS8B,EAAQzB,IAE/B,CAAEJ,MAAO8B,EAAiB1B,SAAAA,EAAUqC,QAAAA,EAC/C,ECvBA,SAVkC,SAACpN,GAC/B,IACcD,GACV3K,EAAAA,EAAAA,YADAC,OAAU0K,eAGRsN,EAActN,aAAc,EAAdA,EAAgBC,OAEpC,OAAOhD,EAAAA,SAAc,wBAAmC,QAAnC,EAAMqQ,aAAW,EAAXA,EAAapE,SAASjJ,UAAO,QAAS,GAAE,CAACqN,EAAarN,GACrF,unDCzCA,SAnBwB,WACpB,OAAgC5K,EAAAA,EAAAA,YAAxBC,EAAM,EAANA,OAAQ+I,EAAW,EAAXA,YAERjH,EAAyB9B,EAAzB8B,SAAUqE,EAAenG,EAAfmG,WACVsI,EAA2B1F,EAA3B0F,uBACR,EAA0BsG,KAAlB7T,EAAI,EAAJA,KAASC,EAAI,SAGf8W,EAD4BhX,QAAQC,aAAI,EAAJA,EAAMgU,qBAAqBtB,SAAS9R,EAASoW,wBAClC/R,IAAesI,EAKpE,OAAO,SACAtN,GAAI,IACPD,KAAM+W,GAEd,ECEA,SAlByC,WACrC,IAAQlP,GAAgBhJ,EAAAA,EAAAA,YAAhBgJ,YACAD,EAAwBC,EAAxBD,WAAYmB,EAAYlB,EAAZkB,QAEdkO,EAAkBC,KAClBC,EAA0B9X,IAUhC,OAR2B4X,IAAoBE,GAA2BvP,IAE9CqP,GAAmBE,IAA4BvP,IAINmB,CAGzE,ECRA,SAV+B,WAAM,MAOjC,OAFqC,QAAjC,GAJelK,EAAAA,EAAAA,YAAXC,OACA0K,eAGW4N,0BAAkB,aAAjC,EAAmCpY,MAAK,SAAAqY,GAAU,MAAmB,uBAAfA,CAAmC,OAAK,CAGtG,unDCgBA,SApBiC,SAAC1X,GAC9B,OAA0BuT,EAAAA,EAAAA,UAAS,0BAA2B,CAC1DvT,QAAAA,EACAE,QAAS,CAAEC,QAASC,QAAQJ,EAAQ2X,4BAFhCtX,EAAI,EAAJA,KAASC,EAAI,SAMfsX,GAAmCpX,EAAAA,EAAAA,UAAQ,WAC7C,GAAKH,SAAAA,EAAMsX,wBAEX,OAAO,MAAKtX,EAAKsX,wBACrB,GAAG,CAACtX,aAAI,EAAJA,EAAMsX,0BAEV,OAAO,IAEHtX,KAAMuX,GACHtX,EAEX,qiCCIA,SAlB4B,SACxBoJ,EACAmO,GAC2E,QACqB,KAAxE/Q,EAAAA,SAA+D,QAAjD,EAA+B,QAA/B,GAAWgR,EAAAA,GAAAA,IAAgBpO,UAAI,QAAImO,SAAc,QAAI,MAAK,GAAzFxX,EAAI,KAAE0X,EAAO,KAEpBjR,EAAAA,WAAgB,WACZ7I,aAAa+Z,QAAQtO,EAAKuO,KAAKC,UAAU7X,GAC7C,GAAG,CAACqJ,EAAKrJ,IAOT,MAAO,CAACA,EAAM0X,EALI,WACd9Z,aAAaO,WAAWkL,GACxBqO,EAAQF,QAAAA,EAAkB,KAC9B,EAGJ,ECJA,SAjB2B,WACvB,IACc3J,GACVhP,EAAAA,EAAAA,YADAC,OAAU+O,MAERzO,EAA2BC,IAC3ByY,EAAYC,KASlB,OANIlK,GACAzO,GACA0Y,GACA,CAACE,EAAAA,mBAAAA,QAA4BA,EAAAA,mBAAAA,OAA2BA,EAAAA,mBAAAA,oBAAuCtF,SAC3FoF,GAE4CA,EAAY,IACpE,64BCwDA,SAxEmC,WAC/B,OAAgCjZ,EAAAA,EAAAA,YAAxBC,EAAM,EAANA,OAAQ+I,EAAW,EAAXA,YACRN,EAAmBzI,EAAnByI,eACA0Q,EAA4BpQ,EAA5BoQ,wBAgER,yWAAO,IA9DsBxR,EAAAA,SAAc,WACvC,IAAMyR,EAA0B3Q,EAAe7C,QAC3C,SAAAzF,GAAO,OAAIA,EAAQ8I,wBAA0BoQ,EAAAA,aAAAA,OAAsBlZ,EAAQmZ,mBAAmB,IAG5FC,IAAgCH,EAAwBhS,SAAW+R,EAEnEK,EAAgCJ,EAAwBhS,OAExDqS,IAAyCL,EAAwBxT,QAAO,SAAAzF,GAAO,aACjFwB,OAAO+X,OAAkC,QAA5B,EAACvZ,EAAQmZ,2BAAmB,QAAI,CAAC,GAAG1F,SAASyF,EAAAA,aAAAA,IAAiB,IAC7EjS,OAEIuS,IAA6CP,EAAwBxT,QAAO,SAAAzF,GAAO,aACrFwB,OAAO+X,OAAkC,QAA5B,EAACvZ,EAAQmZ,2BAAmB,QAAI,CAAC,GAAG1F,SAASyF,EAAAA,aAAAA,QAAqB,IACjFjS,OAEIwS,EAA8B,WAChC,OAAIH,EACOJ,EAAAA,aAAAA,IACAM,EACAN,EAAAA,aAAAA,aADJ,CAGX,EACMQ,GAAoCC,EAAAA,EAAAA,8BAA6BF,KAEjEG,IAAyCX,EAAwBxT,QACnE,SAAAzF,GAAO,aAA+B,QAA3B,EAAAA,EAAQmZ,2BAAmB,aAA3B,EAA6BU,aAAcX,EAAAA,aAAAA,GAAgB,IACxEjS,OAEI6S,IAA2Cb,EAAwBxT,QACrE,SAAAzF,GAAO,aAA+B,QAA3B,EAAAA,EAAQmZ,2BAAmB,aAA3B,EAA6BY,aAAcb,EAAAA,aAAAA,GAAgB,IACxEjS,OAEI+S,IAA6Cf,EAAwBxT,QACvE,SAAAzF,GAAO,aAA+B,QAA3B,EAAAA,EAAQmZ,2BAAmB,aAA3B,EAA6BU,aAAcX,EAAAA,aAAAA,OAAoB,IAC5EjS,OAEIgT,IAA+ChB,EAAwBxT,QACzE,SAAAzF,GAAO,aAA+B,QAA3B,EAAAA,EAAQmZ,2BAAmB,aAA3B,EAA6BY,aAAcb,EAAAA,aAAAA,OAAoB,IAC5EjS,OAEIiT,EACFN,GAAwCI,EAK5C,MAAO,CACHN,kCAAAA,EACAE,qCAAAA,EACAE,uCAAAA,EACAE,yCAAAA,EACAC,2CAAAA,EACAR,4BAAAA,EACAU,8BATkCD,IADlCJ,GAA0CG,GAW1CC,2BAAAA,EACAd,4BAAAA,EACAC,8BAAAA,EACAJ,wBAAAA,EAER,GAAG,CAAC3Q,EAAgB0Q,IAIxB,ECjEA,SAPmB,WAAM,MAEfjG,EAAsC,QAAxB,GADDnT,EAAAA,EAAAA,YAAXC,OACsB0K,sBAAc,aAArB,EAAuBwI,eAE9C,OAAOA,aAAc,EAAdA,EAAgBqH,mBAAmB3G,SAAS,WACvD,2xCCoBA,SAhB6B,WACzB,OAAkC4G,EAAAA,EAAAA,aAAY,sBAAtCtZ,EAAI,EAAJA,KAAM4M,EAAM,EAANA,OAAW3M,EAAI,SAMvBgN,EAAOxG,EAAAA,aAAkB,SAAC9G,GAAkC,OAAKiN,EAAO,CAAEjN,QAAAA,GAAU,GAAE,CAACiN,IAE7F,yWAAO,EACH2M,mBAAoBvZ,aAAI,EAAJA,EAAMuZ,mBAC1BtM,KAAAA,GACGhN,EAEX,ECfA,SARyB,WACrB,IAAQnB,GAAWD,EAAAA,EAAAA,YAAXC,OACAmG,EAA0BnG,EAA1BmG,WAAYlE,EAAcjC,EAAdiC,UAGpB,OAF2BkE,GAAclE,GAG7C,unDCuBA,SAvByB,SAACiL,EAAYnM,GAClC,OAA0BH,EAAAA,EAAAA,UAAS,kBAAmB,CAAEC,QAAS,CAAEqM,GAAAA,GAAMnM,QAAAA,IAAjEG,EAAI,EAAJA,KAASC,EAAI,SAEfuZ,EAAgB/S,EAAAA,SAAc,WAChC,IAAMgT,EAAkBzZ,aAAI,EAAJA,EAAMyZ,gBAE9B,GAAKA,EAEL,OAAO,SACAA,GAAe,IAElBC,OAAkC,SAA1BD,aAAe,EAAfA,EAAiBzY,MAEzB2Y,QAAmC,UAA1BF,aAAe,EAAfA,EAAiBzY,OAElC,GAAG,CAAChB,aAAI,EAAJA,EAAMyZ,kBAEV,OAAO,IACHzZ,KAAMwZ,GACHvZ,EAEX,uoDCsBA,SA7CyB,SACrBN,EACAia,GAEA,OAAyCC,EAAAA,EAAAA,kBAAiB,kBAAmB,CACzEla,QAAS,SAAKA,GAAO,IAAEma,QAAQna,aAAO,EAAPA,EAASma,SAAU,EAAGC,OAAOpa,aAAO,EAAPA,EAASoa,QAAS,KAC9Ela,QAAS,CACLma,iBAAkB,SAACC,EAAUC,GAAU,MACnC,GAAKD,SAAyB,QAAjB,EAARA,EAAUE,uBAAe,OAAzB,EAA2BC,KAEhC,OAAOF,EAAMhU,MACjB,EACApG,aAA6B6F,KAApBiU,aAAM,EAANA,EAAQ9Z,UAAyB8Z,EAAO9Z,QACjDua,sBAAsB,KATtBra,EAAI,EAAJA,KAAMsa,EAAa,EAAbA,cAAkBra,EAAI,SAc9Bsa,EAAe9T,EAAAA,SAAc,WAAM,QACrC,GAAKzG,SAAW,QAAP,EAAJA,EAAMka,aAAK,OAAX,EAAahU,OAElB,OAAOlG,SAAW,QAAP,EAAJA,EAAMka,aAAK,WAAP,EAAJ,EAAaM,SAAQ,SAAAC,GAAI,aAAIA,SAAqB,QAAjB,EAAJA,EAAMN,uBAAe,WAAjB,EAAJ,EAAuBC,IAAI,GACnE,GAAG,CAACpa,aAAI,EAAJA,EAAMka,QAGJV,EAAgB/S,EAAAA,SAAc,WAChC,GAAK8T,SAAAA,EAAcrU,OAEnB,OAAOqU,EAAa5Z,KAAI,SAAA+Z,GAAM,gBACvBA,GAAM,IAETC,YAAmC,WAAtBD,aAAM,EAANA,EAAQE,WAErBC,aAAcH,SAAAA,EAAQG,aAAe,IAAIC,KAAKJ,EAAOG,mBAAgBlV,GAAS,GAEtF,GAAG,CAAC4U,IAEJ,OAAO,IAEHva,KAAMwZ,EACNuB,gBAAiBT,GACdra,EAEX,qoDCvCA,IAAM+a,GAAsB,CACxBC,KAAM,wBACNC,MAAO,iBACPC,QAAS,oBAyDb,SArDuC,WACnC,IAAM5H,GAAaC,EAAAA,EAAAA,sBAEXtP,GADWrF,EAAAA,EAAAA,YAAXC,OACAoF,aACR,GAAmCyI,EAAAA,EAAAA,YAAW,iCAAkC,CAC5EyO,UAAW,kBAAM7H,EAAW,iCAAiC,IADzD3G,EAAM,EAANA,OAAWyO,EAAW,SAG9B,GAA0B3b,EAAAA,EAAAA,UAAS,iCAAkC,CACjEG,QAAS,CAAEC,QAASoE,KADhBlE,EAAI,EAAJA,KAASC,EAAI,SAKfuZ,GAAgBrZ,EAAAA,EAAAA,UAAQ,WAC1B,IAAMmb,EAAiCtb,aAAI,EAAJA,EAAMsb,+BAE7C,GAAKA,EAEL,OAAO7a,OAAOC,KAAK4a,GAAgC3a,KAAI,SAAA0I,GACnD,IAAMkS,EAA4BD,EAA+BjS,GAEjE,OAAO,SACAkS,GAAyB,IAE5BhZ,KAAMyY,GAAoBO,EAA0Bva,MAEpDgL,GAAI3C,GAEZ,GACJ,GAAG,CAACrJ,IAEEwb,GAASzY,EAAAA,EAAAA,cAAY,SAACyV,GAAsB,OAAK5L,EAAO,CAAEjN,QAAS,CAAE6b,OAAQ,CAAC,MAAKhD,MAAc,GAAE,CAAC5L,IAEpG6O,GAAS1Y,EAAAA,EAAAA,cACX,SAACiJ,EAAYwM,GAAsB,OAAK5L,EAAO,CAAEjN,QAAS,CAAE8b,OAAQ,MAAGzP,EAAE,MAAQwM,MAAe,GAChG,CAAC5L,IAKL,OAAO,OAEH5M,KAAMwZ,EAENgC,OAAAA,EAEAC,OAAAA,EAEAC,QAV0B3Y,EAAAA,EAAAA,cAAY,SAACiJ,GAAU,OAAKY,EAAO,CAAEjN,QAAS,CAAE+b,OAAQ,CAAC1P,KAAQ,GAAE,CAACY,KAW3F3M,GAAI,IACP0b,SAAUN,GAElB,kxCCvDA,SAVwB,WACpB,OAA0BlQ,EAAAA,EAAAA,iBAAgB,kBAE1C,yWAAO,EAEHnL,KAJQ,EAAJA,MAAa,SAOzB,ECyCA,SAhD0C,WACtC,MAAuD4b,KAA/CxQ,EAAS,EAATA,UAAWpL,EAAI,EAAJA,KAAM6b,EAAW,EAAXA,YAAaC,EAAY,EAAZA,aACtC,GAAkCjd,EAAAA,EAAAA,YAA1BC,EAAM,EAANA,OAAQid,EAAa,EAAbA,cACR7X,EAAiCpF,EAAjCoF,aAAc6S,EAAmBjY,EAAnBiY,eAEtBtQ,EAAAA,WAAgB,WAQZ,OAPIvC,GAAgB6S,GAChB3L,EAAU,CACNzL,QAAS,CACLqc,OAAQ,KAIb,WACHF,GAAgBD,GACpB,CACJ,GAAG,CAACC,EAAc5X,EAAc6S,EAAgB3L,EAAWyQ,IAE3DpV,EAAAA,WAAgB,WAAM,UAClB,GAAIzG,SAAoB,QAAhB,EAAJA,EAAMic,sBAAc,OAApB,EAAsB7B,KAAKlU,SAAUlG,SAAoB,QAAhB,EAAJA,EAAMic,sBAAc,WAAhB,EAAJ,EAAsB7B,QAAS2B,EAAcG,qBAClFH,EAAcG,qBAAuBlc,EAAKic,eAAe7B,UAGxD,GAAIpa,SAAAA,EAAMmc,gBACPJ,SAAAA,EAAeG,qBAGf,GAAIH,SAAAA,EAAeG,qBAAqBld,MAAK,SAAAod,GAAK,OAAIA,EAAMpQ,KAAOhM,EAAKmc,eAAenQ,EAAE,IAAG,CACxF,IAAMH,EAAQkQ,aAAa,EAAbA,EAAeG,qBAAqBpQ,WAE9C,SAAAsQ,GAAK,OAAIA,EAAMpQ,KAAOhM,EAAKmc,eAAenQ,EAAE,IAGhD+P,SAAAA,EAAeG,qBAAqBG,OAAOxQ,EAAO,EAAG7L,EAAKmc,eAC9D,MAIIJ,SAAAA,EAAeG,qBAAqBI,QAAQtc,EAAKmc,gBAI7DJ,SAAmC,QAAtB,EAAbA,EAAeG,4BAAoB,OAAnC,EAAqCrW,MAAK,SAACC,EAAGC,GAC1C,OAAQA,EAAEwW,iBAAmB,IAAMzW,EAAEyW,iBAAmB,EAC5D,GACJ,GAAG,CAACvc,EAAM+b,GACd,EClCA,SAb2B,SAACS,GAA2B,QACnD,EAA+ChO,KAAvCiO,EAAkB,EAAlBA,mBAAoBC,EAAc,EAAdA,eAS5B,OAPAjW,EAAAA,WAAgB,WACZgW,EAAmB,MAAOD,EAE9B,GAAG,CAACA,IAEuD,QAAxC,EAAGE,SAAmB,QAAL,EAAdA,EAAgBtZ,WAAG,WAAL,EAAd,EAAsBoZ,UAAe,QAAI,CAGnE,qiCC+BA,SA7BgC,WAAM,MAGjC,MAFsCnS,EAAAA,EAAAA,UACnCuN,KAAK+E,MAAM/e,aAAaC,QAAQ,iBAAmB,OACtD,GAFM+e,EAAY,KAAEC,EAAc,KAI3Brd,GADWX,EAAAA,EAAAA,YAAXC,OACAU,QACFuc,EAAgBvc,EAA+B,QAAxB,EAAGod,EAAapd,UAAQ,aAArB,EAAuBuc,cAAgB,KAoBvE,OAlBArR,EAAAA,EAAAA,YAAU,WACN,IAAMoS,EAAmB,WACrB,IAAM9c,EAAOpC,aAAaC,QAAQ,gBAE9BmC,GACA6c,EAAejF,KAAK+E,MAAM3c,GAElC,EAIA,OAFArC,OAAOof,iBAAiB,UAAWD,GAE5B,WACHnf,OAAOqf,oBAAoB,UAAWF,EAC1C,CACJ,GAAG,KAE4Bf,aAAa,EAAbA,EAAerX,QAAO,SAAAuY,GAAY,OAAKA,EAAaC,OAAO,IAAEhX,SAAU,CAG1G,unDCvCA,IAAM8U,GAAsB,CACxBC,KAAM,wBACNC,MAAO,iBACPC,QAAS,oBAwCb,SAlC6B,WACzB,IACQjX,GADWrF,EAAAA,EAAAA,YAAXC,OACAoF,aAER,GAA0BxE,EAAAA,EAAAA,UAAS,sBAAuB,CAAEG,QAAS,CAAEC,QAASoE,KAAxElE,EAAI,EAAJA,KAASC,EAAI,SAGfuZ,EAAgB/S,EAAAA,SAAc,WAChC,IAAM0W,EAAsBnd,aAAI,EAAJA,EAAMmd,oBAElC,GAAKA,EAEL,OAAO1c,OAAOC,KAAKyc,GAAqBxc,KAAI,SAAA0I,GACxC,IAAM+T,EAAiBD,EAAoB9T,GACrCgU,EAAS5c,OAAOC,KAAK0c,EAAeC,QAAQ1c,KAAI,SAAA2c,GAAS,OAAIF,EAAeC,OAAOC,EAAU,IAEnG,OAAO,SACAF,GAAc,IAEjBC,OAAAA,EAEA9a,KAAMyY,GAAoBoC,EAAepc,MAEzCgL,GAAI3C,GAEZ,GACJ,GAAG,CAACrJ,IAEJ,OAAO,IACHA,KAAMwZ,GACHvZ,EAEX,kxCC3BA,SAf4B,SAACW,GAAsB,MAEvCzB,GADWN,EAAAA,EAAAA,YAAXC,OACAK,UAER,GAA0BO,EAAAA,EAAAA,UAAS,oBAAqB,CACpDC,QAAS,CAAE4d,kBAAmBpe,EAAWyB,SAAAA,GACzCf,QAAS,CAAEC,QAASC,QAAQZ,MAFxBa,EAAI,EAAJA,KAASC,EAAI,SAKrB,yWAAO,EACHD,KAAMA,SAAuB,QAAnB,EAAJA,EAAMud,yBAAiB,WAAnB,EAAJ,EAAyBnD,MAC5Bna,EAEX,kxCCCA,SAduC,WAAM,MAEjCiE,GADWrF,EAAAA,EAAAA,YAAXC,OACAoF,aAER,GAA0BxE,EAAAA,EAAAA,UAAS,eAAgB,CAAEG,QAAS,CAAEC,QAASoE,KAAjElE,EAAI,EAAJA,KAASC,EAAI,SAIrB,yWAAO,EACHD,KAHsCD,QAAQC,SAAkB,QAAd,EAAJA,EAAMwd,oBAAY,WAAd,EAAJ,EAAoBC,iCAI/Dxd,EAEX,kvCCKA,SAb+B,WAC3B,IACQV,GADWV,EAAAA,EAAAA,YAAXC,OACAS,SAQR,OAPqBkB,OAAOC,KAAKnB,GAAUoB,KAAI,SAAAnB,GAAO,gBAC/CD,EAASC,IAAQ,IACpBA,QAAAA,GAAO,IAGgC4G,MAAK,SAAAnH,GAAO,OAAIA,EAAQgG,UAAU,GAGjF,kvCCWA,SAtBgC,WAC5B,OAAgCpG,EAAAA,EAAAA,YAAxBC,EAAM,EAANA,OAAQ+I,EAAW,EAAXA,YACRtI,EAAaT,EAAbS,SACAqI,EAAeC,EAAfD,WAgBR,OAfqBnH,OAAOC,KAAKnB,GAAUoB,KAAI,SAAAnB,GAAO,gBAC/CD,EAASC,IAAQ,IACpBA,QAAAA,GAAO,IAGiCkF,QAAO,SAAAzF,GAC/C,IAAM6I,EACF,8BAA+B7I,GAAiD,gBAAtCA,EAAQC,0BAEtD,OAAID,EAAQgG,aACP2C,EAEEE,GAFkBA,EAG7B,GAGJ,ECVA,SAV4B,WAIxB,MAAO,CACHG,KAJ0ByV,KAK1BvV,KAJ2BwV,KAMnC,kxCCQA,SAZwB,SAAChe,GACrB,OAA0BuT,EAAAA,EAAAA,UAAS,gBAAiB,CAChDvT,QAAAA,EACAE,QAAS,CAAE+d,MAAO,EAAG9d,QAASC,QAAQJ,MAFlCK,EAAI,EAAJA,KAASC,EAAI,SAKrB,yWAAO,EACH4d,cAAe7d,aAAI,EAAJA,EAAM6d,eAClB5d,EAEX,unDCNA,SAVsB,SAAC6d,GAAoB,MACvC,GAA0Bpe,EAAAA,EAAAA,UAAS,cAAe,CAG9CC,QAAS,CAAEoe,YAAaD,KAHpB9d,EAAI,EAAJA,KAMR,OAAO,SANc,UAML,IAAEA,KAAuB,QAAnB,EAAEA,aAAI,EAAJA,EAAM+d,mBAAW,QAAI,IACjD,o/DCVA,IAAM/a,GAA4E,CAC9EC,KAAM,CACFC,KAAM,wBACNC,MAAO,0BAEXC,IAAK,CACDF,KAAM,sBACNC,MAAO,uBAEXE,IAAK,CACDH,KAAM,sBACNC,MAAO,uBAEXG,IAAK,CACDJ,KAAM,sBACNC,MAAO,uBAEXI,IAAK,CACDL,KAAM,sBACNC,MAAO,uBAEXK,IAAK,CACDN,KAAM,sBACNC,MAAO,wBAEXM,IAAK,CACDP,KAAM,uBACNC,MAAO,yBAEXO,KAAM,CACFR,KAAM,qBACNC,MAAO,uBAEXQ,MAAO,CACHT,KAAM,qBACNC,MAAO,uBAEXS,MAAO,CACHV,KAAM,qBACNC,MAAO,uBAEXU,IAAK,CACDX,KAAM,qBACNC,MAAO,uBAEXW,IAAK,CACDZ,KAAM,uBACNC,MAAO,yBAEXY,KAAM,CACFb,KAAM,sBACNC,MAAO,yBAmFf,SA9EmC,WAC/B,IAAQrE,GAAWD,EAAAA,EAAAA,YAAXC,OACAS,EAAwBT,EAAxBS,SAAUwB,EAAcjC,EAAdiC,UAGZyD,GAAUrE,EAAAA,EAAAA,UAAQ,WAAM,QAC1B,OAA4B,QAA5B,EAAOM,OAAOC,KAAKnB,UAAS,OACoC,QADpC,EAArB,EACDmF,QAAO,SAAAsH,GAAE,MAAwC,YAApCzM,aAAQ,EAARA,EAAWyM,GAAIrH,iBAA6B,WAAC,WADpC,EAArB,EAEDhE,KAAI,SAAAqL,GAAM,YACFnH,EAAStF,aAAQ,EAARA,EAAWyM,GAEpBxM,EAAUwM,EACVpL,EAAWiE,EAAOjE,SAClBod,EAAcje,QAAQ8E,EAAOmZ,aAC7B/Y,EAAalF,QAAQ8E,EAAOI,YAE5BgZ,EAAiBld,EAAUH,GAAY,SAAW,OAClDsd,EAAYjZ,EAAa,OAASgZ,EAClC3Y,EAAkD,QAA9B,EAAGT,EAAOS,4BAAoB,aAA3B,EAA6BC,QAAQ,cAAe,SAC3EC,EAA2C,UAAzBF,EAClB6Y,EAAiBtZ,SAAiB,QAAX,EAANA,EAAQ2K,iBAAS,OAAiD,QAAjD,EAAjB,EAAmBpJ,MAAK,SAAAnH,GAAO,MAA0B,YAAtBA,aAAO,EAAPA,EAASkQ,SAAqB,WAAC,WAA5D,EAAN,EAAoE3P,QACrF4e,EAAiB7e,SAAgC,QAAxB,EAARA,EAAW4e,QAAAA,EAAkB,WAAG,WAAxB,EAAR,EAAkCrZ,QAEnDE,EAAuBC,EAAa,OAASrE,GAAY,GACzDyd,EAAQrb,GAAwBgC,GAEhCsZ,EAAY,CAEdC,OAAQ,CACJrb,KAAM,kBAAF,OAAoB8B,EAAqBtC,cAAa,aAC1DS,MAAO,kBAAF,OAAoB6B,EAAqBtC,cAAa,QAG/D8b,KAAM,CACFtb,KAAM,gBAAF,OAAkB8B,EAAqBtC,cAAa,aACxDS,MAAO,gBAAF,OAAkB6B,EAAqBtC,cAAa,SAIjE,OAAO,SACAmC,GAAM,IACTsZ,eAAAA,EACAC,eAAAA,EACAC,MAAAA,EACAH,UAAAA,EACAF,YAAAA,EACA/Y,WAAAA,EACAO,gBAAAA,EACAF,qBAAAA,EACA9F,QAAAA,EACA8e,UAAAA,GAER,GACR,GAAG,CAAC/e,EAAUwB,IAGR6E,GAAiBzF,EAAAA,EAAAA,UAAQ,WAC3B,GAAKqE,EAEL,OAAO,GAAIA,GAASqB,MAAK,SAACC,EAAGC,GACzB,OAAID,EAAEb,aAAec,EAAEd,WACZa,EAAEb,WAAa,GAAK,EACpBlE,EAAU+E,EAAElF,YAAcG,EAAUgF,EAAEnF,UACtCG,EAAU+E,EAAElF,UAAY,GAAK,GAGhCkF,EAAElF,UAAY,OAAOoF,cAAcD,EAAEnF,UAAY,MAC7D,GACJ,GAAG,CAACG,EAAWyD,IAEf,MAAO,CAEHxE,KAAM4F,EAENK,WAAYL,GAAkBA,EAAeM,OAAS,EAE9D,EC5FA,SA9BsC,WAClC,IAAcuY,EAAiBC,KAAvB1e,KA0BR,OAvBgCG,EAAAA,EAAAA,UAAQ,WACpC,IAAMwe,EAAqC,CACvCC,QAAS,GACTC,QAAS,GACTC,OAAQ,GACRC,QAAS,GACT3P,QAAS,GACTH,IAAK,IAYT,OATAwP,SAAAA,EAAc9S,SAAQ,SAAA1M,GAClB,IAAMwQ,EAASxQ,EAAQuQ,UAEvBC,SAAAA,EAAQ9D,SAAQ,SAAAqT,GACRA,SAAAA,EAAmB7P,UAAnB6P,MAA+BA,GAAAA,EAAmBxf,SAClDmf,EAAgBK,EAAkB7P,UAAUlD,KAAK+S,EACzD,GACJ,IAEOL,CACX,GAAG,CAACF,GAIR,ECnBA,SAnBkC,WAC9B,OAAgC5f,EAAAA,EAAAA,YAAxBC,EAAM,EAANA,OAAQ+I,EAAW,EAAXA,YACRoX,EAAiEngB,EAAjEmgB,sBAAuBle,EAA0CjC,EAA1CiC,UAAWH,EAA+B9B,EAA/B8B,SAAUse,EAAqBpgB,EAArBogB,iBAC5CtX,EAAeC,EAAfD,WACMuX,EAA2BC,KAAjCjX,KAER,IAAKgX,EAAuBjZ,OAAQ,OAAOgZ,EAE3C,IAAMG,EAAsBF,EAAuB/Y,MAAK,SAAAnH,GAAO,OAAK8B,EAAU9B,EAAQ2B,UAAY,MAAM,IAExG,GAAIye,EAAqB,OAAOA,aAAmB,EAAnBA,EAAqBze,WAAY,GAEjE,IAAM0e,EAAwB1X,EACxBqX,GAAyBC,EACzBC,EAAuB,GAAGve,SAEhC,OAAOG,IAAcue,EAAwB1e,CACjD,ECmBA,SAzB+B,SAACrB,GAC5B,IAAMggB,EAA6BC,KACnC,EAA+ChR,KAAvCiO,EAAkB,EAAlBA,mBAAoBC,EAAc,EAAdA,eAE5B,OAAKnd,EAAS2G,OAeP,CACHpB,QAdYvF,EAASoD,QAAO,SAAC8c,EAAOxgB,GACpC,IAAMygB,EAAqC,UAA1BzgB,aAAO,EAAPA,EAAS0I,cAA0B,MAAQ4X,GAA8B,GACpFI,EAAa1gB,EAAQ2B,UAAY2e,GAA8B,GAEjEK,EAAW,EAMf,MALiB,KAAbF,GAAkC,KAAfC,EAAmBC,EAAW,EAC5CF,IAAaC,GAAYlD,EAAmBiD,EAAUC,GAE3DjD,GAAkBA,EAAegD,KAAWE,EAAWlD,EAAegD,GAAUC,IAAe,GAE5FF,GAASxgB,EAAQ6F,SAAW,GAAK8a,CAC5C,GAAG,GAIChf,SAAU2e,GAjBe,CAAEza,QAAS,EAAGlE,SAAU2e,EAmBzD,y3EC6GA,SAtImC,WAC/B,IACQtb,GADOpF,EAAAA,EAAAA,YAAPmF,GACAC,gBAEF4b,EAAgB7Q,IAERxK,EAAY2B,IAAlBnG,KAEA8C,EAAcqB,IAAdrB,UAEFgd,EAAoB7b,EAAkB,sBAAwB,uBAEpE,EAGI8b,KAAwB,IAFxB/f,KAAQmQ,EAAgB,EAAhBA,iBAAkBD,EAAY,EAAZA,aACf8P,EAAsB,EAAjC1b,UAGJ,GAA0B5E,EAAAA,EAAAA,UAAS,4BAA6B,CAC5DC,QAAS,CAAEJ,SAAU,OACrBM,QAAS,CAAEC,QAASkgB,KAFhBhgB,EAAI,EAAJA,KAASC,EAAI,SAKfggB,GAA6B9f,EAAAA,EAAAA,UAAQ,WAAM,MACvC+f,EAA0B,GAAH,UAAO/P,GAAgB,GAAKD,IAOnD3Q,EAAYS,SAAc,QAAV,EAAJA,EAAMT,gBAAQ,WAAV,EAAL,EAAgCoB,KAAI,SAAA1B,GAAW,QALxCoG,EAAkBzE,EAAkD,EAMxF,OAAO,SACA3B,GAAO,IACVkhB,mBAAoBN,aAAa,EAAbA,EAAetd,KACnCuC,QAASsb,WACL/K,OAAOpW,EAAQ6F,SAAS4R,QAAyC,QAAlC,EAAC5T,EAAU7D,EAAQ2B,UAAY,WAAG,aAAjC,EAAmCyf,oBAEvEC,sBAAwD,QAAnC,EAAExd,EAAU7D,EAAQ2B,UAAY,WAAG,aAAjC,EAAmC0B,aAC1D+C,QAAStF,QAAQd,aAAO,EAAPA,EAASshB,cAC1B3X,UAAWiX,aAAa,EAAbA,EAAeva,qBAC1BtE,MAfgBqE,EAeKpG,EAAQshB,aAfK3f,EAeS3B,EAAQ2B,SAdnDyE,EAAgB,OACY,QAAzB,EAAAvC,EAAUlC,GAAY,WAAG,OAAzB,EAA2BG,UAAY,SAAW,SAe7D,IAEA,MAAO,CACHyf,kBACIjhB,aAAQ,EAARA,EAAUoD,QACN,SAAC6d,EAAkBvhB,GAAY,QAC3B,GAAiC,WAA7BA,EAAQ0F,iBAA+B,OAAO6b,EAClD,IAAKvhB,EAAQO,QAAS,OAAOghB,EAE7B,IAAMC,EAEL,QAFa,EAAGP,EAAwB9Z,MACrC,SAAAsa,GAAW,aAAIzhB,EAAQO,UAA8B,QAAvB,EAAIkhB,EAAYlhB,eAAO,aAAnB,EAAqBkT,SAASzT,EAAQO,SAAQ,WACnF,aAFgB,EAEdsQ,cAaH,OAXA0Q,EAAiBvhB,EAAQO,SAAW,SAC7BP,GAAO,IACV0hB,eAAgBd,aAAa,EAAbA,EAAena,oBAC/BnD,KAAmC,YAA7BtD,EAAQ0F,iBAAiCmb,EAAoBW,GACtC,QAAzBxhB,EAAQ0I,cAA0B,CAClCiZ,gBAAiB1Q,SAEhB,QAF4B,EAAZA,EAAc9J,MAC3B,SAAAya,GAAW,aAAI5hB,EAAQO,UAA8B,QAAvB,EAAIqhB,EAAYrhB,eAAO,aAAnB,EAAqBkT,SAASzT,EAAQO,SAAQ,WACnF,WAF4B,EAAZ,EAEdgJ,cAIJgY,CACX,GACA,CAAC,KAUA,CAAC,EACVM,iBACIvhB,aAAQ,EAARA,EAAUoD,QACN,SAACme,EAAiBjc,GACd,GAAgC,WAA5BA,EAAOF,iBAA+B,OAAOmc,EACjD,IAAKjc,EAAOrF,QAAS,OAAOshB,EAE5B,IAAMC,EAAmBvc,aAAO,EAAPA,EAAS4B,MAAK,SAAAuC,GAAG,OAAIA,EAAInJ,UAAYqF,EAAOrF,OAAO,IAQ5E,OANAshB,EAAgBjc,EAAOrF,SAAW,SAC3BqF,GAAM,IACTtC,KAAMwe,aAAgB,EAAhBA,EAAkBxe,KACxBoe,eAAgBI,aAAgB,EAAhBA,EAAkBrb,sBAG/Bob,CACX,GACA,CAAC,KASA,CAAC,EAElB,GAAG,CACCjB,aAAa,EAAbA,EAAena,oBACfma,aAAa,EAAbA,EAAetd,KACfsd,aAAa,EAAbA,EAAeva,qBACftF,aAAI,EAAJA,EAAMT,SACN4Q,EACArN,EACAoN,EACA4P,EACAtb,IAGEwc,GAAyB7gB,EAAAA,EAAAA,UAAQ,WACnC,OAAO0f,SAAAA,EAAergB,QAAO,MAEhBygB,EAA2Ba,gBAAgBjB,aAAa,EAAbA,EAAergB,eAEjEmG,CACV,GAAG,CAACka,aAAa,EAAbA,EAAergB,QAASygB,EAA2Ba,kBAEvD,OAAO,SACA7gB,GAAI,IACP4f,cAAemB,EACfR,iBAAkBP,EAA2BO,iBAC7CM,gBAAiBb,EAA2Ba,iBAEpD,qiCClGA,SApCuB,SACnB9f,GAEA,IAAM+P,GAAKpE,EAAAA,EAAAA,YAAW,gBAChBsU,EAAUC,GAAa,CAAEhX,KATV,KAUbpL,GAAWD,EAAAA,EAAAA,YAAXC,OACsC,MAAXuL,EAAAA,EAAAA,UAAS,GAAE,GAAvC8W,EAAU,KAAEC,EAAY,KAEzBnU,GAAOlK,EAAAA,EAAAA,cACT,SAACse,GACG,IAAMC,EAAgBD,QAAAA,EAASviB,EAAOuiB,MACjCC,IACDL,EAAQzW,aAEZyW,EAAQjW,QACRiW,EAAQhW,QAERmW,GAAa,SAAA9W,GAAK,OAAIA,EAAQ,CAAC,IAE/ByG,EAAGnE,OAAO,CAAEjN,QAAS,CAAE4hB,aAAcD,EAAetgB,KAAAA,MACxD,GACA,CAAC+P,EAAIjS,EAAOuiB,MAAOJ,EAASjgB,IAGhC,MAAO,CACHwgB,WAAYzQ,EAAG0Q,UACf/Q,MAAOK,EAAGL,MACV1Q,KAAM+Q,EAAG/Q,KACTihB,QAASA,EAAQ3W,MACjBoX,mBAAoBT,EAAQzW,WAC5B2W,WAAAA,EACAQ,cAA8B,IAAfR,EACflU,KAAAA,EAER,ECaA,SAlD2B,WAAM,MAKrB/I,GADWrF,EAAAA,EAAAA,YAAXC,OACAoF,aAEFqP,GAAaC,EAAAA,EAAAA,sBAGX5G,GAAWD,EAAAA,EAAAA,YAAW,mBAAoB,CAAEyO,UAAW,kBAAM7H,EAAW,mBAAmB,IAA3F3G,OAEAtI,GAAcF,EAAAA,EAAAA,gBAAdE,UAGAtE,GAASN,EAAAA,EAAAA,UAAS,mBAAoB,CAC1CC,QAAS,CAAEiiB,iBAAkB,SAC7B/hB,QAAS,CACLsT,gBAAiB,SAAApB,GAAQ,YAA2C,iBAAtCA,SAA0B,QAAlB,EAARA,EAAU6P,wBAAgB,WAAlB,EAAR,EAA4BC,QAA0B,GAAW,EAE/F/hB,QAASoE,GAAgBI,KALzBtE,KASF8hB,GAAkB/e,EAAAA,EAAAA,cAAY,kBAAM6J,EAAO,CAAEjN,QAAS,CAAEiiB,iBAAkB,UAAY,GAAE,CAAChV,IAEzFmV,GAAkBhf,EAAAA,EAAAA,cAAY,kBAAM6J,EAAO,CAAEjN,QAAS,CAAEiiB,iBAAkB,UAAY,GAAE,CAAChV,IAEzFiV,EAAQ7hB,SAAsB,QAAlB,EAAJA,EAAM4hB,wBAAgB,WAAlB,EAAJ,EAAwBC,MAEtC,MAAO,CAEHA,MAAAA,EAEAG,cAAyB,eAAVH,EAEfI,YAAuB,aAAVJ,EAEbK,eAA0B,gBAAVL,EAEhBM,YAAuB,aAAVN,EAEbO,UAAqB,WAAVP,EAEXC,gBAAAA,EAEAC,gBAAAA,EAER,o/DC/CA,IAAMM,GAAoC,CACtCC,SAAU,aACVrT,IAAK,MACLG,QAAS,UACTmT,OAAQ,UAGNC,GAAqC,CACvCC,IAAK,MACLC,MAAO,SA8TX,SA3T8B,SAC1B7S,GAEA,OAGIhR,EAAAA,EAAAA,YAAU,IAFVC,OAAUU,EAAO,EAAPA,QAAoCoJ,EAAS,EAApC1J,0BACb+E,EAAe,EAArBD,GAAMC,gBAEIO,EAAY2B,IAAlBnG,KACF2iB,EAAiB3T,IACX4T,EAA0BxD,KAAhCnX,KACQ4a,EAA2BzD,KAAjCjX,KAGRya,EAAwB,CACpBje,iBAAkB,UAClBgD,aAAc,WACd/G,SAAU,MACVpB,QAAS,eACTyF,WAAY,EACZ/F,0BAA2B0J,EAC3BtJ,MAAO,IAEXujB,EAAuB5W,KAAK,CACxBtH,iBAAkB,UAClBgD,aAAc,WACd/G,SAAU,MACVpB,QAAS,aACTyF,WAAY,EACZ/F,0BAA2B0J,EAC3BtJ,MAAO,KAEPkF,GAAWme,GACXne,EAAQyH,KAAK,CACTtE,aAAc,SACd7C,QAAS,EACTlE,SAAU,MACV6E,sBAAuB,wBACvBC,oBAAqB,sBAAF,OAAwBzB,EAAkB,SAAW,IACxEoB,UAAWsd,EAAe1d,WAC1B+Y,YAAa,EACbxY,iBAAiB,EACjBJ,aAAa,EACbH,WAAY0d,EAAe1d,WAC3BK,qBAAsB,MACtB9F,QAAS,eACTqB,qBAAiB8E,EACjBpD,KAAM,sBACNyC,qBAAsB,QAE9B,IAAMzF,GAAWY,EAAAA,EAAAA,UACb,kBAAOyiB,GAAqB,UAAKC,GAAsB,GACvD,CAACD,EAAuBC,IAEpB/f,EAAcqB,IAAdrB,UAEFggB,GAAwB/f,EAAAA,EAAAA,cAC1B,SACI4E,EACA1C,EACA/F,GAEA,MAAO,GAAP,OAAUmjB,GAAkC1a,GAAa,YACrD1C,EAAa,OAAS,IAAH,OAAOud,GAAmCtjB,GAA0B,KAAG,WAElG,GACA,IAIE6jB,EAAoBJ,SAAAA,EAAgB1d,WACpC,CACI,CACI4K,YAAa,WACbmT,OAAQ,EACR9Y,KAAM,CACF1K,QAAAA,GAEJ2K,GAAI,CACA3K,QAAS,gBAEbyjB,OAAQ,CAAC,EACTC,cAAe,KACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,gBACbmT,OAAQ,IACRE,cAAe,IACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,WACbmT,OAAQ,IACR9Y,KAAM,CACF1K,QAAS,gBAEb2K,GAAI,CACA3K,QAAAA,GAEJ0jB,cAAe,KACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,WACbmT,OAAQ,IACR9Y,KAAM,CACF1K,QAAAA,GAEJ2K,GAAI,CACA3K,QAAS,gBAEbyjB,OAAQ,CAAC,EACTC,cAAe,KACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,eACbmT,OAAQ,IACRE,cAAe,IACfC,eAAgB,YAChBC,iBAAkB,aAG1B,CACI,CACIvT,YAAa,WACbmT,OAAQ,EACR9Y,KAAM,CACF1K,QAAAA,GAEJ2K,GAAI,CACA3K,QAAS,cAEb0jB,cAAe,EACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,WACbmT,OAAQ,GACR9Y,KAAM,CACF1K,QAAAA,GAEJ2K,GAAI,CACA3K,QAAS,gBAEb0jB,cAAe,EACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,UACbmT,OAAQ,GACRE,cAAe,GACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,aACbmT,OAAQ,IACRE,cAAe,EACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,WACbmT,OAAQ,IACR9Y,KAAM,CACF1K,QAAS,cAEb2K,GAAI,CACA3K,QAAAA,GAEJ0jB,cAAe,IACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,WACbmT,OAAQ,IACR9Y,KAAM,CACF1K,QAAS,gBAEb2K,GAAI,CACA3K,QAAAA,GAEJ0jB,cAAe,IACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,WACbmT,OAAQ,IACR9Y,KAAM,CACF1K,QAAAA,GAEJ2K,GAAI,CACA3K,QAAS,cAEb0jB,cAAe,IACfC,eAAgB,YAChBC,iBAAkB,YAEtB,CACIvT,YAAa,UACbmT,OAAQ,IACRE,cAAe,IACfC,eAAgB,YAChBC,iBAAkB,aAgB1B/X,GAAelL,EAAAA,EAAAA,UACjB,kBAAM4iB,EAAkBre,QAAO,SAAA2e,GAAE,OAAKxT,GAAewT,EAAGxT,cAAgBA,CAAW,GAAC,GACpF,CAACA,EAAakT,IAGZO,GAAyBvgB,EAAAA,EAAAA,cAC3B,SAACwgB,GACG,GAAuC,WAAnCA,EAAc5e,iBAA+B,CAC7C,IAAME,EAASL,aAAO,EAAPA,EAAS4B,MAAK,SAAAid,GAAE,OAAIA,EAAG7jB,UAAY+jB,EAAc/jB,OAAO,IACvE,MAAO,GAAP,OAAUqF,SAAAA,EAAQI,WAAa,QAAU,IAAE,OAAGJ,aAAM,EAANA,EAAQjE,SAAQ,IAAI,SACtE,CACA,OAAOkiB,EACHS,EAAc5b,eACZ4b,EAActe,WAChBse,EAAcrkB,0BAEtB,GACA,CAAC4jB,EAAuBte,IAmE5B,MAAO,CAAE6G,cAhEqBlL,EAAAA,EAAAA,UAC1B,kBACIqE,GAAWme,EACLtX,EACK1K,KAAI,SAAAwL,GACD,QAC2BxG,IAAvBwG,EAAY6W,aACkBrd,IAA9BwG,EAAY+W,oBACgBvd,IAA5BwG,EAAY0D,YAEZ,OAAO,KAEX,IAAIlL,EAAmB,SACnBgD,EAAegb,EAAehb,aAC9B6b,EAAe,GAAH,OAAMb,EAAe1d,WAAa,QAAU,IAAE,OAC1D0d,EAAe/hB,SAAQ,IACvB,UACA6iB,EAAmBd,EAAe/hB,SAClC+f,EAAiBgC,EAAejd,oBAChCnD,GAAOmhB,EAAAA,GAAAA,IACPf,EAAe1d,WAAa,OAAS0d,EAAe/hB,UAAY,MAChEqD,GAEJ,GAAgC,aAA5BkI,EAAY0D,YAA4B,aAClC8T,GACY,QAAd,EAAAxX,EAAYhC,UAAE,aAAd,EAAgB3K,WAAYA,EACN,QADa,EAC7B2M,EAAYjC,YAAI,aAAhB,EAAkB1K,QACJ,QADW,EACzB2M,EAAYhC,UAAE,aAAd,EAAgB3K,QAC1B,IAAKmkB,EAAe,OAAO,KAC3B,IAAMJ,EAAgBhkB,EAAS6G,MAAK,SAAAid,GAAE,OAAIA,aAAE,EAAFA,EAAI7jB,WAAYmkB,CAAa,IACvE,GAAKJ,UAAAA,EAAe3iB,UAAa2iB,UAAAA,EAAe5b,aAAc,OAAO,KACrEhD,EAAmB4e,EAAc5e,kBAAoB,SACrD8e,EAAmBF,EAAc3iB,SACjC4iB,EAAeF,EAAuBC,GACtC5b,EAAe4b,EAAc5b,aAC7BgZ,EAAiB,gBAAH,OACmB,IAA7B4C,EAActe,WAAmB,OAASse,SAAuB,QAAV,EAAbA,EAAe3iB,gBAAQ,WAAV,EAAb,EAAyB8B,cAAa,cAC9EuB,EAAkB,SAAW,IACnC1B,GAAOmhB,EAAAA,GAAAA,IACHH,EAActe,WAAa,OAASse,EAAc3iB,UAAY,GAC9DqD,GACA,EAER,CACA,IAAMpD,EAAkBiC,EAAU2gB,GAAoB,IAEhDvF,GADYrd,aAAe,EAAfA,EAAiBE,YACJ4hB,EAAe1d,WAAa,SAAW,OAEtE,OAAO,SACAkH,GAAW,IACdxH,iBAAAA,EACA8e,iBAAAA,EACAD,aAAAA,EACA7b,aAAAA,EACAgZ,eAAAA,EACApe,KAAAA,EACA2b,UAAAA,GAER,IACCxZ,QAAO,SAAI0P,GAAe,OAA2B,OAAVA,CAAc,IAC9D,EAAE,GACZ,CAAC7U,EAAUojB,EAAgB7f,EAAWwgB,EAAwBrf,EAAiBzE,EAAS6L,EAAc7G,IAG5Did,WAAW,EAAOnd,WAAW,EAC/E,qxECxRA,SAlD0B,WACtB,MAKIsf,KAJA/D,EAAa,EAAbA,cACAW,EAAgB,EAAhBA,iBACAM,EAAe,EAAfA,gBACW+C,EAAmB,EAA9BpC,UAGmE,MAAhCpX,EAAAA,EAAAA,YAAgC,GAAhEyZ,EAAY,KAAEC,EAAc,KACgC,MAAhC1Z,EAAAA,EAAAA,YAAgC,GAA5D2Z,EAAU,KAAEC,EAAY,KAEzBC,GAAkB/jB,EAAAA,EAAAA,UAAQ,WAC5B,OAAK2jB,SAAAA,EAActkB,SACdqgB,SAAAA,EAAergB,SAEhBskB,aAAY,EAAZA,EAActkB,YAAYqgB,aAAa,EAAbA,EAAergB,SAClC,CACHghB,iBAAAA,EACAM,gBAAiBrgB,OAAO0jB,YACpB1jB,OAAO2jB,QAAQtD,GAAiBpc,QAC5B,gBAAE2E,EAAF,QAAK,UAAMwW,aAAa,EAAbA,EAAergB,WAAY6J,EAAIqJ,SAASmN,aAAa,EAAbA,EAAergB,QAAQ,MAKnF,CAAEghB,iBAAkB,CAAC,EAAGM,gBAAiB,MAAGjB,aAAa,EAAbA,EAAergB,QAAUqgB,IAbzC,CAAEW,iBAAkB,CAAC,EAAGM,gBAAiB,CAAC,EAcjF,GAAG,CAACjB,EAAeiE,aAAY,EAAZA,EAActkB,QAASghB,EAAkBM,IAY5D,OATApW,EAAAA,EAAAA,YAAU,WACNqZ,GAAe,SAAApb,GACX,OAAOA,SAAAA,EAAKnJ,QAAU,SAAKghB,GAAqBM,GAAkBnY,aAAG,EAAHA,EAAKnJ,cAAWmG,CACtF,IACAse,GAAa,SAAAtb,GACT,OAAOA,SAAAA,EAAKnJ,QAAU,SAAKghB,GAAqBM,GAAkBnY,aAAG,EAAHA,EAAKnJ,cAAWmG,CACtF,GACJ,GAAG,CAACoe,EAAgBE,EAAczD,EAAkBM,IAE7C,CACHjB,cAAAA,EACAgE,oBAAAA,EACAC,aAAAA,EACAE,WAAAA,EACAE,gBAAAA,EACAG,kBAAmB,CAAE7D,iBAAAA,EAAkBM,gBAAAA,GACvCiD,eAAAA,EACAE,aAAAA,EAER","sources":["webpack:///./index.tsx","webpack:///../../hooks/src/useHasMaltaInvestAccount.ts","webpack:///../../hooks/src/useAccountTransferVisible.ts","webpack:///../../hooks/src/useAuthorize.ts","webpack:///../../hooks/src/useCurrencyConfig.ts","webpack:///../../hooks/src/useWalletsList.ts","webpack:///../../hooks/src/useActiveWallet.ts","webpack:///../../hooks/src/useAvailableWallets.ts","webpack:///../../hooks/src/useCFDAllAccounts.ts","webpack:///../../hooks/src/useCFDDemoAccounts.ts","webpack:///../../hooks/src/useCFDRealAccounts.ts","webpack:///../../hooks/src/useCFDAccounts.ts","webpack:///../../hooks/src/useIsClientHighRiskForMT5.ts","webpack:///../../hooks/src/useCFDCanGetMoreMT5Accounts.ts","webpack:///../../hooks/src/useCashierLocked.ts","webpack:///../../hooks/src/useContentFlag.ts","webpack:///../../hooks/src/useCountdown.ts","webpack:///../../hooks/src/useCryptoTransactions.ts","webpack:///../../hooks/src/useCurrentAccountDetails.ts","webpack:///../../hooks/src/useCurrentCurrencyConfig.ts","webpack:///../../hooks/src/useDepositCryptoAddress.ts","webpack:///../../hooks/src/useDepositFiatAddress.ts","webpack:///../../hooks/src/useNeedAuthentication.ts","webpack:///../../hooks/src/useNeedFinancialAssessment.ts","webpack:///../../hooks/src/useRealSTPAccount.ts","webpack:///../../hooks/src/useNeedTNC.ts","webpack:///../../hooks/src/useDepositLocked.ts","webpack:///../../hooks/src/useExchangeRate.ts","webpack:///../../hooks/src/useExistingCFDAccounts.ts","webpack:///../../hooks/src/useFeatureFlags.ts","webpack:///../../hooks/src/useFiatAccountList.ts","webpack:///../../hooks/src/useFileUploader.ts","webpack:///../../hooks/src/useGetMFAccountStatus.ts","webpack:///../../hooks/src/useHasActiveRealAccount.ts","webpack:///../../hooks/src/useHasCryptoCurrency.ts","webpack:///../../hooks/src/useHasFiatCurrency.ts","webpack:///../../hooks/src/useHasMFAccountDeposited.ts","webpack:///../../hooks/src/useP2PConfig.ts","webpack:///../../hooks/src/useHasP2PSupportedCurrencies.ts","webpack:///../../hooks/src/useHasSetCurrency.ts","webpack:///../../hooks/src/useHasSvgAccount.ts","webpack:///../../hooks/src/useHasSwapFreeAccount.ts","webpack:///../../hooks/src/useHasUSDCurrency.ts","webpack:///../../hooks/src/useInputDecimalFormatter.ts","webpack:///../../hooks/src/useInputATMFormatter.ts","webpack:///../../hooks/src/useIsAccountStatusPresent.ts","webpack:///../../hooks/src/useIsP2PEnabled.ts","webpack:///../../hooks/src/useIsRealAccountNeededForCashier.ts","webpack:///../../hooks/src/useIsSystemMaintenance.ts","webpack:///../../hooks/src/useLandingCompanyDetails.ts","webpack:///../../hooks/src/useLocalStorageData.ts","webpack:///../../hooks/src/useMFAccountStatus.ts","webpack:///../../hooks/src/useMT5SVGEligibleToMigrate.ts","webpack:///../../hooks/src/useNeedPOI.ts","webpack:///../../hooks/src/useNotificationEvent.ts","webpack:///../../hooks/src/useOnrampVisible.ts","webpack:///../../hooks/src/useP2PAdvertInfo.ts","webpack:///../../hooks/src/useP2PAdvertList.ts","webpack:///../../hooks/src/useP2PAdvertiserPaymentMethods.ts","webpack:///../../hooks/src/useP2POrderList.ts","webpack:///../../hooks/src/useP2PCompletedOrdersNotification.ts","webpack:///../../hooks/src/useP2PExchangeRate.ts","webpack:///../../hooks/src/useP2PNotificationCount.ts","webpack:///../../hooks/src/useP2PPaymentMethods.ts","webpack:///../../hooks/src/usePaymentAgentList.ts","webpack:///../../hooks/src/usePaymentAgentTransferVisible.ts","webpack:///../../hooks/src/usePlatformDemoAccount.ts","webpack:///../../hooks/src/usePlatformRealAccounts.ts","webpack:///../../hooks/src/usePlatformAccounts.ts","webpack:///../../hooks/src/useServiceToken.ts","webpack:///../../hooks/src/useStatesList.ts","webpack:///../../hooks/src/useStoreWalletAccountsList.ts","webpack:///../../hooks/src/useStoreLinkedWalletsAccounts.ts","webpack:///../../hooks/src/useTotalAssetCurrency.ts","webpack:///../../hooks/src/useTotalAccountBalance.ts","webpack:///../../hooks/src/useTransferBetweenAccounts.ts","webpack:///../../hooks/src/useVerifyEmail.ts","webpack:///../../hooks/src/useWalletMigration.ts","webpack:///../../hooks/src/useWalletTransactions.ts","webpack:///../../hooks/src/useWalletTransfer.ts"],"sourcesContent":["/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable import/no-named-as-default */\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'babel-polyfill';\nimport 'promise-polyfill';\n// eslint-disable-next-line\nimport registerServiceWorker from 'Utils/pwa';\nimport initStore from 'App/initStore';\nimport App from 'App/app.jsx';\nimport { checkAndSetEndpointFromUrl } from '@deriv/shared';\nimport AppNotificationMessages from './App/Containers/app-notification-messages.jsx';\nimport './Utils/Datadog'; // to enable datadog\n\nif (\n    !!window?.localStorage.getItem?.('debug_service_worker') || // To enable local service worker related development\n    (!window.location.hostname.startsWith('localhost') && !/binary\\.sx/.test(window.location.hostname)) ||\n    window.location.hostname === 'deriv-app.binary.sx'\n) {\n    registerServiceWorker();\n}\n\n// if we don't clear the local storage, then exchange_rates subscription calls won't be made when user refreshes the page\n// check packages/stores/src/providers/ExchangeRatesProvider.tsx\n\nif (window.localStorage.getItem('exchange_rates')) {\n    window.localStorage.removeItem('exchange_rates');\n}\nconst has_endpoint_url = checkAndSetEndpointFromUrl();\n\n// if has endpoint url, APP will be redirected\nif (!has_endpoint_url) {\n    const root_store = initStore(AppNotificationMessages);\n\n    const wrapper = document.getElementById('deriv_app');\n    if (wrapper) {\n        ReactDOM.render(<App useSuspense={false} root_store={root_store} />, wrapper);\n    }\n}\n","import { useStore } from '@deriv/stores';\n\nconst useHasMaltaInvestAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const has_malta_invest_account = active_accounts.some(\n        account => account.landing_company_shortcode === 'maltainvest'\n    );\n\n    return has_malta_invest_account;\n};\n\nexport default useHasMaltaInvestAccount;\n","import { useStore } from '@deriv/stores';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\n\nconst useAccountTransferVisible = () => {\n    const { client } = useStore();\n    const { landing_company_shortcode, residence } = client;\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const is_account_transfer_visible =\n        residence !== 'im' && (landing_company_shortcode !== 'malta' || has_malta_invest_account);\n\n    return is_account_transfer_visible;\n};\n\nexport default useAccountTransferVisible;\n","import { useMemo } from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\n/** A custom hook that authorize the user with the given token. If no token is given, it will use the current token. */\nconst useAuthorize = (token?: string) => {\n    const { client } = useStore();\n    const { accounts, loginid = '' } = client;\n    const current_token = accounts[loginid || '']?.token;\n\n    const { data, ...rest } = useFetch('authorize', {\n        payload: { authorize: token ?? current_token },\n        options: { enabled: Boolean(token ?? current_token) },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useCallback, useMemo } from 'react';\nimport { useFetch } from '@deriv/api';\n\n/** @deprecated Use `useCurrencyConfig` from `@deriv/api` package instead. */\nconst useCurrencyConfig = () => {\n    const { data: website_status_data } = useFetch('website_status');\n    const { data: crypto_config_data, ...rest } = useFetch('crypto_config');\n\n    const currencies_config = useMemo(() => {\n        if (!website_status_data?.website_status?.currencies_config) return undefined;\n\n        const website_status_currencies_config = website_status_data.website_status.currencies_config;\n\n        const modified_currencies_config = Object.keys(website_status_currencies_config).map(currency => {\n            const currency_config = website_status_currencies_config[currency];\n            const crypto_config = crypto_config_data?.crypto_config?.currencies_config[currency];\n\n            return {\n                ...currency_config,\n                ...crypto_config,\n                /** determine if the currency is a `crypto` currency */\n                is_crypto: currency_config?.type === 'crypto',\n                /** determine if the currency is a `fiat` currency */\n                is_fiat: currency_config?.type === 'fiat',\n                /** determine if the currency is `Australian Dollar` */\n                is_AUD: currency === 'AUD',\n                /** determine if the currency is `US Dollar` */\n                is_USD: currency === 'USD',\n                /** determine if the currency is `Euro` */\n                is_EUR: currency === 'EUR',\n                /** determine if the currency is `Pound Sterling` */\n                is_GBP: currency === 'GBP',\n                /** determine if the currency is `Bitcoin` */\n                is_BTC: currency === 'BTC',\n                /** determine if the currency is `Ethereum` */\n                is_ETH: currency === 'ETH',\n                /** determine if the currency is `Litecoin` */\n                is_LTC: currency === 'LTC',\n                /** determine if the currency is `Multi-Collateral DAI` */\n                is_DAI: currency === 'DAI',\n                /** determine if the currency is `IDK` */\n                is_IDK: currency === 'IDK',\n                /** determine if the currency is `Paxos Standard` */\n                is_PAX: currency === 'PAX',\n                /** determine if the currency is `Binary Coin` */\n                is_USB: currency === 'USB',\n                /** determine if the currency is `Tether Omni` */\n                is_USDT: currency === 'UST',\n                /** determine if the currency is `True USD` */\n                is_TUSD: currency === 'TUSD',\n                /** determine if the currency is `Binance USD` */\n                is_BUSD: currency === 'BUSD',\n                /** determine if the currency is `STATIS Euro` */\n                is_EURS: currency === 'EURS',\n                /** determine if the currency is `Tether ERC20` */\n                is_eUSDT: currency === 'eUSDT',\n                /** determine if the currency is `Tether TRC20` */\n                is_tUSDT: currency === 'tUSDT',\n                /** determine if the currency is `USD Coin` */\n                is_USDC: currency === 'USDC',\n                /** determine if the currency is `USDK` */\n                is_USDK: currency === 'USDK',\n                /** Currency code */\n                code: currency,\n                /** Currency display code */\n                display_code: currency === 'UST' ? 'USDT' : currency,\n                /** Local asset name for the currency icon. ex: `IcCurrencyUsd` for `USD` */\n                icon: `IcCurrency${currency[0].toUpperCase() + currency.slice(1).toLowerCase()}`,\n            };\n        });\n\n        return modified_currencies_config.reduce<Record<string, typeof modified_currencies_config[number]>>(\n            (previous, current) => ({ ...previous, [current.code]: current }),\n            {}\n        );\n    }, [crypto_config_data?.crypto_config?.currencies_config, website_status_data?.website_status?.currencies_config]);\n\n    const getConfig = useCallback((currency: string) => currencies_config?.[currency], [currencies_config]);\n\n    return {\n        /** Returns the currency config object for the given currency */\n        getConfig,\n        /** Available currencies and their information */\n        currencies_config,\n        ...rest,\n    };\n};\n\nexport default useCurrencyConfig;\n","import { useMemo } from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useAuthorize from './useAuthorize';\nimport useCurrencyConfig from './useCurrencyConfig';\n\nconst currency_to_icon_mapper: Record<string, Record<'light' | 'dark', string>> = {\n    Demo: {\n        dark: 'IcWalletDerivDemoDark',\n        light: 'IcWalletDerivDemoLight',\n    },\n    USD: {\n        dark: 'IcWalletCurrencyUsd',\n        light: 'IcWalletCurrencyUsd',\n    },\n    EUR: {\n        dark: 'IcWalletCurrencyEur',\n        light: 'IcWalletCurrencyEur',\n    },\n    AUD: {\n        dark: 'IcWalletCurrencyAud',\n        light: 'IcWalletCurrencyAud',\n    },\n    GBP: {\n        dark: 'IcWalletCurrencyGbp',\n        light: 'IcWalletCurrencyGbp',\n    },\n    BTC: {\n        dark: 'IcWalletBitcoinDark',\n        light: 'IcWalletBitcoinLight',\n    },\n    ETH: {\n        dark: 'IcWalletEthereumDark',\n        light: 'IcWalletEthereumLight',\n    },\n    USDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    eUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    tUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    UST: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    LTC: {\n        dark: 'IcWalletLiteCoinDark',\n        light: 'IcWalletLiteCoinLight',\n    },\n    USDC: {\n        dark: 'IcWalletUsdCoinDark',\n        light: 'IcWalletUsdCoinLight',\n    },\n};\n\n/** A custom hook to get the list of wallets for the current user. */\nconst useWalletsList = () => {\n    const { ui, client } = useStore();\n    const { is_dark_mode_on } = ui;\n    const { is_authorize } = client;\n    const { getConfig } = useCurrencyConfig();\n\n    const { data: authorize_data, isSuccess, ...rest } = useAuthorize();\n    const { data: balance_data } = useFetch('balance', {\n        payload: { account: 'all' },\n        options: { enabled: is_authorize && isSuccess },\n    });\n\n    // Filter out non-wallet accounts.\n    const wallets = useMemo(\n        () => authorize_data?.account_list?.filter(account => account.account_category === 'wallet'),\n        [authorize_data?.account_list]\n    );\n\n    // Add balance to each wallet.\n    const wallets_with_balance = useMemo(\n        () =>\n            wallets?.map(wallet => ({\n                ...wallet,\n                /** Wallet balance */\n                balance: balance_data?.balance?.accounts?.[wallet.loginid || '']?.balance || 0,\n            })),\n        [balance_data?.balance?.accounts, wallets]\n    );\n\n    // Add additional information to each wallet.\n    const modified_wallets = useMemo(() => {\n        return wallets_with_balance?.map(wallet => {\n            const wallet_currency_type = wallet.is_virtual === 1 ? 'Demo' : wallet.currency || '';\n            const wallet_gradient_class_name = `${wallet_currency_type.toLowerCase()}-bg${\n                is_dark_mode_on ? '--dark' : ''\n            }`;\n            const wallet_icon = currency_to_icon_mapper[wallet_currency_type];\n\n            return {\n                ...wallet,\n                /** Indicating whether the wallet is the currently selected wallet. */\n                is_selected: wallet.loginid === authorize_data?.loginid,\n                /** Indicating whether the wallet is a virtual-money wallet. */\n                is_demo: wallet.is_virtual === 1,\n                /** Returns the wallet's currency type. ex: `Demo`, `USD`, etc. */\n                wallet_currency_type,\n                /** Landing company shortcode the account belongs to. */\n                landing_company_name: wallet.landing_company_name?.replace('maltainvest', 'malta'),\n                /** Indicating whether the wallet is a maltainvest wallet. */\n                is_malta_wallet: wallet.landing_company_name === 'malta',\n                /** The gradient class name for the wallet header background. */\n                gradient_header_class: `wallet-header__${wallet_gradient_class_name}`,\n                /** The gradient class name for the wallet card background. */\n                gradient_card_class: `wallet-card__${wallet_gradient_class_name}`,\n                /** Wallet's currency config information */\n                currency_config: wallet.currency ? getConfig(wallet.currency) : undefined,\n                /** Local asset name for the wallet icon. ex: `IcWalletCurrencyUsd` for `USD`  */\n                icon: is_dark_mode_on ? wallet_icon.dark : wallet_icon.light,\n            } as const;\n        });\n    }, [getConfig, is_dark_mode_on, authorize_data?.loginid, wallets_with_balance]);\n\n    // Sort wallets alphabetically by fiat, crypto, then virtual.\n    const sorted_wallets = useMemo(() => {\n        if (!modified_wallets) return [];\n\n        return [...modified_wallets].sort((a, b) => {\n            if (a.is_virtual !== b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if (a.currency_config?.is_crypto !== b.currency_config?.is_crypto) {\n                return a.currency_config?.is_crypto ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n    }, [modified_wallets]);\n\n    return {\n        /** List of wallets for current user. */\n        data: sorted_wallets,\n        /** Indicating whether the user has a wallet */\n        has_wallet: sorted_wallets && sorted_wallets.length > 0,\n        ...rest,\n    };\n};\n\nexport default useWalletsList;\n","import { useMemo } from 'react';\nimport useWalletsList from './useWalletsList';\n\n/** A custom hook that returns the wallet object for the current active wallet. */\nconst useActiveWallet = () => {\n    const { data } = useWalletsList();\n    const active_wallet = useMemo(() => data?.find(wallet => wallet.is_selected), [data]);\n\n    /** User's current active wallet. */\n    return active_wallet;\n};\n\nexport default useActiveWallet;\n","import React from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useWalletsList from './useWalletsList';\nimport useAuthorize from './useAuthorize';\n\nconst useAvailableWallets = () => {\n    const { client, ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const { is_crypto } = client;\n    const { data } = useAuthorize();\n\n    const { data: account_type_data, ...rest } = useFetch('get_account_types', {\n        payload: { company: data?.landing_company_name === 'virtual' ? 'svg' : data?.landing_company_name },\n        options: { enabled: Boolean(data?.landing_company_name) },\n    });\n\n    const { data: added_wallets } = useWalletsList();\n\n    const sortedWallets = React.useMemo(() => {\n        if (!account_type_data) return null;\n        const { crypto, doughflow } = account_type_data?.get_account_types?.wallet || {};\n        const crypto_currencies = crypto?.currencies;\n        const fiat_currencies = doughflow?.currencies;\n\n        if (!crypto_currencies || !fiat_currencies) return null;\n        const available_currencies = [...fiat_currencies, ...crypto_currencies];\n        const non_virtual_wallets = added_wallets?.filter(wallet => !wallet.is_virtual);\n\n        const modified_wallets = non_virtual_wallets?.map(wallet => ({\n            currency: wallet.currency,\n            landing_company_name: wallet.landing_company_name,\n            is_added: true,\n            gradient_card_class: wallet.gradient_card_class,\n        }));\n\n        const available_wallets = available_currencies\n            .filter(currency => !modified_wallets?.some(wallet => wallet.currency === currency))\n            .map(currency => ({\n                currency,\n                landing_company_name: data?.landing_company_name === 'virtual' ? 'svg' : data?.landing_company_name,\n                is_added: false,\n                gradient_card_class: `wallet-card__${currency.toLowerCase()}-bg${is_dark_mode_on ? '--dark' : ''}`,\n            }));\n\n        // Sort the unadded wallets alphabetically by fiat, crypto, then virtual\n        available_wallets?.sort((a, b) => {\n            if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                return is_crypto(a.currency) ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n\n        // Sort the added wallets alphabetically by fiat, crypto, then virtual (if any)\n        if (Array.isArray(modified_wallets)) {\n            modified_wallets?.sort((a, b) => {\n                if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                    return is_crypto(a.currency) ? 1 : -1;\n                }\n\n                return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n            });\n            return [...available_wallets, ...modified_wallets];\n        }\n\n        return [...available_wallets];\n    }, [added_wallets, account_type_data, data?.landing_company_name, is_dark_mode_on, is_crypto]);\n\n    return {\n        ...rest,\n        data: sortedWallets,\n    };\n};\n\nexport default useAvailableWallets;\n","import { useStore } from '@deriv/stores';\n\n/** @deprecated Use `useMT5AccountsList` for MT5 accounts and `useDxtradeAccountsList` for Other CFD accounts from `@deriv/api` instead. */\nconst useCFDAllAccounts = () => {\n    const { client } = useStore();\n    const { dxtrade_accounts_list, mt5_login_list, ctrader_accounts_list } = client;\n\n    let cfd_accounts: typeof mt5_login_list = [];\n    if (Array.isArray(mt5_login_list)) {\n        cfd_accounts = [...cfd_accounts, ...mt5_login_list];\n    }\n    if (Array.isArray(dxtrade_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...dxtrade_accounts_list];\n    }\n    if (Array.isArray(ctrader_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...ctrader_accounts_list];\n    }\n\n    return cfd_accounts;\n};\n\nexport default useCFDAllAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n *  we can use this hook to get the CFD demo accounts.\n *  it loops through the all of user's CFD accounts, finds and returns demo accounts\n */\nconst useCFDDemoAccounts = () => {\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_demo_accounts = cfd_accounts.filter(account => account.account_type === 'demo');\n\n    return cfd_demo_accounts;\n};\n\nexport default useCFDDemoAccounts;\n","import { useStore } from '@deriv/stores';\nimport useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n * we can use this hook to get the real CFD accounts for both Eu and Non-Eu regions.\n * it loops through the all of user's CFD accounts, finds and returns real accounts\n */\nconst useCFDRealAccounts = () => {\n    const { traders_hub } = useStore();\n    const { is_eu_user } = traders_hub;\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_real_accounts = cfd_accounts.filter(account => {\n        const is_demo = account.account_type === 'demo';\n        const is_maltainvest = account.landing_company_short === 'maltainvest';\n\n        if (is_demo) return false;\n        if (!is_eu_user) return !is_maltainvest;\n\n        return is_maltainvest;\n    });\n\n    return cfd_real_accounts;\n};\n\nexport default useCFDRealAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\nimport useCFDDemoAccounts from './useCFDDemoAccounts';\nimport useCFDRealAccounts from './useCFDRealAccounts';\n\n/**\n * this is a wrapper hook for useCFDDemoAccounts and useCFDRealAccounts\n * and it returns different cfd account types which are demo, real, and all\n */\n\nconst useCFDAccounts = () => {\n    const all_cfd_accounts = useCFDAllAccounts();\n    const cfd_demo_accounts = useCFDDemoAccounts();\n    const cfd_real_accounts = useCFDRealAccounts();\n\n    return {\n        all: all_cfd_accounts,\n        demo: cfd_demo_accounts,\n        real: cfd_real_accounts,\n    };\n};\n\nexport default useCFDAccounts;\n","import { useStore } from '@deriv/stores';\n\n/**\n * Checks if a client is considered high risk for MT5 trading based on their available trading accounts.\n * @returns `true` if the client is high risk for MT5 trading, `false` otherwise.\n */\nconst useIsClientHighRiskForMT5 = () => {\n    const {\n        client: { trading_platform_available_accounts },\n    } = useStore();\n    const financial_available_accounts = trading_platform_available_accounts.filter(\n        available_account => available_account.market_type === 'financial'\n    );\n\n    const synthetic_available_accounts = trading_platform_available_accounts.filter(\n        available_account => available_account.market_type === 'gaming'\n    );\n\n    return (\n        financial_available_accounts.length === 1 &&\n        financial_available_accounts.every(acc => acc.shortcode === 'svg') &&\n        synthetic_available_accounts.length === 1 &&\n        synthetic_available_accounts.every(acc => acc.shortcode === 'svg')\n    );\n};\n\nexport default useIsClientHighRiskForMT5;\n","import { useStore } from '@deriv/stores';\nimport { CFD_PLATFORMS } from '@deriv/shared';\nimport useIsClientHighRiskForMT5 from './useIsClientHighRiskForMT5';\n\nconst ACCOUNT_TYPES = ['synthetic', 'financial', 'all'] as const;\n\n/**\n * Custom hook to determine whether a client is eligible to get more MT5 CFD accounts.\n * @returns `true` if the client is eligible to get more MT5 CFD accounts, false otherwise.\n */\nconst useCFDCanGetMoreMT5Accounts = () => {\n    const {\n        client: { isEligibleForMoreRealMt5 },\n        traders_hub: { is_eu_user, is_real },\n        modules: { cfd },\n    } = useStore();\n    const is_high_risk_client_for_mt5 = useIsClientHighRiskForMT5();\n\n    /**\n     * Check if the client has a specific type of MT5 CFD account.\n     */\n    const hasCFDAccount = (type: typeof ACCOUNT_TYPES[number]) => {\n        const current_list_keys = Object.keys(cfd.current_list);\n        return current_list_keys.some(key => key.startsWith(`${CFD_PLATFORMS.MT5}.real.${type}`));\n    };\n\n    return (\n        is_real &&\n        !is_eu_user &&\n        ACCOUNT_TYPES.some(type => hasCFDAccount(type)) &&\n        ACCOUNT_TYPES.some(type => isEligibleForMoreRealMt5(type)) &&\n        !is_high_risk_client_for_mt5\n    );\n};\n\nexport default useCFDCanGetMoreMT5Accounts;\n","import { useStore } from '@deriv/stores';\n\nconst useCashierLocked = () => {\n    const { client } = useStore();\n    const { account_status } = client;\n\n    const is_cashier_locked = account_status.status?.some(status => status === 'cashier_locked') || false;\n\n    return is_cashier_locked;\n};\n\nexport default useCashierLocked;\n","import { ContentFlag } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nconst useContentFlag = () => {\n    const { traders_hub } = useStore();\n    const content_flag = traders_hub?.content_flag;\n\n    return {\n        is_low_risk_cr_non_eu: content_flag === ContentFlag.LOW_RISK_CR_NON_EU,\n        is_low_risk_cr_eu: content_flag === ContentFlag.LOW_RISK_CR_EU,\n        is_high_risk_cr: content_flag === ContentFlag.HIGH_RISK_CR,\n        is_cr_demo: content_flag === ContentFlag.CR_DEMO,\n        is_eu_demo: content_flag === ContentFlag.EU_DEMO,\n        is_eu_real: content_flag === ContentFlag.EU_REAL,\n    };\n};\n\nexport default useContentFlag;\n","import { useEffect, useState } from 'react';\n\nconst ONE_SECOND = 1000;\n\nexport type TCountdownOptions = {\n    from: number;\n    to?: number;\n    increment?: boolean;\n};\n\nconst useCountdown = ({ from, to = 0, increment = false }: TCountdownOptions) => {\n    const [count, setCount] = useState(from);\n    const [is_running, setIsRunning] = useState(false);\n\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n\n        if (is_running) {\n            timer = setTimeout(() => {\n                if (count === to) {\n                    pause();\n                } else {\n                    setCount(old => (increment ? old + 1 : old - 1));\n                }\n            }, ONE_SECOND);\n        }\n\n        return () => clearTimeout(timer);\n    }, [count, is_running, to, increment]);\n\n    const start = () => setIsRunning(true);\n\n    const pause = () => setIsRunning(false);\n\n    const reset = () => setCount(from);\n\n    const stop = () => {\n        pause();\n        reset();\n    };\n\n    return {\n        count,\n        is_running,\n        start,\n        pause,\n        reset,\n        stop,\n    };\n};\n\nexport default useCountdown;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSubscription } from '@deriv/api';\n\ntype TTransaction = NonNullable<\n    NonNullable<ReturnType<typeof useSubscription<'cashier_payments'>>['data']>['cashier_payments']\n>['crypto'][number];\n\ntype TStatus = TTransaction['status_code'];\n\ntype TDepositStatus = 'PENDING' | 'CONFIRMED' | 'ERROR';\n\ntype TWithdrawalStatus = Exclude<TStatus, TDepositStatus>;\n\n// Since BE sends the `status_code` for both `deposit` and `withdrawal` in the same field,\n// Here we modify the BE type to make `status_code` type more specific to the `transaction_type` field.\nexport type TModifiedTransaction = Omit<TTransaction, 'status_code' | 'transaction_type'> &\n    (\n        | { transaction_type: 'deposit'; status_code: TDepositStatus }\n        | { transaction_type: 'withdrawal'; status_code: TWithdrawalStatus }\n    );\n\n/** A custom hook that returns the list of pending crypto transactions for the current user. */\nconst useCryptoTransactions = () => {\n    const { subscribe, data, ...rest } = useSubscription('cashier_payments');\n    const [transactions, setTransactions] = useState<TModifiedTransaction[]>();\n\n    useEffect(() => {\n        subscribe();\n    }, [subscribe]);\n\n    useEffect(() => {\n        setTransactions(old_transactions => {\n            // Get the list of the crypto transactions.\n            const new_transactions = data?.cashier_payments?.crypto as TModifiedTransaction[] | undefined;\n\n            // If there are no new transactions, return the old transactions.\n            if (!new_transactions) return old_transactions;\n\n            // If there are no old transactions, return the new transactions.\n            if (!old_transactions) return new_transactions;\n\n            // Make a copy of the old transactions.\n            const updated_transactions = [...old_transactions];\n\n            // For each new transaction, check if it exists in the old transactions.\n            new_transactions.forEach(new_transaction => {\n                // Find the index of the new transaction in the old transactions if exists.\n                const index = updated_transactions.findIndex(\n                    old_transaction => old_transaction.id === new_transaction.id\n                );\n\n                // If the new transaction does not exist in the old transactions, add it, otherwise update it.\n                if (index === -1) {\n                    updated_transactions.push(new_transaction);\n                } else {\n                    updated_transactions[index] = new_transaction;\n                }\n            });\n\n            // Return the updated transactions.\n            return updated_transactions;\n        });\n    }, [data?.cashier_payments?.crypto]);\n\n    // Add additional information to each transaction.\n    const modified_transactions = useMemo(\n        () =>\n            transactions?.map(transaction => ({\n                ...transaction,\n                /** Determine if the transaction is a deposit or not. */\n                is_deposit: transaction.transaction_type === 'deposit',\n                /** Determine if the transaction is a withdrawal or not. */\n                is_withdrawal: transaction.transaction_type === 'withdrawal',\n            })),\n        [transactions]\n    );\n\n    // Sort transactions by submit time.\n    const sorted_transactions = useMemo(\n        () => modified_transactions?.sort((a, b) => b.submit_date - a.submit_date),\n        [modified_transactions]\n    );\n\n    // Determine if the user has any transactions or not.\n    const has_transactions = modified_transactions && modified_transactions.length > 0;\n\n    // Get the last transaction if exists.\n    const last_transaction = modified_transactions?.[0];\n\n    return {\n        /** List of user transactions sorted by submit time. */\n        data: sorted_transactions,\n        /** Returns the last transaction if exists. */\n        last_transaction,\n        /** Determine is the user has any transactions or not. */\n        has_transactions,\n        subscribe,\n        ...rest,\n    };\n};\n\nexport default useCryptoTransactions;\n","import { useStore } from '@deriv/stores';\n\nconst useCurrentAccountDetails = () => {\n    const { client } = useStore();\n    const { account_list, loginid } = client;\n\n    return account_list.find(account => loginid === account.loginid);\n};\n\nexport default useCurrentAccountDetails;\n","import { useStore } from '@deriv/stores';\nimport useCurrencyConfig from './useCurrencyConfig';\n\n/** A custom hook to get the currency config information for the user's current currency. */\nconst useCurrentCurrencyConfig = () => {\n    const { client } = useStore();\n    const { currency } = client;\n    const { getConfig } = useCurrencyConfig();\n    const currency_config = getConfig(currency);\n\n    // Safe to do null assertion here because the user's currency is always\n    // available in the currency config object so it can't be null.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return currency_config!;\n};\n\nexport default useCurrentCurrencyConfig;\n","import { useCallback, useEffect } from 'react';\nimport { useRequest } from '@deriv/api';\n\nconst useDepositCryptoAddress = () => {\n    const { data, mutate, ...rest } = useRequest('cashier');\n    const deposit_address = typeof data?.cashier !== 'string' ? data?.cashier?.deposit?.address : undefined;\n\n    const send = useCallback(\n        () => mutate({ payload: { cashier: 'deposit', provider: 'crypto', type: 'api' } }),\n        [mutate]\n    );\n\n    useEffect(() => {\n        send();\n    }, [send]);\n\n    return {\n        ...rest,\n        resend: send,\n        data: deposit_address,\n    };\n};\n\nexport default useDepositCryptoAddress;\n","import { useCallback, useEffect } from 'react';\nimport { useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst useDepositFiatAddress = () => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const { data, mutate, ...rest } = useRequest('cashier');\n    const dark_mode = is_dark_mode_on ? 'on' : 'off';\n    const deposit_iframe_url = typeof data?.cashier === 'string' ? `${data?.cashier}&DarkMode=${dark_mode}` : undefined;\n\n    const send = useCallback(() => mutate({ payload: { cashier: 'deposit', provider: 'doughflow' } }), [mutate]);\n\n    useEffect(() => {\n        send();\n    }, [send]);\n\n    return {\n        ...rest,\n        resend: send,\n        data: deposit_iframe_url,\n    };\n};\n\nexport default useDepositFiatAddress;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedAuthentication = () => {\n    const { client, traders_hub } = useStore();\n    const { is_authentication_needed } = client;\n    const { is_low_risk_cr_eu_real } = traders_hub;\n    const is_need_authentication = is_authentication_needed && is_low_risk_cr_eu_real;\n\n    return is_need_authentication;\n};\n\nexport default useNeedAuthentication;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedFinancialAssessment = () => {\n    const { client } = useStore();\n    const { is_financial_account, is_financial_information_incomplete, is_trading_experience_incomplete } = client;\n    const is_need_financial_assessment =\n        is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\n\n    return is_need_financial_assessment;\n};\n\nexport default useNeedFinancialAssessment;\n","import { useStore } from '@deriv/stores';\n\nconst useRealSTPAccount = () => {\n    const { client } = useStore();\n    const { mt5_login_list } = client;\n    const has_real_stp_account = mt5_login_list.some(\n        item => item.account_type === 'real' && item.sub_account_type === 'financial_stp'\n    );\n\n    return has_real_stp_account;\n};\n\nexport default useRealSTPAccount;\n","import { useStore } from '@deriv/stores';\nimport useRealSTPAccount from './useRealSTPAccount';\n\nconst useNeedTNC = () => {\n    const { client } = useStore();\n    const { is_eu, is_tnc_needed } = client;\n    const has_real_stp_account = useRealSTPAccount();\n    const is_need_tnc = (is_eu || has_real_stp_account) && is_tnc_needed;\n\n    return is_need_tnc;\n};\n\nexport default useNeedTNC;\n","import { useStore } from '@deriv/stores';\nimport useNeedAuthentication from './useNeedAuthentication';\nimport useNeedFinancialAssessment from './useNeedFinancialAssessment';\nimport useNeedTNC from './useNeedTNC';\n\nconst useDepositLocked = () => {\n    const { client } = useStore();\n    const { is_deposit_lock, is_trading_experience_incomplete, landing_company_shortcode } = client;\n    const is_need_authentication = useNeedAuthentication();\n    const is_need_tnc = useNeedTNC();\n    const is_need_financial_assessment = useNeedFinancialAssessment();\n    const is_malta_invest = landing_company_shortcode === 'maltainvest';\n    const is_trading_experience_incomplete_or_need_financial_assessment = is_malta_invest\n        ? is_trading_experience_incomplete\n        : is_need_financial_assessment;\n\n    const is_deposit_locked =\n        is_deposit_lock ||\n        is_need_authentication ||\n        is_need_tnc ||\n        is_trading_experience_incomplete_or_need_financial_assessment;\n\n    return is_deposit_locked;\n};\n\nexport default useDepositLocked;\n","/* eslint-disable no-console */\nimport { useContext } from 'react';\nimport { ExchangeRatesContext } from '@deriv/stores';\n\nexport const useExchangeRate = () => {\n    const context = useContext(ExchangeRatesContext);\n\n    if (!context) {\n        throw new Error('useExchangeRate must be used within a ExchangeRatesProvider');\n    }\n    return context;\n};\n\nexport default useExchangeRate;\n","import { useMemo } from 'react';\n\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nimport useActiveWallet from './useActiveWallet';\n\ntype TAccount = {\n    cfd_type?: 'mt5' | 'dxtrade';\n\n    market_type?: 'financial' | 'synthetic' | 'all';\n};\n\nconst getAccountIcon = ({ cfd_type, market_type }: TAccount) => {\n    switch (cfd_type) {\n        case 'mt5': {\n            switch (market_type) {\n                case 'financial':\n                    return 'IcRebrandingMt5FinancialDashboard';\n                case 'synthetic':\n                    return 'IcRebrandingMt5DerivedDashboard';\n                case 'all':\n                    return 'IcRebrandingMt5SwapFree';\n                default:\n                    return 'IcRebrandingDmt5Dashboard';\n            }\n        }\n        case 'dxtrade':\n            return 'IcRebrandingDerivX';\n        default:\n            return '';\n    }\n};\n\n/**\n * @description This hook is used to get the created CFD accounts of the user.\n */\nconst useExistingCFDAccounts = () => {\n    const { traders_hub } = useStore();\n    const { combined_cfd_mt5_accounts } = traders_hub;\n    const wallet = useActiveWallet();\n    const { data: mt5, ...mt5_rest } = useFetch('mt5_login_list');\n    const { data: dxtrade, ...dxtrade_rest } = useFetch('trading_platform_accounts', {\n        payload: { platform: 'dxtrade' },\n    });\n\n    /**\n     *\n     * @description This is the modified MT5 accounts that will be used in the CFD account creation.\n     */\n    const modified_mt5_accounts = useMemo(() => {\n        const getAccountInfo = (login?: string) => {\n            return {\n                platform: wallet?.linked_to?.find(linked => linked.loginid === login)?.platform,\n                icon: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.icon,\n                description: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.description,\n                name: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.name,\n                sub_title: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.sub_title,\n                action_type: 'multi-action',\n            };\n        };\n\n        return mt5?.mt5_login_list?.map(account => ({\n            ...account,\n            ...getAccountInfo(account.login),\n            loginid: account.login,\n            transfer_icon: getAccountIcon({ cfd_type: 'mt5', ...account }),\n        }));\n    }, [mt5?.mt5_login_list, wallet?.linked_to, combined_cfd_mt5_accounts]);\n\n    const modified_dxtrade_accounts = useMemo(\n        () =>\n            dxtrade?.trading_platform_accounts?.map(account => ({\n                ...account,\n                loginid: account.account_id,\n                transfer_icon: getAccountIcon({ cfd_type: 'dxtrade' }),\n            })),\n        [dxtrade?.trading_platform_accounts]\n    );\n    const data = useMemo(\n        () => ({\n            mt5_accounts: modified_mt5_accounts || [],\n            dxtrade_accounts: modified_dxtrade_accounts || [],\n        }),\n        [modified_mt5_accounts, modified_dxtrade_accounts]\n    );\n\n    return {\n        data,\n        isSuccess: [mt5_rest.isSuccess, dxtrade_rest.isSuccess].every(Boolean),\n    };\n};\n\nexport default useExistingCFDAccounts;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst useFeatureFlags = () => {\n    const { feature_flags } = useStore();\n\n    const result = useMemo(() => {\n        // Safe to do null assertions here as we are setting default values in the store.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const flags = feature_flags.data!;\n\n        return Object.keys(flags).reduce(\n            (previous, current) => ({\n                ...previous,\n                // @ts-expect-error current key is always present in the object, Hence can ignore the TS error.\n                [`is_${current}_enabled`]: Boolean(flags[current]),\n            }),\n            {} as Record<`is_${keyof typeof flags}_enabled`, boolean>\n        );\n    }, [feature_flags.data]);\n\n    return result;\n};\nexport default useFeatureFlags;\n","import { useStore } from '@deriv/stores';\n\nconst useFiatAccountList = () => {\n    const { client } = useStore();\n    const { account_list, is_crypto } = client;\n\n    const fiat_account_list = account_list.filter(account => !account.is_virtual && !is_crypto(account.title || ''));\n\n    return fiat_account_list;\n};\n\nexport default useFiatAccountList;\n","import DocumentUploader from '@binary-com/binary-document-uploader';\nimport { useMutation } from '@deriv/api';\nimport { WS, compressImageFiles, readFiles } from '@deriv/shared';\nimport { useCallback, useMemo, useState } from 'react';\n\ntype TSettingsPayload = Partial<Parameters<ReturnType<typeof useMutation<'document_upload'>>['mutate']>[0]['payload']>;\n\ntype TFile =\n    | Partial<\n          TSettingsPayload & {\n              filename: File['name'];\n              buffer: FileReader['result'];\n              documentFormat: string;\n              file_size: File['size'];\n          }\n      >\n    | {\n          message: string;\n      };\n\ntype TUploaderResponse = {\n    [key: string]: unknown;\n    message?: string;\n    warning?: string;\n};\nconst fileReadErrorMessage = (filename: string) => {\n    return `Unable to read file ${filename}`;\n};\n\n/**\n * Custom hook to handle file uploading with the binary-document-uploader package\n */\nconst useFileUploader = () => {\n    const [error, setError] = useState<unknown>(null);\n    const uploader_instance = useMemo(() => new DocumentUploader({ connection: WS.getSocket() }), []);\n\n    const upload = useCallback(\n        async (files: File[], settings?: TSettingsPayload, onError?: () => void) => {\n            if (!files?.length) return Promise.reject(new Error('No files selected'));\n\n            return new Promise<{\n                message?: string;\n                warning?: string;\n                [key: string]: unknown;\n            }>((resolve, reject) => {\n                let is_any_file_error = false;\n                let file_error: string | null = null;\n\n                (async () => {\n                    try {\n                        const compressed_files: Blob[] = await compressImageFiles(files);\n                        const processed_files: TFile[] = await readFiles(\n                            compressed_files,\n                            fileReadErrorMessage,\n                            settings ?? {}\n                        );\n                        processed_files.forEach(file => {\n                            if (file && 'message' in file) {\n                                is_any_file_error = true;\n                                file_error = file.message;\n                                reject(file.message);\n                            }\n                        });\n                        if (is_any_file_error || !processed_files.length) {\n                            onError?.();\n                            return reject(new Error(file_error ?? 'Something went wrong!')); // don't start submitting files until all front-end validation checks pass\n                        }\n\n                        // send files\n                        const response: TUploaderResponse = await uploader_instance.upload(processed_files[0]);\n                        resolve(response);\n                    } catch (error: unknown) {\n                        setError(error);\n                        reject(error);\n                    }\n                })();\n            });\n        },\n        [uploader_instance]\n    );\n\n    return {\n        /**\n         * Error message from the file uploader\n         */\n        error,\n        /**\n         * Uploads a file to the server with the binary-document-uploader package after compressing and reading the file with meta data\n         */\n        upload,\n        /**\n         * Instance of the binary-document-uploader\n         */\n        uploader_instance,\n    };\n};\n\nexport default useFileUploader;\n","import { useStore } from '@deriv/stores';\n\nconst useGetMFAccountStatus = () => {\n    const { client } = useStore();\n    const { account_status } = client;\n    const authentication = account_status?.authentication;\n\n    const onfido_status = authentication?.identity?.services?.onfido?.status;\n    const manual_status = authentication?.identity?.services?.manual?.status;\n    const poa_status = authentication?.document?.status;\n\n    const STATUS = {\n        NONE: 'none',\n        VERIFIED: 'verified',\n        PENDING: 'pending',\n        REJECTED: 'rejected',\n        EXPIRED: 'expired',\n        SUSPECTED: 'suspected',\n    } as const;\n    const failed_cases = [STATUS.REJECTED, STATUS.EXPIRED, STATUS.SUSPECTED];\n\n    //@ts-expect-error we can ignore this error since we are checking the status and returning true or false\n    const need_poa_resubmission = poa_status && failed_cases.includes(poa_status);\n    const poa_pending = poa_status === STATUS.PENDING;\n    const poa_not_submitted = poa_status === STATUS.NONE;\n\n    const poi_verified_by_onfido_or_manual = [onfido_status, manual_status].includes(STATUS.VERIFIED);\n    const poi_pending_by_onfido_or_manual =\n        [onfido_status, manual_status].includes(STATUS.PENDING) && !poi_verified_by_onfido_or_manual;\n\n    const poi_not_submitted_by_onfido_or_manual = [onfido_status, manual_status].every(\n        status => status === STATUS.NONE\n    );\n\n    const need_poi_resubmission_by_onfido_or_manual =\n        !poi_pending_by_onfido_or_manual && !poi_not_submitted_by_onfido_or_manual && !poi_verified_by_onfido_or_manual;\n\n    if (poa_status && onfido_status && manual_status) {\n        if (need_poi_resubmission_by_onfido_or_manual || need_poa_resubmission) {\n            return 'failed';\n        } else if (poi_not_submitted_by_onfido_or_manual || poa_not_submitted) {\n            return 'needs_verification';\n        } else if (poi_pending_by_onfido_or_manual || poa_pending) {\n            return 'pending';\n        }\n    }\n    return null;\n};\n\nexport default useGetMFAccountStatus;\n","import { useStore } from '@deriv/stores';\n\nconst useHasActiveRealAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n\n    const has_active_real_account = active_accounts.some(account => account.is_virtual === 0);\n\n    return has_active_real_account;\n};\n\nexport default useHasActiveRealAccount;\n","import { useStore } from '@deriv/stores';\n\nconst useHasCryptoCurrency = () => {\n    const { client } = useStore();\n    const { account_list, is_crypto } = client;\n\n    const has_crypto_currency = account_list.some(account => is_crypto(account.title || 'USD'));\n\n    return has_crypto_currency;\n};\n\nexport default useHasCryptoCurrency;\n","import { useStore } from '@deriv/stores';\nimport useCurrencyConfig from './useCurrencyConfig';\n\nconst useHasFiatCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const { getConfig } = useCurrencyConfig();\n\n    const has_fiat_currency = account_list.some(\n        account => account.title !== 'Real' && getConfig(account.title || '')?.is_fiat\n    );\n\n    return has_fiat_currency;\n};\n\nexport default useHasFiatCurrency;\n","import { useQuery } from '@deriv/api';\nimport { useCallback, useMemo } from 'react';\n\n/** A custom hook to check whether the current mf account has deposited based on status in account_status */\nconst useHasMFAccountDeposited = () => {\n    /** Check if the status contains one of the expected status\n     * @param {string[]} status - status from account_status\n     * @returns {boolean} - true if status contains one of the expected status\n     */\n    const hasDeposited = useCallback((status?: string[]) => {\n        const expected_status = ['withdrawal_locked', 'cashier_locked'];\n        return status?.some(status => expected_status.includes(status)) ?? false;\n    }, []);\n    const { data, ...rest } = useQuery('get_account_status', {\n        options: {\n            /** Refetch account_status every 2 seconds if expected status is not in response.\n             *  This is need to be done because OneTimeDepositModal will be closed based on those status\n             */\n            refetchInterval: response => (hasDeposited(response?.get_account_status?.status) ? false : 2000),\n        },\n    });\n    const modified_account_status = useMemo(() => {\n        if (!data?.get_account_status?.status) return;\n        const has_mf_account_deposited = hasDeposited(data?.get_account_status?.status);\n        return {\n            ...data.get_account_status,\n            has_mf_account_deposited,\n        };\n    }, [data?.get_account_status, hasDeposited]);\n    return {\n        data: modified_account_status,\n        has_mf_account_deposited: modified_account_status?.has_mf_account_deposited,\n        ...rest,\n    };\n};\n\nexport default useHasMFAccountDeposited;\n","import React from 'react';\nimport { useFetch, useInvalidateQuery } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\n/**\n * A custom hook to get the p2p_config information from `website_status` endpoint\n */\nconst useP2PConfig = () => {\n    const { client } = useStore();\n    const { is_authorize, loginid } = client;\n    const { data, ...rest } = useFetch('website_status', { options: { enabled: is_authorize } });\n    const invalidate = useInvalidateQuery();\n\n    // Add additional information to the p2p config data.\n    const modified_p2p_config = React.useMemo(() => {\n        const p2p_config = data?.website_status?.p2p_config;\n\n        if (!p2p_config) return undefined;\n        return {\n            ...p2p_config,\n            /** Indicates if the payment methods feature is enabled. */\n            is_payment_methods_enabled: Boolean(p2p_config?.payment_methods_enabled),\n        };\n    }, [data?.website_status?.p2p_config]);\n\n    React.useEffect(() => {\n        invalidate('website_status');\n    }, [invalidate, loginid]);\n\n    return {\n        /** The p2p config response. */\n        data: modified_p2p_config,\n        ...rest,\n    };\n};\n\nexport default useP2PConfig;\n","import { useStore } from '@deriv/stores';\nimport useP2PConfig from './useP2PConfig';\n\nconst useHasP2PSupportedCurrencies = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const { data, ...rest } = useP2PConfig();\n\n    const real_account_currencies_list = active_accounts\n        .filter(account => !account.is_virtual)\n        .map(account => account.currency?.toLowerCase());\n\n    const has_p2p_supported_currencies = Boolean(\n        data?.supported_currencies.some((currency: string) => real_account_currencies_list.includes(currency))\n    );\n\n    return {\n        ...rest,\n        data: has_p2p_supported_currencies,\n    };\n};\n\nexport default useHasP2PSupportedCurrencies;\n","import { useStore } from '@deriv/stores';\nimport useHasActiveRealAccount from './useHasActiveRealAccount';\n\nconst useHasSetCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const has_active_real_account = useHasActiveRealAccount();\n\n    const has_real_account = account_list\n        .filter(account => !account.is_virtual)\n        .some(account => account.title !== 'Real' && account.title !== 'Investment');\n\n    const has_set_currency = has_real_account || !has_active_real_account;\n\n    return has_set_currency;\n};\n\nexport default useHasSetCurrency;\n","import { useStore } from '@deriv/stores';\n\nconst useHasSvgAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const has_svg_account = active_accounts.some(account => account.landing_company_shortcode === 'svg');\n\n    return has_svg_account;\n};\n\nexport default useHasSvgAccount;\n","import { useStore } from '@deriv/stores';\n\n/**\n * This hook is used to check if the client has a Swap-Free account.\n * It checks for availability of market_type 'all' in trading_platform_available_accounts API response\n */\nconst useHasSwapFreeAccount = () => {\n    const { client } = useStore();\n    const { trading_platform_available_accounts } = client;\n    const has_swap_free_account = trading_platform_available_accounts.some(\n        available_account => available_account.market_type === 'all'\n    );\n\n    return has_swap_free_account;\n};\n\nexport default useHasSwapFreeAccount;\n","import { useStore } from '@deriv/stores';\n\nconst useHasUSDCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n\n    const has_usd_currency = account_list.some(account => account.title === 'USD');\n\n    return has_usd_currency;\n};\n\nexport default useHasUSDCurrency;\n","import { useCallback, useEffect, useState } from 'react';\n\ntype TOptions = {\n    fraction_digits?: number;\n    with_sign?: boolean;\n};\n\nconst hasSign = (inputs: string[]) => {\n    const left = inputs[0];\n    const right = inputs.length > 1 ? inputs[1] : null;\n    const has_right = right !== null && right !== '';\n\n    // The field value is positive or negative sign or 0, So we return the new value without\n    // any calculations.\n    return ['-', '+', '0'].includes(left) && !has_right;\n};\n\nconst hasDecimalPoint = (inputs: string[], value: string) => {\n    const left = inputs[0];\n    const new_left = left.replaceAll(/[+-]/g, '');\n    const has_decimal = value.includes('.');\n\n    return new_left.startsWith('0') && new_left.length !== 1 && !has_decimal;\n};\n\nconst hasValidDecimalPlaces = (inputs: string[], fraction_digits: number) => {\n    const right = inputs.length > 1 ? inputs[1] : null;\n    const has_right = right !== null && right !== '';\n\n    return has_right && right.length > fraction_digits;\n};\n\nconst isNumber = (value: string) => !isNaN(Number(value));\nconst useInputDecimalFormatter = (initial?: number, options?: TOptions) => {\n    const [value, setValue] = useState('');\n    const { fraction_digits = 2, with_sign = false } = options || {};\n\n    const onChange = useCallback(\n        (e: DeepPartial<React.ChangeEvent<HTMLInputElement>> | React.ChangeEvent<HTMLInputElement>) => {\n            setValue(old_value => {\n                const new_value = e?.target?.value ?? '';\n                const isEmpty = new_value === '';\n\n                // The field has been cleared, So we return the new value.\n                if (isEmpty) return new_value;\n\n                const text = with_sign ? new_value : new_value.replaceAll(/[+-]/g, '');\n                const inputs = text.split('.');\n\n                if (hasSign(inputs)) return new_value;\n\n                const hasMoreDots = inputs.length > 2;\n\n                // The field contains more than one dot, So we return the old value as only one dot\n                // is allowed.\n                // The input value is not a valid number, So we return the old value.\n                if (hasMoreDots || !isNumber(new_value)) return old_value;\n\n                // The field starts with 0 but doesn't have decimal point, So we return the old value\n                // as the only valid input at this step is decimal point.\n                if (hasDecimalPoint(inputs, new_value)) return old_value;\n\n                // The field have a decimal point and decimal places are already as allowed fraction\n                // digits, So we remove the extra decimal digits from the right and return the new value.\n                if (hasValidDecimalPlaces(inputs, fraction_digits)) {\n                    const left = inputs[0];\n                    const right = inputs[1];\n                    const new_right = right.substring(0, fraction_digits);\n\n                    return `${left}.${new_right}`;\n                }\n\n                return new_value;\n            });\n        },\n        [fraction_digits, with_sign]\n    );\n\n    useEffect(() => {\n        if (initial) onChange({ target: { value: `${initial}` } });\n    }, [initial, onChange]);\n\n    return { value, onChange };\n};\n\nexport default useInputDecimalFormatter;\n","import { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { unFormatLocaleString } from '@deriv/utils';\nimport useInputDecimalFormatter from './useInputDecimalFormatter';\n\ntype TOptions = {\n    fraction_digits?: number;\n    locale?: Intl.LocalesArgument;\n};\n\nconst useInputATMFormatter = (initial?: number, options?: TOptions) => {\n    const is_pasting = useRef(false);\n    const { value, onChange: onChangeDecimal } = useInputDecimalFormatter(undefined, options);\n    const { locale, fraction_digits = 2 } = options || {};\n\n    const formatted_value = useMemo(\n        () => `${Number(value).toLocaleString(locale, { minimumFractionDigits: fraction_digits })}`,\n        [fraction_digits, locale, value]\n    );\n\n    const onChange = useCallback(\n        (e: DeepPartial<React.ChangeEvent<HTMLInputElement>> | React.ChangeEvent<HTMLInputElement>) => {\n            const new_value = e?.target?.value || '';\n            const unformatted = unFormatLocaleString(new_value, locale);\n            // @ts-expect-error shouldn't cast to number because we will lose the trailing zeros.\n            const shifted = Math.fround(unformatted * 10).toFixed(fraction_digits);\n            // @ts-expect-error shouldn't cast to number because we will lose the trailing zeros.\n            const un_shifted = Math.fround(unformatted / 10).toFixed(fraction_digits);\n            const unformatted_fraction = unformatted.split('.')?.[1]?.length || fraction_digits;\n\n            // If the user is pasting, we don't need to shift the decimal point,\n            // We just need to format the value.\n            if (is_pasting.current) {\n                is_pasting.current = false;\n                return onChangeDecimal({ target: { value: unformatted } });\n            }\n\n            // The new value has one more decimal places than the fraction_digits,\n            // so we need to shift the decimal point to the left.\n            if (unformatted_fraction - 1 === fraction_digits) {\n                return onChangeDecimal({ target: { value: shifted } });\n            }\n\n            // The new value has one less decimal places than the fraction_digits,\n            // so we need to shift the decimal point to the right.\n            if (unformatted_fraction + 1 === fraction_digits) {\n                return onChangeDecimal({ target: { value: un_shifted } });\n            }\n\n            // The new value has the same number of decimal places as the fraction_digits,\n            // so we don't need to shift the decimal point.\n            if (unformatted_fraction === fraction_digits) {\n                return onChangeDecimal({ target: { value: unformatted } });\n            }\n\n            // The new value has more decimal places than the fraction_digits,\n            // so we chop the extra decimal points.\n            if (unformatted_fraction - 1 > fraction_digits) {\n                return onChangeDecimal({ target: { value: unformatted } });\n            }\n\n            // The new value has less decimal places than the fraction_digits,\n            // so we add the missing extra decimal point.\n            if (unformatted_fraction + 1 < fraction_digits) {\n                return onChangeDecimal({ target: { value: unformatted } });\n            }\n\n            return onChangeDecimal({ target: { value: unformatted } });\n        },\n        [locale, fraction_digits, onChangeDecimal]\n    );\n\n    const onPaste: React.ClipboardEventHandler<HTMLInputElement> = useCallback(\n        e => (is_pasting.current = e.type === 'paste'),\n        []\n    );\n\n    useEffect(() => {\n        if (initial) {\n            is_pasting.current = true;\n            onChange({\n                target: {\n                    value: `${Number(initial).toLocaleString(locale, { minimumFractionDigits: fraction_digits })}`,\n                },\n            });\n        }\n    }, [fraction_digits, initial, locale, onChange]);\n\n    return { value: formatted_value, onChange, onPaste };\n};\n\nexport default useInputATMFormatter;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst AccountStatusList = [\n    'address_verified',\n    'age_verification',\n    'allow_document_upload',\n    'allow_poa_resubmission',\n    'allow_poi_resubmission',\n    'authenticated',\n    'cashier_locked',\n    'crs_tin_information',\n    'deposit_attempt',\n    'deposit_locked',\n    'df_deposit_requires_poi',\n    'disabled',\n    'document_expired',\n    'document_expiring_soon',\n    'document_under_review',\n    'dxtrade_password_not_set',\n    'financial_assessment_not_complete',\n    'financial_information_not_complete',\n    'financial_risk_approval',\n    'idv_revoked',\n    'max_turnover_limit_not_set',\n    'mt5_password_not_set',\n    'mt5_withdrawal_locked',\n    'needs_affiliate_coc_approval',\n    'no_trading',\n    'no_withdrawal_or_trading',\n    'p2p_blocked_for_pa',\n    'pa_withdrawal_explicitly_allowed',\n    'password_reset_required',\n    'personal_details_locked',\n    'poi_name_mismatch',\n    'professional',\n    'professional_requested',\n    'professional_rejected',\n    'shared_payment_method',\n    'social_signup',\n    'transfers_blocked',\n    'trading_experience_not_complete',\n    'ukgc_funds_protection',\n    'unwelcome',\n    'withdrawal_locked',\n] as const;\n\ntype TAccountStatus = typeof AccountStatusList[number];\n\n/**\n * Custom hook to check if a particular account status is present.\n * @name useIsAccountStatusPresent\n * @param status of the account to check\n * @returns boolean\n */\nconst useIsAccountStatusPresent = (status: TAccountStatus) => {\n    const {\n        client: { account_status },\n    } = useStore();\n\n    const status_list = account_status?.status;\n\n    return React.useMemo(() => status_list?.includes(status) ?? false, [status_list, status]);\n};\n\nexport default useIsAccountStatusPresent;\n","import { useStore } from '@deriv/stores';\nimport useP2PConfig from './useP2PConfig';\n\nconst useIsP2PEnabled = () => {\n    const { client, traders_hub } = useStore();\n    // Todo: to replace it with useAuthorize hook\n    const { currency, is_virtual } = client;\n    const { is_low_risk_cr_eu_real } = traders_hub;\n    const { data, ...rest } = useP2PConfig();\n\n    const is_p2p_supported_currency = Boolean(data?.supported_currencies.includes(currency.toLocaleLowerCase()));\n    const is_p2p_enabled = is_p2p_supported_currency && !is_virtual && !is_low_risk_cr_eu_real;\n\n    // Todo: should replace with the next line instead once BE is fixed.\n    // const is_p2p_enabled = data?.disabled === 0;\n\n    return {\n        ...rest,\n        data: is_p2p_enabled,\n    };\n};\n\nexport default useIsP2PEnabled;\n","import { useStore } from '@deriv/stores';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useHasSvgAccount from './useHasSvgAccount';\n\nconst useIsRealAccountNeededForCashier = () => {\n    const { traders_hub } = useStore();\n    const { is_eu_user, is_real } = traders_hub;\n\n    const has_svg_account = useHasSvgAccount();\n    const has_maltainvest_account = useHasMaltaInvestAccount();\n\n    const no_real_mf_account = has_svg_account && !has_maltainvest_account && is_eu_user;\n\n    const no_real_cr_account = !has_svg_account && has_maltainvest_account && !is_eu_user;\n\n    const is_real_account_needed = no_real_mf_account || no_real_cr_account;\n\n    const is_real_account_needed_for_cashier = is_real_account_needed && is_real;\n\n    return is_real_account_needed_for_cashier;\n};\n\nexport default useIsRealAccountNeededForCashier;\n","import { useStore } from '@deriv/stores';\n\nconst useIsSystemMaintenance = () => {\n    const { client } = useStore();\n    const { account_status } = client;\n\n    const is_system_maintenance =\n        account_status.cashier_validation?.some(validation => validation === 'system_maintenance') || false;\n\n    return is_system_maintenance;\n};\n\nexport default useIsSystemMaintenance;\n","import { useQuery } from '@deriv/api';\nimport { useMemo } from 'react';\n\ntype TUseLandingCompanyDetailsPayload = Parameters<typeof useQuery<'landing_company_details'>>['1']['payload'];\n\n/** A custom hook that returns the available landing companies of the user's country. */\nconst useLandingCompanyDetails = (payload: TUseLandingCompanyDetailsPayload) => {\n    const { data, ...rest } = useQuery('landing_company_details', {\n        payload,\n        options: { enabled: Boolean(payload.landing_company_details) },\n    });\n\n    // Add additional information to the landing company response.\n    const modified_landing_company_details = useMemo(() => {\n        if (!data?.landing_company_details) return undefined;\n\n        return { ...data.landing_company_details };\n    }, [data?.landing_company_details]);\n\n    return {\n        /** The landing company response. */\n        data: modified_landing_company_details,\n        ...rest,\n    };\n};\n\nexport default useLandingCompanyDetails;\n","import React from 'react';\nimport { getLocalStorage } from '@deriv/utils';\n\n/**\n * Hook that manages a localStorage value as a React state.\n * @template T - The generic type of the localStorage value.\n * @param {string} key - The localStorage key.\n * @param {T} [fallback_value] - Optional fallback value if the key does not exist or has no value.\n * @returns - An array containing the current value, a function to update the value, and a function to clear the value.\n */\nconst useLocalStorageData = <T>(\n    key: string,\n    fallback_value?: T\n): [T | null, React.Dispatch<React.SetStateAction<T | null>>, VoidFunction] => {\n    const [data, setData] = React.useState<T | null>(getLocalStorage(key) ?? fallback_value ?? null);\n\n    React.useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(data));\n    }, [key, data]);\n\n    const clearData = () => {\n        localStorage.removeItem(key);\n        setData(fallback_value ?? null);\n    };\n\n    return [data, setData, clearData];\n};\n\nexport default useLocalStorageData;\n","import { MT5_ACCOUNT_STATUS } from '@deriv/shared';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useGetMFAccountStatus from './useGetMFAccountStatus';\nimport { useStore } from '@deriv/stores';\n\nconst useMFAccountStatus = () => {\n    const {\n        client: { is_eu },\n    } = useStore();\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const mf_status = useGetMFAccountStatus();\n\n    const should_show_status_for_multipliers_account =\n        is_eu &&\n        has_malta_invest_account &&\n        mf_status &&\n        [MT5_ACCOUNT_STATUS.PENDING, MT5_ACCOUNT_STATUS.FAILED, MT5_ACCOUNT_STATUS.NEEDS_VERIFICATION].includes(\n            mf_status\n        );\n    return should_show_status_for_multipliers_account ? mf_status : null;\n};\n\nexport default useMFAccountStatus;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { Jurisdiction, getFormattedJurisdictionCode } from '@deriv/shared';\n\nconst useMT5SVGEligibleToMigrate = () => {\n    const { client, traders_hub } = useStore();\n    const { mt5_login_list } = client;\n    const { show_eu_related_content } = traders_hub;\n\n    const mt5_migration_config = React.useMemo(() => {\n        const svg_accounts_to_migrate = mt5_login_list.filter(\n            account => account.landing_company_short === Jurisdiction.SVG && !!account.eligible_to_migrate\n        );\n\n        const has_svg_accounts_to_migrate = !!svg_accounts_to_migrate.length && !show_eu_related_content;\n\n        const no_of_svg_accounts_to_migrate = svg_accounts_to_migrate.length;\n\n        const is_eligible_for_svg_to_bvi_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.BVI)\n        ).length;\n\n        const is_eligible_for_svg_to_vanuatu_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.VANUATU)\n        ).length;\n\n        const getEligibleAccountToMigrate = () => {\n            if (is_eligible_for_svg_to_bvi_migration) {\n                return Jurisdiction.BVI;\n            } else if (is_eligible_for_svg_to_vanuatu_migration) {\n                return Jurisdiction.VANUATU;\n            }\n        };\n        const eligible_account_to_migrate_label = getFormattedJurisdictionCode(getEligibleAccountToMigrate());\n\n        const eligible_svg_to_bvi_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_bvi_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_vanuatu_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.VANUATU\n        ).length;\n\n        const eligible_svg_to_vanuatu_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.VANUATU\n        ).length;\n\n        const has_derived_mt5_to_migrate =\n            eligible_svg_to_bvi_derived_accounts || eligible_svg_to_vanuatu_derived_accounts;\n        const has_financial_mt5_to_migrate =\n            eligible_svg_to_bvi_financial_accounts || eligible_svg_to_vanuatu_financial_accounts;\n        const has_derived_and_financial_mt5 = has_derived_mt5_to_migrate && has_financial_mt5_to_migrate;\n\n        return {\n            eligible_account_to_migrate_label,\n            eligible_svg_to_bvi_derived_accounts,\n            eligible_svg_to_bvi_financial_accounts,\n            eligible_svg_to_vanuatu_derived_accounts,\n            eligible_svg_to_vanuatu_financial_accounts,\n            getEligibleAccountToMigrate,\n            has_derived_and_financial_mt5,\n            has_derived_mt5_to_migrate,\n            has_svg_accounts_to_migrate,\n            no_of_svg_accounts_to_migrate,\n            svg_accounts_to_migrate,\n        };\n    }, [mt5_login_list, show_eu_related_content]);\n    return {\n        ...mt5_migration_config,\n    };\n};\n\nexport default useMT5SVGEligibleToMigrate;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedPOI = () => {\n    const { client } = useStore();\n    const authentication = client.account_status?.authentication;\n\n    return authentication?.needs_verification.includes('identity');\n};\n\nexport default useNeedPOI;\n","import React from 'react';\nimport { useMutation } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TNotificationEventPayload = TSocketRequestPayload<'notification_event'>['payload'];\n\n/**\n * Hook to send notification event to the server\n * @name useNotificationEvent\n * @returns response, mutation function and other properties from useRequest hook\n */\nconst useNotificationEvent = () => {\n    const { data, mutate, ...rest } = useMutation('notification_event');\n\n    /**\n     * Function to send notification event to the server\n     * @param payload - notification event payload\n     */\n    const send = React.useCallback((payload: TNotificationEventPayload) => mutate({ payload }), [mutate]);\n\n    return {\n        notification_event: data?.notification_event,\n        send,\n        ...rest,\n    };\n};\n\nexport default useNotificationEvent;\n","import { useStore } from '@deriv/stores';\n\nconst useOnrampVisible = () => {\n    const { client } = useStore();\n    const { is_virtual, is_crypto } = client;\n    const is_onramp_visible = !is_virtual && is_crypto();\n\n    return is_onramp_visible;\n};\n\nexport default useOnrampVisible;\n","import React from 'react';\nimport { useFetch } from '@deriv/api';\nimport { TSocketRequestQueryOptions } from '@deriv/api/types';\n\n/**\n * @deprecated Please use `useAdvertInfo` from the `api` package instead.\n * This custom hook returns the advert info for a specific advert by calling 'p2p_advert_info' endpoint\n */\nconst useP2PAdvertInfo = (id: string, options: TSocketRequestQueryOptions<'p2p_advert_info'>) => {\n    const { data, ...rest } = useFetch('p2p_advert_info', { payload: { id }, options });\n\n    const modified_data = React.useMemo(() => {\n        const p2p_advert_info = data?.p2p_advert_info;\n\n        if (!p2p_advert_info) return undefined;\n\n        return {\n            ...p2p_advert_info,\n            /** Determines whether the advert is a buy advert or not. */\n            is_buy: p2p_advert_info?.type === 'buy',\n            /** Determines whether the advert is a sell advert or not. */\n            is_sell: p2p_advert_info?.type === 'sell',\n        };\n    }, [data?.p2p_advert_info]);\n\n    return {\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useP2PAdvertInfo;\n","import React from 'react';\nimport { useInfiniteQuery } from '@deriv/api';\n\n/**\n * This custom hook returns available adverts for use with 'p2p_order_create' by calling 'p2p_advert_list' endpoint\n */\nconst useP2PAdvertList = (\n    payload?: NonNullable<Parameters<typeof useInfiniteQuery<'p2p_advert_list'>>[1]>['payload'],\n    config?: { enabled?: boolean }\n) => {\n    const { data, fetchNextPage, ...rest } = useInfiniteQuery('p2p_advert_list', {\n        payload: { ...payload, offset: payload?.offset || 0, limit: payload?.limit || 50 },\n        options: {\n            getNextPageParam: (lastPage, pages) => {\n                if (!lastPage?.p2p_advert_list?.list) return;\n\n                return pages.length;\n            },\n            enabled: config?.enabled === undefined || config.enabled,\n            refetchOnWindowFocus: false,\n        },\n    });\n\n    // Flatten the data array.\n    const flatten_data = React.useMemo(() => {\n        if (!data?.pages?.length) return;\n\n        return data?.pages?.flatMap(page => page?.p2p_advert_list?.list);\n    }, [data?.pages]);\n\n    // Add additional information to the 'p2p_advert_list' data\n    const modified_data = React.useMemo(() => {\n        if (!flatten_data?.length) return undefined;\n\n        return flatten_data.map(advert => ({\n            ...advert,\n            /** Determine if the rate is floating or fixed */\n            is_floating: advert?.rate_type === 'float',\n            /** The advert creation time in epoch. */\n            created_time: advert?.created_time ? new Date(advert.created_time) : undefined,\n        }));\n    }, [flatten_data]);\n\n    return {\n        /** The 'p2p_advert_list' response. */\n        data: modified_data,\n        loadMoreAdverts: fetchNextPage,\n        ...rest,\n    };\n};\n\nexport default useP2PAdvertList;\n","import { useCallback, useMemo } from 'react';\nimport { useFetch, useInvalidateQuery, useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\ntype TPayloads = NonNullable<\n    NonNullable<Parameters<ReturnType<typeof useRequest<'p2p_advertiser_payment_methods'>>['mutate']>[0]>['payload']\n>;\ntype TCreatePayload = NonNullable<TPayloads['create']>[0];\ntype TUpdatePayload = NonNullable<TPayloads['update']>[0];\n\nconst type_to_icon_mapper = {\n    bank: 'IcCashierBankTransfer',\n    other: 'IcCashierOther',\n    ewallet: 'IcCashierEwallet',\n};\n\n/** A custom hook to fetch, create, update, and delete p2p advertiser payment methods */\nconst useP2PAdvertiserPaymentMethods = () => {\n    const invalidate = useInvalidateQuery();\n    const { client } = useStore();\n    const { is_authorize } = client;\n    const { mutate, ...mutate_rest } = useRequest('p2p_advertiser_payment_methods', {\n        onSuccess: () => invalidate('p2p_advertiser_payment_methods'),\n    });\n    const { data, ...rest } = useFetch('p2p_advertiser_payment_methods', {\n        options: { enabled: is_authorize },\n    });\n\n    // Modify the response to add additional informations\n    const modified_data = useMemo(() => {\n        const p2p_advertiser_payment_methods = data?.p2p_advertiser_payment_methods;\n\n        if (!p2p_advertiser_payment_methods) return undefined;\n\n        return Object.keys(p2p_advertiser_payment_methods).map(key => {\n            const advertiser_payment_method = p2p_advertiser_payment_methods[key];\n\n            return {\n                ...advertiser_payment_method,\n                /** Icon for each payment method based on the type */\n                icon: type_to_icon_mapper[advertiser_payment_method.type],\n                /** The id of payment method */\n                id: key,\n            };\n        });\n    }, [data]);\n\n    const create = useCallback((values: TCreatePayload) => mutate({ payload: { create: [{ ...values }] } }), [mutate]);\n\n    const update = useCallback(\n        (id: string, values: TUpdatePayload) => mutate({ payload: { update: { [id]: { ...values } } } }),\n        [mutate]\n    );\n\n    const delete_payment_method = useCallback((id: number) => mutate({ payload: { delete: [id] } }), [mutate]);\n\n    return {\n        /** The list of p2p advertiser payment methods */\n        data: modified_data,\n        /** Sends a request to create new p2p advertiser payment method */\n        create,\n        /** Sends a request to update existing p2p advertiser payment method */\n        update,\n        /** Sends a request to delete existing p2p advertiser payment method */\n        delete: delete_payment_method,\n        ...rest,\n        mutation: mutate_rest,\n    };\n};\n\nexport default useP2PAdvertiserPaymentMethods;\n","import { useSubscription } from '@deriv/api';\n\n/** A custom hook to subscribe to p2p_order_list */\nconst useP2POrderList = () => {\n    const { data, ...rest } = useSubscription('p2p_order_list');\n\n    return {\n        /** List of p2p orders for the current user */\n        data,\n        ...rest,\n    };\n};\n\nexport default useP2POrderList;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport useP2POrderList from './useP2POrderList';\n\nconst useP2PCompletedOrdersNotification = () => {\n    const { subscribe, data, unsubscribe, isSubscribed } = useP2POrderList();\n    const { client, notifications } = useStore();\n    const { is_authorize, is_p2p_enabled } = client;\n\n    React.useEffect(() => {\n        if (is_authorize && is_p2p_enabled) {\n            subscribe({\n                payload: {\n                    active: 0,\n                },\n            });\n        }\n        return () => {\n            isSubscribed && unsubscribe();\n        };\n    }, [isSubscribed, is_authorize, is_p2p_enabled, subscribe, unsubscribe]);\n\n    React.useEffect(() => {\n        if (data?.p2p_order_list?.list.length && data?.p2p_order_list?.list !== notifications.p2p_completed_orders) {\n            notifications.p2p_completed_orders = data.p2p_order_list.list;\n        }\n        // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n        else if (data?.p2p_order_info) {\n            if (notifications?.p2p_completed_orders) {\n                // replace order if order id is in the list\n                // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                if (notifications?.p2p_completed_orders.some(order => order.id === data.p2p_order_info.id)) {\n                    const index = notifications?.p2p_completed_orders.findIndex(\n                        // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                        order => order.id === data.p2p_order_info.id\n                    );\n                    // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                    notifications?.p2p_completed_orders.splice(index, 1, data.p2p_order_info);\n                }\n                // add order if order id is not in the list\n                else {\n                    // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                    notifications?.p2p_completed_orders.unshift(data.p2p_order_info);\n                }\n            }\n        }\n        notifications?.p2p_completed_orders?.sort((a, b) => {\n            return (b.completion_time || 0) - (a.completion_time || 0);\n        });\n    }, [data, notifications]);\n};\n\nexport default useP2PCompletedOrdersNotification;\n","import React from 'react';\nimport useExchangeRate from './useExchangeRate';\n\nconst useP2PExchangeRate = (local_currency: string) => {\n    const { handleSubscription, exchange_rates } = useExchangeRate();\n\n    React.useEffect(() => {\n        handleSubscription('USD', local_currency);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [local_currency]);\n\n    const exchange_rate = exchange_rates?.USD?.[local_currency] ?? 1;\n\n    return exchange_rate;\n};\n\nexport default useP2PExchangeRate;\n","import { useEffect, useState } from 'react';\nimport { useStore } from '@deriv/stores';\n\ntype TNotification = {\n    order_id: string;\n    is_seen: boolean;\n    is_active: boolean;\n};\n\ntype TClientData = {\n    is_cached: boolean;\n    notifications: TNotification[];\n};\n\ntype TP2PSettings = Record<string, TClientData>;\n\nconst useP2PNotificationCount = () => {\n    const [p2p_settings, setP2PSettings] = useState<TP2PSettings>(\n        JSON.parse(localStorage.getItem('p2p_settings') || '{}')\n    );\n    const { client } = useStore();\n    const { loginid } = client;\n    const notifications = loginid ? p2p_settings[loginid]?.notifications : null;\n\n    useEffect(() => {\n        const onStorageChanged = () => {\n            const data = localStorage.getItem('p2p_settings');\n\n            if (data) {\n                setP2PSettings(JSON.parse(data));\n            }\n        };\n\n        window.addEventListener('storage', onStorageChanged);\n\n        return () => {\n            window.removeEventListener('storage', onStorageChanged);\n        };\n    }, []);\n\n    const p2p_notification_count = notifications?.filter(notification => !notification.is_seen).length || 0;\n\n    return p2p_notification_count;\n};\n\nexport default useP2PNotificationCount;\n","import React from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst type_to_icon_mapper = {\n    bank: 'IcCashierBankTransfer',\n    other: 'IcCashierOther',\n    ewallet: 'IcCashierEwallet',\n};\n\n/**\n * @deprecated This hook is deprecated. Please use the one from the `api` package instead.\n * A custom hook that return the list of P2P available payment methods */\nconst useP2PPaymentMethods = () => {\n    const { client } = useStore();\n    const { is_authorize } = client;\n\n    const { data, ...rest } = useFetch('p2p_payment_methods', { options: { enabled: is_authorize } });\n\n    // Modify the data to add additional information.\n    const modified_data = React.useMemo(() => {\n        const p2p_payment_methods = data?.p2p_payment_methods;\n\n        if (!p2p_payment_methods) return undefined;\n\n        return Object.keys(p2p_payment_methods).map(key => {\n            const payment_method = p2p_payment_methods[key];\n            const fields = Object.keys(payment_method.fields).map(field_key => payment_method.fields[field_key]);\n\n            return {\n                ...payment_method,\n                /** Payment method field definitions. */\n                fields,\n                /** Icon for each payment method based on the type */\n                icon: type_to_icon_mapper[payment_method.type],\n                /** Payment method id */\n                id: key,\n            };\n        });\n    }, [data]);\n\n    return {\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useP2PPaymentMethods;\n","import { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst usePaymentAgentList = (currency?: string) => {\n    const { client } = useStore();\n    const { residence } = client;\n\n    const { data, ...rest } = useFetch('paymentagent_list', {\n        payload: { paymentagent_list: residence, currency },\n        options: { enabled: Boolean(residence) },\n    });\n\n    return {\n        data: data?.paymentagent_list?.list,\n        ...rest,\n    };\n};\n\nexport default usePaymentAgentList;\n","import { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst usePaymentAgentTransferVisible = () => {\n    const { client } = useStore();\n    const { is_authorize } = client;\n\n    const { data, ...rest } = useFetch('get_settings', { options: { enabled: is_authorize } });\n\n    const is_payment_agent_transfer_visible = Boolean(data?.get_settings?.is_authenticated_payment_agent);\n\n    return {\n        data: is_payment_agent_transfer_visible,\n        ...rest,\n    };\n};\n\nexport default usePaymentAgentTransferVisible;\n","import { useStore } from '@deriv/stores';\n\n/**\n * we can use this hook to get the platform demo account.\n * it loops through the all of user's accounts, finds and returns demo account\n */\n\nconst usePlatformDemoAccount = () => {\n    const { client } = useStore();\n    const { accounts } = client;\n    const account_list = Object.keys(accounts).map(loginid => ({\n        ...accounts[loginid],\n        loginid,\n    }));\n\n    const platform_demo_account = account_list.find(account => account.is_virtual);\n\n    return platform_demo_account;\n};\n\nexport default usePlatformDemoAccount;\n","import { useStore } from '@deriv/stores';\n\n/**\n * we can use this hook to get all real accounts for both Eu and Non-Eu regions.\n * it loops through the accounts list and returns all real accounts\n */\n\nconst usePlatformRealAccounts = () => {\n    const { client, traders_hub } = useStore();\n    const { accounts } = client;\n    const { is_eu_user } = traders_hub;\n    const account_list = Object.keys(accounts).map(loginid => ({\n        ...accounts[loginid],\n        loginid,\n    }));\n\n    const platform_real_accounts = account_list.filter(account => {\n        const is_maltainvest =\n            'landing_company_shortcode' in account && account.landing_company_shortcode === 'maltainvest';\n\n        if (account.is_virtual) return false;\n        if (!is_eu_user) return !is_maltainvest;\n\n        return is_maltainvest;\n    });\n\n    return platform_real_accounts;\n};\n\nexport default usePlatformRealAccounts;\n","import usePlatformDemoAccount from './usePlatformDemoAccount';\nimport usePlatformRealAccounts from './usePlatformRealAccounts';\n\n/**\n * this is a wrapper hook for usePlatformDemoAccount and usePlatformRealAccounts\n * and it returns different platform accounts which are demo, and real\n */\nconst usePlatformAccounts = () => {\n    const platform_demo_account = usePlatformDemoAccount();\n    const platform_real_accounts = usePlatformRealAccounts();\n\n    return {\n        demo: platform_demo_account,\n        real: platform_real_accounts,\n    };\n};\n\nexport default usePlatformAccounts;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TServiceTokenPayload = TSocketRequestPayload<'service_token'>['payload'];\n\n/**\n * Hook to get the service token for using 3rd party SDK\n * @name useServiceToken\n * @param payload to be sent while making the API call\n * @returns response and its status\n */\nconst useServiceToken = (payload: TServiceTokenPayload) => {\n    const { data, ...rest } = useQuery('service_token', {\n        payload,\n        options: { retry: 3, enabled: Boolean(payload) },\n    });\n\n    return {\n        service_token: data?.service_token,\n        ...rest,\n    };\n};\n\nexport default useServiceToken;\n","import { useFetch } from '@deriv/api';\n/**\n * Custom hook to get states list for a particular country.\n * @returns an object with the states list and the options to manage API response.\n */\nconst useStatesList = (country: string) => {\n    const { data, ...rest } = useFetch('states_list', {\n        // @ts-expect-error The `states_list` type from `@deriv/api-types` is not correct.\n        // The type should be `string`, but it's an alias to string type.\n        payload: { states_list: country },\n    });\n\n    return { ...rest, data: data?.states_list ?? [] };\n};\n\nexport default useStatesList;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst currency_to_icon_mapper: Record<string, Record<'light' | 'dark', string>> = {\n    Demo: {\n        dark: 'IcWalletDerivDemoDark',\n        light: 'IcWalletDerivDemoLight',\n    },\n    USD: {\n        dark: 'IcWalletCurrencyUsd',\n        light: 'IcWalletCurrencyUsd',\n    },\n    EUR: {\n        dark: 'IcWalletCurrencyEur',\n        light: 'IcWalletCurrencyEur',\n    },\n    AUD: {\n        dark: 'IcWalletCurrencyAud',\n        light: 'IcWalletCurrencyAud',\n    },\n    GBP: {\n        dark: 'IcWalletCurrencyGbp',\n        light: 'IcWalletCurrencyGbp',\n    },\n    BTC: {\n        dark: 'IcWalletBitcoinDark',\n        light: 'IcWalletBitcoinLight',\n    },\n    ETH: {\n        dark: 'IcWalletEthereumDark',\n        light: 'IcWalletEthereumLight',\n    },\n    USDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    eUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    tUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    UST: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    LTC: {\n        dark: 'IcWalletLiteCoinDark',\n        light: 'IcWalletLiteCoinLight',\n    },\n    USDC: {\n        dark: 'IcWalletUsdCoinDark',\n        light: 'IcWalletUsdCoinLight',\n    },\n};\n\n/** A custom hook to get the list of wallets for the current user. */\nconst useStoreWalletAccountsList = () => {\n    const { client } = useStore();\n    const { accounts, is_crypto } = client;\n\n    // Add additional information to each wallet.\n    const wallets = useMemo(() => {\n        return Object.keys(accounts)\n            ?.filter(id => accounts?.[id].account_category === 'wallet')\n            ?.map(id => {\n                const wallet = accounts?.[id];\n\n                const loginid = id;\n                const currency = wallet.currency;\n                const is_disabled = Boolean(wallet.is_disabled);\n                const is_virtual = Boolean(wallet.is_virtual);\n\n                const fiat_or_crypto = is_crypto(currency) ? 'crypto' : 'fiat';\n                const icon_type = is_virtual ? 'demo' : fiat_or_crypto;\n                const landing_company_name = wallet.landing_company_name?.replace('maltainvest', 'malta');\n                const is_malta_wallet = landing_company_name === 'malta';\n                const dtrade_loginid = wallet?.linked_to?.find(account => account?.platform === 'dtrade')?.loginid;\n                const dtrade_balance = accounts?.[dtrade_loginid ?? '']?.balance;\n\n                const wallet_currency_type = is_virtual ? 'Demo' : currency || '';\n                const icons = currency_to_icon_mapper[wallet_currency_type];\n\n                const gradients = {\n                    /** The gradient class name for the wallet header background. */\n                    header: {\n                        dark: `wallet-header__${wallet_currency_type.toLowerCase()}-bg--dark`,\n                        light: `wallet-header__${wallet_currency_type.toLowerCase()}-bg`,\n                    },\n                    /** The gradient class name for the wallet card background. */\n                    card: {\n                        dark: `wallet-card__${wallet_currency_type.toLowerCase()}-bg--dark`,\n                        light: `wallet-card__${wallet_currency_type.toLowerCase()}-bg`,\n                    },\n                };\n\n                return {\n                    ...wallet,\n                    dtrade_loginid,\n                    dtrade_balance,\n                    icons,\n                    icon_type,\n                    is_disabled,\n                    is_virtual,\n                    is_malta_wallet,\n                    landing_company_name,\n                    loginid,\n                    gradients,\n                } as const;\n            });\n    }, [accounts, is_crypto]);\n\n    // Sort wallet accounts alphabetically by fiat, crypto, then virtual.\n    const sorted_wallets = useMemo(() => {\n        if (!wallets) return;\n\n        return [...wallets].sort((a, b) => {\n            if (a.is_virtual !== b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                return is_crypto(a.currency) ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n    }, [is_crypto, wallets]);\n\n    return {\n        /** List of wallets for current user. */\n        data: sorted_wallets,\n        /** Indicating whether the user has a wallet */\n        has_wallet: sorted_wallets && sorted_wallets.length > 0,\n    };\n};\n\nexport default useStoreWalletAccountsList;\n","import { useMemo } from 'react';\nimport useStoreWalletAccountsList from './useStoreWalletAccountsList';\n\ntype TLinkedAccount = {\n    loginid?: string;\n    platform?: 'ctrader' | 'derivez' | 'dtrade' | 'dwallet' | 'dxtrade' | 'mt5';\n};\n\ntype TReturnObjectType = {\n    [key in Exclude<TLinkedAccount['platform'], undefined>]: TLinkedAccount[];\n};\n\n/** A custom hook to get the list of linked accounts of all wallets */\nconst useStoreLinkedWalletsAccounts = () => {\n    const { data: wallets_list } = useStoreWalletAccountsList();\n\n    // define object with accounts\n    const linked_trading_accounts = useMemo(() => {\n        const linked_accounts: TReturnObjectType = {\n            ctrader: [],\n            derivez: [],\n            dtrade: [],\n            dwallet: [],\n            dxtrade: [],\n            mt5: [],\n        };\n\n        wallets_list?.forEach(account => {\n            const linked = account.linked_to;\n\n            linked?.forEach(linked_to_account => {\n                if (linked_to_account?.platform && linked_to_account?.loginid)\n                    linked_accounts[linked_to_account.platform].push(linked_to_account);\n            });\n        });\n\n        return linked_accounts;\n    }, [wallets_list]);\n\n    /** List of wallets for current user. */\n    return linked_trading_accounts;\n};\n\nexport default useStoreLinkedWalletsAccounts;\n","import { useStore } from '@deriv/stores';\nimport usePlatformAccounts from './usePlatformAccounts';\n\nconst useRealTotalAssetCurrency = () => {\n    const { client, traders_hub } = useStore();\n    const { current_fiat_currency, is_crypto, currency, default_currency } = client;\n    const { is_eu_user } = traders_hub;\n    const { real: platform_real_accounts } = usePlatformAccounts();\n\n    if (!platform_real_accounts.length) return default_currency;\n\n    const non_crypto_accounts = platform_real_accounts.find(account => !is_crypto(account.currency || 'USD'));\n\n    if (non_crypto_accounts) return non_crypto_accounts?.currency || '';\n\n    const currency_if_is_crypto = is_eu_user\n        ? current_fiat_currency || default_currency\n        : platform_real_accounts[0].currency;\n\n    return is_crypto() ? currency_if_is_crypto : currency;\n};\n\nexport default useRealTotalAssetCurrency;\n","import useRealTotalAssetCurrency from './useTotalAssetCurrency';\nimport { useExchangeRate } from './useExchangeRate';\n/**\n * we can use this hook to get the total balance of the given accounts list.\n * it loops through the accounts list and adds the balance of each account\n * to the total balance, it also converts the balance to the currency of the\n * first account in the list\n */\ntype TUseTotalAccountBalance = {\n    balance?: number;\n    currency?: string;\n    account_type?: string;\n};\n\nconst useTotalAccountBalance = (accounts: TUseTotalAccountBalance[]) => {\n    const total_assets_real_currency = useRealTotalAssetCurrency();\n    const { handleSubscription, exchange_rates } = useExchangeRate();\n\n    if (!accounts.length) return { balance: 0, currency: total_assets_real_currency };\n\n    const balance = accounts.reduce((total, account) => {\n        const new_base = account?.account_type === 'demo' ? 'USD' : total_assets_real_currency || '';\n        const new_target = account.currency || total_assets_real_currency || '';\n\n        let new_rate = 1;\n        if (new_base === '' || new_target === '') new_rate = 1;\n        else if (new_base !== new_target) handleSubscription(new_base, new_target);\n\n        if (exchange_rates && exchange_rates[new_base]) new_rate = exchange_rates[new_base][new_target] || 1;\n\n        return total + (account.balance || 0) / new_rate;\n    }, 0);\n\n    return {\n        balance,\n        currency: total_assets_real_currency,\n    };\n};\n\nexport default useTotalAccountBalance;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\nimport { useFetch, useQuery } from '@deriv/api';\nimport useActiveWallet from './useActiveWallet';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport useExistingCFDAccounts from './useExistingCFDAccounts';\nimport useWalletsList from './useWalletsList';\n\ntype TAccount = NonNullable<\n    NonNullable<ReturnType<typeof useQuery<'transfer_between_accounts'>>['data']>['accounts']\n>[number] & { account_category: 'wallet' | 'trading' };\n\nconst useTransferBetweenAccounts = () => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n\n    const active_wallet = useActiveWallet();\n\n    const { data: wallets } = useWalletsList();\n\n    const { getConfig } = useCurrencyConfig();\n\n    const trading_apps_icon = is_dark_mode_on ? 'IcWalletOptionsDark' : 'IcWalletOptionsLight';\n\n    const {\n        data: { dxtrade_accounts, mt5_accounts },\n        isSuccess: is_cfd_accounts_loaded,\n    } = useExistingCFDAccounts();\n\n    const { data, ...rest } = useFetch('transfer_between_accounts', {\n        payload: { accounts: 'all' },\n        options: { enabled: is_cfd_accounts_loaded },\n    });\n\n    const modified_transfer_accounts = useMemo(() => {\n        const all_linked_cfd_accounts = [...dxtrade_accounts, ...mt5_accounts];\n\n        const getAccountType = (is_demo?: number, currency?: string): 'fiat' | 'crypto' | 'demo' => {\n            if (is_demo) return 'demo';\n            return getConfig(currency || '')?.is_crypto ? 'crypto' : 'fiat';\n        };\n\n        const accounts = (data?.accounts as TAccount[])?.map(account => {\n            return {\n                ...account,\n                active_wallet_icon: active_wallet?.icon,\n                balance: parseFloat(\n                    Number(account.balance).toFixed(getConfig(account.currency || '')?.fractional_digits)\n                ),\n                display_currency_code: getConfig(account.currency || '')?.display_code,\n                is_demo: Boolean(account?.demo_account),\n                shortcode: active_wallet?.landing_company_name,\n                type: getAccountType(account.demo_account, account.currency),\n            };\n        });\n\n        return {\n            trading_accounts:\n                accounts?.reduce(\n                    (trading_accounts, account) => {\n                        if (account.account_category === 'wallet') return trading_accounts;\n                        if (!account.loginid) return trading_accounts;\n\n                        const cfd_icon = all_linked_cfd_accounts.find(\n                            cfd_account => account.loginid && cfd_account.loginid?.includes(account.loginid)\n                        )?.transfer_icon;\n\n                        trading_accounts[account.loginid] = {\n                            ...account,\n                            gradient_class: active_wallet?.gradient_card_class,\n                            icon: account.account_category === 'trading' ? trading_apps_icon : cfd_icon,\n                            ...(account.account_type === 'mt5' && {\n                                mt5_market_type: mt5_accounts?.find(\n                                    mt5_account => account.loginid && mt5_account.loginid?.includes(account.loginid)\n                                )?.market_type,\n                            }),\n                        };\n\n                        return trading_accounts;\n                    },\n                    {} as Record<\n                        string,\n                        NonNullable<\n                            typeof accounts[number] & {\n                                gradient_class?: `wallet-card__${string}`;\n                                icon?: string;\n                                mt5_market_type?: 'all' | 'financial' | 'synthetic';\n                            }\n                        >\n                    >\n                ) || {},\n            wallet_accounts:\n                accounts?.reduce(\n                    (wallet_accounts, wallet) => {\n                        if (wallet.account_category !== 'wallet') return wallet_accounts;\n                        if (!wallet.loginid) return wallet_accounts;\n\n                        const available_wallet = wallets?.find(acc => acc.loginid === wallet.loginid);\n\n                        wallet_accounts[wallet.loginid] = {\n                            ...wallet,\n                            icon: available_wallet?.icon,\n                            gradient_class: available_wallet?.gradient_card_class,\n                        };\n\n                        return wallet_accounts;\n                    },\n                    {} as Record<\n                        string,\n                        NonNullable<\n                            typeof accounts[number] & {\n                                gradient_class?: `wallet-card__${string}`;\n                                icon?: string;\n                            }\n                        >\n                    >\n                ) || {},\n        };\n    }, [\n        active_wallet?.gradient_card_class,\n        active_wallet?.icon,\n        active_wallet?.landing_company_name,\n        data?.accounts,\n        dxtrade_accounts,\n        getConfig,\n        mt5_accounts,\n        trading_apps_icon,\n        wallets,\n    ]);\n\n    const modified_active_wallet = useMemo(() => {\n        return active_wallet?.loginid\n            ? {\n                  ...modified_transfer_accounts.wallet_accounts[active_wallet?.loginid],\n              }\n            : undefined;\n    }, [active_wallet?.loginid, modified_transfer_accounts.wallet_accounts]);\n\n    return {\n        ...rest,\n        active_wallet: modified_active_wallet,\n        trading_accounts: modified_transfer_accounts.trading_accounts,\n        wallet_accounts: modified_transfer_accounts.wallet_accounts,\n    };\n};\n\nexport default useTransferBetweenAccounts;\n","import { useCallback, useState } from 'react';\nimport { useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useCountdown from './useCountdown';\n\nconst RESEND_COUNTDOWN = 60;\n\n/**\n * @deprecated Please use useVerifyEmail from @deriv/api instead\n */\nconst useVerifyEmail = (\n    type: Parameters<ReturnType<typeof useRequest<'verify_email'>>['mutate']>[0]['payload']['type']\n) => {\n    const WS = useRequest('verify_email');\n    const counter = useCountdown({ from: RESEND_COUNTDOWN });\n    const { client } = useStore();\n    const [sent_count, setSentCount] = useState(0);\n\n    const send = useCallback(\n        (email?: Parameters<ReturnType<typeof useRequest<'verify_email'>>['mutate']>[0]['payload']['verify_email']) => {\n            const request_email = email ?? client.email;\n            if (!request_email) return;\n            if (counter.is_running) return;\n\n            counter.reset();\n            counter.start();\n\n            setSentCount(count => count + 1);\n\n            WS.mutate({ payload: { verify_email: request_email, type } });\n        },\n        [WS, client.email, counter, type]\n    );\n\n    return {\n        is_loading: WS.isLoading,\n        error: WS.error,\n        data: WS.data,\n        counter: counter.count,\n        is_counter_running: counter.is_running,\n        sent_count,\n        has_been_sent: sent_count !== 0,\n        send,\n    };\n};\n\nexport default useVerifyEmail;\n","import { useCallback } from 'react';\nimport { useAuthorize, useFetch, useInvalidateQuery, useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\n/** A custom hook to get the status of wallet_migration API and to start/reset the migration process\n * @deprecated This hook is deprecated. Please use the hook from @deriv/api instead.\n */\nconst useWalletMigration = () => {\n    // TODO: delete it later, it's a temporary solution\n    // because we have to check for authorize from client store before doing API call\n    // This hook will be refactored later for subscribe when BE is ready\n    const { client } = useStore();\n    const { is_authorize } = client;\n\n    const invalidate = useInvalidateQuery();\n\n    /** Make a request to wallet_migration API and onSuccess it will invalidate the cached data  */\n    const { mutate } = useRequest('wallet_migration', { onSuccess: () => invalidate('wallet_migration') });\n\n    const { isSuccess } = useAuthorize();\n\n    /** Fetch the wallet_migration API and refetch it every second if the status is in_progress */\n    const { data } = useFetch('wallet_migration', {\n        payload: { wallet_migration: 'state' },\n        options: {\n            refetchInterval: response => (response?.wallet_migration?.state === 'in_progress' ? 500 : false),\n            // delete it later\n            enabled: is_authorize && isSuccess,\n        },\n    });\n\n    const start_migration = useCallback(() => mutate({ payload: { wallet_migration: 'start' } }), [mutate]);\n\n    const reset_migration = useCallback(() => mutate({ payload: { wallet_migration: 'reset' } }), [mutate]);\n\n    const state = data?.wallet_migration?.state;\n\n    return {\n        /** The status of the wallet_migration API */\n        state,\n        /** A boolean to check if the status is not_eligible */\n        is_ineligible: state === 'ineligible',\n        /** A boolean to check if the status is eligible */\n        is_eligible: state === 'eligible',\n        /** A boolean to check if the status is in_progress */\n        is_in_progress: state === 'in_progress',\n        /** A boolean to check if the status is completed */\n        is_migrated: state === 'migrated',\n        /** A boolean to check if the status is failed */\n        is_failed: state === 'failed',\n        /** Sends a request to wallet_migration API to start the migration process */\n        start_migration,\n        /** Sends a request to wallet_migration API to reset the migration process */\n        reset_migration,\n    };\n};\n\nexport default useWalletMigration;\n","import { useCallback, useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\nimport { getWalletCurrencyIcon } from '@deriv/utils';\nimport useActiveWallet from './useActiveWallet';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport usePlatformAccounts from './usePlatformAccounts';\nimport useWalletsList from './useWalletsList';\n\nconst trading_accounts_display_prefixes = {\n    standard: 'Deriv Apps',\n    mt5: 'MT5',\n    dxtrade: 'Deriv X',\n    binary: 'Binary',\n} as const;\n\nconst landing_company_display_shortcodes = {\n    svg: 'SVG',\n    malta: 'Malta',\n} as const;\n\nconst useWalletTransactions = (\n    action_type: '' | 'deposit' | 'withdrawal' | 'initial_fund' | 'reset_balance' | 'transfer'\n) => {\n    const {\n        client: { loginid, landing_company_shortcode: shortcode },\n        ui: { is_dark_mode_on },\n    } = useStore();\n    const { data: wallets } = useWalletsList();\n    const current_wallet = useActiveWallet();\n    let { demo: demo_platform_account } = usePlatformAccounts();\n    const { real: real_platform_accounts } = usePlatformAccounts();\n\n    // TODO remove these mocks when we're to switch to API data\n    demo_platform_account = {\n        account_category: 'trading',\n        account_type: 'standard',\n        currency: 'USD',\n        loginid: 'VRTCMOCK0001',\n        is_virtual: 1,\n        landing_company_shortcode: shortcode as 'svg' | 'malta',\n        token: '',\n    };\n    real_platform_accounts.push({\n        account_category: 'trading',\n        account_type: 'standard',\n        currency: 'USD',\n        loginid: 'CRMOCK0001',\n        is_virtual: 0,\n        landing_company_shortcode: shortcode as 'svg' | 'malta',\n        token: '',\n    });\n    if (wallets && current_wallet)\n        wallets.push({\n            account_type: 'crypto',\n            balance: 0,\n            currency: 'BTC',\n            gradient_header_class: 'wallet-header__btc-bg',\n            gradient_card_class: `wallet-card__btc-bg${is_dark_mode_on ? '--dark' : ''}`,\n            is_demo: !!current_wallet.is_virtual,\n            is_disabled: 0,\n            is_malta_wallet: false,\n            is_selected: false,\n            is_virtual: current_wallet.is_virtual,\n            landing_company_name: 'svg',\n            loginid: 'CRWMOCK00042',\n            currency_config: undefined,\n            icon: 'IcWalletCurrencyBtc',\n            wallet_currency_type: 'BTC',\n        });\n    const accounts = useMemo(\n        () => [demo_platform_account, ...real_platform_accounts],\n        [demo_platform_account, real_platform_accounts]\n    );\n    const { getConfig } = useCurrencyConfig();\n\n    const getTradingAccountName = useCallback(\n        (\n            account_type: 'standard' | 'mt5' | 'dxtrade' | 'binary',\n            is_virtual: boolean,\n            landing_company_shortcode: 'svg' | 'malta'\n        ) => {\n            return `${trading_accounts_display_prefixes[account_type]} ${\n                is_virtual ? 'Demo' : `(${landing_company_display_shortcodes[landing_company_shortcode]})`\n            } account`;\n        },\n        []\n    );\n\n    // TODO remove this mock when we're to switch to API data\n    const mock_transactions = current_wallet?.is_virtual\n        ? [\n              {\n                  action_type: 'transfer',\n                  amount: 5,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'VRTCMOCK0001',\n                  },\n                  app_id: {},\n                  balance_after: 9995,\n                  transaction_id: 17494415484,\n                  transaction_time: 1685942139,\n              },\n              {\n                  action_type: 'reset_balance',\n                  amount: 350,\n                  balance_after: 10000,\n                  transaction_id: 13693003421,\n                  transaction_time: 1685942138,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 200,\n                  from: {\n                      loginid: 'VRTCMOCK0001',\n                  },\n                  to: {\n                      loginid,\n                  },\n                  balance_after: 9650,\n                  transaction_id: 17494415483,\n                  transaction_time: 1685855740,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 550,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'VRTCMOCK0001',\n                  },\n                  app_id: {},\n                  balance_after: 9450,\n                  transaction_id: 17494415482,\n                  transaction_time: 1685855739,\n              },\n              {\n                  action_type: 'initial_fund',\n                  amount: 10000,\n                  balance_after: 10000,\n                  transaction_id: 13693011401,\n                  transaction_time: 1685855738,\n              },\n          ]\n        : [\n              {\n                  action_type: 'transfer',\n                  amount: 5,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'CRMOCK0001',\n                  },\n                  balance_after: 0,\n                  transaction_id: 17494117541,\n                  transaction_time: 1685942138,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 20,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'CRWMOCK00042',\n                  },\n                  balance_after: 5,\n                  transaction_id: 17494415489,\n                  transaction_time: 1685942137,\n              },\n              {\n                  action_type: 'deposit',\n                  amount: 25,\n                  balance_after: 25,\n                  transaction_id: 17494415481,\n                  transaction_time: 1685942136,\n              },\n              {\n                  action_type: 'withdrawal',\n                  amount: 750,\n                  balance_after: 0,\n                  transaction_id: 17494415480,\n                  transaction_time: 1685942135,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 100,\n                  from: {\n                      loginid: 'CRMOCK0001',\n                  },\n                  to: {\n                      loginid,\n                  },\n                  balance_after: 750,\n                  transaction_id: 17494415479,\n                  transaction_time: 1685855738,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 200,\n                  from: {\n                      loginid: 'CRWMOCK00042',\n                  },\n                  to: {\n                      loginid,\n                  },\n                  balance_after: 650,\n                  transaction_id: 17494117541,\n                  transaction_time: 1685855737,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 550,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'CRMOCK0001',\n                  },\n                  balance_after: 450,\n                  transaction_id: 17494117540,\n                  transaction_time: 1685855736,\n              },\n              {\n                  action_type: 'deposit',\n                  amount: 1000,\n                  balance_after: 1000,\n                  transaction_id: 17494117539,\n                  transaction_time: 1685769338,\n              },\n          ];\n\n    // const { isLoading, isSuccess } = useFetch('statement', {\n    //     options: { keepPreviousData: true },\n    //     payload: { action_type: },\n    // });\n\n    // TODO: un-comment this code when we're to switch to API data\n    // const transactions = data?.statement?.transactions?.filter(\n    //     el =>\n    //         !!el.action_type &&\n    //         ['deposit', 'withdrawal', 'initial_fund', 'reset_balance', 'transfer'].includes(el.action_type)\n    // ) as TWalletTransaction[];\n\n    const transactions = useMemo(\n        () => mock_transactions.filter(el => !action_type || el.action_type === action_type),\n        [action_type, mock_transactions]\n    );\n\n    const getTransferAccountName = useCallback(\n        (other_account: Exclude<typeof accounts[number], undefined>) => {\n            if (other_account.account_category === 'wallet') {\n                const wallet = wallets?.find(el => el.loginid === other_account.loginid);\n                return `${wallet?.is_virtual ? 'Demo ' : ''}${wallet?.currency} ${'Wallet'}`;\n            }\n            return getTradingAccountName(\n                other_account.account_type as 'standard' | 'mt5' | 'dxtrade' | 'binary',\n                !!other_account.is_virtual,\n                other_account.landing_company_shortcode as 'svg' | 'malta'\n            );\n        },\n        [getTradingAccountName, wallets]\n    );\n\n    const modified_transactions = useMemo(\n        () =>\n            wallets && current_wallet\n                ? transactions\n                      .map(transaction => {\n                          if (\n                              transaction.amount === undefined ||\n                              transaction.balance_after === undefined ||\n                              transaction.action_type === undefined\n                          )\n                              return null;\n\n                          let account_category = 'wallet';\n                          let account_type = current_wallet.account_type;\n                          let account_name = `${current_wallet.is_virtual ? 'Demo ' : ''}${\n                              current_wallet.currency\n                          } ${'Wallet'}`;\n                          let account_currency = current_wallet.currency;\n                          let gradient_class = current_wallet.gradient_card_class;\n                          let icon = getWalletCurrencyIcon(\n                              current_wallet.is_virtual ? 'demo' : current_wallet.currency || 'USD',\n                              is_dark_mode_on\n                          );\n                          if (transaction.action_type === 'transfer') {\n                              const other_loginid =\n                                  transaction.to?.loginid === loginid\n                                      ? transaction.from?.loginid\n                                      : transaction.to?.loginid;\n                              if (!other_loginid) return null;\n                              const other_account = accounts.find(el => el?.loginid === other_loginid);\n                              if (!other_account?.currency || !other_account?.account_type) return null;\n                              account_category = other_account.account_category || 'wallet';\n                              account_currency = other_account.currency;\n                              account_name = getTransferAccountName(other_account);\n                              account_type = other_account.account_type;\n                              gradient_class = `wallet-card__${\n                                  other_account.is_virtual === 1 ? 'demo' : other_account?.currency?.toLowerCase()\n                              }-bg${is_dark_mode_on ? '--dark' : ''}`;\n                              icon = getWalletCurrencyIcon(\n                                  other_account.is_virtual ? 'demo' : other_account.currency || '',\n                                  is_dark_mode_on,\n                                  false\n                              );\n                          }\n                          const currency_config = getConfig(account_currency || '');\n                          const is_crypto = currency_config?.is_crypto;\n                          const icon_type = is_crypto || current_wallet.is_virtual ? 'crypto' : 'fiat';\n\n                          return {\n                              ...transaction,\n                              account_category,\n                              account_currency,\n                              account_name,\n                              account_type,\n                              gradient_class,\n                              icon,\n                              icon_type,\n                          };\n                      })\n                      .filter(<T>(value: T | null): value is T => value !== null)\n                : [],\n        [accounts, current_wallet, getConfig, getTransferAccountName, is_dark_mode_on, loginid, transactions, wallets]\n    );\n\n    return { transactions: modified_transactions, isLoading: false, isSuccess: true };\n};\n\nexport default useWalletTransactions;\n","import { useMemo, useState, useEffect } from 'react';\nimport useTransferBetweenAccounts from './useTransferBetweenAccounts';\n\nconst useWalletTransfer = () => {\n    const {\n        active_wallet,\n        trading_accounts,\n        wallet_accounts,\n        isLoading: is_accounts_loading,\n    } = useTransferBetweenAccounts();\n\n    const [from_account, setFromAccount] = useState<typeof active_wallet>();\n    const [to_account, setToAccount] = useState<typeof active_wallet>();\n\n    const to_account_list = useMemo(() => {\n        if (!from_account?.loginid) return { trading_accounts: {}, wallet_accounts: {} };\n        if (!active_wallet?.loginid) return { trading_accounts: {}, wallet_accounts: {} };\n\n        if (from_account?.loginid === active_wallet?.loginid) {\n            return {\n                trading_accounts,\n                wallet_accounts: Object.fromEntries(\n                    Object.entries(wallet_accounts).filter(\n                        ([key]) => active_wallet?.loginid && !key.includes(active_wallet?.loginid)\n                    )\n                ),\n            };\n        }\n        return { trading_accounts: {}, wallet_accounts: { [active_wallet?.loginid]: active_wallet } };\n    }, [active_wallet, from_account?.loginid, trading_accounts, wallet_accounts]);\n\n    //this useEffect populates from/to accounts with updated values, if they were updated in the background\n    useEffect(() => {\n        setFromAccount(acc => {\n            return acc?.loginid ? { ...trading_accounts, ...wallet_accounts }[acc?.loginid] : undefined;\n        });\n        setToAccount(acc => {\n            return acc?.loginid ? { ...trading_accounts, ...wallet_accounts }[acc?.loginid] : undefined;\n        });\n    }, [setFromAccount, setToAccount, trading_accounts, wallet_accounts]);\n\n    return {\n        active_wallet,\n        is_accounts_loading,\n        from_account,\n        to_account,\n        to_account_list,\n        transfer_accounts: { trading_accounts, wallet_accounts },\n        setFromAccount,\n        setToAccount,\n    };\n};\n\nexport default useWalletTransfer;\n"],"names":["window","localStorage","getItem","location","hostname","startsWith","test","registerServiceWorker","removeItem","checkAndSetEndpointFromUrl","root_store","initStore","AppNotificationMessages","wrapper","document","getElementById","ReactDOM","useSuspense","useStore","client","active_accounts","some","account","landing_company_shortcode","residence","has_malta_invest_account","useHasMaltaInvestAccount","token","accounts","loginid","current_token","useFetch","payload","authorize","options","enabled","Boolean","data","rest","modified_authorize","useMemo","website_status_data","crypto_config_data","currencies_config","website_status","website_status_currencies_config","Object","keys","map","currency","currency_config","crypto_config","is_crypto","type","is_fiat","is_AUD","is_USD","is_EUR","is_GBP","is_BTC","is_ETH","is_LTC","is_DAI","is_IDK","is_PAX","is_USB","is_USDT","is_TUSD","is_BUSD","is_EURS","is_eUSDT","is_tUSDT","is_USDC","is_USDK","code","display_code","icon","toUpperCase","slice","toLowerCase","reduce","previous","current","getConfig","useCallback","currency_to_icon_mapper","Demo","dark","light","USD","EUR","AUD","GBP","BTC","ETH","USDT","eUSDT","tUSDT","UST","LTC","USDC","ui","is_dark_mode_on","is_authorize","useCurrencyConfig","useAuthorize","authorize_data","isSuccess","balance_data","wallets","account_list","filter","account_category","wallets_with_balance","wallet","balance","modified_wallets","wallet_currency_type","is_virtual","wallet_gradient_class_name","wallet_icon","is_selected","is_demo","landing_company_name","replace","is_malta_wallet","gradient_header_class","gradient_card_class","undefined","sorted_wallets","sort","a","b","localeCompare","has_wallet","length","useWalletsList","find","company","account_type_data","added_wallets","sortedWallets","React","get_account_types","crypto","doughflow","crypto_currencies","currencies","fiat_currencies","available_currencies","non_virtual_wallets","is_added","available_wallets","Array","isArray","dxtrade_accounts_list","mt5_login_list","ctrader_accounts_list","cfd_accounts","useCFDAllAccounts","account_type","is_eu_user","traders_hub","is_maltainvest","landing_company_short","all","demo","useCFDDemoAccounts","real","useCFDRealAccounts","trading_platform_available_accounts","financial_available_accounts","available_account","market_type","synthetic_available_accounts","every","acc","shortcode","ACCOUNT_TYPES","isEligibleForMoreRealMt5","is_real","cfd","modules","is_high_risk_client_for_mt5","useIsClientHighRiskForMT5","current_list","key","CFD_PLATFORMS","hasCFDAccount","account_status","status","content_flag","is_low_risk_cr_non_eu","ContentFlag","is_low_risk_cr_eu","is_high_risk_cr","is_cr_demo","is_eu_demo","is_eu_real","from","to","increment","useState","count","setCount","is_running","setIsRunning","useEffect","timer","setTimeout","pause","old","clearTimeout","reset","start","stop","useSubscription","subscribe","transactions","setTransactions","old_transactions","new_transactions","cashier_payments","updated_transactions","forEach","new_transaction","index","findIndex","old_transaction","id","push","modified_transactions","transaction","is_deposit","transaction_type","is_withdrawal","sorted_transactions","submit_date","has_transactions","last_transaction","useRequest","mutate","deposit_address","cashier","deposit","address","send","provider","resend","dark_mode","deposit_iframe_url","is_authentication_needed","is_low_risk_cr_eu_real","is_financial_account","is_financial_information_incomplete","is_trading_experience_incomplete","item","sub_account_type","is_eu","is_tnc_needed","has_real_stp_account","useRealSTPAccount","is_deposit_lock","is_need_authentication","useNeedAuthentication","is_need_tnc","useNeedTNC","is_need_financial_assessment","useNeedFinancialAssessment","useExchangeRate","context","useContext","ExchangeRatesContext","Error","getAccountIcon","cfd_type","combined_cfd_mt5_accounts","useActiveWallet","mt5","mt5_rest","platform","dxtrade","dxtrade_rest","modified_mt5_accounts","login","linked_to","linked","description","name","sub_title","action_type","transfer_icon","modified_dxtrade_accounts","trading_platform_accounts","account_id","mt5_accounts","dxtrade_accounts","feature_flags","flags","title","i","fileReadErrorMessage","filename","error","setError","uploader_instance","DocumentUploader","connection","WS","upload","files","settings","onError","Promise","reject","resolve","is_any_file_error","file_error","compressImageFiles","compressed_files","readFiles","processed_files","file","message","response","authentication","onfido_status","identity","services","onfido","manual_status","manual","poa_status","STATUS","need_poa_resubmission","includes","poa_pending","poa_not_submitted","poi_verified_by_onfido_or_manual","poi_pending_by_onfido_or_manual","poi_not_submitted_by_onfido_or_manual","hasDeposited","expected_status","useQuery","refetchInterval","get_account_status","modified_account_status","has_mf_account_deposited","invalidate","useInvalidateQuery","modified_p2p_config","p2p_config","is_payment_methods_enabled","payment_methods_enabled","useP2PConfig","real_account_currencies_list","has_p2p_supported_currencies","supported_currencies","has_active_real_account","useHasActiveRealAccount","initial","value","setValue","fraction_digits","with_sign","onChange","e","old_value","new_value","target","inputs","replaceAll","split","left","right","has_right","hasSign","isNaN","Number","isNumber","new_left","has_decimal","hasDecimalPoint","hasValidDecimalPlaces","new_right","substring","is_pasting","useRef","useInputDecimalFormatter","onChangeDecimal","locale","formatted_value","toLocaleString","minimumFractionDigits","unformatted","unFormatLocaleString","shifted","Math","fround","toFixed","un_shifted","unformatted_fraction","onPaste","status_list","is_p2p_enabled","toLocaleLowerCase","has_svg_account","useHasSvgAccount","has_maltainvest_account","cashier_validation","validation","landing_company_details","modified_landing_company_details","fallback_value","getLocalStorage","setData","setItem","JSON","stringify","mf_status","useGetMFAccountStatus","MT5_ACCOUNT_STATUS","show_eu_related_content","svg_accounts_to_migrate","Jurisdiction","eligible_to_migrate","has_svg_accounts_to_migrate","no_of_svg_accounts_to_migrate","is_eligible_for_svg_to_bvi_migration","values","is_eligible_for_svg_to_vanuatu_migration","getEligibleAccountToMigrate","eligible_account_to_migrate_label","getFormattedJurisdictionCode","eligible_svg_to_bvi_derived_accounts","synthetic","eligible_svg_to_bvi_financial_accounts","financial","eligible_svg_to_vanuatu_derived_accounts","eligible_svg_to_vanuatu_financial_accounts","has_derived_mt5_to_migrate","has_derived_and_financial_mt5","needs_verification","useMutation","notification_event","modified_data","p2p_advert_info","is_buy","is_sell","config","useInfiniteQuery","offset","limit","getNextPageParam","lastPage","pages","p2p_advert_list","list","refetchOnWindowFocus","fetchNextPage","flatten_data","flatMap","page","advert","is_floating","rate_type","created_time","Date","loadMoreAdverts","type_to_icon_mapper","bank","other","ewallet","onSuccess","mutate_rest","p2p_advertiser_payment_methods","advertiser_payment_method","create","update","delete","mutation","useP2POrderList","unsubscribe","isSubscribed","notifications","active","p2p_order_list","p2p_completed_orders","p2p_order_info","order","splice","unshift","completion_time","local_currency","handleSubscription","exchange_rates","parse","p2p_settings","setP2PSettings","onStorageChanged","addEventListener","removeEventListener","notification","is_seen","p2p_payment_methods","payment_method","fields","field_key","paymentagent_list","get_settings","is_authenticated_payment_agent","usePlatformDemoAccount","usePlatformRealAccounts","retry","service_token","country","states_list","is_disabled","fiat_or_crypto","icon_type","dtrade_loginid","dtrade_balance","icons","gradients","header","card","wallets_list","useStoreWalletAccountsList","linked_accounts","ctrader","derivez","dtrade","dwallet","linked_to_account","current_fiat_currency","default_currency","platform_real_accounts","usePlatformAccounts","non_crypto_accounts","currency_if_is_crypto","total_assets_real_currency","useRealTotalAssetCurrency","total","new_base","new_target","new_rate","active_wallet","trading_apps_icon","useExistingCFDAccounts","is_cfd_accounts_loaded","modified_transfer_accounts","all_linked_cfd_accounts","active_wallet_icon","parseFloat","fractional_digits","display_currency_code","demo_account","trading_accounts","cfd_icon","cfd_account","gradient_class","mt5_market_type","mt5_account","wallet_accounts","available_wallet","modified_active_wallet","counter","useCountdown","sent_count","setSentCount","email","request_email","verify_email","is_loading","isLoading","is_counter_running","has_been_sent","wallet_migration","state","start_migration","reset_migration","is_ineligible","is_eligible","is_in_progress","is_migrated","is_failed","trading_accounts_display_prefixes","standard","binary","landing_company_display_shortcodes","svg","malta","current_wallet","demo_platform_account","real_platform_accounts","getTradingAccountName","mock_transactions","amount","app_id","balance_after","transaction_id","transaction_time","el","getTransferAccountName","other_account","account_name","account_currency","getWalletCurrencyIcon","other_loginid","useTransferBetweenAccounts","is_accounts_loading","from_account","setFromAccount","to_account","setToAccount","to_account_list","fromEntries","entries","transfer_accounts"],"sourceRoot":""}