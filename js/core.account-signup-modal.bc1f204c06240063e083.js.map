{"version":3,"file":"js/core.account-signup-modal.bc1f204c06240063e083.js","mappings":"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","sources":["webpack:///./App/Containers/CitizenshipModal/set-citizenship-form.jsx","webpack:///./App/Containers/AccountSignupModal/signup-separator-container.jsx","webpack:///./App/Containers/PasswordSelectionModal/password-selection-modal.jsx","webpack:///./App/Containers/QuestionnaireModal/questionnaire-modal.tsx","webpack:///./App/Containers/QuestionnaireModal/index.ts","webpack:///./App/Containers/AccountSignupModal/validate-signup-fields.jsx","webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx","webpack:///./App/Containers/AccountSignupModal/index.js","webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx"],"sourcesContent":["import React from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Autocomplete, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\n\nconst SetCitizenshipForm = ({ class_prefix, errors, touched, setFieldValue, citizenship_list }) => (\n    <div className={`${class_prefix}__residence-selection`}>\n        <Field name='citizenship'>\n            {({ field }) => (\n                <React.Fragment>\n                    <Autocomplete\n                        {...field}\n                        autoComplete='off'\n                        input_id='dt_core_set-citizenship-form_signup-citizenship-select'\n                        type='text'\n                        label={localize('Citizenship')}\n                        error={touched.citizenship && errors.citizenship}\n                        required\n                        list_items={citizenship_list}\n                        onItemSelection={({ value, text }) => setFieldValue('citizenship', value ? text : '', true)}\n                    />\n                </React.Fragment>\n            )}\n        </Field>\n        <Text as='p' size='xxs' className='account-signup__subtext' color='less-prominent'>\n            <Localize i18n_default_text='Select your citizenship/nationality as it appears on your passport or other government-issued ID.' />\n        </Text>\n    </div>\n);\n\nSetCitizenshipForm.propTypes = {\n    class_prefix: PropTypes.string,\n    citizenship_list: PropTypes.arrayOf(PropTypes.object),\n    errors: PropTypes.object,\n    setFieldTouched: PropTypes.func,\n    setFieldValue: PropTypes.func,\n    touched: PropTypes.object,\n};\n\nexport default SetCitizenshipForm;\n","import classNames from 'classnames';\nimport * as React from 'react';\n\nconst SignupSeparatorContainer = ({ children }) => <div className='signup-separator-container'>{children}</div>;\n\nconst SignupSeparatorContainerLine = ({ is_invisible }) => (\n    <div\n        className={classNames('signup-separator-container__line', {\n            'signup-separator-container__line--invisible': is_invisible,\n        })}\n    />\n);\n\nSignupSeparatorContainer.Line = SignupSeparatorContainerLine;\n\nexport default SignupSeparatorContainer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Field } from 'formik';\n\nimport { Button, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport { getErrorMessages, redirectToSignUp } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { Analytics } from '@deriv/analytics';\n\nimport SignupSeparatorContainer from '../AccountSignupModal/signup-separator-container.jsx';\n\nimport 'Sass/app/modules/account-signup.scss';\n\nconst PasswordSelectionModal = observer(\n    ({\n        api_error,\n        errors,\n        handleBlur,\n        handleChange,\n        isModalVisible,\n        isSubmitting,\n        touched,\n        pw_input,\n        setFieldTouched,\n        updatePassword,\n        values,\n    }) => {\n        const { ui } = useStore();\n        const { is_mobile } = ui;\n\n        React.useEffect(() => {\n            Analytics.trackEvent('ce_virtual_signup_form', {\n                action: 'password_screen_opened',\n                form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n            });\n\n            //eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        return (\n            <div className='account-signup__password-selection'>\n                <Text\n                    as='p'\n                    size={is_mobile ? 'xs' : 's'}\n                    weight='bold'\n                    className='account-signup__heading'\n                    align='center'\n                >\n                    <Localize i18n_default_text='Keep your account secure with a password' />\n                </Text>\n                <Field name='password'>\n                    {({ field }) => (\n                        <PasswordMeter\n                            input={pw_input}\n                            has_error={!!(touched.password && errors.password)}\n                            custom_feedback_messages={getErrorMessages().password_warnings}\n                        >\n                            <PasswordInput\n                                {...field}\n                                autoComplete='new-password'\n                                className='account-signup__password-field'\n                                label={localize('Create a password')}\n                                error={touched.password && errors.password}\n                                required\n                                value={values.password}\n                                onBlur={handleBlur}\n                                onChange={e => {\n                                    const input = e.target;\n                                    setFieldTouched('password', true);\n                                    if (input) updatePassword(input.value);\n                                    handleChange(e);\n                                }}\n                                input_id='dt_core_account-signup-modal_account-signup-password-field'\n                            />\n                        </PasswordMeter>\n                    )}\n                </Field>\n\n                <Text as='p' size='xxs' className='account-signup__subtext' align='center'>\n                    <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                </Text>\n                <SignupSeparatorContainer />\n                {api_error ? (\n                    <React.Fragment>\n                        <Text\n                            as='p'\n                            size='xxs'\n                            color='loss-danger'\n                            className='account-signup__subtext account-signup__subtext--error'\n                            align='center'\n                        >\n                            {api_error}\n                        </Text>\n                        <div className='account-signup__error-wrapper'>\n                            <Button\n                                large\n                                secondary\n                                text={localize('Cancel')}\n                                type='button'\n                                onClick={() => isModalVisible(false)}\n                            />\n                            <Button\n                                large\n                                primary\n                                text={localize('Create new account')}\n                                type='button'\n                                onClick={() => redirectToSignUp()}\n                            />\n                        </div>\n                    </React.Fragment>\n                ) : (\n                    <div className='account-signup__footer'>\n                        <Button\n                            className={classNames('account-signup__btn', {\n                                'account-signup__btn--disabled': !values.password || errors.password || isSubmitting,\n                            })}\n                            id='dt_core_account-signup-modal_submit-btn'\n                            type='submit'\n                            is_disabled={!values.password || !!errors.password || isSubmitting}\n                            text={localize('Start trading')}\n                            large\n                            primary\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default PasswordSelectionModal;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Analytics } from '@deriv/analytics';\nimport { Button, Text } from '@deriv/components';\nimport './questionnaire-modal.scss';\n\ntype TAnswers = {\n    code: string;\n    text: string;\n    header?: string;\n};\ntype TABQuestionnaire = {\n    id: string;\n    question: string;\n    show_answers_in_random_order: boolean;\n    answers: TAnswers[];\n};\nexport type TQuestionnaireModal = {\n    ab_questionnaire: TABQuestionnaire[];\n    handleSignup: (...args: any) => void;\n};\n\nconst QuestionnaireModal = ({ ab_questionnaire, handleSignup }: TQuestionnaireModal) => {\n    const a_variant = !!ab_questionnaire[1].answers?.[0]?.header;\n    React.useEffect(() => {\n        Analytics.trackEvent('ce_questionnaire_form', {\n            action: 'open',\n        });\n    }, [ab_questionnaire]);\n\n    const onClickAnswer = (answer_code: string, answer_index: number) => {\n        Analytics.trackEvent('ce_questionnaire_form', {\n            action: 'choose_answer',\n            question: ab_questionnaire[0].question,\n            answer_content: ab_questionnaire[0].answers.filter(({ code }) => code === answer_code)[0].text,\n            answer_code,\n            answer_index,\n        });\n        handleSignup();\n    };\n\n    return (\n        <div className='questionnaire-modal'>\n            <Text as='h2' size='xs' weight='bold' align='center'>\n                {ab_questionnaire[1].question}\n            </Text>\n            <ul\n                data-testid='questionnaire-modal-variant'\n                className={classNames({\n                    'questionnaire-modal__answers': a_variant,\n                    'questionnaire-modal__options': !a_variant,\n                })}\n            >\n                {ab_questionnaire[1]?.answers.map(({ code, text, header }, index) => {\n                    return (\n                        <Button\n                            key={`${code}_questionnaire`}\n                            data-testid={`${code}_questionnaire`}\n                            onClick={() => onClickAnswer(code, index + 1)}\n                            transparent\n                        >\n                            <li\n                                className={classNames({\n                                    'questionnaire-modal__answers_content': a_variant,\n                                    'questionnaire-modal__options_card': !a_variant,\n                                })}\n                            >\n                                {header && (\n                                    <Text as='p' size='xs' weight='bold'>\n                                        {header}\n                                    </Text>\n                                )}\n                                <Text as='p' size='xs'>\n                                    {text}\n                                </Text>\n                            </li>\n                        </Button>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n};\n\nexport default QuestionnaireModal;\n","import QuestionnaireModal from './questionnaire-modal';\n\nexport default QuestionnaireModal;\n","import { validPassword, validLength, website_name, getErrorMessages } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst validateSignupFields = (values, residence_list) => {\n    const errors = {};\n\n    if (\n        !validLength(values.password, {\n            min: 8,\n            max: 25,\n        })\n    ) {\n        errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n            min_number: 8,\n            max_number: 25,\n        });\n    } else if (!validPassword(values.password)) {\n        errors.password = getErrorMessages().password();\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    if (!values.citizenship) {\n        errors.citizenship = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.citizenship.toLowerCase()\n        );\n\n        if (index_of_selection === -1) {\n            errors.citizenship = true;\n        }\n    }\n\n    return errors;\n};\n\nexport default validateSignupFields;\n","import React from 'react';\nimport { Form, Formik } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Button, Checkbox, Dialog, Loading, Text } from '@deriv/components';\nimport { getLocation, SessionStore, shuffleArray } from '@deriv/shared';\nimport { getLanguage, localize } from '@deriv/translations';\nimport { Analytics } from '@deriv/analytics';\n\nimport { WS } from 'Services';\nimport { observer, useStore } from '@deriv/stores';\n\nimport CitizenshipForm from '../CitizenshipModal/set-citizenship-form.jsx';\nimport PasswordSelectionModal from '../PasswordSelectionModal/password-selection-modal.jsx';\nimport QuestionnaireModal from '../QuestionnaireModal';\nimport ResidenceForm from '../SetResidenceModal/set-residence-form.jsx';\n\nimport validateSignupFields from './validate-signup-fields.jsx';\n\nimport 'Sass/app/modules/account-signup.scss';\n\nconst AccountSignup = ({\n    enableApp,\n    is_mobile,\n    isModalVisible,\n    clients_country,\n    onSignup,\n    residence_list,\n    setIsFromSignupAccount,\n}) => {\n    const signupInitialValues = { citizenship: '', password: '', residence: '' };\n    const [api_error, setApiError] = React.useState(false);\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [country, setCountry] = React.useState('');\n    const history_value = React.useRef();\n    const [pw_input, setPWInput] = React.useState('');\n    const [is_password_modal, setIsPasswordModal] = React.useState(false);\n    const [is_disclaimer_accepted, setIsDisclaimerAccepted] = React.useState(false);\n    const [is_questionnaire, setIsQuestionnaire] = React.useState(false);\n    const [ab_questionnaire, setABQuestionnaire] = React.useState();\n    const [modded_state, setModdedState] = React.useState({});\n    const language = getLanguage();\n\n    const checkResidenceIsBrazil = selected_country =>\n        selected_country && residence_list[indexOfSelection(selected_country)]?.value?.toLowerCase() === 'br';\n\n    const disableButton = (values, errors) =>\n        !(checkResidenceIsBrazil(values.residence) ? is_disclaimer_accepted : true) ||\n        !values.residence ||\n        !!errors.residence ||\n        !values.citizenship ||\n        !!errors.citizenship;\n\n    const updatePassword = new_password => {\n        setPWInput(new_password);\n    };\n\n    // didMount lifecycle hook\n    React.useEffect(() => {\n        WS.wait('website_status', 'residence_list').then(() => {\n            if (clients_country && residence_list) {\n                setCountry(getLocation(residence_list, clients_country, 'text'));\n            }\n            setIsLoading(false);\n        });\n        // need to modify data from ab testing platform to reach translation and tracking needs\n        const fetchQuestionnarieData = () => {\n            let ab_value = Analytics.getFeatureValue('questionnaire-config', 'inactive') || 'inactive';\n            const default_ab_value = ab_value;\n            ab_value = ab_value?.[language] ?? ab_value?.EN ?? ab_value;\n            if (ab_value?.show_answers_in_random_order) {\n                ab_value = [\n                    { ...default_ab_value?.default },\n                    {\n                        ...ab_value,\n                        answers: shuffleArray(ab_value?.answers),\n                    },\n                ];\n            } else if (ab_value !== 'inactive') ab_value = [{ ...default_ab_value?.default }, { ...ab_value }];\n            return ab_value;\n        };\n        setABQuestionnaire(fetchQuestionnarieData());\n\n        Analytics.trackEvent('ce_virtual_signup_form', {\n            action: 'signup_confirmed',\n            form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n        });\n\n        Analytics.trackEvent('ce_virtual_signup_form', {\n            action: 'country_selection_screen_opened',\n            form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n        });\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const validateSignupPassthrough = values => validateSignupFields(values, residence_list);\n\n    const indexOfSelection = selected_country =>\n        residence_list.findIndex(item => item.text.toLowerCase() === selected_country?.toLowerCase());\n\n    const handleSignup = () => onSignup(modded_state, onSignupComplete);\n\n    const onSignupPassthrough = values => {\n        const index_of_selected_residence = indexOfSelection(values.residence);\n        const index_of_selected_citizenship = indexOfSelection(values.citizenship);\n\n        const modded_values = {\n            ...values,\n            residence: residence_list[index_of_selected_residence].value,\n            citizenship: residence_list[index_of_selected_citizenship].value,\n        };\n        setModdedState(modded_values);\n\n        // a/b test\n        ab_questionnaire === 'inactive'\n            ? onSignup(modded_values, onSignupComplete)\n            : setIsQuestionnaire(!!ab_questionnaire);\n    };\n\n    const onSignupComplete = error => {\n        if (error) {\n            setApiError(error);\n\n            Analytics.trackEvent('ce_virtual_signup_form', {\n                action: 'signup_flow_error',\n                form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n                error_message: error,\n            });\n        } else {\n            isModalVisible(false);\n            setIsFromSignupAccount(true);\n            SessionStore.remove('signup_query_param');\n            enableApp();\n\n            Analytics.trackEvent('ce_virtual_signup_form', {\n                action: 'signup_done',\n                form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n            });\n        }\n    };\n\n    return (\n        <div className='account-signup'>\n            {is_loading ? (\n                <Loading is_fullscreen={false} />\n            ) : (\n                <Formik\n                    initialValues={signupInitialValues}\n                    validate={validateSignupPassthrough}\n                    onSubmit={onSignupPassthrough}\n                    residence_list={residence_list}\n                >\n                    {({\n                        isSubmitting,\n                        handleBlur,\n                        errors,\n                        handleChange,\n                        values,\n                        setFieldValue,\n                        setFieldTouched,\n                        touched,\n                    }) => (\n                        <Form>\n                            {!is_password_modal ? (\n                                <div className='account-signup__location-selection'>\n                                    <Text\n                                        as='h1'\n                                        size={is_mobile ? 'xs' : 's'}\n                                        weight='bold'\n                                        className='account-signup__heading'\n                                    >\n                                        {localize('Select your country and citizenship:')}\n                                    </Text>\n                                    <ResidenceForm\n                                        class_prefix='account-signup'\n                                        errors={errors}\n                                        touched={touched}\n                                        onResidenceSelectionChanged={() => setIsDisclaimerAccepted(false)}\n                                        setFieldTouched={setFieldTouched}\n                                        setFieldValue={setFieldValue}\n                                        residence_list={residence_list}\n                                        default_value={country}\n                                        history_value={history_value.current}\n                                    />\n                                    <CitizenshipForm\n                                        class_prefix='account-signup'\n                                        errors={errors}\n                                        touched={touched}\n                                        setFieldTouched={setFieldTouched}\n                                        setFieldValue={setFieldValue}\n                                        citizenship_list={residence_list}\n                                    />\n                                    {checkResidenceIsBrazil(values.residence) && (\n                                        <Checkbox\n                                            checked={is_disclaimer_accepted}\n                                            onChange={() => setIsDisclaimerAccepted(!is_disclaimer_accepted)}\n                                            className='account-signup__checkbox'\n                                            classNameLabel='account-signup__label'\n                                            label={localize(\n                                                'I hereby confirm that my request for opening an account with Deriv to trade OTC products issued and offered exclusively outside Brazil was initiated by me. I fully understand that Deriv is not regulated by CVM and by approaching Deriv I intend to set up a relation with a foreign company.'\n                                            )}\n                                        />\n                                    )}\n                                    <div className='account-signup__footer'>\n                                        <Button\n                                            className='account-signup__btn'\n                                            is_disabled={disableButton(values, errors)}\n                                            type='button'\n                                            onClick={() => {\n                                                history_value.current = values;\n                                                setIsPasswordModal(true);\n                                            }}\n                                            primary\n                                            large\n                                            text={localize('Next')}\n                                        />\n                                    </div>\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {is_questionnaire ? (\n                                        <QuestionnaireModal\n                                            ab_questionnaire={ab_questionnaire}\n                                            handleSignup={handleSignup}\n                                        />\n                                    ) : (\n                                        <PasswordSelectionModal\n                                            api_error={api_error}\n                                            errors={errors}\n                                            handleBlur={handleBlur}\n                                            handleChange={handleChange}\n                                            isModalVisible={isModalVisible}\n                                            isSubmitting={isSubmitting}\n                                            touched={touched}\n                                            pw_input={pw_input}\n                                            setFieldTouched={setFieldTouched}\n                                            updatePassword={updatePassword}\n                                            values={values}\n                                        />\n                                    )}\n                                </React.Fragment>\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </div>\n    );\n};\n\nAccountSignup.propTypes = {\n    clients_country: PropTypes.string,\n    enableApp: PropTypes.func,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.array,\n    is_mobile: PropTypes.bool,\n    isModalVisible: PropTypes.func,\n    setIsFromSignupAccount: PropTypes.func,\n};\n\nconst AccountSignupModal = observer(() => {\n    const { ui, client } = useStore();\n    const { onSignup, is_logged_in, residence_list, clients_country, logout } = client;\n    const {\n        is_account_signup_modal_visible: is_visible,\n        toggleAccountSignupModal,\n        enableApp,\n        disableApp,\n        is_loading,\n        is_mobile,\n        setIsFromSignupAccount,\n    } = ui;\n\n    React.useEffect(() => {\n        // a logged in user should not be able to create a new account\n        if (is_visible && is_logged_in) {\n            logout();\n        }\n    }, [is_visible, is_logged_in, logout]);\n\n    return (\n        <Dialog\n            className='account-signup__dialog'\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_mobile_full_width={false}\n        >\n            <AccountSignup\n                clients_country={clients_country}\n                onSignup={onSignup}\n                residence_list={residence_list}\n                is_mobile={is_mobile}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n                setIsFromSignupAccount={setIsFromSignupAccount}\n            />\n        </Dialog>\n    );\n});\n\nexport default AccountSignupModal;\n","import AccountSignupModal from './account-signup-modal.jsx';\n\nexport default AccountSignupModal;\n","import React from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Autocomplete, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    children,\n    class_prefix = 'set-residence',\n    default_value,\n    history_value,\n    errors,\n    onResidenceSelectionChanged,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => {\n    React.useEffect(() => {\n        if (default_value) {\n            setFieldTouched('residence', true);\n            setFieldValue('residence', default_value, true);\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className={`${class_prefix}__residence-selection`}>\n            <Field name='residence'>\n                {({ field }) => (\n                    <React.Fragment>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            input_id='dt_core_set-residence-form_signup-residence-select'\n                            type='text'\n                            label={localize('Country of residence')}\n                            historyValue={history_value}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => {\n                                setFieldValue('residence', value ? text : '', true);\n                                onResidenceSelectionChanged?.();\n                            }}\n                        />\n                    </React.Fragment>\n                )}\n            </Field>\n            {!errors?.residence?.length && (\n                <Text as='p' size='xxs' className='account-signup__subtext' color='less-prominent'>\n                    <Localize i18n_default_text='Select the country where you currently live.' />\n                </Text>\n            )}\n            <div className={`${class_prefix}__button_wrapper`}>{children}</div>\n        </div>\n    );\n};\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.object,\n    class_prefix: PropTypes.string,\n    default_value: PropTypes.string,\n    history_value: PropTypes.string,\n    errors: PropTypes.object,\n    onResidenceSelectionChanged: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n    setFieldTouched: PropTypes.func,\n    setFieldValue: PropTypes.func,\n    touched: PropTypes.object,\n};\n\nexport default SetResidenceForm;\n"],"names":["SetCitizenshipForm","class_prefix","errors","touched","setFieldValue","citizenship_list","className","Field","name","field","Autocomplete","autoComplete","input_id","type","label","localize","error","citizenship","required","list_items","onItemSelection","value","text","Text","as","size","color","Localize","i18n_default_text","propTypes","PropTypes","setFieldTouched","SignupSeparatorContainer","children","Line","is_invisible","classNames","observer","api_error","handleBlur","handleChange","isModalVisible","isSubmitting","pw_input","updatePassword","values","is_mobile","useStore","ui","React","Analytics","action","form_name","weight","align","PasswordMeter","input","has_error","password","custom_feedback_messages","getErrorMessages","password_warnings","PasswordInput","onBlur","onChange","e","target","Button","large","secondary","onClick","primary","redirectToSignUp","id","is_disabled","ab_questionnaire","handleSignup","a_variant","answers","header","question","map","index","code","key","answer_code","answer_index","answer_content","filter","transparent","residence_list","validLength","min","max","validPassword","min_number","max_number","residence","index_of_selection","findIndex","item","toLowerCase","disabled","website_name","AccountSignup","enableApp","clients_country","onSignup","setIsFromSignupAccount","setApiError","is_loading","setIsLoading","country","setCountry","history_value","setPWInput","is_password_modal","setIsPasswordModal","is_disclaimer_accepted","setIsDisclaimerAccepted","is_questionnaire","setIsQuestionnaire","setABQuestionnaire","modded_state","setModdedState","language","getLanguage","checkResidenceIsBrazil","selected_country","indexOfSelection","disableButton","new_password","WS","then","getLocation","ab_value","default_ab_value","EN","show_answers_in_random_order","shuffleArray","fetchQuestionnarieData","onSignupComplete","error_message","SessionStore","Loading","is_fullscreen","Formik","initialValues","validate","validateSignupFields","onSubmit","index_of_selected_residence","index_of_selected_citizenship","modded_values","Form","onResidenceSelectionChanged","default_value","current","Checkbox","checked","classNameLabel","client","is_logged_in","logout","is_visible","is_account_signup_modal_visible","toggleAccountSignupModal","disableApp","Dialog","length","is_mobile_full_width","SetResidenceForm","historyValue"],"sourceRoot":""}